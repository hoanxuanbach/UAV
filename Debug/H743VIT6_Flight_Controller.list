
H743VIT6_Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d56c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  0800d810  0800d810  0000e810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e0f8  0800e0f8  0000f0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e100  0800e100  0000f100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e104  0800e104  0000f104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  0800e108  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a0  240001e0  0800e2e8  000101e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000880  0800e2e8  00010880  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014cfe  00000000  00000000  0001020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002eec  00000000  00000000  00024f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001148  00000000  00000000  00027df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d2c  00000000  00000000  00028f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000047e0  00000000  00000000  00029c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000182eb  00000000  00000000  0002e44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00163425  00000000  00000000  00046737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a9b5c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000058f8  00000000  00000000  001a9ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001af498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d7f4 	.word	0x0800d7f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800d7f4 	.word	0x0800d7f4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070e:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000714:	4a27      	ldr	r2, [pc, #156]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_DMA_Init+0xac>)
 800072e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000732:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_DMA_Init+0xac>)
 800073e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	200b      	movs	r0, #11
 8000750:	f001 ff1b 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000754:	200b      	movs	r0, #11
 8000756:	f001 ff32 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	200c      	movs	r0, #12
 8000760:	f001 ff13 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000764:	200c      	movs	r0, #12
 8000766:	f001 ff2a 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200d      	movs	r0, #13
 8000770:	f001 ff0b 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000774:	200d      	movs	r0, #13
 8000776:	f001 ff22 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200e      	movs	r0, #14
 8000780:	f001 ff03 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000784:	200e      	movs	r0, #14
 8000786:	f001 ff1a 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2039      	movs	r0, #57	@ 0x39
 8000790:	f001 fefb 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000794:	2039      	movs	r0, #57	@ 0x39
 8000796:	f001 ff12 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	203b      	movs	r0, #59	@ 0x3b
 80007a0:	f001 fef3 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007a4:	203b      	movs	r0, #59	@ 0x3b
 80007a6:	f001 ff0a 	bl	80025be <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58024400 	.word	0x58024400

080007b8 <IIR_Filter_1D_Init>:
#include "filter.h"
void IIR_Filter_1D_Init(IIR_Filter_1D *f, float alpha, float beta){
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80007c4:	edc7 0a01 	vstr	s1, [r7, #4]
    f->alpha = alpha;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	601a      	str	r2, [r3, #0]
    f->beta = beta;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	605a      	str	r2, [r3, #4]
    f->prev_input = 0.0f;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f04f 0200 	mov.w	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
    f->prev_output = 0.0f;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f04f 0200 	mov.w	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <IIR_Filter_1D_Update>:
float IIR_Filter_1D_Update(IIR_Filter_1D *f, float input){
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	ed87 0a00 	vstr	s0, [r7]
    float output = f->alpha * f->prev_output + f->beta * input + f->beta * f->prev_input;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	ed93 7a00 	vldr	s14, [r3]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	edd3 7a02 	vldr	s15, [r3, #8]
 8000808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000812:	edd7 7a00 	vldr	s15, [r7]
 8000816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800081a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	edd3 6a01 	vldr	s13, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	edd3 7a03 	vldr	s15, [r3, #12]
 800082a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800082e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000832:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev_input = input;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	683a      	ldr	r2, [r7, #0]
 800083a:	60da      	str	r2, [r3, #12]
    f->prev_output = output;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	609a      	str	r2, [r3, #8]
    return output;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	ee07 3a90 	vmov	s15, r3
}
 8000848:	eeb0 0a67 	vmov.f32	s0, s15
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <IIR_Filter_3D_Init>:
void IIR_Filter_3D_Init(IIR_Filter_3D *f, float alpha, float beta){
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000862:	edc7 0a01 	vstr	s1, [r7, #4]
	IIR_Filter_1D_Init(&f->x, alpha, beta);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	edd7 0a01 	vldr	s1, [r7, #4]
 800086c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ffa1 	bl	80007b8 <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->y, alpha, beta);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3310      	adds	r3, #16
 800087a:	edd7 0a01 	vldr	s1, [r7, #4]
 800087e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff98 	bl	80007b8 <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->z, alpha, beta);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3320      	adds	r3, #32
 800088c:	edd7 0a01 	vldr	s1, [r7, #4]
 8000890:	ed97 0a02 	vldr	s0, [r7, #8]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff8f 	bl	80007b8 <IIR_Filter_1D_Init>
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <IIR_Filter_3D_Update>:
void IIR_Filter_3D_Update(IIR_Filter_3D *f, float x_in, float y_in, float z_in, float *x_out, float *y_out, float *z_out){
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b088      	sub	sp, #32
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	61f8      	str	r0, [r7, #28]
 80008aa:	ed87 0a06 	vstr	s0, [r7, #24]
 80008ae:	edc7 0a05 	vstr	s1, [r7, #20]
 80008b2:	ed87 1a04 	vstr	s2, [r7, #16]
 80008b6:	60f9      	str	r1, [r7, #12]
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	607b      	str	r3, [r7, #4]
    *x_out = IIR_Filter_1D_Update(&f->x, x_in);
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	ed97 0a06 	vldr	s0, [r7, #24]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff94 	bl	80007f0 <IIR_Filter_1D_Update>
 80008c8:	eef0 7a40 	vmov.f32	s15, s0
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	edc3 7a00 	vstr	s15, [r3]
    *y_out = IIR_Filter_1D_Update(&f->y, y_in);
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3310      	adds	r3, #16
 80008d6:	ed97 0a05 	vldr	s0, [r7, #20]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff88 	bl	80007f0 <IIR_Filter_1D_Update>
 80008e0:	eef0 7a40 	vmov.f32	s15, s0
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	edc3 7a00 	vstr	s15, [r3]
    *z_out = IIR_Filter_1D_Update(&f->z, z_in);
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3320      	adds	r3, #32
 80008ee:	ed97 0a04 	vldr	s0, [r7, #16]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff7c 	bl	80007f0 <IIR_Filter_1D_Update>
 80008f8:	eef0 7a40 	vmov.f32	s15, s0
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	edc3 7a00 	vstr	s15, [r3]
}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	@ 0x28
 8000910:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	4b35      	ldr	r3, [pc, #212]	@ (80009f8 <MX_GPIO_Init+0xec>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a33      	ldr	r2, [pc, #204]	@ (80009f8 <MX_GPIO_Init+0xec>)
 800092a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b31      	ldr	r3, [pc, #196]	@ (80009f8 <MX_GPIO_Init+0xec>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	4b2d      	ldr	r3, [pc, #180]	@ (80009f8 <MX_GPIO_Init+0xec>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	4a2c      	ldr	r2, [pc, #176]	@ (80009f8 <MX_GPIO_Init+0xec>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000950:	4b29      	ldr	r3, [pc, #164]	@ (80009f8 <MX_GPIO_Init+0xec>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b26      	ldr	r3, [pc, #152]	@ (80009f8 <MX_GPIO_Init+0xec>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a24      	ldr	r2, [pc, #144]	@ (80009f8 <MX_GPIO_Init+0xec>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b22      	ldr	r3, [pc, #136]	@ (80009f8 <MX_GPIO_Init+0xec>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <MX_GPIO_Init+0xec>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	4a1d      	ldr	r2, [pc, #116]	@ (80009f8 <MX_GPIO_Init+0xec>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098c:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <MX_GPIO_Init+0xec>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009a0:	4816      	ldr	r0, [pc, #88]	@ (80009fc <MX_GPIO_Init+0xf0>)
 80009a2:	f004 fe1f 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009ac:	4814      	ldr	r0, [pc, #80]	@ (8000a00 <MX_GPIO_Init+0xf4>)
 80009ae:	f004 fe19 	bl	80055e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480c      	ldr	r0, [pc, #48]	@ (80009fc <MX_GPIO_Init+0xf0>)
 80009cc:	f004 fc5a 	bl	8005284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009d0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	@ (8000a00 <MX_GPIO_Init+0xf4>)
 80009ea:	f004 fc4b 	bl	8005284 <HAL_GPIO_Init>

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	@ 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58024400 	.word	0x58024400
 80009fc:	58021000 	.word	0x58021000
 8000a00:	58020c00 	.word	0x58020c00

08000a04 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI4) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a06      	ldr	r2, [pc, #24]	@ (8000a2c <HAL_SPI_TxCpltCallback+0x28>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d103      	bne.n	8000a1e <HAL_SPI_TxCpltCallback+0x1a>

        mpu.spi_transfer_done=true;
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_SPI_TxCpltCallback+0x2c>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40013400 	.word	0x40013400
 8000a30:	2400022c 	.word	0x2400022c

08000a34 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI4) {
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_SPI_TxRxCpltCallback+0x30>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d107      	bne.n	8000a56 <HAL_SPI_TxRxCpltCallback+0x22>
    	mpu.state = 2;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        mpu.spi_transfer_done=true;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40013400 	.word	0x40013400
 8000a68:	2400022c 	.word	0x2400022c

08000a6c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a7c:	d10c      	bne.n	8000a98 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
        if (!mpu.state)
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d106      	bne.n	8000a98 <HAL_TIM_PeriodElapsedCallback+0x2c>
        {
        	mpu.state = 1;
 8000a8a:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            MPU6000_Start_DMA(&mpu);
 8000a92:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a94:	f000 fbf4 	bl	8001280 <MPU6000_Start_DMA>
        }
    }
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2400022c 	.word	0x2400022c

08000aa4 <init_PIDs>:
float get_roll(float Ax, float Az) {
    return atan2f(-Ax, Az) * 180.0f / M_PI;
}

void init_PIDs(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    PID_Init(&pid_roll,  1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
 8000aa8:	ed9f 2a14 	vldr	s4, [pc, #80]	@ 8000afc <init_PIDs+0x58>
 8000aac:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8000b00 <init_PIDs+0x5c>
 8000ab0:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8000b04 <init_PIDs+0x60>
 8000ab4:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8000b08 <init_PIDs+0x64>
 8000ab8:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000abc:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <init_PIDs+0x68>)
 8000abe:	f000 fcf3 	bl	80014a8 <PID_Init>
    PID_Init(&pid_pitch, 1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
 8000ac2:	ed9f 2a0e 	vldr	s4, [pc, #56]	@ 8000afc <init_PIDs+0x58>
 8000ac6:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 8000b00 <init_PIDs+0x5c>
 8000aca:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000b04 <init_PIDs+0x60>
 8000ace:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8000b08 <init_PIDs+0x64>
 8000ad2:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000ad6:	480e      	ldr	r0, [pc, #56]	@ (8000b10 <init_PIDs+0x6c>)
 8000ad8:	f000 fce6 	bl	80014a8 <PID_Init>
    PID_Init(&pid_yaw,   2.0f, 0.0f, 0.10f, 400.0f, 100.0f);
 8000adc:	ed9f 2a07 	vldr	s4, [pc, #28]	@ 8000afc <init_PIDs+0x58>
 8000ae0:	eddf 1a07 	vldr	s3, [pc, #28]	@ 8000b00 <init_PIDs+0x5c>
 8000ae4:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8000b14 <init_PIDs+0x70>
 8000ae8:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8000b08 <init_PIDs+0x64>
 8000aec:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000af0:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <init_PIDs+0x74>)
 8000af2:	f000 fcd9 	bl	80014a8 <PID_Init>
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	42c80000 	.word	0x42c80000
 8000b00:	43c80000 	.word	0x43c80000
 8000b04:	3d4ccccd 	.word	0x3d4ccccd
 8000b08:	00000000 	.word	0x00000000
 8000b0c:	24000270 	.word	0x24000270
 8000b10:	24000294 	.word	0x24000294
 8000b14:	3dcccccd 	.word	0x3dcccccd
 8000b18:	240002b8 	.word	0x240002b8
 8000b1c:	00000000 	.word	0x00000000

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	ed2d 8b02 	vpush	{d8}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2a:	f001 fb91 	bl	8002250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2e:	f000 fa5f 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b32:	f7ff feeb 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b36:	f7ff fde7 	bl	8000708 <MX_DMA_Init>
  MX_SPI4_Init();
 8000b3a:	f000 fd85 	bl	8001648 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000b3e:	f001 f8ef 	bl	8001d20 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000b42:	f001 f93b 	bl	8001dbc <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  IIR_Filter_3D_Init(&acc_filtered, IIR_ACC_ALPHA, IIR_ACC_BETA);
 8000b46:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8000b78 <main+0x58>
 8000b4a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000b7c <main+0x5c>
 8000b4e:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <main+0x60>)
 8000b50:	f7ff fe81 	bl	8000856 <IIR_Filter_3D_Init>
  IIR_Filter_3D_Init(&gyro_filtered, IIR_GYR_ALPHA, IIR_GYR_BETA);
 8000b54:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8000b84 <main+0x64>
 8000b58:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000b88 <main+0x68>
 8000b5c:	480b      	ldr	r0, [pc, #44]	@ (8000b8c <main+0x6c>)
 8000b5e:	f7ff fe7a 	bl	8000856 <IIR_Filter_3D_Init>
  MPU6000_Init(&mpu, &hspi4);
 8000b62:	490b      	ldr	r1, [pc, #44]	@ (8000b90 <main+0x70>)
 8000b64:	480b      	ldr	r0, [pc, #44]	@ (8000b94 <main+0x74>)
 8000b66:	f000 fb37 	bl	80011d8 <MPU6000_Init>

  mpu.state=0;
 8000b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <main+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  for(int i=0;i<=14;i++) mpu.tx_buffer[i]=0xFF;
 8000b72:	2300      	movs	r3, #0
 8000b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b76:	e018      	b.n	8000baa <main+0x8a>
 8000b78:	3cf9db23 	.word	0x3cf9db23
 8000b7c:	3f7068dc 	.word	0x3f7068dc
 8000b80:	240002dc 	.word	0x240002dc
 8000b84:	3d727bb3 	.word	0x3d727bb3
 8000b88:	3f61b08a 	.word	0x3f61b08a
 8000b8c:	2400030c 	.word	0x2400030c
 8000b90:	2400033c 	.word	0x2400033c
 8000b94:	2400022c 	.word	0x2400022c
 8000b98:	4ad7      	ldr	r2, [pc, #860]	@ (8000ef8 <main+0x3d8>)
 8000b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3320      	adds	r3, #32
 8000ba0:	22ff      	movs	r2, #255	@ 0xff
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bac:	2b0e      	cmp	r3, #14
 8000bae:	ddf3      	ble.n	8000b98 <main+0x78>
  init_PIDs();
 8000bb0:	f7ff ff78 	bl	8000aa4 <init_PIDs>
  MPU6000_Start_DMA(&mpu);
 8000bb4:	48d0      	ldr	r0, [pc, #832]	@ (8000ef8 <main+0x3d8>)
 8000bb6:	f000 fb63 	bl	8001280 <MPU6000_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000bba:	48d0      	ldr	r0, [pc, #832]	@ (8000efc <main+0x3dc>)
 8000bbc:	f008 f82e 	bl	8008c1c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (mpu.state==2){
 8000bc0:	4bcd      	ldr	r3, [pc, #820]	@ (8000ef8 <main+0x3d8>)
 8000bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d1f9      	bne.n	8000bc0 <main+0xa0>
		  MPU6000_Process_DMA(&mpu);
 8000bcc:	48ca      	ldr	r0, [pc, #808]	@ (8000ef8 <main+0x3d8>)
 8000bce:	f000 fb8d 	bl	80012ec <MPU6000_Process_DMA>
		  mpu.state = 0;
 8000bd2:	4bc9      	ldr	r3, [pc, #804]	@ (8000ef8 <main+0x3d8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40


		  /*low-pass filter*/
		  IIR_Filter_3D_Update(&acc_filtered, mpu.acc[0], mpu.acc[1], mpu.acc[2], &acc_x, &acc_y, &acc_z);
 8000bda:	4bc7      	ldr	r3, [pc, #796]	@ (8000ef8 <main+0x3d8>)
 8000bdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000be0:	4bc5      	ldr	r3, [pc, #788]	@ (8000ef8 <main+0x3d8>)
 8000be2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000be6:	4bc4      	ldr	r3, [pc, #784]	@ (8000ef8 <main+0x3d8>)
 8000be8:	edd3 6a03 	vldr	s13, [r3, #12]
 8000bec:	4bc4      	ldr	r3, [pc, #784]	@ (8000f00 <main+0x3e0>)
 8000bee:	4ac5      	ldr	r2, [pc, #788]	@ (8000f04 <main+0x3e4>)
 8000bf0:	49c5      	ldr	r1, [pc, #788]	@ (8000f08 <main+0x3e8>)
 8000bf2:	eeb0 1a66 	vmov.f32	s2, s13
 8000bf6:	eef0 0a47 	vmov.f32	s1, s14
 8000bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000bfe:	48c3      	ldr	r0, [pc, #780]	@ (8000f0c <main+0x3ec>)
 8000c00:	f7ff fe4f 	bl	80008a2 <IIR_Filter_3D_Update>
		  IIR_Filter_3D_Update(&gyro_filtered, mpu.gyro[0], mpu.gyro[1], mpu.gyro[2], &gyro_p, &gyro_q, &gyro_r);
 8000c04:	4bbc      	ldr	r3, [pc, #752]	@ (8000ef8 <main+0x3d8>)
 8000c06:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c0a:	4bbb      	ldr	r3, [pc, #748]	@ (8000ef8 <main+0x3d8>)
 8000c0c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000c10:	4bb9      	ldr	r3, [pc, #740]	@ (8000ef8 <main+0x3d8>)
 8000c12:	edd3 6a06 	vldr	s13, [r3, #24]
 8000c16:	4bbe      	ldr	r3, [pc, #760]	@ (8000f10 <main+0x3f0>)
 8000c18:	4abe      	ldr	r2, [pc, #760]	@ (8000f14 <main+0x3f4>)
 8000c1a:	49bf      	ldr	r1, [pc, #764]	@ (8000f18 <main+0x3f8>)
 8000c1c:	eeb0 1a66 	vmov.f32	s2, s13
 8000c20:	eef0 0a47 	vmov.f32	s1, s14
 8000c24:	eeb0 0a67 	vmov.f32	s0, s15
 8000c28:	48bc      	ldr	r0, [pc, #752]	@ (8000f1c <main+0x3fc>)
 8000c2a:	f7ff fe3a 	bl	80008a2 <IIR_Filter_3D_Update>

		  /*Estimate pitch and roll*/
		  float rollHat_acc_rad = atan2f(acc_y, acc_z)*(180.0f/M_PI);
 8000c2e:	4bb5      	ldr	r3, [pc, #724]	@ (8000f04 <main+0x3e4>)
 8000c30:	edd3 7a00 	vldr	s15, [r3]
 8000c34:	4bb2      	ldr	r3, [pc, #712]	@ (8000f00 <main+0x3e0>)
 8000c36:	ed93 7a00 	vldr	s14, [r3]
 8000c3a:	eef0 0a47 	vmov.f32	s1, s14
 8000c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c42:	f00b fd41 	bl	800c6c8 <atan2f>
 8000c46:	eef0 7a40 	vmov.f32	s15, s0
 8000c4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c4e:	ed9f 6ba2 	vldr	d6, [pc, #648]	@ 8000ed8 <main+0x3b8>
 8000c52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c5a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		  float pitchHat_acc_rad = atan2f(-acc_x, sqrtf(acc_y * acc_y + acc_z * acc_z))*(180.0f/M_PI);
 8000c5e:	4baa      	ldr	r3, [pc, #680]	@ (8000f08 <main+0x3e8>)
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eeb1 8a67 	vneg.f32	s16, s15
 8000c68:	4ba6      	ldr	r3, [pc, #664]	@ (8000f04 <main+0x3e4>)
 8000c6a:	ed93 7a00 	vldr	s14, [r3]
 8000c6e:	4ba5      	ldr	r3, [pc, #660]	@ (8000f04 <main+0x3e4>)
 8000c70:	edd3 7a00 	vldr	s15, [r3]
 8000c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c78:	4ba1      	ldr	r3, [pc, #644]	@ (8000f00 <main+0x3e0>)
 8000c7a:	edd3 6a00 	vldr	s13, [r3]
 8000c7e:	4ba0      	ldr	r3, [pc, #640]	@ (8000f00 <main+0x3e0>)
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c90:	f00b fd1c 	bl	800c6cc <sqrtf>
 8000c94:	eef0 7a40 	vmov.f32	s15, s0
 8000c98:	eef0 0a67 	vmov.f32	s1, s15
 8000c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8000ca0:	f00b fd12 	bl	800c6c8 <atan2f>
 8000ca4:	eef0 7a40 	vmov.f32	s15, s0
 8000ca8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cac:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8000ed8 <main+0x3b8>
 8000cb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cb8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		  float yawDot = gyro_r * (M_PI/ 180.0f);
 8000cbc:	4b94      	ldr	r3, [pc, #592]	@ (8000f10 <main+0x3f0>)
 8000cbe:	edd3 7a00 	vldr	s15, [r3]
 8000cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc6:	ed9f 6b86 	vldr	d6, [pc, #536]	@ 8000ee0 <main+0x3c0>
 8000cca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cd2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  float rollDot = (gyro_p + tanf(pitchHat_acc_rad) * sinf(rollHat_acc_rad) * gyro_q + tanf(pitchHat_acc_rad) * cosf(rollHat_acc_rad) * gyro_r);
 8000cd6:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8000cda:	f00b fd15 	bl	800c708 <tanf>
 8000cde:	eeb0 8a40 	vmov.f32	s16, s0
 8000ce2:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000ce6:	f00b fd67 	bl	800c7b8 <sinf>
 8000cea:	eef0 7a40 	vmov.f32	s15, s0
 8000cee:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000cf2:	4b88      	ldr	r3, [pc, #544]	@ (8000f14 <main+0x3f4>)
 8000cf4:	edd3 7a00 	vldr	s15, [r3]
 8000cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cfc:	4b86      	ldr	r3, [pc, #536]	@ (8000f18 <main+0x3f8>)
 8000cfe:	edd3 7a00 	vldr	s15, [r3]
 8000d02:	ee37 8a27 	vadd.f32	s16, s14, s15
 8000d06:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8000d0a:	f00b fcfd 	bl	800c708 <tanf>
 8000d0e:	eef0 8a40 	vmov.f32	s17, s0
 8000d12:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000d16:	f00b fe13 	bl	800c940 <cosf>
 8000d1a:	eef0 7a40 	vmov.f32	s15, s0
 8000d1e:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8000d22:	4b7b      	ldr	r3, [pc, #492]	@ (8000f10 <main+0x3f0>)
 8000d24:	edd3 7a00 	vldr	s15, [r3]
 8000d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d2c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000d30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  float pitchDot = (cosf(rollHat_acc_rad) * gyro_q - sinf(rollHat_acc_rad) * gyro_r);
 8000d34:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000d38:	f00b fe02 	bl	800c940 <cosf>
 8000d3c:	eeb0 7a40 	vmov.f32	s14, s0
 8000d40:	4b74      	ldr	r3, [pc, #464]	@ (8000f14 <main+0x3f4>)
 8000d42:	edd3 7a00 	vldr	s15, [r3]
 8000d46:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000d4a:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000d4e:	f00b fd33 	bl	800c7b8 <sinf>
 8000d52:	eeb0 7a40 	vmov.f32	s14, s0
 8000d56:	4b6e      	ldr	r3, [pc, #440]	@ (8000f10 <main+0x3f0>)
 8000d58:	edd3 7a00 	vldr	s15, [r3]
 8000d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d60:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000d64:	edc7 7a08 	vstr	s15, [r7, #32]

		  //Complementary filter
		  roll = (1.0f - COMP_ALPHA) * rollHat_acc_rad + COMP_ALPHA * (roll + rollDot * dt );
 8000d68:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000d6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d70:	ed9f 6b5d 	vldr	d6, [pc, #372]	@ 8000ee8 <main+0x3c8>
 8000d74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d78:	4b69      	ldr	r3, [pc, #420]	@ (8000f20 <main+0x400>)
 8000d7a:	ed93 7a00 	vldr	s14, [r3]
 8000d7e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d86:	4b67      	ldr	r3, [pc, #412]	@ (8000f24 <main+0x404>)
 8000d88:	edd3 7a00 	vldr	s15, [r3]
 8000d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d94:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8000ef0 <main+0x3d0>
 8000d98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000da0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000da4:	4b5f      	ldr	r3, [pc, #380]	@ (8000f24 <main+0x404>)
 8000da6:	edc3 7a00 	vstr	s15, [r3]
		  pitch = (1.0f - COMP_ALPHA) * pitchHat_acc_rad + COMP_ALPHA * (pitch + pitchDot * dt );
 8000daa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000dae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db2:	ed9f 6b4d 	vldr	d6, [pc, #308]	@ 8000ee8 <main+0x3c8>
 8000db6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dba:	4b59      	ldr	r3, [pc, #356]	@ (8000f20 <main+0x400>)
 8000dbc:	ed93 7a00 	vldr	s14, [r3]
 8000dc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dc8:	4b57      	ldr	r3, [pc, #348]	@ (8000f28 <main+0x408>)
 8000dca:	edd3 7a00 	vldr	s15, [r3]
 8000dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dd6:	ed9f 5b46 	vldr	d5, [pc, #280]	@ 8000ef0 <main+0x3d0>
 8000dda:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dde:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000de2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000de6:	4b50      	ldr	r3, [pc, #320]	@ (8000f28 <main+0x408>)
 8000de8:	edc3 7a00 	vstr	s15, [r3]
		  yaw = yaw + yawDot*dt;
 8000dec:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <main+0x400>)
 8000dee:	ed93 7a00 	vldr	s14, [r3]
 8000df2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000df6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8000f2c <main+0x40c>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e04:	4b49      	ldr	r3, [pc, #292]	@ (8000f2c <main+0x40c>)
 8000e06:	edc3 7a00 	vstr	s15, [r3]
		  if(yaw >= 360.0f) yaw-=360.0f;
 8000e0a:	4b48      	ldr	r3, [pc, #288]	@ (8000f2c <main+0x40c>)
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8000f30 <main+0x410>
 8000e14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e1c:	db09      	blt.n	8000e32 <main+0x312>
 8000e1e:	4b43      	ldr	r3, [pc, #268]	@ (8000f2c <main+0x40c>)
 8000e20:	edd3 7a00 	vldr	s15, [r3]
 8000e24:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8000f30 <main+0x410>
 8000e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f2c <main+0x40c>)
 8000e2e:	edc3 7a00 	vstr	s15, [r3]
		  if(yaw < 0.0f) yaw += 360.f;
 8000e32:	4b3e      	ldr	r3, [pc, #248]	@ (8000f2c <main+0x40c>)
 8000e34:	edd3 7a00 	vldr	s15, [r3]
 8000e38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e40:	d509      	bpl.n	8000e56 <main+0x336>
 8000e42:	4b3a      	ldr	r3, [pc, #232]	@ (8000f2c <main+0x40c>)
 8000e44:	edd3 7a00 	vldr	s15, [r3]
 8000e48:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8000f30 <main+0x410>
 8000e4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e50:	4b36      	ldr	r3, [pc, #216]	@ (8000f2c <main+0x40c>)
 8000e52:	edc3 7a00 	vstr	s15, [r3]

		  float roll_out = PID_Compute(&pid_roll,roll_target,roll,dt);
 8000e56:	4b37      	ldr	r3, [pc, #220]	@ (8000f34 <main+0x414>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <main+0x404>)
 8000e5e:	ed93 7a00 	vldr	s14, [r3]
 8000e62:	4b2f      	ldr	r3, [pc, #188]	@ (8000f20 <main+0x400>)
 8000e64:	edd3 6a00 	vldr	s13, [r3]
 8000e68:	eeb0 1a66 	vmov.f32	s2, s13
 8000e6c:	eef0 0a47 	vmov.f32	s1, s14
 8000e70:	eeb0 0a67 	vmov.f32	s0, s15
 8000e74:	4830      	ldr	r0, [pc, #192]	@ (8000f38 <main+0x418>)
 8000e76:	f000 fb46 	bl	8001506 <PID_Compute>
 8000e7a:	ed87 0a07 	vstr	s0, [r7, #28]
		  float pitch_out = PID_Compute(&pid_pitch,pitch_target,roll,dt);
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f3c <main+0x41c>)
 8000e80:	edd3 7a00 	vldr	s15, [r3]
 8000e84:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <main+0x404>)
 8000e86:	ed93 7a00 	vldr	s14, [r3]
 8000e8a:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <main+0x400>)
 8000e8c:	edd3 6a00 	vldr	s13, [r3]
 8000e90:	eeb0 1a66 	vmov.f32	s2, s13
 8000e94:	eef0 0a47 	vmov.f32	s1, s14
 8000e98:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9c:	4828      	ldr	r0, [pc, #160]	@ (8000f40 <main+0x420>)
 8000e9e:	f000 fb32 	bl	8001506 <PID_Compute>
 8000ea2:	ed87 0a06 	vstr	s0, [r7, #24]
		  float yaw_out = PID_Compute(&pid_yaw,yaw_target,roll,dt);
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <main+0x424>)
 8000ea8:	edd3 7a00 	vldr	s15, [r3]
 8000eac:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <main+0x404>)
 8000eae:	ed93 7a00 	vldr	s14, [r3]
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <main+0x400>)
 8000eb4:	edd3 6a00 	vldr	s13, [r3]
 8000eb8:	eeb0 1a66 	vmov.f32	s2, s13
 8000ebc:	eef0 0a47 	vmov.f32	s1, s14
 8000ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec4:	4820      	ldr	r0, [pc, #128]	@ (8000f48 <main+0x428>)
 8000ec6:	f000 fb1e 	bl	8001506 <PID_Compute>
 8000eca:	ed87 0a05 	vstr	s0, [r7, #20]


		  float m1 = throttle + pitch_out - roll_out + yaw_out;
 8000ece:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <main+0x42c>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	e03b      	b.n	8000f50 <main+0x430>
 8000ed8:	1a63c1f8 	.word	0x1a63c1f8
 8000edc:	404ca5dc 	.word	0x404ca5dc
 8000ee0:	a2529d39 	.word	0xa2529d39
 8000ee4:	3f91df46 	.word	0x3f91df46
 8000ee8:	999999a0 	.word	0x999999a0
 8000eec:	3fa99999 	.word	0x3fa99999
 8000ef0:	66666666 	.word	0x66666666
 8000ef4:	3fee6666 	.word	0x3fee6666
 8000ef8:	2400022c 	.word	0x2400022c
 8000efc:	240004b8 	.word	0x240004b8
 8000f00:	24000204 	.word	0x24000204
 8000f04:	24000200 	.word	0x24000200
 8000f08:	240001fc 	.word	0x240001fc
 8000f0c:	240002dc 	.word	0x240002dc
 8000f10:	24000210 	.word	0x24000210
 8000f14:	2400020c 	.word	0x2400020c
 8000f18:	24000208 	.word	0x24000208
 8000f1c:	2400030c 	.word	0x2400030c
 8000f20:	24000000 	.word	0x24000000
 8000f24:	24000224 	.word	0x24000224
 8000f28:	24000220 	.word	0x24000220
 8000f2c:	24000228 	.word	0x24000228
 8000f30:	43b40000 	.word	0x43b40000
 8000f34:	24000218 	.word	0x24000218
 8000f38:	24000270 	.word	0x24000270
 8000f3c:	24000214 	.word	0x24000214
 8000f40:	24000294 	.word	0x24000294
 8000f44:	2400021c 	.word	0x2400021c
 8000f48:	240002b8 	.word	0x240002b8
 8000f4c:	24000004 	.word	0x24000004
 8000f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f54:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f64:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6c:	edc7 7a04 	vstr	s15, [r7, #16]
		  float m2 = throttle + pitch_out + roll_out - yaw_out;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <main+0x4cc>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f84:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f94:	edc7 7a03 	vstr	s15, [r7, #12]
		  float m3 = throttle - pitch_out + roll_out + yaw_out;
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <main+0x4cc>)
 8000f9a:	881b      	ldrh	r3, [r3, #0]
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fac:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fbc:	edc7 7a02 	vstr	s15, [r7, #8]
		  float m4 = throttle - pitch_out - roll_out - yaw_out;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <main+0x4cc>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	ee07 3a90 	vmov	s15, r3
 8000fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe4:	edc7 7a01 	vstr	s15, [r7, #4]
	  if (mpu.state==2){
 8000fe8:	e5ea      	b.n	8000bc0 <main+0xa0>
 8000fea:	bf00      	nop
 8000fec:	24000004 	.word	0x24000004

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09c      	sub	sp, #112	@ 0x70
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffa:	224c      	movs	r2, #76	@ 0x4c
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f009 fcab 	bl	800a95a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2220      	movs	r2, #32
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f009 fca5 	bl	800a95a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001010:	2002      	movs	r0, #2
 8001012:	f004 fb01 	bl	8005618 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b31      	ldr	r3, [pc, #196]	@ (80010e0 <SystemClock_Config+0xf0>)
 800101c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101e:	4a30      	ldr	r2, [pc, #192]	@ (80010e0 <SystemClock_Config+0xf0>)
 8001020:	f023 0301 	bic.w	r3, r3, #1
 8001024:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001026:	4b2e      	ldr	r3, [pc, #184]	@ (80010e0 <SystemClock_Config+0xf0>)
 8001028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <SystemClock_Config+0xf4>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001038:	4a2a      	ldr	r2, [pc, #168]	@ (80010e4 <SystemClock_Config+0xf4>)
 800103a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <SystemClock_Config+0xf4>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800104c:	bf00      	nop
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <SystemClock_Config+0xf4>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001056:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800105a:	d1f8      	bne.n	800104e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800105c:	2301      	movs	r3, #1
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001060:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001066:	2302      	movs	r3, #2
 8001068:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800106a:	2302      	movs	r3, #2
 800106c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001072:	2318      	movs	r3, #24
 8001074:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001076:	2302      	movs	r3, #2
 8001078:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800107a:	2304      	movs	r3, #4
 800107c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001082:	230c      	movs	r3, #12
 8001084:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001086:	2300      	movs	r3, #0
 8001088:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fafa 	bl	800568c <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800109e:	f000 f823 	bl	80010e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	233f      	movs	r3, #63	@ 0x3f
 80010a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2303      	movs	r3, #3
 80010a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2102      	movs	r1, #2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f004 ff39 	bl	8005f40 <HAL_RCC_ClockConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80010d4:	f000 f808 	bl	80010e8 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	3770      	adds	r7, #112	@ 0x70
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58000400 	.word	0x58000400
 80010e4:	58024800 	.word	0x58024800

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <Error_Handler+0x8>

080010f4 <MPU6000_Read>:
#include "mpu6000.h"

uint16_t MPU6000_Read(MPU6000 *dev,uint8_t reg) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
    // Pull CS low to select the device
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001106:	4817      	ldr	r0, [pc, #92]	@ (8001164 <MPU6000_Read+0x70>)
 8001108:	f004 fa6c 	bl	80055e4 <HAL_GPIO_WritePin>

    // Transmit the register address with the read bit set (0x80)
    uint8_t tx[2] = {reg|0x80,0x00};
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001112:	b2db      	uxtb	r3, r3
 8001114:	733b      	strb	r3, [r7, #12]
 8001116:	2300      	movs	r3, #0
 8001118:	737b      	strb	r3, [r7, #13]
    uint8_t rx[2] = {0x00,0x00};
 800111a:	2300      	movs	r3, #0
 800111c:	813b      	strh	r3, [r7, #8]
    HAL_SPI_TransmitReceive_DMA(dev->hspi,tx,rx,2);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6818      	ldr	r0, [r3, #0]
 8001122:	f107 0208 	add.w	r2, r7, #8
 8001126:	f107 010c 	add.w	r1, r7, #12
 800112a:	2302      	movs	r3, #2
 800112c:	f007 f80c 	bl	8008148 <HAL_SPI_TransmitReceive_DMA>

    while (!dev->spi_transfer_done);
 8001130:	bf00      	nop
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1f6      	bne.n	8001132 <MPU6000_Read+0x3e>
    dev->spi_transfer_done=false;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    // Pull CS high to deselect the device
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001152:	4804      	ldr	r0, [pc, #16]	@ (8001164 <MPU6000_Read+0x70>)
 8001154:	f004 fa46 	bl	80055e4 <HAL_GPIO_WritePin>

    // Combine the high byte and low byte to form a 16-bit value
    //return (uint16_t)((data[0] << 8) | data[1]);
    return rx[1];
 8001158:	7a7b      	ldrb	r3, [r7, #9]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	58021000 	.word	0x58021000

08001168 <MPU6000_Write>:

void MPU6000_Write(MPU6000 *dev,uint8_t reg,uint8_t data) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
 8001174:	4613      	mov	r3, r2
 8001176:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8001178:	2200      	movs	r2, #0
 800117a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800117e:	4815      	ldr	r0, [pc, #84]	@ (80011d4 <MPU6000_Write+0x6c>)
 8001180:	f004 fa30 	bl	80055e4 <HAL_GPIO_WritePin>

	// Transmit the register address with the read bit set (0x80)
	dev->tx_buffer[0]=reg;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	78fa      	ldrb	r2, [r7, #3]
 8001188:	f883 2020 	strb.w	r2, [r3, #32]
	dev->tx_buffer[1]=data;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	78ba      	ldrb	r2, [r7, #2]
 8001190:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	HAL_SPI_Transmit_DMA(dev->hspi, dev->tx_buffer, 2);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3320      	adds	r3, #32
 800119c:	2202      	movs	r2, #2
 800119e:	4619      	mov	r1, r3
 80011a0:	f006 fe90 	bl	8007ec4 <HAL_SPI_Transmit_DMA>

	while (!dev->spi_transfer_done);
 80011a4:	bf00      	nop
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	f083 0301 	eor.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1f6      	bne.n	80011a6 <MPU6000_Write+0x3e>
	dev->spi_transfer_done=false;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	// Pull CS high to deselect the device
	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c6:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <MPU6000_Write+0x6c>)
 80011c8:	f004 fa0c 	bl	80055e4 <HAL_GPIO_WritePin>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	58021000 	.word	0x58021000

080011d8 <MPU6000_Init>:


void MPU6000_Init(MPU6000 *dev,SPI_HandleTypeDef *hspi){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
	dev->spi_transfer_done=false;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	dev->hspi = hspi;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	605a      	str	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
	dev->acc[2] = 0.0f;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800120e:	481a      	ldr	r0, [pc, #104]	@ (8001278 <MPU6000_Init+0xa0>)
 8001210:	f004 f9e8 	bl	80055e4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001214:	2064      	movs	r0, #100	@ 0x64
 8001216:	f001 f8ad 	bl	8002374 <HAL_Delay>

	MPU6000_Write(dev,MPU6000_PWR_MGMT_1,0x80);
 800121a:	2280      	movs	r2, #128	@ 0x80
 800121c:	216b      	movs	r1, #107	@ 0x6b
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffa2 	bl	8001168 <MPU6000_Write>
	HAL_Delay(100);
 8001224:	2064      	movs	r0, #100	@ 0x64
 8001226:	f001 f8a5 	bl	8002374 <HAL_Delay>

	MPU6000_Write(dev,MPU6000_PWR_MGMT_1,0x00);
 800122a:	2200      	movs	r2, #0
 800122c:	216b      	movs	r1, #107	@ 0x6b
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff9a 	bl	8001168 <MPU6000_Write>
	HAL_Delay(10);
 8001234:	200a      	movs	r0, #10
 8001236:	f001 f89d 	bl	8002374 <HAL_Delay>
	MPU6000_Write(dev,MPU6000_GYRO_CONFIG,0x00);
 800123a:	2200      	movs	r2, #0
 800123c:	211b      	movs	r1, #27
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ff92 	bl	8001168 <MPU6000_Write>
	MPU6000_Write(dev,MPU6000_ACCEL_CONFIG,0x00);
 8001244:	2200      	movs	r2, #0
 8001246:	211c      	movs	r1, #28
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff8d 	bl	8001168 <MPU6000_Write>

	uint8_t whoami = MPU6000_Read(dev,MPU6000_WHO_AM_I);
 800124e:	2175      	movs	r1, #117	@ 0x75
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff4f 	bl	80010f4 <MPU6000_Read>
 8001256:	4603      	mov	r3, r0
 8001258:	73fb      	strb	r3, [r7, #15]
	printf("Who am I: %d\n",whoami);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4619      	mov	r1, r3
 800125e:	4807      	ldr	r0, [pc, #28]	@ (800127c <MPU6000_Init+0xa4>)
 8001260:	f009 fb26 	bl	800a8b0 <iprintf>

	// Pull CS low to select the device
	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800126a:	4803      	ldr	r0, [pc, #12]	@ (8001278 <MPU6000_Init+0xa0>)
 800126c:	f004 f9ba 	bl	80055e4 <HAL_GPIO_WritePin>
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	58021000 	.word	0x58021000
 800127c:	0800d810 	.word	0x0800d810

08001280 <MPU6000_Start_DMA>:

void MPU6000_Start_DMA(MPU6000 *dev){
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    // Pull CS low to select the device
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800128e:	4816      	ldr	r0, [pc, #88]	@ (80012e8 <MPU6000_Start_DMA+0x68>)
 8001290:	f004 f9a8 	bl	80055e4 <HAL_GPIO_WritePin>

    // Transmit the register address with the read bit set (0x80)
    dev->tx_buffer[0]=0x3B|0x80;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	22bb      	movs	r2, #187	@ 0xbb
 8001298:	f883 2020 	strb.w	r2, [r3, #32]
    //SCB_CleanDCache_by_Addr((uint32_t*)dev->tx_buffer, 15);

    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(dev->hspi,dev->tx_buffer,dev->dma_buffer,15);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f103 0120 	add.w	r1, r3, #32
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80012ac:	230f      	movs	r3, #15
 80012ae:	f006 ff4b 	bl	8008148 <HAL_SPI_TransmitReceive_DMA>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]

    while(!dev->spi_transfer_done);
 80012b6:	bf00      	nop
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f083 0301 	eor.w	r3, r3, #1
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f6      	bne.n	80012b8 <MPU6000_Start_DMA+0x38>
    dev->spi_transfer_done=false;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    //SCB_InvalidateDCache_by_Addr((uint32_t*)dev->dma_buffer, 15);

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <MPU6000_Start_DMA+0x68>)
 80012da:	f004 f983 	bl	80055e4 <HAL_GPIO_WritePin>
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	58021000 	.word	0x58021000

080012ec <MPU6000_Process_DMA>:

void MPU6000_Process_DMA(MPU6000 *dev) {
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
    int16_t raw_acc_x = (dev->dma_buffer[1] << 8) | dev->dma_buffer[2];
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001308:	b2db      	uxtb	r3, r3
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	82fb      	strh	r3, [r7, #22]
    int16_t raw_acc_y = (dev->dma_buffer[3] << 8) | dev->dma_buffer[4];
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8001316:	b2db      	uxtb	r3, r3
 8001318:	b21b      	sxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001324:	b2db      	uxtb	r3, r3
 8001326:	b21b      	sxth	r3, r3
 8001328:	4313      	orrs	r3, r2
 800132a:	82bb      	strh	r3, [r7, #20]
    int16_t raw_acc_z = (dev->dma_buffer[5] << 8) | dev->dma_buffer[6];
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001332:	b2db      	uxtb	r3, r3
 8001334:	b21b      	sxth	r3, r3
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8001340:	b2db      	uxtb	r3, r3
 8001342:	b21b      	sxth	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	827b      	strh	r3, [r7, #18]

    int16_t raw_temp  = (dev->dma_buffer[7] << 8) | dev->dma_buffer[8];
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 800134e:	b2db      	uxtb	r3, r3
 8001350:	b21b      	sxth	r3, r3
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	b21a      	sxth	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800135c:	b2db      	uxtb	r3, r3
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	823b      	strh	r3, [r7, #16]

    int16_t raw_gyro_x = (dev->dma_buffer[9] << 8) | dev->dma_buffer[10];
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800136a:	b2db      	uxtb	r3, r3
 800136c:	b21b      	sxth	r3, r3
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001378:	b2db      	uxtb	r3, r3
 800137a:	b21b      	sxth	r3, r3
 800137c:	4313      	orrs	r3, r2
 800137e:	81fb      	strh	r3, [r7, #14]
    int16_t raw_gyro_y = (dev->dma_buffer[11] << 8) | dev->dma_buffer[12];
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001386:	b2db      	uxtb	r3, r3
 8001388:	b21b      	sxth	r3, r3
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001394:	b2db      	uxtb	r3, r3
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	81bb      	strh	r3, [r7, #12]
    int16_t raw_gyro_z = (dev->dma_buffer[13] << 8) | dev->dma_buffer[14];
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	021b      	lsls	r3, r3, #8
 80013a8:	b21a      	sxth	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	817b      	strh	r3, [r7, #10]

    dev->acc[0] = -(float)raw_acc_x / ACCEL_SCALE;   // ±4g scale
 80013b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c4:	eeb1 7a67 	vneg.f32	s14, s15
 80013c8:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001498 <MPU6000_Process_DMA+0x1ac>
 80013cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edc3 7a01 	vstr	s15, [r3, #4]
    dev->acc[1] = (float)raw_acc_y / ACCEL_SCALE;
 80013d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001498 <MPU6000_Process_DMA+0x1ac>
 80013e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	edc3 7a02 	vstr	s15, [r3, #8]
    dev->acc[2] = -(float)raw_acc_z / ACCEL_SCALE;
 80013f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013f4:	ee07 3a90 	vmov	s15, r3
 80013f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fc:	eeb1 7a67 	vneg.f32	s14, s15
 8001400:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001498 <MPU6000_Process_DMA+0x1ac>
 8001404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	edc3 7a03 	vstr	s15, [r3, #12]

    dev->temp = ((float)raw_temp) / 340.0f + 36.53f;
 800140e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800149c <MPU6000_Process_DMA+0x1b0>
 800141e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001422:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80014a0 <MPU6000_Process_DMA+0x1b4>
 8001426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edc3 7a07 	vstr	s15, [r3, #28]

    dev->gyro[0] = -(float)raw_gyro_x / GYRO_SCALE;   // ±500°/s
 8001430:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	eeb1 7a67 	vneg.f32	s14, s15
 8001440:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80014a4 <MPU6000_Process_DMA+0x1b8>
 8001444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	edc3 7a04 	vstr	s15, [r3, #16]
    dev->gyro[1] = -(float)raw_gyro_y / GYRO_SCALE;
 800144e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001452:	ee07 3a90 	vmov	s15, r3
 8001456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145a:	eeb1 7a67 	vneg.f32	s14, s15
 800145e:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80014a4 <MPU6000_Process_DMA+0x1b8>
 8001462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edc3 7a05 	vstr	s15, [r3, #20]
    dev->gyro[2] = -(float)raw_gyro_z / GYRO_SCALE;
 800146c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001478:	eeb1 7a67 	vneg.f32	s14, s15
 800147c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80014a4 <MPU6000_Process_DMA+0x1b8>
 8001480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800148a:	bf00      	nop
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	46800000 	.word	0x46800000
 800149c:	43aa0000 	.word	0x43aa0000
 80014a0:	42121eb8 	.word	0x42121eb8
 80014a4:	43030000 	.word	0x43030000

080014a8 <PID_Init>:
#include "pid.h"

void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float output_limit, float integral_limit)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6178      	str	r0, [r7, #20]
 80014b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80014b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80014b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80014bc:	edc7 1a01 	vstr	s3, [r7, #4]
 80014c0:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	68fa      	ldr	r2, [r7, #12]
 80014ce:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	609a      	str	r2, [r3, #8]

    pid->prev_error = 0.0f;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
    pid->integral = 0.0f;
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	615a      	str	r2, [r3, #20]
    pid->output = 0.0f;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]

    pid->output_limit = output_limit;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	619a      	str	r2, [r3, #24]
    pid->integral_limit = integral_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	61da      	str	r2, [r3, #28]
}
 80014fa:	bf00      	nop
 80014fc:	371c      	adds	r7, #28
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <PID_Compute>:

float PID_Compute(PID_Controller *pid, float target, float measured, float dt)
{
 8001506:	b480      	push	{r7}
 8001508:	b087      	sub	sp, #28
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001512:	edc7 0a01 	vstr	s1, [r7, #4]
 8001516:	ed87 1a00 	vstr	s2, [r7]
    float error = target - measured;
 800151a:	ed97 7a02 	vldr	s14, [r7, #8]
 800151e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001526:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->integral += error * dt;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001530:	edd7 6a05 	vldr	s13, [r7, #20]
 8001534:	edd7 7a00 	vldr	s15, [r7]
 8001538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	edc3 7a05 	vstr	s15, [r3, #20]

    // Limit integral to prevent windup
    if (pid->integral > pid->integral_limit) pid->integral = pid->integral_limit;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	ed93 7a05 	vldr	s14, [r3, #20]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	dd03      	ble.n	8001564 <PID_Compute+0x5e>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	615a      	str	r2, [r3, #20]
    if (pid->integral < -pid->integral_limit) pid->integral = -pid->integral_limit;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	ed93 7a05 	vldr	s14, [r3, #20]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001570:	eef1 7a67 	vneg.f32	s15, s15
 8001574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	d507      	bpl.n	800158e <PID_Compute+0x88>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edd3 7a07 	vldr	s15, [r3, #28]
 8001584:	eef1 7a67 	vneg.f32	s15, s15
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	edc3 7a05 	vstr	s15, [r3, #20]

    float derivative = (error - pid->prev_error) / dt;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	edd3 7a04 	vldr	s15, [r3, #16]
 8001594:	ed97 7a05 	vldr	s14, [r7, #20]
 8001598:	ee77 6a67 	vsub.f32	s13, s14, s15
 800159c:	ed97 7a00 	vldr	s14, [r7]
 80015a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a4:	edc7 7a04 	vstr	s15, [r7, #16]

    pid->output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	ed93 7a00 	vldr	s14, [r3]
 80015ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	edd3 6a01 	vldr	s13, [r3, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	edd3 7a05 	vldr	s15, [r3, #20]
 80015c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80015d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	edc3 7a08 	vstr	s15, [r3, #32]

    // Limit output
    if (pid->output > pid->output_limit) pid->output = pid->output_limit;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	ed93 7a08 	vldr	s14, [r3, #32]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80015ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f6:	dd03      	ble.n	8001600 <PID_Compute+0xfa>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	699a      	ldr	r2, [r3, #24]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	621a      	str	r2, [r3, #32]
    if (pid->output < -pid->output_limit) pid->output = -pid->output_limit;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	ed93 7a08 	vldr	s14, [r3, #32]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	edd3 7a06 	vldr	s15, [r3, #24]
 800160c:	eef1 7a67 	vneg.f32	s15, s15
 8001610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001618:	d507      	bpl.n	800162a <PID_Compute+0x124>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001620:	eef1 7a67 	vneg.f32	s15, s15
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	edc3 7a08 	vstr	s15, [r3, #32]

    pid->prev_error = error;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	611a      	str	r2, [r3, #16]

    return pid->output;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	ee07 3a90 	vmov	s15, r3
}
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <MX_SPI4_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800164c:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <MX_SPI4_Init+0xa4>)
 800164e:	4a28      	ldr	r2, [pc, #160]	@ (80016f0 <MX_SPI4_Init+0xa8>)
 8001650:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <MX_SPI4_Init+0xa4>)
 8001654:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001658:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <MX_SPI4_Init+0xa4>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <MX_SPI4_Init+0xa4>)
 8001662:	2207      	movs	r2, #7
 8001664:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_SPI4_Init+0xa4>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_SPI4_Init+0xa4>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <MX_SPI4_Init+0xa4>)
 8001674:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001678:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800167a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_SPI4_Init+0xa4>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <MX_SPI4_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001686:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <MX_SPI4_Init+0xa4>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_SPI4_Init+0xa4>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_SPI4_Init+0xa4>)
 8001694:	2200      	movs	r2, #0
 8001696:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_SPI4_Init+0xa4>)
 800169a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800169e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016a6:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016be:	4b0b      	ldr	r3, [pc, #44]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016c4:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_SPI4_Init+0xa4>)
 80016d8:	f006 fad0 	bl	8007c7c <HAL_SPI_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80016e2:	f7ff fd01 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2400033c 	.word	0x2400033c
 80016f0:	40013400 	.word	0x40013400

080016f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b0ba      	sub	sp, #232	@ 0xe8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	22c0      	movs	r2, #192	@ 0xc0
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f009 f920 	bl	800a95a <memset>
  if(spiHandle->Instance==SPI4)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a59      	ldr	r2, [pc, #356]	@ (8001884 <HAL_SPI_MspInit+0x190>)
 8001720:	4293      	cmp	r3, r2
 8001722:	f040 80aa 	bne.w	800187a <HAL_SPI_MspInit+0x186>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001726:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001732:	2300      	movs	r3, #0
 8001734:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	4618      	mov	r0, r3
 800173c:	f004 ff30 	bl	80065a0 <HAL_RCCEx_PeriphCLKConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001746:	f7ff fccf 	bl	80010e8 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800174a:	4b4f      	ldr	r3, [pc, #316]	@ (8001888 <HAL_SPI_MspInit+0x194>)
 800174c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001750:	4a4d      	ldr	r2, [pc, #308]	@ (8001888 <HAL_SPI_MspInit+0x194>)
 8001752:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001756:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800175a:	4b4b      	ldr	r3, [pc, #300]	@ (8001888 <HAL_SPI_MspInit+0x194>)
 800175c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001768:	4b47      	ldr	r3, [pc, #284]	@ (8001888 <HAL_SPI_MspInit+0x194>)
 800176a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176e:	4a46      	ldr	r2, [pc, #280]	@ (8001888 <HAL_SPI_MspInit+0x194>)
 8001770:	f043 0310 	orr.w	r3, r3, #16
 8001774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001778:	4b43      	ldr	r3, [pc, #268]	@ (8001888 <HAL_SPI_MspInit+0x194>)
 800177a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001786:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800178a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80017a0:	2305      	movs	r3, #5
 80017a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4837      	ldr	r0, [pc, #220]	@ (800188c <HAL_SPI_MspInit+0x198>)
 80017ae:	f003 fd69 	bl	8005284 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream3;
 80017b2:	4b37      	ldr	r3, [pc, #220]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017b4:	4a37      	ldr	r2, [pc, #220]	@ (8001894 <HAL_SPI_MspInit+0x1a0>)
 80017b6:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80017b8:	4b35      	ldr	r3, [pc, #212]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017ba:	2253      	movs	r2, #83	@ 0x53
 80017bc:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017be:	4b34      	ldr	r3, [pc, #208]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c4:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ca:	4b31      	ldr	r3, [pc, #196]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d0:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80017de:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80017ea:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ec:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80017f2:	4827      	ldr	r0, [pc, #156]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 80017f4:	f000 fefe 	bl	80025f4 <HAL_DMA_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80017fe:	f7ff fc73 	bl	80010e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a22      	ldr	r2, [pc, #136]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 8001806:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001808:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <HAL_SPI_MspInit+0x19c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800180e:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001810:	4a22      	ldr	r2, [pc, #136]	@ (800189c <HAL_SPI_MspInit+0x1a8>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001814:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001816:	2254      	movs	r2, #84	@ 0x54
 8001818:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 800181c:	2240      	movs	r2, #64	@ 0x40
 800181e:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001820:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001828:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800182c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800182e:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001842:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001846:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800184e:	4812      	ldr	r0, [pc, #72]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001850:	f000 fed0 	bl	80025f4 <HAL_DMA_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 800185a:	f7ff fc45 	bl	80010e8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001862:	679a      	str	r2, [r3, #120]	@ 0x78
 8001864:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <HAL_SPI_MspInit+0x1a4>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2054      	movs	r0, #84	@ 0x54
 8001870:	f000 fe8b 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001874:	2054      	movs	r0, #84	@ 0x54
 8001876:	f000 fea2 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	37e8      	adds	r7, #232	@ 0xe8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40013400 	.word	0x40013400
 8001888:	58024400 	.word	0x58024400
 800188c:	58021000 	.word	0x58021000
 8001890:	240003c4 	.word	0x240003c4
 8001894:	40020458 	.word	0x40020458
 8001898:	2400043c 	.word	0x2400043c
 800189c:	40020428 	.word	0x40020428

080018a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_MspInit+0x30>)
 80018a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018ac:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_MspInit+0x30>)
 80018ae:	f043 0302 	orr.w	r3, r3, #2
 80018b2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018b6:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <HAL_MspInit+0x30>)
 80018b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	58024400 	.word	0x58024400

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <NMI_Handler+0x4>

080018dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <MemManage_Handler+0x4>

080018ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192a:	f000 fd03 	bl	8002334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <DMA1_Stream0_IRQHandler+0x10>)
 800193a:	f002 f985 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	24000550 	.word	0x24000550

08001948 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <DMA1_Stream1_IRQHandler+0x10>)
 800194e:	f002 f97b 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	240005c8 	.word	0x240005c8

0800195c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <DMA1_Stream2_IRQHandler+0x10>)
 8001962:	f002 f971 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	24000640 	.word	0x24000640

08001970 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA1_Stream3_IRQHandler+0x10>)
 8001976:	f002 f967 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	240006b8 	.word	0x240006b8

08001984 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <TIM2_IRQHandler+0x10>)
 800198a:	f007 fa20 	bl	8008dce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	240004b8 	.word	0x240004b8

08001998 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <DMA2_Stream1_IRQHandler+0x10>)
 800199e:	f002 f953 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2400043c 	.word	0x2400043c

080019ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <DMA2_Stream3_IRQHandler+0x10>)
 80019b2:	f002 f949 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	240003c4 	.word	0x240003c4

080019c0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <SPI4_IRQHandler+0x10>)
 80019c6:	f006 fd77 	bl	80084b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2400033c 	.word	0x2400033c

080019d4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <ITM_SendChar+0x48>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a1c <ITM_SendChar+0x48>)
 80019e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80019ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <ITM_SendChar+0x4c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001a20 <ITM_SendChar+0x4c>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80019f6:	bf00      	nop
 80019f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f8      	beq.n	80019f8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001a06:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	6013      	str	r3, [r2, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000edfc 	.word	0xe000edfc
 8001a20:	e0000e00 	.word	0xe0000e00

08001a24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <_kill>:

int _kill(int pid, int sig)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a3e:	f008 ffdf 	bl	800aa00 <__errno>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2216      	movs	r2, #22
 8001a46:	601a      	str	r2, [r3, #0]
  return -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <_exit>:

void _exit (int status)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ffe7 	bl	8001a34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a66:	bf00      	nop
 8001a68:	e7fd      	b.n	8001a66 <_exit+0x12>

08001a6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	60f8      	str	r0, [r7, #12]
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
 8001a7a:	e00a      	b.n	8001a92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a7c:	f3af 8000 	nop.w
 8001a80:	4601      	mov	r1, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60ba      	str	r2, [r7, #8]
 8001a88:	b2ca      	uxtb	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dbf0      	blt.n	8001a7c <_read+0x12>
  }

  return len;
 8001a9a:	687b      	ldr	r3, [r7, #4]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e009      	b.n	8001aca <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	60ba      	str	r2, [r7, #8]
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff88 	bl	80019d4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbf1      	blt.n	8001ab6 <_write+0x12>
  }
  return len;
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_close>:

int _close(int file)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b04:	605a      	str	r2, [r3, #4]
  return 0;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_isatty>:

int _isatty(int file)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b1c:	2301      	movs	r3, #1
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	@ (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f008 ff44 	bl	800aa00 <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <_sbrk+0x64>)
 8001b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	24080000 	.word	0x24080000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	240004b4 	.word	0x240004b4
 8001bac:	24000880 	.word	0x24000880

08001bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bb4:	4b43      	ldr	r3, [pc, #268]	@ (8001cc4 <SystemInit+0x114>)
 8001bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bba:	4a42      	ldr	r2, [pc, #264]	@ (8001cc4 <SystemInit+0x114>)
 8001bbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bc4:	4b40      	ldr	r3, [pc, #256]	@ (8001cc8 <SystemInit+0x118>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	2b06      	cmp	r3, #6
 8001bce:	d807      	bhi.n	8001be0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bd0:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc8 <SystemInit+0x118>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 030f 	bic.w	r3, r3, #15
 8001bd8:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc8 <SystemInit+0x118>)
 8001bda:	f043 0307 	orr.w	r3, r3, #7
 8001bde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001be0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ccc <SystemInit+0x11c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a39      	ldr	r2, [pc, #228]	@ (8001ccc <SystemInit+0x11c>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bec:	4b37      	ldr	r3, [pc, #220]	@ (8001ccc <SystemInit+0x11c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bf2:	4b36      	ldr	r3, [pc, #216]	@ (8001ccc <SystemInit+0x11c>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4935      	ldr	r1, [pc, #212]	@ (8001ccc <SystemInit+0x11c>)
 8001bf8:	4b35      	ldr	r3, [pc, #212]	@ (8001cd0 <SystemInit+0x120>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bfe:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <SystemInit+0x118>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc8 <SystemInit+0x118>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f023 030f 	bic.w	r3, r3, #15
 8001c12:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc8 <SystemInit+0x118>)
 8001c14:	f043 0307 	orr.w	r3, r3, #7
 8001c18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ccc <SystemInit+0x11c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c20:	4b2a      	ldr	r3, [pc, #168]	@ (8001ccc <SystemInit+0x11c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c26:	4b29      	ldr	r3, [pc, #164]	@ (8001ccc <SystemInit+0x11c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <SystemInit+0x11c>)
 8001c2e:	4a29      	ldr	r2, [pc, #164]	@ (8001cd4 <SystemInit+0x124>)
 8001c30:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c32:	4b26      	ldr	r3, [pc, #152]	@ (8001ccc <SystemInit+0x11c>)
 8001c34:	4a28      	ldr	r2, [pc, #160]	@ (8001cd8 <SystemInit+0x128>)
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c38:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <SystemInit+0x11c>)
 8001c3a:	4a28      	ldr	r2, [pc, #160]	@ (8001cdc <SystemInit+0x12c>)
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	@ (8001ccc <SystemInit+0x11c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c44:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <SystemInit+0x11c>)
 8001c46:	4a25      	ldr	r2, [pc, #148]	@ (8001cdc <SystemInit+0x12c>)
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c4a:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <SystemInit+0x11c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <SystemInit+0x11c>)
 8001c52:	4a22      	ldr	r2, [pc, #136]	@ (8001cdc <SystemInit+0x12c>)
 8001c54:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <SystemInit+0x11c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ccc <SystemInit+0x11c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1a      	ldr	r2, [pc, #104]	@ (8001ccc <SystemInit+0x11c>)
 8001c62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c68:	4b18      	ldr	r3, [pc, #96]	@ (8001ccc <SystemInit+0x11c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce0 <SystemInit+0x130>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <SystemInit+0x134>)
 8001c74:	4013      	ands	r3, r2
 8001c76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c7a:	d202      	bcs.n	8001c82 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <SystemInit+0x138>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001c82:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <SystemInit+0x11c>)
 8001c84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d113      	bne.n	8001cb8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <SystemInit+0x11c>)
 8001c92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c96:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <SystemInit+0x11c>)
 8001c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <SystemInit+0x13c>)
 8001ca2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ca6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001ca8:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <SystemInit+0x11c>)
 8001caa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001cae:	4a07      	ldr	r2, [pc, #28]	@ (8001ccc <SystemInit+0x11c>)
 8001cb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cb4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00
 8001cc8:	52002000 	.word	0x52002000
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cd4:	02020200 	.word	0x02020200
 8001cd8:	01ff0000 	.word	0x01ff0000
 8001cdc:	01010280 	.word	0x01010280
 8001ce0:	5c001000 	.word	0x5c001000
 8001ce4:	ffff0000 	.word	0xffff0000
 8001ce8:	51008108 	.word	0x51008108
 8001cec:	52004000 	.word	0x52004000

08001cf0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <ExitRun0Mode+0x2c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a08      	ldr	r2, [pc, #32]	@ (8001d1c <ExitRun0Mode+0x2c>)
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001d00:	bf00      	nop
 8001d02:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <ExitRun0Mode+0x2c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f9      	beq.n	8001d02 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001d0e:	bf00      	nop
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	58024800 	.word	0x58024800

08001d20 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim8_ch3;
DMA_HandleTypeDef hdma_tim8_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d48:	223f      	movs	r2, #63	@ 0x3f
 8001d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5a:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d60:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d66:	4814      	ldr	r0, [pc, #80]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d68:	f006 ff01 	bl	8008b6e <HAL_TIM_Base_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d72:	f7ff f9b9 	bl	80010e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001d84:	f007 fa3e 	bl	8009204 <HAL_TIM_ConfigClockSource>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d8e:	f7ff f9ab 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <MX_TIM2_Init+0x98>)
 8001da0:	f007 ff64 	bl	8009c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001daa:	f7ff f99d 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	240004b8 	.word	0x240004b8

08001dbc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b09a      	sub	sp, #104	@ 0x68
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ddc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	615a      	str	r2, [r3, #20]
 8001dee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	222c      	movs	r2, #44	@ 0x2c
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f008 fdaf 	bl	800a95a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dfc:	4b59      	ldr	r3, [pc, #356]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001dfe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f68 <MX_TIM8_Init+0x1ac>)
 8001e00:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e02:	4b58      	ldr	r3, [pc, #352]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b56      	ldr	r3, [pc, #344]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 320-1;
 8001e0e:	4b55      	ldr	r3, [pc, #340]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e10:	f240 123f 	movw	r2, #319	@ 0x13f
 8001e14:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b53      	ldr	r3, [pc, #332]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e1c:	4b51      	ldr	r3, [pc, #324]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e22:	4b50      	ldr	r3, [pc, #320]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e28:	484e      	ldr	r0, [pc, #312]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e2a:	f006 fea0 	bl	8008b6e <HAL_TIM_Base_Init>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001e34:	f7ff f958 	bl	80010e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e3e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001e42:	4619      	mov	r1, r3
 8001e44:	4847      	ldr	r0, [pc, #284]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e46:	f007 f9dd 	bl	8009204 <HAL_TIM_ConfigClockSource>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001e50:	f7ff f94a 	bl	80010e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e54:	4843      	ldr	r0, [pc, #268]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e56:	f006 ff59 	bl	8008d0c <HAL_TIM_PWM_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001e60:	f7ff f942 	bl	80010e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e64:	2300      	movs	r3, #0
 8001e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e74:	4619      	mov	r1, r3
 8001e76:	483b      	ldr	r0, [pc, #236]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001e78:	f007 fef8 	bl	8009c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001e82:	f7ff f931 	bl	80010e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e86:	2360      	movs	r3, #96	@ 0x60
 8001e88:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e92:	2300      	movs	r3, #0
 8001e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ea2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	482e      	ldr	r0, [pc, #184]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001eac:	f007 f896 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001eb6:	f7ff f917 	bl	80010e8 <Error_Handler>
  }
  sConfigOC.Pulse = 420;
 8001eba:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001ebe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ec8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ecc:	2204      	movs	r2, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4824      	ldr	r0, [pc, #144]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001ed2:	f007 f883 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8001edc:	f7ff f904 	bl	80010e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ee0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ee4:	2208      	movs	r2, #8
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	481e      	ldr	r0, [pc, #120]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001eea:	f007 f877 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8001ef4:	f7ff f8f8 	bl	80010e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ef8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001efc:	220c      	movs	r2, #12
 8001efe:	4619      	mov	r1, r3
 8001f00:	4818      	ldr	r0, [pc, #96]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001f02:	f007 f86b 	bl	8008fdc <HAL_TIM_PWM_ConfigChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM8_Init+0x154>
  {
    Error_Handler();
 8001f0c:	f7ff f8ec 	bl	80010e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	4807      	ldr	r0, [pc, #28]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001f46:	f007 ff1f 	bl	8009d88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_TIM8_Init+0x198>
  {
    Error_Handler();
 8001f50:	f7ff f8ca 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001f54:	4803      	ldr	r0, [pc, #12]	@ (8001f64 <MX_TIM8_Init+0x1a8>)
 8001f56:	f000 f913 	bl	8002180 <HAL_TIM_MspPostInit>

}
 8001f5a:	bf00      	nop
 8001f5c:	3768      	adds	r7, #104	@ 0x68
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	24000504 	.word	0x24000504
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f7c:	d117      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7e:	4b76      	ldr	r3, [pc, #472]	@ (8002158 <HAL_TIM_Base_MspInit+0x1ec>)
 8001f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f84:	4a74      	ldr	r2, [pc, #464]	@ (8002158 <HAL_TIM_Base_MspInit+0x1ec>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f8e:	4b72      	ldr	r3, [pc, #456]	@ (8002158 <HAL_TIM_Base_MspInit+0x1ec>)
 8001f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2105      	movs	r1, #5
 8001fa0:	201c      	movs	r0, #28
 8001fa2:	f000 faf2 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fa6:	201c      	movs	r0, #28
 8001fa8:	f000 fb09 	bl	80025be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001fac:	e0d0      	b.n	8002150 <HAL_TIM_Base_MspInit+0x1e4>
  else if(tim_baseHandle->Instance==TIM8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a6a      	ldr	r2, [pc, #424]	@ (800215c <HAL_TIM_Base_MspInit+0x1f0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	f040 80cb 	bne.w	8002150 <HAL_TIM_Base_MspInit+0x1e4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fba:	4b67      	ldr	r3, [pc, #412]	@ (8002158 <HAL_TIM_Base_MspInit+0x1ec>)
 8001fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fc0:	4a65      	ldr	r2, [pc, #404]	@ (8002158 <HAL_TIM_Base_MspInit+0x1ec>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fca:	4b63      	ldr	r3, [pc, #396]	@ (8002158 <HAL_TIM_Base_MspInit+0x1ec>)
 8001fcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA1_Stream0;
 8001fd8:	4b61      	ldr	r3, [pc, #388]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fda:	4a62      	ldr	r2, [pc, #392]	@ (8002164 <HAL_TIM_Base_MspInit+0x1f8>)
 8001fdc:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 8001fde:	4b60      	ldr	r3, [pc, #384]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fe0:	222f      	movs	r2, #47	@ 0x2f
 8001fe2:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fe6:	2240      	movs	r2, #64	@ 0x40
 8001fe8:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fea:	4b5d      	ldr	r3, [pc, #372]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ff0:	4b5b      	ldr	r3, [pc, #364]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8001ff2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ff6:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ff8:	4b59      	ldr	r3, [pc, #356]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8001ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ffe:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002000:	4b57      	ldr	r3, [pc, #348]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8002002:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002006:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8002008:	4b55      	ldr	r3, [pc, #340]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 800200a:	2200      	movs	r2, #0
 800200c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800200e:	4b54      	ldr	r3, [pc, #336]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8002010:	2200      	movs	r2, #0
 8002012:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002014:	4b52      	ldr	r3, [pc, #328]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8002016:	2200      	movs	r2, #0
 8002018:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 800201a:	4851      	ldr	r0, [pc, #324]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 800201c:	f000 faea 	bl	80025f4 <HAL_DMA_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8002026:	f7ff f85f 	bl	80010e8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4c      	ldr	r2, [pc, #304]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002030:	4a4b      	ldr	r2, [pc, #300]	@ (8002160 <HAL_TIM_Base_MspInit+0x1f4>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim8_ch2.Instance = DMA1_Stream1;
 8002036:	4b4c      	ldr	r3, [pc, #304]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 8002038:	4a4c      	ldr	r2, [pc, #304]	@ (800216c <HAL_TIM_Base_MspInit+0x200>)
 800203a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_TIM8_CH2;
 800203c:	4b4a      	ldr	r3, [pc, #296]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 800203e:	2230      	movs	r2, #48	@ 0x30
 8002040:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 8002044:	2240      	movs	r2, #64	@ 0x40
 8002046:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002048:	4b47      	ldr	r3, [pc, #284]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800204e:	4b46      	ldr	r3, [pc, #280]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 8002050:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002054:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002056:	4b44      	ldr	r3, [pc, #272]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 8002058:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800205c:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800205e:	4b42      	ldr	r3, [pc, #264]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 8002060:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002064:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 8002066:	4b40      	ldr	r3, [pc, #256]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 8002068:	2200      	movs	r2, #0
 800206a:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800206c:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 800206e:	2200      	movs	r2, #0
 8002070:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002072:	4b3d      	ldr	r3, [pc, #244]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 8002074:	2200      	movs	r2, #0
 8002076:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8002078:	483b      	ldr	r0, [pc, #236]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 800207a:	f000 fabb 	bl	80025f4 <HAL_DMA_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_TIM_Base_MspInit+0x11c>
      Error_Handler();
 8002084:	f7ff f830 	bl	80010e8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a37      	ldr	r2, [pc, #220]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 800208c:	629a      	str	r2, [r3, #40]	@ 0x28
 800208e:	4a36      	ldr	r2, [pc, #216]	@ (8002168 <HAL_TIM_Base_MspInit+0x1fc>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim8_ch3.Instance = DMA1_Stream2;
 8002094:	4b36      	ldr	r3, [pc, #216]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 8002096:	4a37      	ldr	r2, [pc, #220]	@ (8002174 <HAL_TIM_Base_MspInit+0x208>)
 8002098:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 800209a:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 800209c:	2231      	movs	r2, #49	@ 0x31
 800209e:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020a0:	4b33      	ldr	r3, [pc, #204]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020a2:	2240      	movs	r2, #64	@ 0x40
 80020a4:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a6:	4b32      	ldr	r3, [pc, #200]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b2:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020ba:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 80020c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80020ca:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020d0:	4b27      	ldr	r3, [pc, #156]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 80020d6:	4826      	ldr	r0, [pc, #152]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020d8:	f000 fa8c 	bl	80025f4 <HAL_DMA_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_TIM_Base_MspInit+0x17a>
      Error_Handler();
 80020e2:	f7ff f801 	bl	80010e8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020ec:	4a20      	ldr	r2, [pc, #128]	@ (8002170 <HAL_TIM_Base_MspInit+0x204>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim8_ch4.Instance = DMA1_Stream3;
 80020f2:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 80020f4:	4a21      	ldr	r2, [pc, #132]	@ (800217c <HAL_TIM_Base_MspInit+0x210>)
 80020f6:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4.Init.Request = DMA_REQUEST_TIM8_CH4;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 80020fa:	2232      	movs	r2, #50	@ 0x32
 80020fc:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 8002100:	2240      	movs	r2, #64	@ 0x40
 8002102:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002104:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800210a:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 800210c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002110:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 8002114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002118:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800211a:	4b17      	ldr	r3, [pc, #92]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 800211c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002120:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4.Init.Mode = DMA_NORMAL;
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 8002124:	2200      	movs	r2, #0
 8002126:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800212e:	4b12      	ldr	r3, [pc, #72]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4) != HAL_OK)
 8002134:	4810      	ldr	r0, [pc, #64]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 8002136:	f000 fa5d 	bl	80025f4 <HAL_DMA_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_TIM_Base_MspInit+0x1d8>
      Error_Handler();
 8002140:	f7fe ffd2 	bl	80010e8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a0c      	ldr	r2, [pc, #48]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30
 800214a:	4a0b      	ldr	r2, [pc, #44]	@ (8002178 <HAL_TIM_Base_MspInit+0x20c>)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	58024400 	.word	0x58024400
 800215c:	40010400 	.word	0x40010400
 8002160:	24000550 	.word	0x24000550
 8002164:	40020010 	.word	0x40020010
 8002168:	240005c8 	.word	0x240005c8
 800216c:	40020028 	.word	0x40020028
 8002170:	24000640 	.word	0x24000640
 8002174:	40020040 	.word	0x40020040
 8002178:	240006b8 	.word	0x240006b8
 800217c:	40020058 	.word	0x40020058

08002180 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a13      	ldr	r2, [pc, #76]	@ (80021ec <HAL_TIM_MspPostInit+0x6c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d11f      	bne.n	80021e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <HAL_TIM_MspPostInit+0x70>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a8:	4a11      	ldr	r2, [pc, #68]	@ (80021f0 <HAL_TIM_MspPostInit+0x70>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021b2:	4b0f      	ldr	r3, [pc, #60]	@ (80021f0 <HAL_TIM_MspPostInit+0x70>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021c0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80021c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80021d2:	2303      	movs	r3, #3
 80021d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	4805      	ldr	r0, [pc, #20]	@ (80021f4 <HAL_TIM_MspPostInit+0x74>)
 80021de:	f003 f851 	bl	8005284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80021e2:	bf00      	nop
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40010400 	.word	0x40010400
 80021f0:	58024400 	.word	0x58024400
 80021f4:	58020800 	.word	0x58020800

080021f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002234 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80021fc:	f7ff fd78 	bl	8001cf0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002200:	f7ff fcd6 	bl	8001bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002204:	480c      	ldr	r0, [pc, #48]	@ (8002238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002206:	490d      	ldr	r1, [pc, #52]	@ (800223c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002208:	4a0d      	ldr	r2, [pc, #52]	@ (8002240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800220a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800220c:	e002      	b.n	8002214 <LoopCopyDataInit>

0800220e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800220e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002212:	3304      	adds	r3, #4

08002214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002218:	d3f9      	bcc.n	800220e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800221a:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800221c:	4c0a      	ldr	r4, [pc, #40]	@ (8002248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002220:	e001      	b.n	8002226 <LoopFillZerobss>

08002222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002224:	3204      	adds	r2, #4

08002226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002228:	d3fb      	bcc.n	8002222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800222a:	f008 fbef 	bl	800aa0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222e:	f7fe fc77 	bl	8000b20 <main>
  bx  lr
 8002232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002234:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002238:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800223c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002240:	0800e108 	.word	0x0800e108
  ldr r2, =_sbss
 8002244:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002248:	24000880 	.word	0x24000880

0800224c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800224c:	e7fe      	b.n	800224c <ADC3_IRQHandler>
	...

08002250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002256:	2003      	movs	r0, #3
 8002258:	f000 f98c 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800225c:	f004 f826 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <HAL_Init+0x68>)
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	4913      	ldr	r1, [pc, #76]	@ (80022bc <HAL_Init+0x6c>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
 8002278:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800227a:	4b0f      	ldr	r3, [pc, #60]	@ (80022b8 <HAL_Init+0x68>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a0e      	ldr	r2, [pc, #56]	@ (80022bc <HAL_Init+0x6c>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	fa22 f303 	lsr.w	r3, r2, r3
 8002290:	4a0b      	ldr	r2, [pc, #44]	@ (80022c0 <HAL_Init+0x70>)
 8002292:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002294:	4a0b      	ldr	r2, [pc, #44]	@ (80022c4 <HAL_Init+0x74>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800229a:	200f      	movs	r0, #15
 800229c:	f000 f814 	bl	80022c8 <HAL_InitTick>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e002      	b.n	80022b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022aa:	f7ff faf9 	bl	80018a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	58024400 	.word	0x58024400
 80022bc:	0800d820 	.word	0x0800d820
 80022c0:	2400000c 	.word	0x2400000c
 80022c4:	24000008 	.word	0x24000008

080022c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80022d0:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <HAL_InitTick+0x60>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e021      	b.n	8002320 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <HAL_InitTick+0x64>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_InitTick+0x60>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f971 	bl	80025da <HAL_SYSTICK_Config>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e00e      	b.n	8002320 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0f      	cmp	r3, #15
 8002306:	d80a      	bhi.n	800231e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002308:	2200      	movs	r2, #0
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	f000 f93b 	bl	800258a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002314:	4a06      	ldr	r2, [pc, #24]	@ (8002330 <HAL_InitTick+0x68>)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e000      	b.n	8002320 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	24000014 	.word	0x24000014
 800232c:	24000008 	.word	0x24000008
 8002330:	24000010 	.word	0x24000010

08002334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_IncTick+0x20>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x24>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_IncTick+0x24>)
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	24000014 	.word	0x24000014
 8002358:	24000730 	.word	0x24000730

0800235c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return uwTick;
 8002360:	4b03      	ldr	r3, [pc, #12]	@ (8002370 <HAL_GetTick+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	24000730 	.word	0x24000730

08002374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff ffee 	bl	800235c <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d005      	beq.n	800239a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_Delay+0x44>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239a:	bf00      	nop
 800239c:	f7ff ffde 	bl	800235c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d8f7      	bhi.n	800239c <HAL_Delay+0x28>
  {
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	24000014 	.word	0x24000014

080023bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_GetREVID+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0c1b      	lsrs	r3, r3, #16
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	5c001000 	.word	0x5c001000

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <__NVIC_SetPriorityGrouping+0x40>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002402:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <__NVIC_SetPriorityGrouping+0x40>)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	60d3      	str	r3, [r2, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00
 8002418:	05fa0000 	.word	0x05fa0000

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	@ (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	@ (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	@ (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	@ 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	@ 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	210f      	movs	r1, #15
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f7ff ff8e 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff29 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002598:	f7ff ff40 	bl	800241c <__NVIC_GetPriorityGrouping>
 800259c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f7ff ff90 	bl	80024c8 <NVIC_EncodePriority>
 80025a8:	4602      	mov	r2, r0
 80025aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff5f 	bl	8002474 <__NVIC_SetPriority>
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff33 	bl	8002438 <__NVIC_EnableIRQ>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ffa4 	bl	8002530 <SysTick_Config>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff feae 	bl	800235c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d101      	bne.n	800260c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e316      	b.n	8002c3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a66      	ldr	r2, [pc, #408]	@ (80027ac <HAL_DMA_Init+0x1b8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d04a      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a65      	ldr	r2, [pc, #404]	@ (80027b0 <HAL_DMA_Init+0x1bc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d045      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a63      	ldr	r2, [pc, #396]	@ (80027b4 <HAL_DMA_Init+0x1c0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d040      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a62      	ldr	r2, [pc, #392]	@ (80027b8 <HAL_DMA_Init+0x1c4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d03b      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a60      	ldr	r2, [pc, #384]	@ (80027bc <HAL_DMA_Init+0x1c8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d036      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a5f      	ldr	r2, [pc, #380]	@ (80027c0 <HAL_DMA_Init+0x1cc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d031      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a5d      	ldr	r2, [pc, #372]	@ (80027c4 <HAL_DMA_Init+0x1d0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d02c      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a5c      	ldr	r2, [pc, #368]	@ (80027c8 <HAL_DMA_Init+0x1d4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d027      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a5a      	ldr	r2, [pc, #360]	@ (80027cc <HAL_DMA_Init+0x1d8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d022      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a59      	ldr	r2, [pc, #356]	@ (80027d0 <HAL_DMA_Init+0x1dc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d01d      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a57      	ldr	r2, [pc, #348]	@ (80027d4 <HAL_DMA_Init+0x1e0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d018      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a56      	ldr	r2, [pc, #344]	@ (80027d8 <HAL_DMA_Init+0x1e4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d013      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a54      	ldr	r2, [pc, #336]	@ (80027dc <HAL_DMA_Init+0x1e8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00e      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a53      	ldr	r2, [pc, #332]	@ (80027e0 <HAL_DMA_Init+0x1ec>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d009      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a51      	ldr	r2, [pc, #324]	@ (80027e4 <HAL_DMA_Init+0x1f0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d004      	beq.n	80026ac <HAL_DMA_Init+0xb8>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a50      	ldr	r2, [pc, #320]	@ (80027e8 <HAL_DMA_Init+0x1f4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d101      	bne.n	80026b0 <HAL_DMA_Init+0xbc>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <HAL_DMA_Init+0xbe>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 813b 	beq.w	800292e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a37      	ldr	r2, [pc, #220]	@ (80027ac <HAL_DMA_Init+0x1b8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d04a      	beq.n	8002768 <HAL_DMA_Init+0x174>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a36      	ldr	r2, [pc, #216]	@ (80027b0 <HAL_DMA_Init+0x1bc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d045      	beq.n	8002768 <HAL_DMA_Init+0x174>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a34      	ldr	r2, [pc, #208]	@ (80027b4 <HAL_DMA_Init+0x1c0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d040      	beq.n	8002768 <HAL_DMA_Init+0x174>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a33      	ldr	r2, [pc, #204]	@ (80027b8 <HAL_DMA_Init+0x1c4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d03b      	beq.n	8002768 <HAL_DMA_Init+0x174>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <HAL_DMA_Init+0x1c8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d036      	beq.n	8002768 <HAL_DMA_Init+0x174>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a30      	ldr	r2, [pc, #192]	@ (80027c0 <HAL_DMA_Init+0x1cc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d031      	beq.n	8002768 <HAL_DMA_Init+0x174>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2e      	ldr	r2, [pc, #184]	@ (80027c4 <HAL_DMA_Init+0x1d0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02c      	beq.n	8002768 <HAL_DMA_Init+0x174>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2d      	ldr	r2, [pc, #180]	@ (80027c8 <HAL_DMA_Init+0x1d4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d027      	beq.n	8002768 <HAL_DMA_Init+0x174>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2b      	ldr	r2, [pc, #172]	@ (80027cc <HAL_DMA_Init+0x1d8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d022      	beq.n	8002768 <HAL_DMA_Init+0x174>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a2a      	ldr	r2, [pc, #168]	@ (80027d0 <HAL_DMA_Init+0x1dc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d01d      	beq.n	8002768 <HAL_DMA_Init+0x174>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a28      	ldr	r2, [pc, #160]	@ (80027d4 <HAL_DMA_Init+0x1e0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d018      	beq.n	8002768 <HAL_DMA_Init+0x174>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a27      	ldr	r2, [pc, #156]	@ (80027d8 <HAL_DMA_Init+0x1e4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_DMA_Init+0x174>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a25      	ldr	r2, [pc, #148]	@ (80027dc <HAL_DMA_Init+0x1e8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00e      	beq.n	8002768 <HAL_DMA_Init+0x174>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a24      	ldr	r2, [pc, #144]	@ (80027e0 <HAL_DMA_Init+0x1ec>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_DMA_Init+0x174>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a22      	ldr	r2, [pc, #136]	@ (80027e4 <HAL_DMA_Init+0x1f0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_DMA_Init+0x174>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a21      	ldr	r2, [pc, #132]	@ (80027e8 <HAL_DMA_Init+0x1f4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d108      	bne.n	800277a <HAL_DMA_Init+0x186>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e007      	b.n	800278a <HAL_DMA_Init+0x196>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0201 	bic.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800278a:	e02f      	b.n	80027ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278c:	f7ff fde6 	bl	800235c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b05      	cmp	r3, #5
 8002798:	d928      	bls.n	80027ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2220      	movs	r2, #32
 800279e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2203      	movs	r2, #3
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e246      	b.n	8002c3a <HAL_DMA_Init+0x646>
 80027ac:	40020010 	.word	0x40020010
 80027b0:	40020028 	.word	0x40020028
 80027b4:	40020040 	.word	0x40020040
 80027b8:	40020058 	.word	0x40020058
 80027bc:	40020070 	.word	0x40020070
 80027c0:	40020088 	.word	0x40020088
 80027c4:	400200a0 	.word	0x400200a0
 80027c8:	400200b8 	.word	0x400200b8
 80027cc:	40020410 	.word	0x40020410
 80027d0:	40020428 	.word	0x40020428
 80027d4:	40020440 	.word	0x40020440
 80027d8:	40020458 	.word	0x40020458
 80027dc:	40020470 	.word	0x40020470
 80027e0:	40020488 	.word	0x40020488
 80027e4:	400204a0 	.word	0x400204a0
 80027e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1c8      	bne.n	800278c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4b83      	ldr	r3, [pc, #524]	@ (8002a14 <HAL_DMA_Init+0x420>)
 8002806:	4013      	ands	r3, r2
 8002808:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002812:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	2b04      	cmp	r3, #4
 800283e:	d107      	bne.n	8002850 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	4313      	orrs	r3, r2
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002850:	4b71      	ldr	r3, [pc, #452]	@ (8002a18 <HAL_DMA_Init+0x424>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b71      	ldr	r3, [pc, #452]	@ (8002a1c <HAL_DMA_Init+0x428>)
 8002856:	4013      	ands	r3, r2
 8002858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800285c:	d328      	bcc.n	80028b0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b28      	cmp	r3, #40	@ 0x28
 8002864:	d903      	bls.n	800286e <HAL_DMA_Init+0x27a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b2e      	cmp	r3, #46	@ 0x2e
 800286c:	d917      	bls.n	800289e <HAL_DMA_Init+0x2aa>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b3e      	cmp	r3, #62	@ 0x3e
 8002874:	d903      	bls.n	800287e <HAL_DMA_Init+0x28a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b42      	cmp	r3, #66	@ 0x42
 800287c:	d90f      	bls.n	800289e <HAL_DMA_Init+0x2aa>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b46      	cmp	r3, #70	@ 0x46
 8002884:	d903      	bls.n	800288e <HAL_DMA_Init+0x29a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b48      	cmp	r3, #72	@ 0x48
 800288c:	d907      	bls.n	800289e <HAL_DMA_Init+0x2aa>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b4e      	cmp	r3, #78	@ 0x4e
 8002894:	d905      	bls.n	80028a2 <HAL_DMA_Init+0x2ae>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b52      	cmp	r3, #82	@ 0x52
 800289c:	d801      	bhi.n	80028a2 <HAL_DMA_Init+0x2ae>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_DMA_Init+0x2b0>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 0307 	bic.w	r3, r3, #7
 80028c6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	d117      	bne.n	800290a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00e      	beq.n	800290a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f002 fb3f 	bl	8004f70 <DMA_CheckFifoParam>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e197      	b.n	8002c3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f002 fa7a 	bl	8004e0c <DMA_CalcBaseAndBitshift>
 8002918:	4603      	mov	r3, r0
 800291a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	223f      	movs	r2, #63	@ 0x3f
 8002926:	409a      	lsls	r2, r3
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	e0cd      	b.n	8002aca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a3b      	ldr	r2, [pc, #236]	@ (8002a20 <HAL_DMA_Init+0x42c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_DMA_Init+0x38a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a39      	ldr	r2, [pc, #228]	@ (8002a24 <HAL_DMA_Init+0x430>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01d      	beq.n	800297e <HAL_DMA_Init+0x38a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a38      	ldr	r2, [pc, #224]	@ (8002a28 <HAL_DMA_Init+0x434>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d018      	beq.n	800297e <HAL_DMA_Init+0x38a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a36      	ldr	r2, [pc, #216]	@ (8002a2c <HAL_DMA_Init+0x438>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_DMA_Init+0x38a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a35      	ldr	r2, [pc, #212]	@ (8002a30 <HAL_DMA_Init+0x43c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_DMA_Init+0x38a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a33      	ldr	r2, [pc, #204]	@ (8002a34 <HAL_DMA_Init+0x440>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_DMA_Init+0x38a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a32      	ldr	r2, [pc, #200]	@ (8002a38 <HAL_DMA_Init+0x444>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_DMA_Init+0x38a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a30      	ldr	r2, [pc, #192]	@ (8002a3c <HAL_DMA_Init+0x448>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d101      	bne.n	8002982 <HAL_DMA_Init+0x38e>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_DMA_Init+0x390>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8097 	beq.w	8002ab8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a24      	ldr	r2, [pc, #144]	@ (8002a20 <HAL_DMA_Init+0x42c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d021      	beq.n	80029d8 <HAL_DMA_Init+0x3e4>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a22      	ldr	r2, [pc, #136]	@ (8002a24 <HAL_DMA_Init+0x430>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d01c      	beq.n	80029d8 <HAL_DMA_Init+0x3e4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a21      	ldr	r2, [pc, #132]	@ (8002a28 <HAL_DMA_Init+0x434>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d017      	beq.n	80029d8 <HAL_DMA_Init+0x3e4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	@ (8002a2c <HAL_DMA_Init+0x438>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d012      	beq.n	80029d8 <HAL_DMA_Init+0x3e4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a30 <HAL_DMA_Init+0x43c>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00d      	beq.n	80029d8 <HAL_DMA_Init+0x3e4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <HAL_DMA_Init+0x440>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d008      	beq.n	80029d8 <HAL_DMA_Init+0x3e4>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002a38 <HAL_DMA_Init+0x444>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <HAL_DMA_Init+0x3e4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <HAL_DMA_Init+0x448>)
 80029d6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <HAL_DMA_Init+0x44c>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b40      	cmp	r3, #64	@ 0x40
 80029fe:	d021      	beq.n	8002a44 <HAL_DMA_Init+0x450>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b80      	cmp	r3, #128	@ 0x80
 8002a06:	d102      	bne.n	8002a0e <HAL_DMA_Init+0x41a>
 8002a08:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a0c:	e01b      	b.n	8002a46 <HAL_DMA_Init+0x452>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e019      	b.n	8002a46 <HAL_DMA_Init+0x452>
 8002a12:	bf00      	nop
 8002a14:	fe10803f 	.word	0xfe10803f
 8002a18:	5c001000 	.word	0x5c001000
 8002a1c:	ffff0000 	.word	0xffff0000
 8002a20:	58025408 	.word	0x58025408
 8002a24:	5802541c 	.word	0x5802541c
 8002a28:	58025430 	.word	0x58025430
 8002a2c:	58025444 	.word	0x58025444
 8002a30:	58025458 	.word	0x58025458
 8002a34:	5802546c 	.word	0x5802546c
 8002a38:	58025480 	.word	0x58025480
 8002a3c:	58025494 	.word	0x58025494
 8002a40:	fffe000f 	.word	0xfffe000f
 8002a44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002a54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002c44 <HAL_DMA_Init+0x650>)
 8002a8c:	4413      	add	r3, r2
 8002a8e:	4a6e      	ldr	r2, [pc, #440]	@ (8002c48 <HAL_DMA_Init+0x654>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f002 f9b5 	bl	8004e0c <DMA_CalcBaseAndBitshift>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2201      	movs	r2, #1
 8002ab0:	409a      	lsls	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	e008      	b.n	8002aca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2240      	movs	r2, #64	@ 0x40
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2203      	movs	r2, #3
 8002ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e0b7      	b.n	8002c3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5f      	ldr	r2, [pc, #380]	@ (8002c4c <HAL_DMA_Init+0x658>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d072      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c50 <HAL_DMA_Init+0x65c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d06d      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a5c      	ldr	r2, [pc, #368]	@ (8002c54 <HAL_DMA_Init+0x660>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d068      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a5a      	ldr	r2, [pc, #360]	@ (8002c58 <HAL_DMA_Init+0x664>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d063      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a59      	ldr	r2, [pc, #356]	@ (8002c5c <HAL_DMA_Init+0x668>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d05e      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a57      	ldr	r2, [pc, #348]	@ (8002c60 <HAL_DMA_Init+0x66c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d059      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a56      	ldr	r2, [pc, #344]	@ (8002c64 <HAL_DMA_Init+0x670>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d054      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a54      	ldr	r2, [pc, #336]	@ (8002c68 <HAL_DMA_Init+0x674>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d04f      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a53      	ldr	r2, [pc, #332]	@ (8002c6c <HAL_DMA_Init+0x678>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d04a      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a51      	ldr	r2, [pc, #324]	@ (8002c70 <HAL_DMA_Init+0x67c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d045      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a50      	ldr	r2, [pc, #320]	@ (8002c74 <HAL_DMA_Init+0x680>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d040      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8002c78 <HAL_DMA_Init+0x684>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d03b      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a4d      	ldr	r2, [pc, #308]	@ (8002c7c <HAL_DMA_Init+0x688>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d036      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a4b      	ldr	r2, [pc, #300]	@ (8002c80 <HAL_DMA_Init+0x68c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d031      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a4a      	ldr	r2, [pc, #296]	@ (8002c84 <HAL_DMA_Init+0x690>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d02c      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a48      	ldr	r2, [pc, #288]	@ (8002c88 <HAL_DMA_Init+0x694>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d027      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a47      	ldr	r2, [pc, #284]	@ (8002c8c <HAL_DMA_Init+0x698>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d022      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a45      	ldr	r2, [pc, #276]	@ (8002c90 <HAL_DMA_Init+0x69c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01d      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a44      	ldr	r2, [pc, #272]	@ (8002c94 <HAL_DMA_Init+0x6a0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d018      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a42      	ldr	r2, [pc, #264]	@ (8002c98 <HAL_DMA_Init+0x6a4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d013      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a41      	ldr	r2, [pc, #260]	@ (8002c9c <HAL_DMA_Init+0x6a8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00e      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a3f      	ldr	r2, [pc, #252]	@ (8002ca0 <HAL_DMA_Init+0x6ac>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d009      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a3e      	ldr	r2, [pc, #248]	@ (8002ca4 <HAL_DMA_Init+0x6b0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_Init+0x5c6>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ca8 <HAL_DMA_Init+0x6b4>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d101      	bne.n	8002bbe <HAL_DMA_Init+0x5ca>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_DMA_Init+0x5cc>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d032      	beq.n	8002c2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f002 fa4f 	bl	8005068 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b80      	cmp	r3, #128	@ 0x80
 8002bd0:	d102      	bne.n	8002bd8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002bec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <HAL_DMA_Init+0x624>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d80c      	bhi.n	8002c18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f002 facc 	bl	800519c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	e008      	b.n	8002c2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	a7fdabf8 	.word	0xa7fdabf8
 8002c48:	cccccccd 	.word	0xcccccccd
 8002c4c:	40020010 	.word	0x40020010
 8002c50:	40020028 	.word	0x40020028
 8002c54:	40020040 	.word	0x40020040
 8002c58:	40020058 	.word	0x40020058
 8002c5c:	40020070 	.word	0x40020070
 8002c60:	40020088 	.word	0x40020088
 8002c64:	400200a0 	.word	0x400200a0
 8002c68:	400200b8 	.word	0x400200b8
 8002c6c:	40020410 	.word	0x40020410
 8002c70:	40020428 	.word	0x40020428
 8002c74:	40020440 	.word	0x40020440
 8002c78:	40020458 	.word	0x40020458
 8002c7c:	40020470 	.word	0x40020470
 8002c80:	40020488 	.word	0x40020488
 8002c84:	400204a0 	.word	0x400204a0
 8002c88:	400204b8 	.word	0x400204b8
 8002c8c:	58025408 	.word	0x58025408
 8002c90:	5802541c 	.word	0x5802541c
 8002c94:	58025430 	.word	0x58025430
 8002c98:	58025444 	.word	0x58025444
 8002c9c:	58025458 	.word	0x58025458
 8002ca0:	5802546c 	.word	0x5802546c
 8002ca4:	58025480 	.word	0x58025480
 8002ca8:	58025494 	.word	0x58025494

08002cac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e226      	b.n	8003116 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_DMA_Start_IT+0x2a>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e21f      	b.n	8003116 <HAL_DMA_Start_IT+0x46a>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	f040 820a 	bne.w	8003100 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a68      	ldr	r2, [pc, #416]	@ (8002ea0 <HAL_DMA_Start_IT+0x1f4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d04a      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a66      	ldr	r2, [pc, #408]	@ (8002ea4 <HAL_DMA_Start_IT+0x1f8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d045      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a65      	ldr	r2, [pc, #404]	@ (8002ea8 <HAL_DMA_Start_IT+0x1fc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d040      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a63      	ldr	r2, [pc, #396]	@ (8002eac <HAL_DMA_Start_IT+0x200>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d03b      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a62      	ldr	r2, [pc, #392]	@ (8002eb0 <HAL_DMA_Start_IT+0x204>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d036      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a60      	ldr	r2, [pc, #384]	@ (8002eb4 <HAL_DMA_Start_IT+0x208>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d031      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5f      	ldr	r2, [pc, #380]	@ (8002eb8 <HAL_DMA_Start_IT+0x20c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d02c      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5d      	ldr	r2, [pc, #372]	@ (8002ebc <HAL_DMA_Start_IT+0x210>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d027      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ec0 <HAL_DMA_Start_IT+0x214>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d022      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a5a      	ldr	r2, [pc, #360]	@ (8002ec4 <HAL_DMA_Start_IT+0x218>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d01d      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a59      	ldr	r2, [pc, #356]	@ (8002ec8 <HAL_DMA_Start_IT+0x21c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d018      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a57      	ldr	r2, [pc, #348]	@ (8002ecc <HAL_DMA_Start_IT+0x220>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a56      	ldr	r2, [pc, #344]	@ (8002ed0 <HAL_DMA_Start_IT+0x224>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a54      	ldr	r2, [pc, #336]	@ (8002ed4 <HAL_DMA_Start_IT+0x228>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a53      	ldr	r2, [pc, #332]	@ (8002ed8 <HAL_DMA_Start_IT+0x22c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_DMA_Start_IT+0xee>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a51      	ldr	r2, [pc, #324]	@ (8002edc <HAL_DMA_Start_IT+0x230>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <HAL_DMA_Start_IT+0x100>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e007      	b.n	8002dbc <HAL_DMA_Start_IT+0x110>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f001 fe76 	bl	8004ab4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a34      	ldr	r2, [pc, #208]	@ (8002ea0 <HAL_DMA_Start_IT+0x1f4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d04a      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	@ (8002ea4 <HAL_DMA_Start_IT+0x1f8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d045      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a31      	ldr	r2, [pc, #196]	@ (8002ea8 <HAL_DMA_Start_IT+0x1fc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d040      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a30      	ldr	r2, [pc, #192]	@ (8002eac <HAL_DMA_Start_IT+0x200>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d03b      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb0 <HAL_DMA_Start_IT+0x204>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d036      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb4 <HAL_DMA_Start_IT+0x208>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d031      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb8 <HAL_DMA_Start_IT+0x20c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02c      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2a      	ldr	r2, [pc, #168]	@ (8002ebc <HAL_DMA_Start_IT+0x210>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d027      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	@ (8002ec0 <HAL_DMA_Start_IT+0x214>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d022      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a27      	ldr	r2, [pc, #156]	@ (8002ec4 <HAL_DMA_Start_IT+0x218>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d01d      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a25      	ldr	r2, [pc, #148]	@ (8002ec8 <HAL_DMA_Start_IT+0x21c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a24      	ldr	r2, [pc, #144]	@ (8002ecc <HAL_DMA_Start_IT+0x220>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a22      	ldr	r2, [pc, #136]	@ (8002ed0 <HAL_DMA_Start_IT+0x224>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	@ (8002ed4 <HAL_DMA_Start_IT+0x228>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1f      	ldr	r2, [pc, #124]	@ (8002ed8 <HAL_DMA_Start_IT+0x22c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_DMA_Start_IT+0x1bc>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1e      	ldr	r2, [pc, #120]	@ (8002edc <HAL_DMA_Start_IT+0x230>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d101      	bne.n	8002e6c <HAL_DMA_Start_IT+0x1c0>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <HAL_DMA_Start_IT+0x1c2>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d036      	beq.n	8002ee0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 021e 	bic.w	r2, r3, #30
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0216 	orr.w	r2, r2, #22
 8002e84:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03e      	beq.n	8002f0c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0208 	orr.w	r2, r2, #8
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e035      	b.n	8002f0c <HAL_DMA_Start_IT+0x260>
 8002ea0:	40020010 	.word	0x40020010
 8002ea4:	40020028 	.word	0x40020028
 8002ea8:	40020040 	.word	0x40020040
 8002eac:	40020058 	.word	0x40020058
 8002eb0:	40020070 	.word	0x40020070
 8002eb4:	40020088 	.word	0x40020088
 8002eb8:	400200a0 	.word	0x400200a0
 8002ebc:	400200b8 	.word	0x400200b8
 8002ec0:	40020410 	.word	0x40020410
 8002ec4:	40020428 	.word	0x40020428
 8002ec8:	40020440 	.word	0x40020440
 8002ecc:	40020458 	.word	0x40020458
 8002ed0:	40020470 	.word	0x40020470
 8002ed4:	40020488 	.word	0x40020488
 8002ed8:	400204a0 	.word	0x400204a0
 8002edc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 020e 	bic.w	r2, r3, #14
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 020a 	orr.w	r2, r2, #10
 8002ef2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0204 	orr.w	r2, r2, #4
 8002f0a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a83      	ldr	r2, [pc, #524]	@ (8003120 <HAL_DMA_Start_IT+0x474>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d072      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a82      	ldr	r2, [pc, #520]	@ (8003124 <HAL_DMA_Start_IT+0x478>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d06d      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a80      	ldr	r2, [pc, #512]	@ (8003128 <HAL_DMA_Start_IT+0x47c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d068      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7f      	ldr	r2, [pc, #508]	@ (800312c <HAL_DMA_Start_IT+0x480>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d063      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a7d      	ldr	r2, [pc, #500]	@ (8003130 <HAL_DMA_Start_IT+0x484>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d05e      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7c      	ldr	r2, [pc, #496]	@ (8003134 <HAL_DMA_Start_IT+0x488>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d059      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a7a      	ldr	r2, [pc, #488]	@ (8003138 <HAL_DMA_Start_IT+0x48c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d054      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a79      	ldr	r2, [pc, #484]	@ (800313c <HAL_DMA_Start_IT+0x490>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d04f      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a77      	ldr	r2, [pc, #476]	@ (8003140 <HAL_DMA_Start_IT+0x494>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d04a      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a76      	ldr	r2, [pc, #472]	@ (8003144 <HAL_DMA_Start_IT+0x498>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d045      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a74      	ldr	r2, [pc, #464]	@ (8003148 <HAL_DMA_Start_IT+0x49c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d040      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a73      	ldr	r2, [pc, #460]	@ (800314c <HAL_DMA_Start_IT+0x4a0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d03b      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a71      	ldr	r2, [pc, #452]	@ (8003150 <HAL_DMA_Start_IT+0x4a4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d036      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a70      	ldr	r2, [pc, #448]	@ (8003154 <HAL_DMA_Start_IT+0x4a8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d031      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8003158 <HAL_DMA_Start_IT+0x4ac>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d02c      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6d      	ldr	r2, [pc, #436]	@ (800315c <HAL_DMA_Start_IT+0x4b0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d027      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6b      	ldr	r2, [pc, #428]	@ (8003160 <HAL_DMA_Start_IT+0x4b4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d022      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6a      	ldr	r2, [pc, #424]	@ (8003164 <HAL_DMA_Start_IT+0x4b8>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d01d      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a68      	ldr	r2, [pc, #416]	@ (8003168 <HAL_DMA_Start_IT+0x4bc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d018      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a67      	ldr	r2, [pc, #412]	@ (800316c <HAL_DMA_Start_IT+0x4c0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a65      	ldr	r2, [pc, #404]	@ (8003170 <HAL_DMA_Start_IT+0x4c4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00e      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a64      	ldr	r2, [pc, #400]	@ (8003174 <HAL_DMA_Start_IT+0x4c8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a62      	ldr	r2, [pc, #392]	@ (8003178 <HAL_DMA_Start_IT+0x4cc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_DMA_Start_IT+0x350>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a61      	ldr	r2, [pc, #388]	@ (800317c <HAL_DMA_Start_IT+0x4d0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_DMA_Start_IT+0x354>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_DMA_Start_IT+0x356>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01a      	beq.n	800303c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003022:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003036:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800303a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a37      	ldr	r2, [pc, #220]	@ (8003120 <HAL_DMA_Start_IT+0x474>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d04a      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a36      	ldr	r2, [pc, #216]	@ (8003124 <HAL_DMA_Start_IT+0x478>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d045      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a34      	ldr	r2, [pc, #208]	@ (8003128 <HAL_DMA_Start_IT+0x47c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d040      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a33      	ldr	r2, [pc, #204]	@ (800312c <HAL_DMA_Start_IT+0x480>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d03b      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a31      	ldr	r2, [pc, #196]	@ (8003130 <HAL_DMA_Start_IT+0x484>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d036      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a30      	ldr	r2, [pc, #192]	@ (8003134 <HAL_DMA_Start_IT+0x488>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d031      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2e      	ldr	r2, [pc, #184]	@ (8003138 <HAL_DMA_Start_IT+0x48c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d02c      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2d      	ldr	r2, [pc, #180]	@ (800313c <HAL_DMA_Start_IT+0x490>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d027      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2b      	ldr	r2, [pc, #172]	@ (8003140 <HAL_DMA_Start_IT+0x494>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d022      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2a      	ldr	r2, [pc, #168]	@ (8003144 <HAL_DMA_Start_IT+0x498>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d01d      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a28      	ldr	r2, [pc, #160]	@ (8003148 <HAL_DMA_Start_IT+0x49c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d018      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a27      	ldr	r2, [pc, #156]	@ (800314c <HAL_DMA_Start_IT+0x4a0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d013      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a25      	ldr	r2, [pc, #148]	@ (8003150 <HAL_DMA_Start_IT+0x4a4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00e      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a24      	ldr	r2, [pc, #144]	@ (8003154 <HAL_DMA_Start_IT+0x4a8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d009      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <HAL_DMA_Start_IT+0x4ac>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d004      	beq.n	80030dc <HAL_DMA_Start_IT+0x430>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a21      	ldr	r2, [pc, #132]	@ (800315c <HAL_DMA_Start_IT+0x4b0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d108      	bne.n	80030ee <HAL_DMA_Start_IT+0x442>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e012      	b.n	8003114 <HAL_DMA_Start_IT+0x468>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e009      	b.n	8003114 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003106:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003114:	7dfb      	ldrb	r3, [r7, #23]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40020010 	.word	0x40020010
 8003124:	40020028 	.word	0x40020028
 8003128:	40020040 	.word	0x40020040
 800312c:	40020058 	.word	0x40020058
 8003130:	40020070 	.word	0x40020070
 8003134:	40020088 	.word	0x40020088
 8003138:	400200a0 	.word	0x400200a0
 800313c:	400200b8 	.word	0x400200b8
 8003140:	40020410 	.word	0x40020410
 8003144:	40020428 	.word	0x40020428
 8003148:	40020440 	.word	0x40020440
 800314c:	40020458 	.word	0x40020458
 8003150:	40020470 	.word	0x40020470
 8003154:	40020488 	.word	0x40020488
 8003158:	400204a0 	.word	0x400204a0
 800315c:	400204b8 	.word	0x400204b8
 8003160:	58025408 	.word	0x58025408
 8003164:	5802541c 	.word	0x5802541c
 8003168:	58025430 	.word	0x58025430
 800316c:	58025444 	.word	0x58025444
 8003170:	58025458 	.word	0x58025458
 8003174:	5802546c 	.word	0x5802546c
 8003178:	58025480 	.word	0x58025480
 800317c:	58025494 	.word	0x58025494

08003180 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003188:	f7ff f8e8 	bl	800235c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e2dc      	b.n	8003752 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d008      	beq.n	80031b6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2280      	movs	r2, #128	@ 0x80
 80031a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e2cd      	b.n	8003752 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a76      	ldr	r2, [pc, #472]	@ (8003394 <HAL_DMA_Abort+0x214>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d04a      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a74      	ldr	r2, [pc, #464]	@ (8003398 <HAL_DMA_Abort+0x218>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d045      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a73      	ldr	r2, [pc, #460]	@ (800339c <HAL_DMA_Abort+0x21c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d040      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a71      	ldr	r2, [pc, #452]	@ (80033a0 <HAL_DMA_Abort+0x220>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d03b      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a70      	ldr	r2, [pc, #448]	@ (80033a4 <HAL_DMA_Abort+0x224>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d036      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6e      	ldr	r2, [pc, #440]	@ (80033a8 <HAL_DMA_Abort+0x228>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d031      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6d      	ldr	r2, [pc, #436]	@ (80033ac <HAL_DMA_Abort+0x22c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d02c      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a6b      	ldr	r2, [pc, #428]	@ (80033b0 <HAL_DMA_Abort+0x230>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d027      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a6a      	ldr	r2, [pc, #424]	@ (80033b4 <HAL_DMA_Abort+0x234>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a68      	ldr	r2, [pc, #416]	@ (80033b8 <HAL_DMA_Abort+0x238>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01d      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a67      	ldr	r2, [pc, #412]	@ (80033bc <HAL_DMA_Abort+0x23c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a65      	ldr	r2, [pc, #404]	@ (80033c0 <HAL_DMA_Abort+0x240>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a64      	ldr	r2, [pc, #400]	@ (80033c4 <HAL_DMA_Abort+0x244>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a62      	ldr	r2, [pc, #392]	@ (80033c8 <HAL_DMA_Abort+0x248>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a61      	ldr	r2, [pc, #388]	@ (80033cc <HAL_DMA_Abort+0x24c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_DMA_Abort+0xd6>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a5f      	ldr	r2, [pc, #380]	@ (80033d0 <HAL_DMA_Abort+0x250>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_DMA_Abort+0xda>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_DMA_Abort+0xdc>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 021e 	bic.w	r2, r2, #30
 800326e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800327e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e00a      	b.n	800329e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 020e 	bic.w	r2, r2, #14
 8003296:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003394 <HAL_DMA_Abort+0x214>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d072      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003398 <HAL_DMA_Abort+0x218>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d06d      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a39      	ldr	r2, [pc, #228]	@ (800339c <HAL_DMA_Abort+0x21c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d068      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a37      	ldr	r2, [pc, #220]	@ (80033a0 <HAL_DMA_Abort+0x220>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d063      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a36      	ldr	r2, [pc, #216]	@ (80033a4 <HAL_DMA_Abort+0x224>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d05e      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a34      	ldr	r2, [pc, #208]	@ (80033a8 <HAL_DMA_Abort+0x228>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d059      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a33      	ldr	r2, [pc, #204]	@ (80033ac <HAL_DMA_Abort+0x22c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d054      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a31      	ldr	r2, [pc, #196]	@ (80033b0 <HAL_DMA_Abort+0x230>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04f      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a30      	ldr	r2, [pc, #192]	@ (80033b4 <HAL_DMA_Abort+0x234>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d04a      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a2e      	ldr	r2, [pc, #184]	@ (80033b8 <HAL_DMA_Abort+0x238>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d045      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2d      	ldr	r2, [pc, #180]	@ (80033bc <HAL_DMA_Abort+0x23c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d040      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2b      	ldr	r2, [pc, #172]	@ (80033c0 <HAL_DMA_Abort+0x240>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d03b      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2a      	ldr	r2, [pc, #168]	@ (80033c4 <HAL_DMA_Abort+0x244>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d036      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a28      	ldr	r2, [pc, #160]	@ (80033c8 <HAL_DMA_Abort+0x248>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a27      	ldr	r2, [pc, #156]	@ (80033cc <HAL_DMA_Abort+0x24c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d02c      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a25      	ldr	r2, [pc, #148]	@ (80033d0 <HAL_DMA_Abort+0x250>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d027      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a24      	ldr	r2, [pc, #144]	@ (80033d4 <HAL_DMA_Abort+0x254>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <HAL_DMA_Abort+0x258>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01d      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a21      	ldr	r2, [pc, #132]	@ (80033dc <HAL_DMA_Abort+0x25c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1f      	ldr	r2, [pc, #124]	@ (80033e0 <HAL_DMA_Abort+0x260>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1e      	ldr	r2, [pc, #120]	@ (80033e4 <HAL_DMA_Abort+0x264>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1c      	ldr	r2, [pc, #112]	@ (80033e8 <HAL_DMA_Abort+0x268>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1b      	ldr	r2, [pc, #108]	@ (80033ec <HAL_DMA_Abort+0x26c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_DMA_Abort+0x20e>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <HAL_DMA_Abort+0x270>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d132      	bne.n	80033f4 <HAL_DMA_Abort+0x274>
 800338e:	2301      	movs	r3, #1
 8003390:	e031      	b.n	80033f6 <HAL_DMA_Abort+0x276>
 8003392:	bf00      	nop
 8003394:	40020010 	.word	0x40020010
 8003398:	40020028 	.word	0x40020028
 800339c:	40020040 	.word	0x40020040
 80033a0:	40020058 	.word	0x40020058
 80033a4:	40020070 	.word	0x40020070
 80033a8:	40020088 	.word	0x40020088
 80033ac:	400200a0 	.word	0x400200a0
 80033b0:	400200b8 	.word	0x400200b8
 80033b4:	40020410 	.word	0x40020410
 80033b8:	40020428 	.word	0x40020428
 80033bc:	40020440 	.word	0x40020440
 80033c0:	40020458 	.word	0x40020458
 80033c4:	40020470 	.word	0x40020470
 80033c8:	40020488 	.word	0x40020488
 80033cc:	400204a0 	.word	0x400204a0
 80033d0:	400204b8 	.word	0x400204b8
 80033d4:	58025408 	.word	0x58025408
 80033d8:	5802541c 	.word	0x5802541c
 80033dc:	58025430 	.word	0x58025430
 80033e0:	58025444 	.word	0x58025444
 80033e4:	58025458 	.word	0x58025458
 80033e8:	5802546c 	.word	0x5802546c
 80033ec:	58025480 	.word	0x58025480
 80033f0:	58025494 	.word	0x58025494
 80033f4:	2300      	movs	r3, #0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003404:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003408:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6d      	ldr	r2, [pc, #436]	@ (80035c4 <HAL_DMA_Abort+0x444>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d04a      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a6b      	ldr	r2, [pc, #428]	@ (80035c8 <HAL_DMA_Abort+0x448>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d045      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6a      	ldr	r2, [pc, #424]	@ (80035cc <HAL_DMA_Abort+0x44c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d040      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a68      	ldr	r2, [pc, #416]	@ (80035d0 <HAL_DMA_Abort+0x450>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d03b      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a67      	ldr	r2, [pc, #412]	@ (80035d4 <HAL_DMA_Abort+0x454>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d036      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a65      	ldr	r2, [pc, #404]	@ (80035d8 <HAL_DMA_Abort+0x458>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d031      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a64      	ldr	r2, [pc, #400]	@ (80035dc <HAL_DMA_Abort+0x45c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d02c      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a62      	ldr	r2, [pc, #392]	@ (80035e0 <HAL_DMA_Abort+0x460>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d027      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a61      	ldr	r2, [pc, #388]	@ (80035e4 <HAL_DMA_Abort+0x464>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a5f      	ldr	r2, [pc, #380]	@ (80035e8 <HAL_DMA_Abort+0x468>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d01d      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5e      	ldr	r2, [pc, #376]	@ (80035ec <HAL_DMA_Abort+0x46c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d018      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a5c      	ldr	r2, [pc, #368]	@ (80035f0 <HAL_DMA_Abort+0x470>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a5b      	ldr	r2, [pc, #364]	@ (80035f4 <HAL_DMA_Abort+0x474>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a59      	ldr	r2, [pc, #356]	@ (80035f8 <HAL_DMA_Abort+0x478>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a58      	ldr	r2, [pc, #352]	@ (80035fc <HAL_DMA_Abort+0x47c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_DMA_Abort+0x32a>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a56      	ldr	r2, [pc, #344]	@ (8003600 <HAL_DMA_Abort+0x480>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d108      	bne.n	80034bc <HAL_DMA_Abort+0x33c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e007      	b.n	80034cc <HAL_DMA_Abort+0x34c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034cc:	e013      	b.n	80034f6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034ce:	f7fe ff45 	bl	800235c <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b05      	cmp	r3, #5
 80034da:	d90c      	bls.n	80034f6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2203      	movs	r2, #3
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e12d      	b.n	8003752 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1e5      	bne.n	80034ce <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2f      	ldr	r2, [pc, #188]	@ (80035c4 <HAL_DMA_Abort+0x444>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d04a      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2d      	ldr	r2, [pc, #180]	@ (80035c8 <HAL_DMA_Abort+0x448>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d045      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2c      	ldr	r2, [pc, #176]	@ (80035cc <HAL_DMA_Abort+0x44c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d040      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2a      	ldr	r2, [pc, #168]	@ (80035d0 <HAL_DMA_Abort+0x450>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d03b      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a29      	ldr	r2, [pc, #164]	@ (80035d4 <HAL_DMA_Abort+0x454>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d036      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a27      	ldr	r2, [pc, #156]	@ (80035d8 <HAL_DMA_Abort+0x458>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d031      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a26      	ldr	r2, [pc, #152]	@ (80035dc <HAL_DMA_Abort+0x45c>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d02c      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a24      	ldr	r2, [pc, #144]	@ (80035e0 <HAL_DMA_Abort+0x460>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d027      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a23      	ldr	r2, [pc, #140]	@ (80035e4 <HAL_DMA_Abort+0x464>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d022      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a21      	ldr	r2, [pc, #132]	@ (80035e8 <HAL_DMA_Abort+0x468>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d01d      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a20      	ldr	r2, [pc, #128]	@ (80035ec <HAL_DMA_Abort+0x46c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d018      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a1e      	ldr	r2, [pc, #120]	@ (80035f0 <HAL_DMA_Abort+0x470>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a1d      	ldr	r2, [pc, #116]	@ (80035f4 <HAL_DMA_Abort+0x474>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00e      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a1b      	ldr	r2, [pc, #108]	@ (80035f8 <HAL_DMA_Abort+0x478>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d009      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1a      	ldr	r2, [pc, #104]	@ (80035fc <HAL_DMA_Abort+0x47c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d004      	beq.n	80035a2 <HAL_DMA_Abort+0x422>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a18      	ldr	r2, [pc, #96]	@ (8003600 <HAL_DMA_Abort+0x480>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d101      	bne.n	80035a6 <HAL_DMA_Abort+0x426>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_DMA_Abort+0x428>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d02b      	beq.n	8003604 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	223f      	movs	r2, #63	@ 0x3f
 80035bc:	409a      	lsls	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	e02a      	b.n	800361a <HAL_DMA_Abort+0x49a>
 80035c4:	40020010 	.word	0x40020010
 80035c8:	40020028 	.word	0x40020028
 80035cc:	40020040 	.word	0x40020040
 80035d0:	40020058 	.word	0x40020058
 80035d4:	40020070 	.word	0x40020070
 80035d8:	40020088 	.word	0x40020088
 80035dc:	400200a0 	.word	0x400200a0
 80035e0:	400200b8 	.word	0x400200b8
 80035e4:	40020410 	.word	0x40020410
 80035e8:	40020428 	.word	0x40020428
 80035ec:	40020440 	.word	0x40020440
 80035f0:	40020458 	.word	0x40020458
 80035f4:	40020470 	.word	0x40020470
 80035f8:	40020488 	.word	0x40020488
 80035fc:	400204a0 	.word	0x400204a0
 8003600:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003608:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2201      	movs	r2, #1
 8003614:	409a      	lsls	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a4f      	ldr	r2, [pc, #316]	@ (800375c <HAL_DMA_Abort+0x5dc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d072      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a4d      	ldr	r2, [pc, #308]	@ (8003760 <HAL_DMA_Abort+0x5e0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d06d      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a4c      	ldr	r2, [pc, #304]	@ (8003764 <HAL_DMA_Abort+0x5e4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d068      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a4a      	ldr	r2, [pc, #296]	@ (8003768 <HAL_DMA_Abort+0x5e8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d063      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a49      	ldr	r2, [pc, #292]	@ (800376c <HAL_DMA_Abort+0x5ec>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d05e      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a47      	ldr	r2, [pc, #284]	@ (8003770 <HAL_DMA_Abort+0x5f0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d059      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a46      	ldr	r2, [pc, #280]	@ (8003774 <HAL_DMA_Abort+0x5f4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d054      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a44      	ldr	r2, [pc, #272]	@ (8003778 <HAL_DMA_Abort+0x5f8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d04f      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a43      	ldr	r2, [pc, #268]	@ (800377c <HAL_DMA_Abort+0x5fc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04a      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a41      	ldr	r2, [pc, #260]	@ (8003780 <HAL_DMA_Abort+0x600>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d045      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a40      	ldr	r2, [pc, #256]	@ (8003784 <HAL_DMA_Abort+0x604>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d040      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a3e      	ldr	r2, [pc, #248]	@ (8003788 <HAL_DMA_Abort+0x608>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d03b      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a3d      	ldr	r2, [pc, #244]	@ (800378c <HAL_DMA_Abort+0x60c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d036      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003790 <HAL_DMA_Abort+0x610>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d031      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003794 <HAL_DMA_Abort+0x614>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02c      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a38      	ldr	r2, [pc, #224]	@ (8003798 <HAL_DMA_Abort+0x618>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d027      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a37      	ldr	r2, [pc, #220]	@ (800379c <HAL_DMA_Abort+0x61c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a35      	ldr	r2, [pc, #212]	@ (80037a0 <HAL_DMA_Abort+0x620>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01d      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a34      	ldr	r2, [pc, #208]	@ (80037a4 <HAL_DMA_Abort+0x624>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a32      	ldr	r2, [pc, #200]	@ (80037a8 <HAL_DMA_Abort+0x628>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a31      	ldr	r2, [pc, #196]	@ (80037ac <HAL_DMA_Abort+0x62c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a2f      	ldr	r2, [pc, #188]	@ (80037b0 <HAL_DMA_Abort+0x630>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2e      	ldr	r2, [pc, #184]	@ (80037b4 <HAL_DMA_Abort+0x634>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_Abort+0x58a>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2c      	ldr	r2, [pc, #176]	@ (80037b8 <HAL_DMA_Abort+0x638>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_DMA_Abort+0x58e>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_DMA_Abort+0x590>
 800370e:	2300      	movs	r3, #0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800371c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003734:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800373e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40020010 	.word	0x40020010
 8003760:	40020028 	.word	0x40020028
 8003764:	40020040 	.word	0x40020040
 8003768:	40020058 	.word	0x40020058
 800376c:	40020070 	.word	0x40020070
 8003770:	40020088 	.word	0x40020088
 8003774:	400200a0 	.word	0x400200a0
 8003778:	400200b8 	.word	0x400200b8
 800377c:	40020410 	.word	0x40020410
 8003780:	40020428 	.word	0x40020428
 8003784:	40020440 	.word	0x40020440
 8003788:	40020458 	.word	0x40020458
 800378c:	40020470 	.word	0x40020470
 8003790:	40020488 	.word	0x40020488
 8003794:	400204a0 	.word	0x400204a0
 8003798:	400204b8 	.word	0x400204b8
 800379c:	58025408 	.word	0x58025408
 80037a0:	5802541c 	.word	0x5802541c
 80037a4:	58025430 	.word	0x58025430
 80037a8:	58025444 	.word	0x58025444
 80037ac:	58025458 	.word	0x58025458
 80037b0:	5802546c 	.word	0x5802546c
 80037b4:	58025480 	.word	0x58025480
 80037b8:	58025494 	.word	0x58025494

080037bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e237      	b.n	8003c3e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d004      	beq.n	80037e4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e22c      	b.n	8003c3e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5c      	ldr	r2, [pc, #368]	@ (800395c <HAL_DMA_Abort_IT+0x1a0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d04a      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003960 <HAL_DMA_Abort_IT+0x1a4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d045      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a59      	ldr	r2, [pc, #356]	@ (8003964 <HAL_DMA_Abort_IT+0x1a8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d040      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a58      	ldr	r2, [pc, #352]	@ (8003968 <HAL_DMA_Abort_IT+0x1ac>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d03b      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a56      	ldr	r2, [pc, #344]	@ (800396c <HAL_DMA_Abort_IT+0x1b0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d036      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a55      	ldr	r2, [pc, #340]	@ (8003970 <HAL_DMA_Abort_IT+0x1b4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d031      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a53      	ldr	r2, [pc, #332]	@ (8003974 <HAL_DMA_Abort_IT+0x1b8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d02c      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a52      	ldr	r2, [pc, #328]	@ (8003978 <HAL_DMA_Abort_IT+0x1bc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d027      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a50      	ldr	r2, [pc, #320]	@ (800397c <HAL_DMA_Abort_IT+0x1c0>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d022      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4f      	ldr	r2, [pc, #316]	@ (8003980 <HAL_DMA_Abort_IT+0x1c4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a4d      	ldr	r2, [pc, #308]	@ (8003984 <HAL_DMA_Abort_IT+0x1c8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d018      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a4c      	ldr	r2, [pc, #304]	@ (8003988 <HAL_DMA_Abort_IT+0x1cc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a4a      	ldr	r2, [pc, #296]	@ (800398c <HAL_DMA_Abort_IT+0x1d0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00e      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a49      	ldr	r2, [pc, #292]	@ (8003990 <HAL_DMA_Abort_IT+0x1d4>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d009      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a47      	ldr	r2, [pc, #284]	@ (8003994 <HAL_DMA_Abort_IT+0x1d8>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d004      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc8>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a46      	ldr	r2, [pc, #280]	@ (8003998 <HAL_DMA_Abort_IT+0x1dc>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <HAL_DMA_Abort_IT+0xcc>
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_DMA_Abort_IT+0xce>
 8003888:	2300      	movs	r3, #0
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8086 	beq.w	800399c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2f      	ldr	r2, [pc, #188]	@ (800395c <HAL_DMA_Abort_IT+0x1a0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d04a      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003960 <HAL_DMA_Abort_IT+0x1a4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d045      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003964 <HAL_DMA_Abort_IT+0x1a8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d040      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003968 <HAL_DMA_Abort_IT+0x1ac>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d03b      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a29      	ldr	r2, [pc, #164]	@ (800396c <HAL_DMA_Abort_IT+0x1b0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d036      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a28      	ldr	r2, [pc, #160]	@ (8003970 <HAL_DMA_Abort_IT+0x1b4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d031      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a26      	ldr	r2, [pc, #152]	@ (8003974 <HAL_DMA_Abort_IT+0x1b8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d02c      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a25      	ldr	r2, [pc, #148]	@ (8003978 <HAL_DMA_Abort_IT+0x1bc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d027      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a23      	ldr	r2, [pc, #140]	@ (800397c <HAL_DMA_Abort_IT+0x1c0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d022      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a22      	ldr	r2, [pc, #136]	@ (8003980 <HAL_DMA_Abort_IT+0x1c4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d01d      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a20      	ldr	r2, [pc, #128]	@ (8003984 <HAL_DMA_Abort_IT+0x1c8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d018      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <HAL_DMA_Abort_IT+0x1cc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1d      	ldr	r2, [pc, #116]	@ (800398c <HAL_DMA_Abort_IT+0x1d0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1c      	ldr	r2, [pc, #112]	@ (8003990 <HAL_DMA_Abort_IT+0x1d4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1a      	ldr	r2, [pc, #104]	@ (8003994 <HAL_DMA_Abort_IT+0x1d8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_DMA_Abort_IT+0x17c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a19      	ldr	r2, [pc, #100]	@ (8003998 <HAL_DMA_Abort_IT+0x1dc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d108      	bne.n	800394a <HAL_DMA_Abort_IT+0x18e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	e178      	b.n	8003c3c <HAL_DMA_Abort_IT+0x480>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0201 	bic.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e16f      	b.n	8003c3c <HAL_DMA_Abort_IT+0x480>
 800395c:	40020010 	.word	0x40020010
 8003960:	40020028 	.word	0x40020028
 8003964:	40020040 	.word	0x40020040
 8003968:	40020058 	.word	0x40020058
 800396c:	40020070 	.word	0x40020070
 8003970:	40020088 	.word	0x40020088
 8003974:	400200a0 	.word	0x400200a0
 8003978:	400200b8 	.word	0x400200b8
 800397c:	40020410 	.word	0x40020410
 8003980:	40020428 	.word	0x40020428
 8003984:	40020440 	.word	0x40020440
 8003988:	40020458 	.word	0x40020458
 800398c:	40020470 	.word	0x40020470
 8003990:	40020488 	.word	0x40020488
 8003994:	400204a0 	.word	0x400204a0
 8003998:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 020e 	bic.w	r2, r2, #14
 80039aa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6c      	ldr	r2, [pc, #432]	@ (8003b64 <HAL_DMA_Abort_IT+0x3a8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d04a      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003b68 <HAL_DMA_Abort_IT+0x3ac>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d045      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a69      	ldr	r2, [pc, #420]	@ (8003b6c <HAL_DMA_Abort_IT+0x3b0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d040      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a68      	ldr	r2, [pc, #416]	@ (8003b70 <HAL_DMA_Abort_IT+0x3b4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d03b      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a66      	ldr	r2, [pc, #408]	@ (8003b74 <HAL_DMA_Abort_IT+0x3b8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d036      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a65      	ldr	r2, [pc, #404]	@ (8003b78 <HAL_DMA_Abort_IT+0x3bc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d031      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a63      	ldr	r2, [pc, #396]	@ (8003b7c <HAL_DMA_Abort_IT+0x3c0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d02c      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a62      	ldr	r2, [pc, #392]	@ (8003b80 <HAL_DMA_Abort_IT+0x3c4>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d027      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a60      	ldr	r2, [pc, #384]	@ (8003b84 <HAL_DMA_Abort_IT+0x3c8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d022      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003b88 <HAL_DMA_Abort_IT+0x3cc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d01d      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a5d      	ldr	r2, [pc, #372]	@ (8003b8c <HAL_DMA_Abort_IT+0x3d0>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d018      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8003b90 <HAL_DMA_Abort_IT+0x3d4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d013      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a5a      	ldr	r2, [pc, #360]	@ (8003b94 <HAL_DMA_Abort_IT+0x3d8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00e      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a59      	ldr	r2, [pc, #356]	@ (8003b98 <HAL_DMA_Abort_IT+0x3dc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d009      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a57      	ldr	r2, [pc, #348]	@ (8003b9c <HAL_DMA_Abort_IT+0x3e0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d004      	beq.n	8003a4c <HAL_DMA_Abort_IT+0x290>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a56      	ldr	r2, [pc, #344]	@ (8003ba0 <HAL_DMA_Abort_IT+0x3e4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d108      	bne.n	8003a5e <HAL_DMA_Abort_IT+0x2a2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	e007      	b.n	8003a6e <HAL_DMA_Abort_IT+0x2b2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3c      	ldr	r2, [pc, #240]	@ (8003b64 <HAL_DMA_Abort_IT+0x3a8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d072      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003b68 <HAL_DMA_Abort_IT+0x3ac>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d06d      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a39      	ldr	r2, [pc, #228]	@ (8003b6c <HAL_DMA_Abort_IT+0x3b0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d068      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a37      	ldr	r2, [pc, #220]	@ (8003b70 <HAL_DMA_Abort_IT+0x3b4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d063      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a36      	ldr	r2, [pc, #216]	@ (8003b74 <HAL_DMA_Abort_IT+0x3b8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d05e      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a34      	ldr	r2, [pc, #208]	@ (8003b78 <HAL_DMA_Abort_IT+0x3bc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d059      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a33      	ldr	r2, [pc, #204]	@ (8003b7c <HAL_DMA_Abort_IT+0x3c0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d054      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a31      	ldr	r2, [pc, #196]	@ (8003b80 <HAL_DMA_Abort_IT+0x3c4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d04f      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <HAL_DMA_Abort_IT+0x3c8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d04a      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2e      	ldr	r2, [pc, #184]	@ (8003b88 <HAL_DMA_Abort_IT+0x3cc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b8c <HAL_DMA_Abort_IT+0x3d0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d040      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8003b90 <HAL_DMA_Abort_IT+0x3d4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d03b      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2a      	ldr	r2, [pc, #168]	@ (8003b94 <HAL_DMA_Abort_IT+0x3d8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d036      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a28      	ldr	r2, [pc, #160]	@ (8003b98 <HAL_DMA_Abort_IT+0x3dc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d031      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a27      	ldr	r2, [pc, #156]	@ (8003b9c <HAL_DMA_Abort_IT+0x3e0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d02c      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <HAL_DMA_Abort_IT+0x3e4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d027      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a24      	ldr	r2, [pc, #144]	@ (8003ba4 <HAL_DMA_Abort_IT+0x3e8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d022      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a22      	ldr	r2, [pc, #136]	@ (8003ba8 <HAL_DMA_Abort_IT+0x3ec>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d01d      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a21      	ldr	r2, [pc, #132]	@ (8003bac <HAL_DMA_Abort_IT+0x3f0>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a1f      	ldr	r2, [pc, #124]	@ (8003bb0 <HAL_DMA_Abort_IT+0x3f4>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb4 <HAL_DMA_Abort_IT+0x3f8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb8 <HAL_DMA_Abort_IT+0x3fc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bbc <HAL_DMA_Abort_IT+0x400>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_DMA_Abort_IT+0x3a2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a19      	ldr	r2, [pc, #100]	@ (8003bc0 <HAL_DMA_Abort_IT+0x404>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d132      	bne.n	8003bc4 <HAL_DMA_Abort_IT+0x408>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e031      	b.n	8003bc6 <HAL_DMA_Abort_IT+0x40a>
 8003b62:	bf00      	nop
 8003b64:	40020010 	.word	0x40020010
 8003b68:	40020028 	.word	0x40020028
 8003b6c:	40020040 	.word	0x40020040
 8003b70:	40020058 	.word	0x40020058
 8003b74:	40020070 	.word	0x40020070
 8003b78:	40020088 	.word	0x40020088
 8003b7c:	400200a0 	.word	0x400200a0
 8003b80:	400200b8 	.word	0x400200b8
 8003b84:	40020410 	.word	0x40020410
 8003b88:	40020428 	.word	0x40020428
 8003b8c:	40020440 	.word	0x40020440
 8003b90:	40020458 	.word	0x40020458
 8003b94:	40020470 	.word	0x40020470
 8003b98:	40020488 	.word	0x40020488
 8003b9c:	400204a0 	.word	0x400204a0
 8003ba0:	400204b8 	.word	0x400204b8
 8003ba4:	58025408 	.word	0x58025408
 8003ba8:	5802541c 	.word	0x5802541c
 8003bac:	58025430 	.word	0x58025430
 8003bb0:	58025444 	.word	0x58025444
 8003bb4:	58025458 	.word	0x58025458
 8003bb8:	5802546c 	.word	0x5802546c
 8003bbc:	58025480 	.word	0x58025480
 8003bc0:	58025494 	.word	0x58025494
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d028      	beq.n	8003c1c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2201      	movs	r2, #1
 8003bea:	409a      	lsls	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003bf8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c10:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c1a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop

08003c48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	@ 0x28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c54:	4b67      	ldr	r3, [pc, #412]	@ (8003df4 <HAL_DMA_IRQHandler+0x1ac>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a67      	ldr	r2, [pc, #412]	@ (8003df8 <HAL_DMA_IRQHandler+0x1b0>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8003dfc <HAL_DMA_IRQHandler+0x1b4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d04a      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5d      	ldr	r2, [pc, #372]	@ (8003e00 <HAL_DMA_IRQHandler+0x1b8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d045      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a5c      	ldr	r2, [pc, #368]	@ (8003e04 <HAL_DMA_IRQHandler+0x1bc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d040      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003e08 <HAL_DMA_IRQHandler+0x1c0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d03b      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a59      	ldr	r2, [pc, #356]	@ (8003e0c <HAL_DMA_IRQHandler+0x1c4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d036      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a57      	ldr	r2, [pc, #348]	@ (8003e10 <HAL_DMA_IRQHandler+0x1c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d031      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a56      	ldr	r2, [pc, #344]	@ (8003e14 <HAL_DMA_IRQHandler+0x1cc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d02c      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a54      	ldr	r2, [pc, #336]	@ (8003e18 <HAL_DMA_IRQHandler+0x1d0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d027      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a53      	ldr	r2, [pc, #332]	@ (8003e1c <HAL_DMA_IRQHandler+0x1d4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a51      	ldr	r2, [pc, #324]	@ (8003e20 <HAL_DMA_IRQHandler+0x1d8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a50      	ldr	r2, [pc, #320]	@ (8003e24 <HAL_DMA_IRQHandler+0x1dc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d018      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a4e      	ldr	r2, [pc, #312]	@ (8003e28 <HAL_DMA_IRQHandler+0x1e0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4d      	ldr	r2, [pc, #308]	@ (8003e2c <HAL_DMA_IRQHandler+0x1e4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a4b      	ldr	r2, [pc, #300]	@ (8003e30 <HAL_DMA_IRQHandler+0x1e8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e34 <HAL_DMA_IRQHandler+0x1ec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xd2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a48      	ldr	r2, [pc, #288]	@ (8003e38 <HAL_DMA_IRQHandler+0x1f0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d101      	bne.n	8003d1e <HAL_DMA_IRQHandler+0xd6>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <HAL_DMA_IRQHandler+0xd8>
 8003d1e:	2300      	movs	r3, #0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 842b 	beq.w	800457c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2208      	movs	r2, #8
 8003d30:	409a      	lsls	r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80a2 	beq.w	8003e80 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2e      	ldr	r2, [pc, #184]	@ (8003dfc <HAL_DMA_IRQHandler+0x1b4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04a      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e00 <HAL_DMA_IRQHandler+0x1b8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d045      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a2b      	ldr	r2, [pc, #172]	@ (8003e04 <HAL_DMA_IRQHandler+0x1bc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d040      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8003e08 <HAL_DMA_IRQHandler+0x1c0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d03b      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a28      	ldr	r2, [pc, #160]	@ (8003e0c <HAL_DMA_IRQHandler+0x1c4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d036      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a27      	ldr	r2, [pc, #156]	@ (8003e10 <HAL_DMA_IRQHandler+0x1c8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d031      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a25      	ldr	r2, [pc, #148]	@ (8003e14 <HAL_DMA_IRQHandler+0x1cc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02c      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a24      	ldr	r2, [pc, #144]	@ (8003e18 <HAL_DMA_IRQHandler+0x1d0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d027      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a22      	ldr	r2, [pc, #136]	@ (8003e1c <HAL_DMA_IRQHandler+0x1d4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d022      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a21      	ldr	r2, [pc, #132]	@ (8003e20 <HAL_DMA_IRQHandler+0x1d8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d01d      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e24 <HAL_DMA_IRQHandler+0x1dc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d018      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1e      	ldr	r2, [pc, #120]	@ (8003e28 <HAL_DMA_IRQHandler+0x1e0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d013      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e2c <HAL_DMA_IRQHandler+0x1e4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e30 <HAL_DMA_IRQHandler+0x1e8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	@ (8003e34 <HAL_DMA_IRQHandler+0x1ec>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x194>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <HAL_DMA_IRQHandler+0x1f0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d12f      	bne.n	8003e3c <HAL_DMA_IRQHandler+0x1f4>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf14      	ite	ne
 8003dea:	2301      	movne	r3, #1
 8003dec:	2300      	moveq	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	e02e      	b.n	8003e50 <HAL_DMA_IRQHandler+0x208>
 8003df2:	bf00      	nop
 8003df4:	24000008 	.word	0x24000008
 8003df8:	1b4e81b5 	.word	0x1b4e81b5
 8003dfc:	40020010 	.word	0x40020010
 8003e00:	40020028 	.word	0x40020028
 8003e04:	40020040 	.word	0x40020040
 8003e08:	40020058 	.word	0x40020058
 8003e0c:	40020070 	.word	0x40020070
 8003e10:	40020088 	.word	0x40020088
 8003e14:	400200a0 	.word	0x400200a0
 8003e18:	400200b8 	.word	0x400200b8
 8003e1c:	40020410 	.word	0x40020410
 8003e20:	40020428 	.word	0x40020428
 8003e24:	40020440 	.word	0x40020440
 8003e28:	40020458 	.word	0x40020458
 8003e2c:	40020470 	.word	0x40020470
 8003e30:	40020488 	.word	0x40020488
 8003e34:	400204a0 	.word	0x400204a0
 8003e38:	400204b8 	.word	0x400204b8
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d015      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0204 	bic.w	r2, r2, #4
 8003e62:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	409a      	lsls	r2, r3
 8003e70:	6a3b      	ldr	r3, [r7, #32]
 8003e72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e78:	f043 0201 	orr.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d06e      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a69      	ldr	r2, [pc, #420]	@ (8004040 <HAL_DMA_IRQHandler+0x3f8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d04a      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a67      	ldr	r2, [pc, #412]	@ (8004044 <HAL_DMA_IRQHandler+0x3fc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d045      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a66      	ldr	r2, [pc, #408]	@ (8004048 <HAL_DMA_IRQHandler+0x400>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d040      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a64      	ldr	r2, [pc, #400]	@ (800404c <HAL_DMA_IRQHandler+0x404>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d03b      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a63      	ldr	r2, [pc, #396]	@ (8004050 <HAL_DMA_IRQHandler+0x408>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d036      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a61      	ldr	r2, [pc, #388]	@ (8004054 <HAL_DMA_IRQHandler+0x40c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d031      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a60      	ldr	r2, [pc, #384]	@ (8004058 <HAL_DMA_IRQHandler+0x410>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d02c      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a5e      	ldr	r2, [pc, #376]	@ (800405c <HAL_DMA_IRQHandler+0x414>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d027      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5d      	ldr	r2, [pc, #372]	@ (8004060 <HAL_DMA_IRQHandler+0x418>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d022      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a5b      	ldr	r2, [pc, #364]	@ (8004064 <HAL_DMA_IRQHandler+0x41c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01d      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a5a      	ldr	r2, [pc, #360]	@ (8004068 <HAL_DMA_IRQHandler+0x420>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a58      	ldr	r2, [pc, #352]	@ (800406c <HAL_DMA_IRQHandler+0x424>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a57      	ldr	r2, [pc, #348]	@ (8004070 <HAL_DMA_IRQHandler+0x428>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a55      	ldr	r2, [pc, #340]	@ (8004074 <HAL_DMA_IRQHandler+0x42c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a54      	ldr	r2, [pc, #336]	@ (8004078 <HAL_DMA_IRQHandler+0x430>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x2ee>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a52      	ldr	r2, [pc, #328]	@ (800407c <HAL_DMA_IRQHandler+0x434>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10a      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x304>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e003      	b.n	8003f54 <HAL_DMA_IRQHandler+0x30c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2201      	movs	r2, #1
 8003f62:	409a      	lsls	r2, r3
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6c:	f043 0202 	orr.w	r2, r3, #2
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 808f 	beq.w	80040a8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8004040 <HAL_DMA_IRQHandler+0x3f8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d04a      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	@ (8004044 <HAL_DMA_IRQHandler+0x3fc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d045      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a29      	ldr	r2, [pc, #164]	@ (8004048 <HAL_DMA_IRQHandler+0x400>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d040      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a27      	ldr	r2, [pc, #156]	@ (800404c <HAL_DMA_IRQHandler+0x404>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d03b      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a26      	ldr	r2, [pc, #152]	@ (8004050 <HAL_DMA_IRQHandler+0x408>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d036      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a24      	ldr	r2, [pc, #144]	@ (8004054 <HAL_DMA_IRQHandler+0x40c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d031      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a23      	ldr	r2, [pc, #140]	@ (8004058 <HAL_DMA_IRQHandler+0x410>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d02c      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a21      	ldr	r2, [pc, #132]	@ (800405c <HAL_DMA_IRQHandler+0x414>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d027      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a20      	ldr	r2, [pc, #128]	@ (8004060 <HAL_DMA_IRQHandler+0x418>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d022      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8004064 <HAL_DMA_IRQHandler+0x41c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01d      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8004068 <HAL_DMA_IRQHandler+0x420>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d018      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800406c <HAL_DMA_IRQHandler+0x424>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1a      	ldr	r2, [pc, #104]	@ (8004070 <HAL_DMA_IRQHandler+0x428>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00e      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a18      	ldr	r2, [pc, #96]	@ (8004074 <HAL_DMA_IRQHandler+0x42c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a17      	ldr	r2, [pc, #92]	@ (8004078 <HAL_DMA_IRQHandler+0x430>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_DMA_IRQHandler+0x3e2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a15      	ldr	r2, [pc, #84]	@ (800407c <HAL_DMA_IRQHandler+0x434>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d12a      	bne.n	8004080 <HAL_DMA_IRQHandler+0x438>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e023      	b.n	8004088 <HAL_DMA_IRQHandler+0x440>
 8004040:	40020010 	.word	0x40020010
 8004044:	40020028 	.word	0x40020028
 8004048:	40020040 	.word	0x40020040
 800404c:	40020058 	.word	0x40020058
 8004050:	40020070 	.word	0x40020070
 8004054:	40020088 	.word	0x40020088
 8004058:	400200a0 	.word	0x400200a0
 800405c:	400200b8 	.word	0x400200b8
 8004060:	40020410 	.word	0x40020410
 8004064:	40020428 	.word	0x40020428
 8004068:	40020440 	.word	0x40020440
 800406c:	40020458 	.word	0x40020458
 8004070:	40020470 	.word	0x40020470
 8004074:	40020488 	.word	0x40020488
 8004078:	400204a0 	.word	0x400204a0
 800407c:	400204b8 	.word	0x400204b8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2204      	movs	r2, #4
 8004096:	409a      	lsls	r2, r3
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a0:	f043 0204 	orr.w	r2, r3, #4
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2210      	movs	r2, #16
 80040b2:	409a      	lsls	r2, r3
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80a6 	beq.w	800420a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a85      	ldr	r2, [pc, #532]	@ (80042d8 <HAL_DMA_IRQHandler+0x690>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d04a      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a83      	ldr	r2, [pc, #524]	@ (80042dc <HAL_DMA_IRQHandler+0x694>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d045      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a82      	ldr	r2, [pc, #520]	@ (80042e0 <HAL_DMA_IRQHandler+0x698>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d040      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a80      	ldr	r2, [pc, #512]	@ (80042e4 <HAL_DMA_IRQHandler+0x69c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d03b      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a7f      	ldr	r2, [pc, #508]	@ (80042e8 <HAL_DMA_IRQHandler+0x6a0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d036      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7d      	ldr	r2, [pc, #500]	@ (80042ec <HAL_DMA_IRQHandler+0x6a4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d031      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a7c      	ldr	r2, [pc, #496]	@ (80042f0 <HAL_DMA_IRQHandler+0x6a8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d02c      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a7a      	ldr	r2, [pc, #488]	@ (80042f4 <HAL_DMA_IRQHandler+0x6ac>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d027      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a79      	ldr	r2, [pc, #484]	@ (80042f8 <HAL_DMA_IRQHandler+0x6b0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d022      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a77      	ldr	r2, [pc, #476]	@ (80042fc <HAL_DMA_IRQHandler+0x6b4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01d      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a76      	ldr	r2, [pc, #472]	@ (8004300 <HAL_DMA_IRQHandler+0x6b8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d018      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a74      	ldr	r2, [pc, #464]	@ (8004304 <HAL_DMA_IRQHandler+0x6bc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d013      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a73      	ldr	r2, [pc, #460]	@ (8004308 <HAL_DMA_IRQHandler+0x6c0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d00e      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a71      	ldr	r2, [pc, #452]	@ (800430c <HAL_DMA_IRQHandler+0x6c4>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d009      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a70      	ldr	r2, [pc, #448]	@ (8004310 <HAL_DMA_IRQHandler+0x6c8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d004      	beq.n	800415e <HAL_DMA_IRQHandler+0x516>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a6e      	ldr	r2, [pc, #440]	@ (8004314 <HAL_DMA_IRQHandler+0x6cc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d10a      	bne.n	8004174 <HAL_DMA_IRQHandler+0x52c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0308 	and.w	r3, r3, #8
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e009      	b.n	8004188 <HAL_DMA_IRQHandler+0x540>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf14      	ite	ne
 8004182:	2301      	movne	r3, #1
 8004184:	2300      	moveq	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d03e      	beq.n	800420a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004190:	f003 031f 	and.w	r3, r3, #31
 8004194:	2210      	movs	r2, #16
 8004196:	409a      	lsls	r2, r3
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d018      	beq.n	80041dc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d024      	beq.n	800420a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
 80041c8:	e01f      	b.n	800420a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01b      	beq.n	800420a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
 80041da:	e016      	b.n	800420a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0208 	bic.w	r2, r2, #8
 80041f8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	2220      	movs	r2, #32
 8004214:	409a      	lsls	r2, r3
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 8110 	beq.w	8004440 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a2c      	ldr	r2, [pc, #176]	@ (80042d8 <HAL_DMA_IRQHandler+0x690>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d04a      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a2b      	ldr	r2, [pc, #172]	@ (80042dc <HAL_DMA_IRQHandler+0x694>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d045      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a29      	ldr	r2, [pc, #164]	@ (80042e0 <HAL_DMA_IRQHandler+0x698>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d040      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a28      	ldr	r2, [pc, #160]	@ (80042e4 <HAL_DMA_IRQHandler+0x69c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d03b      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a26      	ldr	r2, [pc, #152]	@ (80042e8 <HAL_DMA_IRQHandler+0x6a0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d036      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a25      	ldr	r2, [pc, #148]	@ (80042ec <HAL_DMA_IRQHandler+0x6a4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d031      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a23      	ldr	r2, [pc, #140]	@ (80042f0 <HAL_DMA_IRQHandler+0x6a8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d02c      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a22      	ldr	r2, [pc, #136]	@ (80042f4 <HAL_DMA_IRQHandler+0x6ac>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d027      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a20      	ldr	r2, [pc, #128]	@ (80042f8 <HAL_DMA_IRQHandler+0x6b0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d022      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1f      	ldr	r2, [pc, #124]	@ (80042fc <HAL_DMA_IRQHandler+0x6b4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d01d      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1d      	ldr	r2, [pc, #116]	@ (8004300 <HAL_DMA_IRQHandler+0x6b8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d018      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a1c      	ldr	r2, [pc, #112]	@ (8004304 <HAL_DMA_IRQHandler+0x6bc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d013      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1a      	ldr	r2, [pc, #104]	@ (8004308 <HAL_DMA_IRQHandler+0x6c0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00e      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a19      	ldr	r2, [pc, #100]	@ (800430c <HAL_DMA_IRQHandler+0x6c4>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a17      	ldr	r2, [pc, #92]	@ (8004310 <HAL_DMA_IRQHandler+0x6c8>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x678>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a16      	ldr	r2, [pc, #88]	@ (8004314 <HAL_DMA_IRQHandler+0x6cc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d12b      	bne.n	8004318 <HAL_DMA_IRQHandler+0x6d0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e02a      	b.n	800432c <HAL_DMA_IRQHandler+0x6e4>
 80042d6:	bf00      	nop
 80042d8:	40020010 	.word	0x40020010
 80042dc:	40020028 	.word	0x40020028
 80042e0:	40020040 	.word	0x40020040
 80042e4:	40020058 	.word	0x40020058
 80042e8:	40020070 	.word	0x40020070
 80042ec:	40020088 	.word	0x40020088
 80042f0:	400200a0 	.word	0x400200a0
 80042f4:	400200b8 	.word	0x400200b8
 80042f8:	40020410 	.word	0x40020410
 80042fc:	40020428 	.word	0x40020428
 8004300:	40020440 	.word	0x40020440
 8004304:	40020458 	.word	0x40020458
 8004308:	40020470 	.word	0x40020470
 800430c:	40020488 	.word	0x40020488
 8004310:	400204a0 	.word	0x400204a0
 8004314:	400204b8 	.word	0x400204b8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf14      	ite	ne
 8004326:	2301      	movne	r3, #1
 8004328:	2300      	moveq	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8087 	beq.w	8004440 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2220      	movs	r2, #32
 800433c:	409a      	lsls	r2, r3
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b04      	cmp	r3, #4
 800434c:	d139      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0216 	bic.w	r2, r2, #22
 800435c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695a      	ldr	r2, [r3, #20]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800436c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <HAL_DMA_IRQHandler+0x736>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800437a:	2b00      	cmp	r3, #0
 800437c:	d007      	beq.n	800438e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0208 	bic.w	r2, r2, #8
 800438c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	223f      	movs	r2, #63	@ 0x3f
 8004398:	409a      	lsls	r2, r3
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 834a 	beq.w	8004a4c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
          }
          return;
 80043c0:	e344      	b.n	8004a4c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d108      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d02c      	beq.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
 80043ee:	e027      	b.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d023      	beq.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	4798      	blx	r3
 8004400:	e01e      	b.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0210 	bic.w	r2, r2, #16
 800441e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8306 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8088 	beq.w	8004568 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2204      	movs	r2, #4
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a7a      	ldr	r2, [pc, #488]	@ (8004650 <HAL_DMA_IRQHandler+0xa08>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d04a      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a79      	ldr	r2, [pc, #484]	@ (8004654 <HAL_DMA_IRQHandler+0xa0c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d045      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a77      	ldr	r2, [pc, #476]	@ (8004658 <HAL_DMA_IRQHandler+0xa10>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d040      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a76      	ldr	r2, [pc, #472]	@ (800465c <HAL_DMA_IRQHandler+0xa14>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d03b      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a74      	ldr	r2, [pc, #464]	@ (8004660 <HAL_DMA_IRQHandler+0xa18>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d036      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a73      	ldr	r2, [pc, #460]	@ (8004664 <HAL_DMA_IRQHandler+0xa1c>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d031      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a71      	ldr	r2, [pc, #452]	@ (8004668 <HAL_DMA_IRQHandler+0xa20>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02c      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a70      	ldr	r2, [pc, #448]	@ (800466c <HAL_DMA_IRQHandler+0xa24>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d027      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a6e      	ldr	r2, [pc, #440]	@ (8004670 <HAL_DMA_IRQHandler+0xa28>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d022      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6d      	ldr	r2, [pc, #436]	@ (8004674 <HAL_DMA_IRQHandler+0xa2c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d01d      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004678 <HAL_DMA_IRQHandler+0xa30>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d018      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a6a      	ldr	r2, [pc, #424]	@ (800467c <HAL_DMA_IRQHandler+0xa34>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d013      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a68      	ldr	r2, [pc, #416]	@ (8004680 <HAL_DMA_IRQHandler+0xa38>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00e      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a67      	ldr	r2, [pc, #412]	@ (8004684 <HAL_DMA_IRQHandler+0xa3c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d009      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a65      	ldr	r2, [pc, #404]	@ (8004688 <HAL_DMA_IRQHandler+0xa40>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d004      	beq.n	8004500 <HAL_DMA_IRQHandler+0x8b8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a64      	ldr	r2, [pc, #400]	@ (800468c <HAL_DMA_IRQHandler+0xa44>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d108      	bne.n	8004512 <HAL_DMA_IRQHandler+0x8ca>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]
 8004510:	e007      	b.n	8004522 <HAL_DMA_IRQHandler+0x8da>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3301      	adds	r3, #1
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452a:	429a      	cmp	r2, r3
 800452c:	d307      	bcc.n	800453e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f2      	bne.n	8004522 <HAL_DMA_IRQHandler+0x8da>
 800453c:	e000      	b.n	8004540 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800453e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d004      	beq.n	8004558 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2203      	movs	r2, #3
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004556:	e003      	b.n	8004560 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8272 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e26c      	b.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a43      	ldr	r2, [pc, #268]	@ (8004690 <HAL_DMA_IRQHandler+0xa48>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d022      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a42      	ldr	r2, [pc, #264]	@ (8004694 <HAL_DMA_IRQHandler+0xa4c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d01d      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a40      	ldr	r2, [pc, #256]	@ (8004698 <HAL_DMA_IRQHandler+0xa50>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d018      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3f      	ldr	r2, [pc, #252]	@ (800469c <HAL_DMA_IRQHandler+0xa54>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a3d      	ldr	r2, [pc, #244]	@ (80046a0 <HAL_DMA_IRQHandler+0xa58>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00e      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a3c      	ldr	r2, [pc, #240]	@ (80046a4 <HAL_DMA_IRQHandler+0xa5c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3a      	ldr	r2, [pc, #232]	@ (80046a8 <HAL_DMA_IRQHandler+0xa60>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d004      	beq.n	80045cc <HAL_DMA_IRQHandler+0x984>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a39      	ldr	r2, [pc, #228]	@ (80046ac <HAL_DMA_IRQHandler+0xa64>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d101      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x988>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <HAL_DMA_IRQHandler+0x98a>
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 823f 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	2204      	movs	r2, #4
 80045ea:	409a      	lsls	r2, r3
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80cd 	beq.w	8004790 <HAL_DMA_IRQHandler+0xb48>
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80c7 	beq.w	8004790 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004606:	f003 031f 	and.w	r3, r3, #31
 800460a:	2204      	movs	r2, #4
 800460c:	409a      	lsls	r2, r3
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d049      	beq.n	80046b0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 8210 	beq.w	8004a50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004638:	e20a      	b.n	8004a50 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 8206 	beq.w	8004a50 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800464c:	e200      	b.n	8004a50 <HAL_DMA_IRQHandler+0xe08>
 800464e:	bf00      	nop
 8004650:	40020010 	.word	0x40020010
 8004654:	40020028 	.word	0x40020028
 8004658:	40020040 	.word	0x40020040
 800465c:	40020058 	.word	0x40020058
 8004660:	40020070 	.word	0x40020070
 8004664:	40020088 	.word	0x40020088
 8004668:	400200a0 	.word	0x400200a0
 800466c:	400200b8 	.word	0x400200b8
 8004670:	40020410 	.word	0x40020410
 8004674:	40020428 	.word	0x40020428
 8004678:	40020440 	.word	0x40020440
 800467c:	40020458 	.word	0x40020458
 8004680:	40020470 	.word	0x40020470
 8004684:	40020488 	.word	0x40020488
 8004688:	400204a0 	.word	0x400204a0
 800468c:	400204b8 	.word	0x400204b8
 8004690:	58025408 	.word	0x58025408
 8004694:	5802541c 	.word	0x5802541c
 8004698:	58025430 	.word	0x58025430
 800469c:	58025444 	.word	0x58025444
 80046a0:	58025458 	.word	0x58025458
 80046a4:	5802546c 	.word	0x5802546c
 80046a8:	58025480 	.word	0x58025480
 80046ac:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d160      	bne.n	800477c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7f      	ldr	r2, [pc, #508]	@ (80048bc <HAL_DMA_IRQHandler+0xc74>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d04a      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a7d      	ldr	r2, [pc, #500]	@ (80048c0 <HAL_DMA_IRQHandler+0xc78>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d045      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a7c      	ldr	r2, [pc, #496]	@ (80048c4 <HAL_DMA_IRQHandler+0xc7c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d040      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7a      	ldr	r2, [pc, #488]	@ (80048c8 <HAL_DMA_IRQHandler+0xc80>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d03b      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a79      	ldr	r2, [pc, #484]	@ (80048cc <HAL_DMA_IRQHandler+0xc84>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d036      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a77      	ldr	r2, [pc, #476]	@ (80048d0 <HAL_DMA_IRQHandler+0xc88>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d031      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a76      	ldr	r2, [pc, #472]	@ (80048d4 <HAL_DMA_IRQHandler+0xc8c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d02c      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a74      	ldr	r2, [pc, #464]	@ (80048d8 <HAL_DMA_IRQHandler+0xc90>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d027      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a73      	ldr	r2, [pc, #460]	@ (80048dc <HAL_DMA_IRQHandler+0xc94>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d022      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a71      	ldr	r2, [pc, #452]	@ (80048e0 <HAL_DMA_IRQHandler+0xc98>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01d      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a70      	ldr	r2, [pc, #448]	@ (80048e4 <HAL_DMA_IRQHandler+0xc9c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a6e      	ldr	r2, [pc, #440]	@ (80048e8 <HAL_DMA_IRQHandler+0xca0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a6d      	ldr	r2, [pc, #436]	@ (80048ec <HAL_DMA_IRQHandler+0xca4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a6b      	ldr	r2, [pc, #428]	@ (80048f0 <HAL_DMA_IRQHandler+0xca8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a6a      	ldr	r2, [pc, #424]	@ (80048f4 <HAL_DMA_IRQHandler+0xcac>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_DMA_IRQHandler+0xb12>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a68      	ldr	r2, [pc, #416]	@ (80048f8 <HAL_DMA_IRQHandler+0xcb0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <HAL_DMA_IRQHandler+0xb24>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0208 	bic.w	r2, r2, #8
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e007      	b.n	800477c <HAL_DMA_IRQHandler+0xb34>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0204 	bic.w	r2, r2, #4
 800477a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8165 	beq.w	8004a50 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800478e:	e15f      	b.n	8004a50 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	2202      	movs	r2, #2
 800479a:	409a      	lsls	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	4013      	ands	r3, r2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80c5 	beq.w	8004930 <HAL_DMA_IRQHandler+0xce8>
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80bf 	beq.w	8004930 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b6:	f003 031f 	and.w	r3, r3, #31
 80047ba:	2202      	movs	r2, #2
 80047bc:	409a      	lsls	r2, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d018      	beq.n	80047fe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 813a 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047e8:	e134      	b.n	8004a54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8130 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047fc:	e12a      	b.n	8004a54 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 8089 	bne.w	800491c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2b      	ldr	r2, [pc, #172]	@ (80048bc <HAL_DMA_IRQHandler+0xc74>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d04a      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a29      	ldr	r2, [pc, #164]	@ (80048c0 <HAL_DMA_IRQHandler+0xc78>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d045      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a28      	ldr	r2, [pc, #160]	@ (80048c4 <HAL_DMA_IRQHandler+0xc7c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d040      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a26      	ldr	r2, [pc, #152]	@ (80048c8 <HAL_DMA_IRQHandler+0xc80>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d03b      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a25      	ldr	r2, [pc, #148]	@ (80048cc <HAL_DMA_IRQHandler+0xc84>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d036      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a23      	ldr	r2, [pc, #140]	@ (80048d0 <HAL_DMA_IRQHandler+0xc88>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d031      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <HAL_DMA_IRQHandler+0xc8c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d02c      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a20      	ldr	r2, [pc, #128]	@ (80048d8 <HAL_DMA_IRQHandler+0xc90>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d027      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a1f      	ldr	r2, [pc, #124]	@ (80048dc <HAL_DMA_IRQHandler+0xc94>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d022      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <HAL_DMA_IRQHandler+0xc98>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01d      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <HAL_DMA_IRQHandler+0xc9c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d018      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1a      	ldr	r2, [pc, #104]	@ (80048e8 <HAL_DMA_IRQHandler+0xca0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <HAL_DMA_IRQHandler+0xca4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00e      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a17      	ldr	r2, [pc, #92]	@ (80048f0 <HAL_DMA_IRQHandler+0xca8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a16      	ldr	r2, [pc, #88]	@ (80048f4 <HAL_DMA_IRQHandler+0xcac>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d004      	beq.n	80048aa <HAL_DMA_IRQHandler+0xc62>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a14      	ldr	r2, [pc, #80]	@ (80048f8 <HAL_DMA_IRQHandler+0xcb0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d128      	bne.n	80048fc <HAL_DMA_IRQHandler+0xcb4>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0214 	bic.w	r2, r2, #20
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e027      	b.n	800490c <HAL_DMA_IRQHandler+0xcc4>
 80048bc:	40020010 	.word	0x40020010
 80048c0:	40020028 	.word	0x40020028
 80048c4:	40020040 	.word	0x40020040
 80048c8:	40020058 	.word	0x40020058
 80048cc:	40020070 	.word	0x40020070
 80048d0:	40020088 	.word	0x40020088
 80048d4:	400200a0 	.word	0x400200a0
 80048d8:	400200b8 	.word	0x400200b8
 80048dc:	40020410 	.word	0x40020410
 80048e0:	40020428 	.word	0x40020428
 80048e4:	40020440 	.word	0x40020440
 80048e8:	40020458 	.word	0x40020458
 80048ec:	40020470 	.word	0x40020470
 80048f0:	40020488 	.word	0x40020488
 80048f4:	400204a0 	.word	0x400204a0
 80048f8:	400204b8 	.word	0x400204b8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 020a 	bic.w	r2, r2, #10
 800490a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8097 	beq.w	8004a54 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800492e:	e091      	b.n	8004a54 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	2208      	movs	r2, #8
 800493a:	409a      	lsls	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 8088 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8082 	beq.w	8004a56 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a41      	ldr	r2, [pc, #260]	@ (8004a5c <HAL_DMA_IRQHandler+0xe14>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d04a      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a3f      	ldr	r2, [pc, #252]	@ (8004a60 <HAL_DMA_IRQHandler+0xe18>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d045      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a3e      	ldr	r2, [pc, #248]	@ (8004a64 <HAL_DMA_IRQHandler+0xe1c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d040      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a3c      	ldr	r2, [pc, #240]	@ (8004a68 <HAL_DMA_IRQHandler+0xe20>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d03b      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a6c <HAL_DMA_IRQHandler+0xe24>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d036      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a39      	ldr	r2, [pc, #228]	@ (8004a70 <HAL_DMA_IRQHandler+0xe28>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d031      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a38      	ldr	r2, [pc, #224]	@ (8004a74 <HAL_DMA_IRQHandler+0xe2c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d02c      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a36      	ldr	r2, [pc, #216]	@ (8004a78 <HAL_DMA_IRQHandler+0xe30>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d027      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a35      	ldr	r2, [pc, #212]	@ (8004a7c <HAL_DMA_IRQHandler+0xe34>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d022      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a33      	ldr	r2, [pc, #204]	@ (8004a80 <HAL_DMA_IRQHandler+0xe38>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d01d      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a32      	ldr	r2, [pc, #200]	@ (8004a84 <HAL_DMA_IRQHandler+0xe3c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d018      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a30      	ldr	r2, [pc, #192]	@ (8004a88 <HAL_DMA_IRQHandler+0xe40>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2f      	ldr	r2, [pc, #188]	@ (8004a8c <HAL_DMA_IRQHandler+0xe44>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d00e      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004a90 <HAL_DMA_IRQHandler+0xe48>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d009      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004a94 <HAL_DMA_IRQHandler+0xe4c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d004      	beq.n	80049f2 <HAL_DMA_IRQHandler+0xdaa>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <HAL_DMA_IRQHandler+0xe50>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <HAL_DMA_IRQHandler+0xdbc>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 021c 	bic.w	r2, r2, #28
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e007      	b.n	8004a14 <HAL_DMA_IRQHandler+0xdcc>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 020e 	bic.w	r2, r2, #14
 8004a12:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a18:	f003 031f 	and.w	r3, r3, #31
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d009      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	4798      	blx	r3
 8004a4a:	e004      	b.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a4c:	bf00      	nop
 8004a4e:	e002      	b.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a50:	bf00      	nop
 8004a52:	e000      	b.n	8004a56 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a54:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a56:	3728      	adds	r7, #40	@ 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40020010 	.word	0x40020010
 8004a60:	40020028 	.word	0x40020028
 8004a64:	40020040 	.word	0x40020040
 8004a68:	40020058 	.word	0x40020058
 8004a6c:	40020070 	.word	0x40020070
 8004a70:	40020088 	.word	0x40020088
 8004a74:	400200a0 	.word	0x400200a0
 8004a78:	400200b8 	.word	0x400200b8
 8004a7c:	40020410 	.word	0x40020410
 8004a80:	40020428 	.word	0x40020428
 8004a84:	40020440 	.word	0x40020440
 8004a88:	40020458 	.word	0x40020458
 8004a8c:	40020470 	.word	0x40020470
 8004a90:	40020488 	.word	0x40020488
 8004a94:	400204a0 	.word	0x400204a0
 8004a98:	400204b8 	.word	0x400204b8

08004a9c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004acc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a7f      	ldr	r2, [pc, #508]	@ (8004cd0 <DMA_SetConfig+0x21c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d072      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a7d      	ldr	r2, [pc, #500]	@ (8004cd4 <DMA_SetConfig+0x220>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d06d      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8004cd8 <DMA_SetConfig+0x224>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d068      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a7a      	ldr	r2, [pc, #488]	@ (8004cdc <DMA_SetConfig+0x228>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d063      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a79      	ldr	r2, [pc, #484]	@ (8004ce0 <DMA_SetConfig+0x22c>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d05e      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a77      	ldr	r2, [pc, #476]	@ (8004ce4 <DMA_SetConfig+0x230>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d059      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a76      	ldr	r2, [pc, #472]	@ (8004ce8 <DMA_SetConfig+0x234>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d054      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a74      	ldr	r2, [pc, #464]	@ (8004cec <DMA_SetConfig+0x238>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d04f      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a73      	ldr	r2, [pc, #460]	@ (8004cf0 <DMA_SetConfig+0x23c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d04a      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a71      	ldr	r2, [pc, #452]	@ (8004cf4 <DMA_SetConfig+0x240>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d045      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a70      	ldr	r2, [pc, #448]	@ (8004cf8 <DMA_SetConfig+0x244>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d040      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a6e      	ldr	r2, [pc, #440]	@ (8004cfc <DMA_SetConfig+0x248>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d03b      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6d      	ldr	r2, [pc, #436]	@ (8004d00 <DMA_SetConfig+0x24c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d036      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a6b      	ldr	r2, [pc, #428]	@ (8004d04 <DMA_SetConfig+0x250>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d031      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a6a      	ldr	r2, [pc, #424]	@ (8004d08 <DMA_SetConfig+0x254>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d02c      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a68      	ldr	r2, [pc, #416]	@ (8004d0c <DMA_SetConfig+0x258>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d027      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a67      	ldr	r2, [pc, #412]	@ (8004d10 <DMA_SetConfig+0x25c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d022      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a65      	ldr	r2, [pc, #404]	@ (8004d14 <DMA_SetConfig+0x260>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d01d      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a64      	ldr	r2, [pc, #400]	@ (8004d18 <DMA_SetConfig+0x264>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d018      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a62      	ldr	r2, [pc, #392]	@ (8004d1c <DMA_SetConfig+0x268>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d013      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a61      	ldr	r2, [pc, #388]	@ (8004d20 <DMA_SetConfig+0x26c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00e      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5f      	ldr	r2, [pc, #380]	@ (8004d24 <DMA_SetConfig+0x270>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a5e      	ldr	r2, [pc, #376]	@ (8004d28 <DMA_SetConfig+0x274>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d004      	beq.n	8004bbe <DMA_SetConfig+0x10a>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a5c      	ldr	r2, [pc, #368]	@ (8004d2c <DMA_SetConfig+0x278>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d101      	bne.n	8004bc2 <DMA_SetConfig+0x10e>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <DMA_SetConfig+0x110>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00d      	beq.n	8004be4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bd0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004be2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a39      	ldr	r2, [pc, #228]	@ (8004cd0 <DMA_SetConfig+0x21c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d04a      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a38      	ldr	r2, [pc, #224]	@ (8004cd4 <DMA_SetConfig+0x220>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d045      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a36      	ldr	r2, [pc, #216]	@ (8004cd8 <DMA_SetConfig+0x224>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d040      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a35      	ldr	r2, [pc, #212]	@ (8004cdc <DMA_SetConfig+0x228>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d03b      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a33      	ldr	r2, [pc, #204]	@ (8004ce0 <DMA_SetConfig+0x22c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d036      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a32      	ldr	r2, [pc, #200]	@ (8004ce4 <DMA_SetConfig+0x230>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d031      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a30      	ldr	r2, [pc, #192]	@ (8004ce8 <DMA_SetConfig+0x234>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02c      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cec <DMA_SetConfig+0x238>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d027      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf0 <DMA_SetConfig+0x23c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf4 <DMA_SetConfig+0x240>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d01d      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf8 <DMA_SetConfig+0x244>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a29      	ldr	r2, [pc, #164]	@ (8004cfc <DMA_SetConfig+0x248>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a27      	ldr	r2, [pc, #156]	@ (8004d00 <DMA_SetConfig+0x24c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a26      	ldr	r2, [pc, #152]	@ (8004d04 <DMA_SetConfig+0x250>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a24      	ldr	r2, [pc, #144]	@ (8004d08 <DMA_SetConfig+0x254>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <DMA_SetConfig+0x1d0>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a23      	ldr	r2, [pc, #140]	@ (8004d0c <DMA_SetConfig+0x258>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <DMA_SetConfig+0x1d4>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <DMA_SetConfig+0x1d6>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d059      	beq.n	8004d42 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	223f      	movs	r2, #63	@ 0x3f
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b40      	cmp	r3, #64	@ 0x40
 8004cbc:	d138      	bne.n	8004d30 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cce:	e086      	b.n	8004dde <DMA_SetConfig+0x32a>
 8004cd0:	40020010 	.word	0x40020010
 8004cd4:	40020028 	.word	0x40020028
 8004cd8:	40020040 	.word	0x40020040
 8004cdc:	40020058 	.word	0x40020058
 8004ce0:	40020070 	.word	0x40020070
 8004ce4:	40020088 	.word	0x40020088
 8004ce8:	400200a0 	.word	0x400200a0
 8004cec:	400200b8 	.word	0x400200b8
 8004cf0:	40020410 	.word	0x40020410
 8004cf4:	40020428 	.word	0x40020428
 8004cf8:	40020440 	.word	0x40020440
 8004cfc:	40020458 	.word	0x40020458
 8004d00:	40020470 	.word	0x40020470
 8004d04:	40020488 	.word	0x40020488
 8004d08:	400204a0 	.word	0x400204a0
 8004d0c:	400204b8 	.word	0x400204b8
 8004d10:	58025408 	.word	0x58025408
 8004d14:	5802541c 	.word	0x5802541c
 8004d18:	58025430 	.word	0x58025430
 8004d1c:	58025444 	.word	0x58025444
 8004d20:	58025458 	.word	0x58025458
 8004d24:	5802546c 	.word	0x5802546c
 8004d28:	58025480 	.word	0x58025480
 8004d2c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	60da      	str	r2, [r3, #12]
}
 8004d40:	e04d      	b.n	8004dde <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a29      	ldr	r2, [pc, #164]	@ (8004dec <DMA_SetConfig+0x338>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d022      	beq.n	8004d92 <DMA_SetConfig+0x2de>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a27      	ldr	r2, [pc, #156]	@ (8004df0 <DMA_SetConfig+0x33c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d01d      	beq.n	8004d92 <DMA_SetConfig+0x2de>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a26      	ldr	r2, [pc, #152]	@ (8004df4 <DMA_SetConfig+0x340>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d018      	beq.n	8004d92 <DMA_SetConfig+0x2de>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a24      	ldr	r2, [pc, #144]	@ (8004df8 <DMA_SetConfig+0x344>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <DMA_SetConfig+0x2de>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a23      	ldr	r2, [pc, #140]	@ (8004dfc <DMA_SetConfig+0x348>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00e      	beq.n	8004d92 <DMA_SetConfig+0x2de>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a21      	ldr	r2, [pc, #132]	@ (8004e00 <DMA_SetConfig+0x34c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d009      	beq.n	8004d92 <DMA_SetConfig+0x2de>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a20      	ldr	r2, [pc, #128]	@ (8004e04 <DMA_SetConfig+0x350>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d004      	beq.n	8004d92 <DMA_SetConfig+0x2de>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e08 <DMA_SetConfig+0x354>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d101      	bne.n	8004d96 <DMA_SetConfig+0x2e2>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <DMA_SetConfig+0x2e4>
 8004d96:	2300      	movs	r3, #0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2201      	movs	r2, #1
 8004da6:	409a      	lsls	r2, r3
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b40      	cmp	r3, #64	@ 0x40
 8004dba:	d108      	bne.n	8004dce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	60da      	str	r2, [r3, #12]
}
 8004dcc:	e007      	b.n	8004dde <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	60da      	str	r2, [r3, #12]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	58025408 	.word	0x58025408
 8004df0:	5802541c 	.word	0x5802541c
 8004df4:	58025430 	.word	0x58025430
 8004df8:	58025444 	.word	0x58025444
 8004dfc:	58025458 	.word	0x58025458
 8004e00:	5802546c 	.word	0x5802546c
 8004e04:	58025480 	.word	0x58025480
 8004e08:	58025494 	.word	0x58025494

08004e0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a42      	ldr	r2, [pc, #264]	@ (8004f24 <DMA_CalcBaseAndBitshift+0x118>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d04a      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a41      	ldr	r2, [pc, #260]	@ (8004f28 <DMA_CalcBaseAndBitshift+0x11c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d045      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a3f      	ldr	r2, [pc, #252]	@ (8004f2c <DMA_CalcBaseAndBitshift+0x120>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d040      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a3e      	ldr	r2, [pc, #248]	@ (8004f30 <DMA_CalcBaseAndBitshift+0x124>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d03b      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a3c      	ldr	r2, [pc, #240]	@ (8004f34 <DMA_CalcBaseAndBitshift+0x128>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d036      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f38 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d031      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a39      	ldr	r2, [pc, #228]	@ (8004f3c <DMA_CalcBaseAndBitshift+0x130>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d02c      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a38      	ldr	r2, [pc, #224]	@ (8004f40 <DMA_CalcBaseAndBitshift+0x134>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d027      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a36      	ldr	r2, [pc, #216]	@ (8004f44 <DMA_CalcBaseAndBitshift+0x138>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d022      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a35      	ldr	r2, [pc, #212]	@ (8004f48 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d01d      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a33      	ldr	r2, [pc, #204]	@ (8004f4c <DMA_CalcBaseAndBitshift+0x140>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d018      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a32      	ldr	r2, [pc, #200]	@ (8004f50 <DMA_CalcBaseAndBitshift+0x144>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d013      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a30      	ldr	r2, [pc, #192]	@ (8004f54 <DMA_CalcBaseAndBitshift+0x148>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00e      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f58 <DMA_CalcBaseAndBitshift+0x14c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d009      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8004f5c <DMA_CalcBaseAndBitshift+0x150>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d004      	beq.n	8004eb4 <DMA_CalcBaseAndBitshift+0xa8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <DMA_CalcBaseAndBitshift+0x154>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d101      	bne.n	8004eb8 <DMA_CalcBaseAndBitshift+0xac>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <DMA_CalcBaseAndBitshift+0xae>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d024      	beq.n	8004f08 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	3b10      	subs	r3, #16
 8004ec6:	4a27      	ldr	r2, [pc, #156]	@ (8004f64 <DMA_CalcBaseAndBitshift+0x158>)
 8004ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	4a24      	ldr	r2, [pc, #144]	@ (8004f68 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ed8:	5cd3      	ldrb	r3, [r2, r3]
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d908      	bls.n	8004ef8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	4b1f      	ldr	r3, [pc, #124]	@ (8004f6c <DMA_CalcBaseAndBitshift+0x160>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	1d1a      	adds	r2, r3, #4
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ef6:	e00d      	b.n	8004f14 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <DMA_CalcBaseAndBitshift+0x160>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f06:	e005      	b.n	8004f14 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	40020010 	.word	0x40020010
 8004f28:	40020028 	.word	0x40020028
 8004f2c:	40020040 	.word	0x40020040
 8004f30:	40020058 	.word	0x40020058
 8004f34:	40020070 	.word	0x40020070
 8004f38:	40020088 	.word	0x40020088
 8004f3c:	400200a0 	.word	0x400200a0
 8004f40:	400200b8 	.word	0x400200b8
 8004f44:	40020410 	.word	0x40020410
 8004f48:	40020428 	.word	0x40020428
 8004f4c:	40020440 	.word	0x40020440
 8004f50:	40020458 	.word	0x40020458
 8004f54:	40020470 	.word	0x40020470
 8004f58:	40020488 	.word	0x40020488
 8004f5c:	400204a0 	.word	0x400204a0
 8004f60:	400204b8 	.word	0x400204b8
 8004f64:	aaaaaaab 	.word	0xaaaaaaab
 8004f68:	0800d830 	.word	0x0800d830
 8004f6c:	fffffc00 	.word	0xfffffc00

08004f70 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d120      	bne.n	8004fc6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d858      	bhi.n	800503e <DMA_CheckFifoParam+0xce>
 8004f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <DMA_CheckFifoParam+0x24>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08004fb7 	.word	0x08004fb7
 8004f9c:	08004fa5 	.word	0x08004fa5
 8004fa0:	0800503f 	.word	0x0800503f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d048      	beq.n	8005042 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fb4:	e045      	b.n	8005042 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fbe:	d142      	bne.n	8005046 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fc4:	e03f      	b.n	8005046 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fce:	d123      	bne.n	8005018 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d838      	bhi.n	800504a <DMA_CheckFifoParam+0xda>
 8004fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe0 <DMA_CheckFifoParam+0x70>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ff7 	.word	0x08004ff7
 8004fe8:	08004ff1 	.word	0x08004ff1
 8004fec:	08005009 	.word	0x08005009
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
        break;
 8004ff4:	e030      	b.n	8005058 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d025      	beq.n	800504e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005006:	e022      	b.n	800504e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005010:	d11f      	bne.n	8005052 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005016:	e01c      	b.n	8005052 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	2b02      	cmp	r3, #2
 800501e:	d902      	bls.n	8005026 <DMA_CheckFifoParam+0xb6>
 8005020:	2b03      	cmp	r3, #3
 8005022:	d003      	beq.n	800502c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005024:	e018      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
        break;
 800502a:	e015      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005030:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00e      	beq.n	8005056 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
    break;
 800503c:	e00b      	b.n	8005056 <DMA_CheckFifoParam+0xe6>
        break;
 800503e:	bf00      	nop
 8005040:	e00a      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
        break;
 8005042:	bf00      	nop
 8005044:	e008      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
        break;
 8005046:	bf00      	nop
 8005048:	e006      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
        break;
 800504a:	bf00      	nop
 800504c:	e004      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
        break;
 800504e:	bf00      	nop
 8005050:	e002      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
        break;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <DMA_CheckFifoParam+0xe8>
    break;
 8005056:	bf00      	nop
    }
  }

  return status;
 8005058:	7bfb      	ldrb	r3, [r7, #15]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop

08005068 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a38      	ldr	r2, [pc, #224]	@ (800515c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d022      	beq.n	80050c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a36      	ldr	r2, [pc, #216]	@ (8005160 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01d      	beq.n	80050c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a35      	ldr	r2, [pc, #212]	@ (8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d018      	beq.n	80050c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a33      	ldr	r2, [pc, #204]	@ (8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a32      	ldr	r2, [pc, #200]	@ (800516c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00e      	beq.n	80050c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a30      	ldr	r2, [pc, #192]	@ (8005170 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d009      	beq.n	80050c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d004      	beq.n	80050c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d101      	bne.n	80050ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050c6:	2301      	movs	r3, #1
 80050c8:	e000      	b.n	80050cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80050ca:	2300      	movs	r3, #0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01a      	beq.n	8005106 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	3b08      	subs	r3, #8
 80050d8:	4a28      	ldr	r2, [pc, #160]	@ (800517c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	091b      	lsrs	r3, r3, #4
 80050e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	4b26      	ldr	r3, [pc, #152]	@ (8005180 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	461a      	mov	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a24      	ldr	r2, [pc, #144]	@ (8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80050f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2201      	movs	r2, #1
 80050fe:	409a      	lsls	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005104:	e024      	b.n	8005150 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	3b10      	subs	r3, #16
 800510e:	4a1e      	ldr	r2, [pc, #120]	@ (8005188 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	091b      	lsrs	r3, r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a1c      	ldr	r2, [pc, #112]	@ (800518c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d806      	bhi.n	800512e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4a1b      	ldr	r2, [pc, #108]	@ (8005190 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d902      	bls.n	800512e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3308      	adds	r3, #8
 800512c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4b18      	ldr	r3, [pc, #96]	@ (8005194 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	461a      	mov	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a16      	ldr	r2, [pc, #88]	@ (8005198 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005140:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	2201      	movs	r2, #1
 800514a:	409a      	lsls	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	58025408 	.word	0x58025408
 8005160:	5802541c 	.word	0x5802541c
 8005164:	58025430 	.word	0x58025430
 8005168:	58025444 	.word	0x58025444
 800516c:	58025458 	.word	0x58025458
 8005170:	5802546c 	.word	0x5802546c
 8005174:	58025480 	.word	0x58025480
 8005178:	58025494 	.word	0x58025494
 800517c:	cccccccd 	.word	0xcccccccd
 8005180:	16009600 	.word	0x16009600
 8005184:	58025880 	.word	0x58025880
 8005188:	aaaaaaab 	.word	0xaaaaaaab
 800518c:	400204b8 	.word	0x400204b8
 8005190:	4002040f 	.word	0x4002040f
 8005194:	10008200 	.word	0x10008200
 8005198:	40020880 	.word	0x40020880

0800519c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d04a      	beq.n	8005248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d847      	bhi.n	8005248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a25      	ldr	r2, [pc, #148]	@ (8005254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d022      	beq.n	8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a24      	ldr	r2, [pc, #144]	@ (8005258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d01d      	beq.n	8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a22      	ldr	r2, [pc, #136]	@ (800525c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d018      	beq.n	8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a21      	ldr	r2, [pc, #132]	@ (8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00e      	beq.n	8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	@ (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1b      	ldr	r2, [pc, #108]	@ (8005270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d101      	bne.n	800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4b17      	ldr	r3, [pc, #92]	@ (8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	461a      	mov	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a15      	ldr	r2, [pc, #84]	@ (8005278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005224:	671a      	str	r2, [r3, #112]	@ 0x70
 8005226:	e009      	b.n	800523c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4b14      	ldr	r3, [pc, #80]	@ (800527c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	461a      	mov	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a11      	ldr	r2, [pc, #68]	@ (8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800523a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3b01      	subs	r3, #1
 8005240:	2201      	movs	r2, #1
 8005242:	409a      	lsls	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	58025408 	.word	0x58025408
 8005258:	5802541c 	.word	0x5802541c
 800525c:	58025430 	.word	0x58025430
 8005260:	58025444 	.word	0x58025444
 8005264:	58025458 	.word	0x58025458
 8005268:	5802546c 	.word	0x5802546c
 800526c:	58025480 	.word	0x58025480
 8005270:	58025494 	.word	0x58025494
 8005274:	1600963f 	.word	0x1600963f
 8005278:	58025940 	.word	0x58025940
 800527c:	1000823f 	.word	0x1000823f
 8005280:	40020940 	.word	0x40020940

08005284 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	@ 0x24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005292:	4b89      	ldr	r3, [pc, #548]	@ (80054b8 <HAL_GPIO_Init+0x234>)
 8005294:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005296:	e194      	b.n	80055c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	2101      	movs	r1, #1
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	fa01 f303 	lsl.w	r3, r1, r3
 80052a4:	4013      	ands	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 8186 	beq.w	80055bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d005      	beq.n	80052c8 <HAL_GPIO_Init+0x44>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d130      	bne.n	800532a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	005b      	lsls	r3, r3, #1
 80052d2:	2203      	movs	r2, #3
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	43db      	mvns	r3, r3
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4013      	ands	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052fe:	2201      	movs	r2, #1
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	f003 0201 	and.w	r2, r3, #1
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b03      	cmp	r3, #3
 8005334:	d017      	beq.n	8005366 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	2203      	movs	r2, #3
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d123      	bne.n	80053ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	08da      	lsrs	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3208      	adds	r2, #8
 800537a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	220f      	movs	r2, #15
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	08da      	lsrs	r2, r3, #3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3208      	adds	r2, #8
 80053b4:	69b9      	ldr	r1, [r7, #24]
 80053b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	2203      	movs	r2, #3
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	4013      	ands	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f003 0203 	and.w	r2, r3, #3
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80e0 	beq.w	80055bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053fc:	4b2f      	ldr	r3, [pc, #188]	@ (80054bc <HAL_GPIO_Init+0x238>)
 80053fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005402:	4a2e      	ldr	r2, [pc, #184]	@ (80054bc <HAL_GPIO_Init+0x238>)
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800540c:	4b2b      	ldr	r3, [pc, #172]	@ (80054bc <HAL_GPIO_Init+0x238>)
 800540e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800541a:	4a29      	ldr	r2, [pc, #164]	@ (80054c0 <HAL_GPIO_Init+0x23c>)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	089b      	lsrs	r3, r3, #2
 8005420:	3302      	adds	r3, #2
 8005422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005426:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	220f      	movs	r2, #15
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43db      	mvns	r3, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4013      	ands	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <HAL_GPIO_Init+0x240>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d052      	beq.n	80054ec <HAL_GPIO_Init+0x268>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <HAL_GPIO_Init+0x244>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d031      	beq.n	80054b2 <HAL_GPIO_Init+0x22e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <HAL_GPIO_Init+0x248>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d02b      	beq.n	80054ae <HAL_GPIO_Init+0x22a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a1d      	ldr	r2, [pc, #116]	@ (80054d0 <HAL_GPIO_Init+0x24c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d025      	beq.n	80054aa <HAL_GPIO_Init+0x226>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a1c      	ldr	r2, [pc, #112]	@ (80054d4 <HAL_GPIO_Init+0x250>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01f      	beq.n	80054a6 <HAL_GPIO_Init+0x222>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1b      	ldr	r2, [pc, #108]	@ (80054d8 <HAL_GPIO_Init+0x254>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d019      	beq.n	80054a2 <HAL_GPIO_Init+0x21e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1a      	ldr	r2, [pc, #104]	@ (80054dc <HAL_GPIO_Init+0x258>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <HAL_GPIO_Init+0x21a>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a19      	ldr	r2, [pc, #100]	@ (80054e0 <HAL_GPIO_Init+0x25c>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00d      	beq.n	800549a <HAL_GPIO_Init+0x216>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a18      	ldr	r2, [pc, #96]	@ (80054e4 <HAL_GPIO_Init+0x260>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <HAL_GPIO_Init+0x212>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a17      	ldr	r2, [pc, #92]	@ (80054e8 <HAL_GPIO_Init+0x264>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <HAL_GPIO_Init+0x20e>
 800548e:	2309      	movs	r3, #9
 8005490:	e02d      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 8005492:	230a      	movs	r3, #10
 8005494:	e02b      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 8005496:	2308      	movs	r3, #8
 8005498:	e029      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 800549a:	2307      	movs	r3, #7
 800549c:	e027      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 800549e:	2306      	movs	r3, #6
 80054a0:	e025      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054a2:	2305      	movs	r3, #5
 80054a4:	e023      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054a6:	2304      	movs	r3, #4
 80054a8:	e021      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054aa:	2303      	movs	r3, #3
 80054ac:	e01f      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e01d      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e01b      	b.n	80054ee <HAL_GPIO_Init+0x26a>
 80054b6:	bf00      	nop
 80054b8:	58000080 	.word	0x58000080
 80054bc:	58024400 	.word	0x58024400
 80054c0:	58000400 	.word	0x58000400
 80054c4:	58020000 	.word	0x58020000
 80054c8:	58020400 	.word	0x58020400
 80054cc:	58020800 	.word	0x58020800
 80054d0:	58020c00 	.word	0x58020c00
 80054d4:	58021000 	.word	0x58021000
 80054d8:	58021400 	.word	0x58021400
 80054dc:	58021800 	.word	0x58021800
 80054e0:	58021c00 	.word	0x58021c00
 80054e4:	58022000 	.word	0x58022000
 80054e8:	58022400 	.word	0x58022400
 80054ec:	2300      	movs	r3, #0
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	f002 0203 	and.w	r2, r2, #3
 80054f4:	0092      	lsls	r2, r2, #2
 80054f6:	4093      	lsls	r3, r2
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054fe:	4938      	ldr	r1, [pc, #224]	@ (80055e0 <HAL_GPIO_Init+0x35c>)
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	089b      	lsrs	r3, r3, #2
 8005504:	3302      	adds	r3, #2
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	43db      	mvns	r3, r3
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	4013      	ands	r3, r2
 800551c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005532:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800553a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	43db      	mvns	r3, r3
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4013      	ands	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005560:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	43db      	mvns	r3, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4013      	ands	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3301      	adds	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	fa22 f303 	lsr.w	r3, r2, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f47f ae63 	bne.w	8005298 <HAL_GPIO_Init+0x14>
  }
}
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	3724      	adds	r7, #36	@ 0x24
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	58000400 	.word	0x58000400

080055e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	807b      	strh	r3, [r7, #2]
 80055f0:	4613      	mov	r3, r2
 80055f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055f4:	787b      	ldrb	r3, [r7, #1]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055fa:	887a      	ldrh	r2, [r7, #2]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005600:	e003      	b.n	800560a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005602:	887b      	ldrh	r3, [r7, #2]
 8005604:	041a      	lsls	r2, r3, #16
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	619a      	str	r2, [r3, #24]
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
	...

08005618 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005620:	4b19      	ldr	r3, [pc, #100]	@ (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d00a      	beq.n	8005642 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800562c:	4b16      	ldr	r3, [pc, #88]	@ (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d001      	beq.n	800563e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e01f      	b.n	800567e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e01d      	b.n	800567e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005642:	4b11      	ldr	r3, [pc, #68]	@ (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f023 0207 	bic.w	r2, r3, #7
 800564a:	490f      	ldr	r1, [pc, #60]	@ (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4313      	orrs	r3, r2
 8005650:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005652:	f7fc fe83 	bl	800235c <HAL_GetTick>
 8005656:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005658:	e009      	b.n	800566e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800565a:	f7fc fe7f 	bl	800235c <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005668:	d901      	bls.n	800566e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e007      	b.n	800567e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800567a:	d1ee      	bne.n	800565a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	58024800 	.word	0x58024800

0800568c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b08c      	sub	sp, #48	@ 0x30
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	f000 bc48 	b.w	8005f30 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8088 	beq.w	80057be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ae:	4b99      	ldr	r3, [pc, #612]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056b8:	4b96      	ldr	r3, [pc, #600]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80056ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80056be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d007      	beq.n	80056d4 <HAL_RCC_OscConfig+0x48>
 80056c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c6:	2b18      	cmp	r3, #24
 80056c8:	d111      	bne.n	80056ee <HAL_RCC_OscConfig+0x62>
 80056ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d10c      	bne.n	80056ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d06d      	beq.n	80057bc <HAL_RCC_OscConfig+0x130>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d169      	bne.n	80057bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f000 bc21 	b.w	8005f30 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056f6:	d106      	bne.n	8005706 <HAL_RCC_OscConfig+0x7a>
 80056f8:	4b86      	ldr	r3, [pc, #536]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a85      	ldr	r2, [pc, #532]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80056fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	e02e      	b.n	8005764 <HAL_RCC_OscConfig+0xd8>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10c      	bne.n	8005728 <HAL_RCC_OscConfig+0x9c>
 800570e:	4b81      	ldr	r3, [pc, #516]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a80      	ldr	r2, [pc, #512]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	4b7e      	ldr	r3, [pc, #504]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7d      	ldr	r2, [pc, #500]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005720:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e01d      	b.n	8005764 <HAL_RCC_OscConfig+0xd8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005730:	d10c      	bne.n	800574c <HAL_RCC_OscConfig+0xc0>
 8005732:	4b78      	ldr	r3, [pc, #480]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a77      	ldr	r2, [pc, #476]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	4b75      	ldr	r3, [pc, #468]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a74      	ldr	r2, [pc, #464]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	e00b      	b.n	8005764 <HAL_RCC_OscConfig+0xd8>
 800574c:	4b71      	ldr	r3, [pc, #452]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a70      	ldr	r2, [pc, #448]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	4b6e      	ldr	r3, [pc, #440]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6d      	ldr	r2, [pc, #436]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 800575e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d013      	beq.n	8005794 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fc fdf6 	bl	800235c <HAL_GetTick>
 8005770:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005774:	f7fc fdf2 	bl	800235c <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	@ 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e3d4      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005786:	4b63      	ldr	r3, [pc, #396]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0xe8>
 8005792:	e014      	b.n	80057be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005794:	f7fc fde2 	bl	800235c <HAL_GetTick>
 8005798:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800579c:	f7fc fdde 	bl	800235c <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	@ 0x64
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e3c0      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057ae:	4b59      	ldr	r3, [pc, #356]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0x110>
 80057ba:	e000      	b.n	80057be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 80ca 	beq.w	8005960 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057cc:	4b51      	ldr	r3, [pc, #324]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80057d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_RCC_OscConfig+0x166>
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	2b18      	cmp	r3, #24
 80057e6:	d156      	bne.n	8005896 <HAL_RCC_OscConfig+0x20a>
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0303 	and.w	r3, r3, #3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d151      	bne.n	8005896 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057f2:	4b48      	ldr	r3, [pc, #288]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_RCC_OscConfig+0x17e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e392      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800580a:	4b42      	ldr	r3, [pc, #264]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f023 0219 	bic.w	r2, r3, #25
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	493f      	ldr	r1, [pc, #252]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581c:	f7fc fd9e 	bl	800235c <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005824:	f7fc fd9a 	bl	800235c <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e37c      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005836:	4b37      	ldr	r3, [pc, #220]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f0      	beq.n	8005824 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005842:	f7fc fdbb 	bl	80023bc <HAL_GetREVID>
 8005846:	4603      	mov	r3, r0
 8005848:	f241 0203 	movw	r2, #4099	@ 0x1003
 800584c:	4293      	cmp	r3, r2
 800584e:	d817      	bhi.n	8005880 <HAL_RCC_OscConfig+0x1f4>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d108      	bne.n	800586a <HAL_RCC_OscConfig+0x1de>
 8005858:	4b2e      	ldr	r3, [pc, #184]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005860:	4a2c      	ldr	r2, [pc, #176]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005866:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005868:	e07a      	b.n	8005960 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586a:	4b2a      	ldr	r3, [pc, #168]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	031b      	lsls	r3, r3, #12
 8005878:	4926      	ldr	r1, [pc, #152]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 800587a:	4313      	orrs	r3, r2
 800587c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800587e:	e06f      	b.n	8005960 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005880:	4b24      	ldr	r3, [pc, #144]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	4921      	ldr	r1, [pc, #132]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005894:	e064      	b.n	8005960 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d047      	beq.n	800592e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800589e:	4b1d      	ldr	r3, [pc, #116]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 0219 	bic.w	r2, r3, #25
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	491a      	ldr	r1, [pc, #104]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b0:	f7fc fd54 	bl	800235c <HAL_GetTick>
 80058b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058b8:	f7fc fd50 	bl	800235c <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e332      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ca:	4b12      	ldr	r3, [pc, #72]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0304 	and.w	r3, r3, #4
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d6:	f7fc fd71 	bl	80023bc <HAL_GetREVID>
 80058da:	4603      	mov	r3, r0
 80058dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d819      	bhi.n	8005918 <HAL_RCC_OscConfig+0x28c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b40      	cmp	r3, #64	@ 0x40
 80058ea:	d108      	bne.n	80058fe <HAL_RCC_OscConfig+0x272>
 80058ec:	4b09      	ldr	r3, [pc, #36]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80058f4:	4a07      	ldr	r2, [pc, #28]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 80058f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058fa:	6053      	str	r3, [r2, #4]
 80058fc:	e030      	b.n	8005960 <HAL_RCC_OscConfig+0x2d4>
 80058fe:	4b05      	ldr	r3, [pc, #20]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	031b      	lsls	r3, r3, #12
 800590c:	4901      	ldr	r1, [pc, #4]	@ (8005914 <HAL_RCC_OscConfig+0x288>)
 800590e:	4313      	orrs	r3, r2
 8005910:	604b      	str	r3, [r1, #4]
 8005912:	e025      	b.n	8005960 <HAL_RCC_OscConfig+0x2d4>
 8005914:	58024400 	.word	0x58024400
 8005918:	4b9a      	ldr	r3, [pc, #616]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	061b      	lsls	r3, r3, #24
 8005926:	4997      	ldr	r1, [pc, #604]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005928:	4313      	orrs	r3, r2
 800592a:	604b      	str	r3, [r1, #4]
 800592c:	e018      	b.n	8005960 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800592e:	4b95      	ldr	r3, [pc, #596]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a94      	ldr	r2, [pc, #592]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593a:	f7fc fd0f 	bl	800235c <HAL_GetTick>
 800593e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005942:	f7fc fd0b 	bl	800235c <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e2ed      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005954:	4b8b      	ldr	r3, [pc, #556]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1f0      	bne.n	8005942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80a9 	beq.w	8005ac0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800596e:	4b85      	ldr	r3, [pc, #532]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005976:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005978:	4b82      	ldr	r3, [pc, #520]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b08      	cmp	r3, #8
 8005982:	d007      	beq.n	8005994 <HAL_RCC_OscConfig+0x308>
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2b18      	cmp	r3, #24
 8005988:	d13a      	bne.n	8005a00 <HAL_RCC_OscConfig+0x374>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d135      	bne.n	8005a00 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005994:	4b7b      	ldr	r3, [pc, #492]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_RCC_OscConfig+0x320>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	2b80      	cmp	r3, #128	@ 0x80
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e2c1      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059ac:	f7fc fd06 	bl	80023bc <HAL_GetREVID>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d817      	bhi.n	80059ea <HAL_RCC_OscConfig+0x35e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d108      	bne.n	80059d4 <HAL_RCC_OscConfig+0x348>
 80059c2:	4b70      	ldr	r3, [pc, #448]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80059ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 80059cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059d2:	e075      	b.n	8005ac0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059d4:	4b6b      	ldr	r3, [pc, #428]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	069b      	lsls	r3, r3, #26
 80059e2:	4968      	ldr	r1, [pc, #416]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059e8:	e06a      	b.n	8005ac0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059ea:	4b66      	ldr	r3, [pc, #408]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	061b      	lsls	r3, r3, #24
 80059f8:	4962      	ldr	r1, [pc, #392]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059fe:	e05f      	b.n	8005ac0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d042      	beq.n	8005a8e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005a08:	4b5e      	ldr	r3, [pc, #376]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a5d      	ldr	r2, [pc, #372]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a14:	f7fc fca2 	bl	800235c <HAL_GetTick>
 8005a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a1c:	f7fc fc9e 	bl	800235c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e280      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a2e:	4b55      	ldr	r3, [pc, #340]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a3a:	f7fc fcbf 	bl	80023bc <HAL_GetREVID>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d817      	bhi.n	8005a78 <HAL_RCC_OscConfig+0x3ec>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	2b20      	cmp	r3, #32
 8005a4e:	d108      	bne.n	8005a62 <HAL_RCC_OscConfig+0x3d6>
 8005a50:	4b4c      	ldr	r3, [pc, #304]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005a58:	4a4a      	ldr	r2, [pc, #296]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a5e:	6053      	str	r3, [r2, #4]
 8005a60:	e02e      	b.n	8005ac0 <HAL_RCC_OscConfig+0x434>
 8005a62:	4b48      	ldr	r3, [pc, #288]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	069b      	lsls	r3, r3, #26
 8005a70:	4944      	ldr	r1, [pc, #272]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	604b      	str	r3, [r1, #4]
 8005a76:	e023      	b.n	8005ac0 <HAL_RCC_OscConfig+0x434>
 8005a78:	4b42      	ldr	r3, [pc, #264]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	061b      	lsls	r3, r3, #24
 8005a86:	493f      	ldr	r1, [pc, #252]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60cb      	str	r3, [r1, #12]
 8005a8c:	e018      	b.n	8005ac0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a3c      	ldr	r2, [pc, #240]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005a94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9a:	f7fc fc5f 	bl	800235c <HAL_GetTick>
 8005a9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005aa2:	f7fc fc5b 	bl	800235c <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e23d      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ab4:	4b33      	ldr	r3, [pc, #204]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1f0      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d036      	beq.n	8005b3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	695b      	ldr	r3, [r3, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d019      	beq.n	8005b08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005ada:	f043 0301 	orr.w	r3, r3, #1
 8005ade:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae0:	f7fc fc3c 	bl	800235c <HAL_GetTick>
 8005ae4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae8:	f7fc fc38 	bl	800235c <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e21a      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005afa:	4b22      	ldr	r3, [pc, #136]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x45c>
 8005b06:	e018      	b.n	8005b3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b08:	4b1e      	ldr	r3, [pc, #120]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b14:	f7fc fc22 	bl	800235c <HAL_GetTick>
 8005b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b1c:	f7fc fc1e 	bl	800235c <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e200      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b2e:	4b15      	ldr	r3, [pc, #84]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d039      	beq.n	8005bba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d01c      	beq.n	8005b88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a0c      	ldr	r2, [pc, #48]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005b54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b5a:	f7fc fbff 	bl	800235c <HAL_GetTick>
 8005b5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b62:	f7fc fbfb 	bl	800235c <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e1dd      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b74:	4b03      	ldr	r3, [pc, #12]	@ (8005b84 <HAL_RCC_OscConfig+0x4f8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x4d6>
 8005b80:	e01b      	b.n	8005bba <HAL_RCC_OscConfig+0x52e>
 8005b82:	bf00      	nop
 8005b84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b88:	4b9b      	ldr	r3, [pc, #620]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a9a      	ldr	r2, [pc, #616]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005b8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b94:	f7fc fbe2 	bl	800235c <HAL_GetTick>
 8005b98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b9c:	f7fc fbde 	bl	800235c <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e1c0      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005bae:	4b92      	ldr	r3, [pc, #584]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8081 	beq.w	8005cca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8005dfc <HAL_RCC_OscConfig+0x770>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a8b      	ldr	r2, [pc, #556]	@ (8005dfc <HAL_RCC_OscConfig+0x770>)
 8005bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bd4:	f7fc fbc2 	bl	800235c <HAL_GetTick>
 8005bd8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bdc:	f7fc fbbe 	bl	800235c <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b64      	cmp	r3, #100	@ 0x64
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e1a0      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bee:	4b83      	ldr	r3, [pc, #524]	@ (8005dfc <HAL_RCC_OscConfig+0x770>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0f0      	beq.n	8005bdc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d106      	bne.n	8005c10 <HAL_RCC_OscConfig+0x584>
 8005c02:	4b7d      	ldr	r3, [pc, #500]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c06:	4a7c      	ldr	r2, [pc, #496]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c0e:	e02d      	b.n	8005c6c <HAL_RCC_OscConfig+0x5e0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10c      	bne.n	8005c32 <HAL_RCC_OscConfig+0x5a6>
 8005c18:	4b77      	ldr	r3, [pc, #476]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1c:	4a76      	ldr	r2, [pc, #472]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c24:	4b74      	ldr	r3, [pc, #464]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c28:	4a73      	ldr	r2, [pc, #460]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c2a:	f023 0304 	bic.w	r3, r3, #4
 8005c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c30:	e01c      	b.n	8005c6c <HAL_RCC_OscConfig+0x5e0>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b05      	cmp	r3, #5
 8005c38:	d10c      	bne.n	8005c54 <HAL_RCC_OscConfig+0x5c8>
 8005c3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3e:	4a6e      	ldr	r2, [pc, #440]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c40:	f043 0304 	orr.w	r3, r3, #4
 8005c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c46:	4b6c      	ldr	r3, [pc, #432]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4a:	4a6b      	ldr	r2, [pc, #428]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c4c:	f043 0301 	orr.w	r3, r3, #1
 8005c50:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c52:	e00b      	b.n	8005c6c <HAL_RCC_OscConfig+0x5e0>
 8005c54:	4b68      	ldr	r3, [pc, #416]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c58:	4a67      	ldr	r2, [pc, #412]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c5a:	f023 0301 	bic.w	r3, r3, #1
 8005c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c60:	4b65      	ldr	r3, [pc, #404]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c64:	4a64      	ldr	r2, [pc, #400]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c66:	f023 0304 	bic.w	r3, r3, #4
 8005c6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d015      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c74:	f7fc fb72 	bl	800235c <HAL_GetTick>
 8005c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c7a:	e00a      	b.n	8005c92 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7c:	f7fc fb6e 	bl	800235c <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e14e      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c92:	4b59      	ldr	r3, [pc, #356]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0ee      	beq.n	8005c7c <HAL_RCC_OscConfig+0x5f0>
 8005c9e:	e014      	b.n	8005cca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca0:	f7fc fb5c 	bl	800235c <HAL_GetTick>
 8005ca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005ca6:	e00a      	b.n	8005cbe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca8:	f7fc fb58 	bl	800235c <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e138      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1ee      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 812d 	beq.w	8005f2e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005cd4:	4b48      	ldr	r3, [pc, #288]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cdc:	2b18      	cmp	r3, #24
 8005cde:	f000 80bd 	beq.w	8005e5c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	f040 809e 	bne.w	8005e28 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cec:	4b42      	ldr	r3, [pc, #264]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a41      	ldr	r2, [pc, #260]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005cf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf8:	f7fc fb30 	bl	800235c <HAL_GetTick>
 8005cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d00:	f7fc fb2c 	bl	800235c <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e10e      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d12:	4b39      	ldr	r3, [pc, #228]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1f0      	bne.n	8005d00 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d1e:	4b36      	ldr	r3, [pc, #216]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d22:	4b37      	ldr	r3, [pc, #220]	@ (8005e00 <HAL_RCC_OscConfig+0x774>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d2e:	0112      	lsls	r2, r2, #4
 8005d30:	430a      	orrs	r2, r1
 8005d32:	4931      	ldr	r1, [pc, #196]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d46:	3b01      	subs	r3, #1
 8005d48:	025b      	lsls	r3, r3, #9
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	3b01      	subs	r3, #1
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d60:	3b01      	subs	r3, #1
 8005d62:	061b      	lsls	r3, r3, #24
 8005d64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d68:	4923      	ldr	r1, [pc, #140]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005d6e:	4b22      	ldr	r3, [pc, #136]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	4a21      	ldr	r2, [pc, #132]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d7e:	4b21      	ldr	r3, [pc, #132]	@ (8005e04 <HAL_RCC_OscConfig+0x778>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d86:	00d2      	lsls	r2, r2, #3
 8005d88:	491b      	ldr	r1, [pc, #108]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d92:	f023 020c 	bic.w	r2, r3, #12
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	4917      	ldr	r1, [pc, #92]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005da0:	4b15      	ldr	r3, [pc, #84]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	f023 0202 	bic.w	r2, r3, #2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dac:	4912      	ldr	r1, [pc, #72]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005db2:	4b11      	ldr	r3, [pc, #68]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	4a10      	ldr	r2, [pc, #64]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005dca:	4b0b      	ldr	r3, [pc, #44]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	4a0a      	ldr	r2, [pc, #40]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005dd6:	4b08      	ldr	r3, [pc, #32]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	4a07      	ldr	r2, [pc, #28]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005de2:	4b05      	ldr	r3, [pc, #20]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a04      	ldr	r2, [pc, #16]	@ (8005df8 <HAL_RCC_OscConfig+0x76c>)
 8005de8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fc fab5 	bl	800235c <HAL_GetTick>
 8005df2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005df4:	e011      	b.n	8005e1a <HAL_RCC_OscConfig+0x78e>
 8005df6:	bf00      	nop
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	58024800 	.word	0x58024800
 8005e00:	fffffc0c 	.word	0xfffffc0c
 8005e04:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fc faa8 	bl	800235c <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e08a      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e1a:	4b47      	ldr	r3, [pc, #284]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d0f0      	beq.n	8005e08 <HAL_RCC_OscConfig+0x77c>
 8005e26:	e082      	b.n	8005f2e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e28:	4b43      	ldr	r3, [pc, #268]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a42      	ldr	r2, [pc, #264]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fc fa92 	bl	800235c <HAL_GetTick>
 8005e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e3c:	f7fc fa8e 	bl	800235c <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e070      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x7b0>
 8005e5a:	e068      	b.n	8005f2e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e5c:	4b36      	ldr	r3, [pc, #216]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e62:	4b35      	ldr	r3, [pc, #212]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e66:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d031      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f003 0203 	and.w	r2, r3, #3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d12a      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d122      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d11a      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	0a5b      	lsrs	r3, r3, #9
 8005ea2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eaa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d111      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ebc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d108      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	0e1b      	lsrs	r3, r3, #24
 8005ec6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ece:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d001      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e02b      	b.n	8005f30 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005ed8:	4b17      	ldr	r3, [pc, #92]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005edc:	08db      	lsrs	r3, r3, #3
 8005ede:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ee2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d01f      	beq.n	8005f2e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005eee:	4b12      	ldr	r3, [pc, #72]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	4a11      	ldr	r2, [pc, #68]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005efa:	f7fc fa2f 	bl	800235c <HAL_GetTick>
 8005efe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005f00:	bf00      	nop
 8005f02:	f7fc fa2b 	bl	800235c <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d0f9      	beq.n	8005f02 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f12:	4b0a      	ldr	r3, [pc, #40]	@ (8005f3c <HAL_RCC_OscConfig+0x8b0>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f1a:	00d2      	lsls	r2, r2, #3
 8005f1c:	4906      	ldr	r1, [pc, #24]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005f22:	4b05      	ldr	r3, [pc, #20]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	4a04      	ldr	r2, [pc, #16]	@ (8005f38 <HAL_RCC_OscConfig+0x8ac>)
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3730      	adds	r7, #48	@ 0x30
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	ffff0007 	.word	0xffff0007

08005f40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e19c      	b.n	800628e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f54:	4b8a      	ldr	r3, [pc, #552]	@ (8006180 <HAL_RCC_ClockConfig+0x240>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 030f 	and.w	r3, r3, #15
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d910      	bls.n	8005f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f62:	4b87      	ldr	r3, [pc, #540]	@ (8006180 <HAL_RCC_ClockConfig+0x240>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f023 020f 	bic.w	r2, r3, #15
 8005f6a:	4985      	ldr	r1, [pc, #532]	@ (8006180 <HAL_RCC_ClockConfig+0x240>)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f72:	4b83      	ldr	r3, [pc, #524]	@ (8006180 <HAL_RCC_ClockConfig+0x240>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d001      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e184      	b.n	800628e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d010      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	4b7b      	ldr	r3, [pc, #492]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d908      	bls.n	8005fb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fa0:	4b78      	ldr	r3, [pc, #480]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	4975      	ldr	r1, [pc, #468]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d010      	beq.n	8005fe0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	695a      	ldr	r2, [r3, #20]
 8005fc2:	4b70      	ldr	r3, [pc, #448]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d908      	bls.n	8005fe0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fce:	4b6d      	ldr	r3, [pc, #436]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	496a      	ldr	r1, [pc, #424]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d010      	beq.n	800600e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699a      	ldr	r2, [r3, #24]
 8005ff0:	4b64      	ldr	r3, [pc, #400]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d908      	bls.n	800600e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ffc:	4b61      	ldr	r3, [pc, #388]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	495e      	ldr	r1, [pc, #376]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 800600a:	4313      	orrs	r3, r2
 800600c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d010      	beq.n	800603c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	69da      	ldr	r2, [r3, #28]
 800601e:	4b59      	ldr	r3, [pc, #356]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006026:	429a      	cmp	r2, r3
 8006028:	d908      	bls.n	800603c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800602a:	4b56      	ldr	r3, [pc, #344]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	4953      	ldr	r1, [pc, #332]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8006038:	4313      	orrs	r3, r2
 800603a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d010      	beq.n	800606a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	4b4d      	ldr	r3, [pc, #308]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	429a      	cmp	r2, r3
 8006056:	d908      	bls.n	800606a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006058:	4b4a      	ldr	r3, [pc, #296]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 800605a:	699b      	ldr	r3, [r3, #24]
 800605c:	f023 020f 	bic.w	r2, r3, #15
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	4947      	ldr	r1, [pc, #284]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8006066:	4313      	orrs	r3, r2
 8006068:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d055      	beq.n	8006122 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006076:	4b43      	ldr	r3, [pc, #268]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	4940      	ldr	r1, [pc, #256]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8006084:	4313      	orrs	r3, r2
 8006086:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b02      	cmp	r3, #2
 800608e:	d107      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006090:	4b3c      	ldr	r3, [pc, #240]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d121      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e0f6      	b.n	800628e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	2b03      	cmp	r3, #3
 80060a6:	d107      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060a8:	4b36      	ldr	r3, [pc, #216]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d115      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0ea      	b.n	800628e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d107      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060c0:	4b30      	ldr	r3, [pc, #192]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d109      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0de      	b.n	800628e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e0d6      	b.n	800628e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060e0:	4b28      	ldr	r3, [pc, #160]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f023 0207 	bic.w	r2, r3, #7
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	4925      	ldr	r1, [pc, #148]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f2:	f7fc f933 	bl	800235c <HAL_GetTick>
 80060f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f8:	e00a      	b.n	8006110 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060fa:	f7fc f92f 	bl	800235c <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006108:	4293      	cmp	r3, r2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e0be      	b.n	800628e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006110:	4b1c      	ldr	r3, [pc, #112]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	429a      	cmp	r2, r3
 8006120:	d1eb      	bne.n	80060fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d010      	beq.n	8006150 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	4b14      	ldr	r3, [pc, #80]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	429a      	cmp	r2, r3
 800613c:	d208      	bcs.n	8006150 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800613e:	4b11      	ldr	r3, [pc, #68]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f023 020f 	bic.w	r2, r3, #15
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	490e      	ldr	r1, [pc, #56]	@ (8006184 <HAL_RCC_ClockConfig+0x244>)
 800614c:	4313      	orrs	r3, r2
 800614e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006150:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <HAL_RCC_ClockConfig+0x240>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d214      	bcs.n	8006188 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615e:	4b08      	ldr	r3, [pc, #32]	@ (8006180 <HAL_RCC_ClockConfig+0x240>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f023 020f 	bic.w	r2, r3, #15
 8006166:	4906      	ldr	r1, [pc, #24]	@ (8006180 <HAL_RCC_ClockConfig+0x240>)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	4313      	orrs	r3, r2
 800616c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616e:	4b04      	ldr	r3, [pc, #16]	@ (8006180 <HAL_RCC_ClockConfig+0x240>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d005      	beq.n	8006188 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e086      	b.n	800628e <HAL_RCC_ClockConfig+0x34e>
 8006180:	52002000 	.word	0x52002000
 8006184:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d010      	beq.n	80061b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	4b3f      	ldr	r3, [pc, #252]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d208      	bcs.n	80061b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	4939      	ldr	r1, [pc, #228]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d010      	beq.n	80061e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695a      	ldr	r2, [r3, #20]
 80061c6:	4b34      	ldr	r3, [pc, #208]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d208      	bcs.n	80061e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061d2:	4b31      	ldr	r3, [pc, #196]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 80061d4:	69db      	ldr	r3, [r3, #28]
 80061d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	492e      	ldr	r1, [pc, #184]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d010      	beq.n	8006212 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	699a      	ldr	r2, [r3, #24]
 80061f4:	4b28      	ldr	r3, [pc, #160]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d208      	bcs.n	8006212 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006200:	4b25      	ldr	r3, [pc, #148]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	4922      	ldr	r1, [pc, #136]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 800620e:	4313      	orrs	r3, r2
 8006210:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d010      	beq.n	8006240 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69da      	ldr	r2, [r3, #28]
 8006222:	4b1d      	ldr	r3, [pc, #116]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800622a:	429a      	cmp	r2, r3
 800622c:	d208      	bcs.n	8006240 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800622e:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	4917      	ldr	r1, [pc, #92]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 800623c:	4313      	orrs	r3, r2
 800623e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006240:	f000 f834 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 8006244:	4602      	mov	r2, r0
 8006246:	4b14      	ldr	r3, [pc, #80]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	0a1b      	lsrs	r3, r3, #8
 800624c:	f003 030f 	and.w	r3, r3, #15
 8006250:	4912      	ldr	r1, [pc, #72]	@ (800629c <HAL_RCC_ClockConfig+0x35c>)
 8006252:	5ccb      	ldrb	r3, [r1, r3]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
 800625c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800625e:	4b0e      	ldr	r3, [pc, #56]	@ (8006298 <HAL_RCC_ClockConfig+0x358>)
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	f003 030f 	and.w	r3, r3, #15
 8006266:	4a0d      	ldr	r2, [pc, #52]	@ (800629c <HAL_RCC_ClockConfig+0x35c>)
 8006268:	5cd3      	ldrb	r3, [r2, r3]
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	fa22 f303 	lsr.w	r3, r2, r3
 8006274:	4a0a      	ldr	r2, [pc, #40]	@ (80062a0 <HAL_RCC_ClockConfig+0x360>)
 8006276:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006278:	4a0a      	ldr	r2, [pc, #40]	@ (80062a4 <HAL_RCC_ClockConfig+0x364>)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <HAL_RCC_ClockConfig+0x368>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f7fc f820 	bl	80022c8 <HAL_InitTick>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800628c:	7bfb      	ldrb	r3, [r7, #15]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	58024400 	.word	0x58024400
 800629c:	0800d820 	.word	0x0800d820
 80062a0:	2400000c 	.word	0x2400000c
 80062a4:	24000008 	.word	0x24000008
 80062a8:	24000010 	.word	0x24000010

080062ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b089      	sub	sp, #36	@ 0x24
 80062b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062b2:	4bb3      	ldr	r3, [pc, #716]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062ba:	2b18      	cmp	r3, #24
 80062bc:	f200 8155 	bhi.w	800656a <HAL_RCC_GetSysClockFreq+0x2be>
 80062c0:	a201      	add	r2, pc, #4	@ (adr r2, 80062c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80062c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c6:	bf00      	nop
 80062c8:	0800632d 	.word	0x0800632d
 80062cc:	0800656b 	.word	0x0800656b
 80062d0:	0800656b 	.word	0x0800656b
 80062d4:	0800656b 	.word	0x0800656b
 80062d8:	0800656b 	.word	0x0800656b
 80062dc:	0800656b 	.word	0x0800656b
 80062e0:	0800656b 	.word	0x0800656b
 80062e4:	0800656b 	.word	0x0800656b
 80062e8:	08006353 	.word	0x08006353
 80062ec:	0800656b 	.word	0x0800656b
 80062f0:	0800656b 	.word	0x0800656b
 80062f4:	0800656b 	.word	0x0800656b
 80062f8:	0800656b 	.word	0x0800656b
 80062fc:	0800656b 	.word	0x0800656b
 8006300:	0800656b 	.word	0x0800656b
 8006304:	0800656b 	.word	0x0800656b
 8006308:	08006359 	.word	0x08006359
 800630c:	0800656b 	.word	0x0800656b
 8006310:	0800656b 	.word	0x0800656b
 8006314:	0800656b 	.word	0x0800656b
 8006318:	0800656b 	.word	0x0800656b
 800631c:	0800656b 	.word	0x0800656b
 8006320:	0800656b 	.word	0x0800656b
 8006324:	0800656b 	.word	0x0800656b
 8006328:	0800635f 	.word	0x0800635f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800632c:	4b94      	ldr	r3, [pc, #592]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0320 	and.w	r3, r3, #32
 8006334:	2b00      	cmp	r3, #0
 8006336:	d009      	beq.n	800634c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006338:	4b91      	ldr	r3, [pc, #580]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	08db      	lsrs	r3, r3, #3
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	4a90      	ldr	r2, [pc, #576]	@ (8006584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
 8006348:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800634a:	e111      	b.n	8006570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800634c:	4b8d      	ldr	r3, [pc, #564]	@ (8006584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800634e:	61bb      	str	r3, [r7, #24]
      break;
 8006350:	e10e      	b.n	8006570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006352:	4b8d      	ldr	r3, [pc, #564]	@ (8006588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006354:	61bb      	str	r3, [r7, #24]
      break;
 8006356:	e10b      	b.n	8006570 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006358:	4b8c      	ldr	r3, [pc, #560]	@ (800658c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800635a:	61bb      	str	r3, [r7, #24]
      break;
 800635c:	e108      	b.n	8006570 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800635e:	4b88      	ldr	r3, [pc, #544]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006368:	4b85      	ldr	r3, [pc, #532]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800636a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636c:	091b      	lsrs	r3, r3, #4
 800636e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006372:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006374:	4b82      	ldr	r3, [pc, #520]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	f003 0301 	and.w	r3, r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800637e:	4b80      	ldr	r3, [pc, #512]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006382:	08db      	lsrs	r3, r3, #3
 8006384:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006396:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80e1 	beq.w	8006564 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	f000 8083 	beq.w	80064b0 <HAL_RCC_GetSysClockFreq+0x204>
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	f200 80a1 	bhi.w	80064f4 <HAL_RCC_GetSysClockFreq+0x248>
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_RCC_GetSysClockFreq+0x114>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d056      	beq.n	800646c <HAL_RCC_GetSysClockFreq+0x1c0>
 80063be:	e099      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d02d      	beq.n	8006428 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	08db      	lsrs	r3, r3, #3
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	4a6b      	ldr	r2, [pc, #428]	@ (8006584 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063d8:	fa22 f303 	lsr.w	r3, r2, r3
 80063dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	ee07 3a90 	vmov	s15, r3
 80063e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063f6:	4b62      	ldr	r3, [pc, #392]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006406:	ed97 6a02 	vldr	s12, [r7, #8]
 800640a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800640e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800641a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800641e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006422:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006426:	e087      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006594 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643a:	4b51      	ldr	r3, [pc, #324]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	ed97 6a02 	vldr	s12, [r7, #8]
 800644e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006590 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800646a:	e065      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006476:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006598 <HAL_RCC_GetSysClockFreq+0x2ec>
 800647a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647e:	4b40      	ldr	r3, [pc, #256]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006492:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006590 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064ae:	e043      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800659c <HAL_RCC_GetSysClockFreq+0x2f0>
 80064be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006590 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064f2:	e021      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006598 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006506:	4b1e      	ldr	r3, [pc, #120]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	ed97 6a02 	vldr	s12, [r7, #8]
 800651a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006590 <HAL_RCC_GetSysClockFreq+0x2e4>
 800651e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800652a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006536:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006538:	4b11      	ldr	r3, [pc, #68]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653c:	0a5b      	lsrs	r3, r3, #9
 800653e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006542:	3301      	adds	r3, #1
 8006544:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	ee07 3a90 	vmov	s15, r3
 800654c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006550:	edd7 6a07 	vldr	s13, [r7, #28]
 8006554:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800655c:	ee17 3a90 	vmov	r3, s15
 8006560:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006562:	e005      	b.n	8006570 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	61bb      	str	r3, [r7, #24]
      break;
 8006568:	e002      	b.n	8006570 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800656a:	4b07      	ldr	r3, [pc, #28]	@ (8006588 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800656c:	61bb      	str	r3, [r7, #24]
      break;
 800656e:	bf00      	nop
  }

  return sysclockfreq;
 8006570:	69bb      	ldr	r3, [r7, #24]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3724      	adds	r7, #36	@ 0x24
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	58024400 	.word	0x58024400
 8006584:	03d09000 	.word	0x03d09000
 8006588:	003d0900 	.word	0x003d0900
 800658c:	007a1200 	.word	0x007a1200
 8006590:	46000000 	.word	0x46000000
 8006594:	4c742400 	.word	0x4c742400
 8006598:	4a742400 	.word	0x4a742400
 800659c:	4af42400 	.word	0x4af42400

080065a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a4:	b0ca      	sub	sp, #296	@ 0x128
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065ac:	2300      	movs	r3, #0
 80065ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065b2:	2300      	movs	r3, #0
 80065b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80065c4:	2500      	movs	r5, #0
 80065c6:	ea54 0305 	orrs.w	r3, r4, r5
 80065ca:	d049      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065d6:	d02f      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80065d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065dc:	d828      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80065de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065e2:	d01a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80065e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065e8:	d822      	bhi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80065ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065f2:	d007      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065f4:	e01c      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f6:	4bb8      	ldr	r3, [pc, #736]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fa:	4ab7      	ldr	r2, [pc, #732]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006602:	e01a      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006608:	3308      	adds	r3, #8
 800660a:	2102      	movs	r1, #2
 800660c:	4618      	mov	r0, r3
 800660e:	f001 f9d1 	bl	80079b4 <RCCEx_PLL2_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006618:	e00f      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	3328      	adds	r3, #40	@ 0x28
 8006620:	2102      	movs	r1, #2
 8006622:	4618      	mov	r0, r3
 8006624:	f001 fa78 	bl	8007b18 <RCCEx_PLL3_Config>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800662e:	e004      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006636:	e000      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10a      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006642:	4ba5      	ldr	r3, [pc, #660]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006646:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800664a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006650:	4aa1      	ldr	r2, [pc, #644]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006652:	430b      	orrs	r3, r1
 8006654:	6513      	str	r3, [r2, #80]	@ 0x50
 8006656:	e003      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800666c:	f04f 0900 	mov.w	r9, #0
 8006670:	ea58 0309 	orrs.w	r3, r8, r9
 8006674:	d047      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667c:	2b04      	cmp	r3, #4
 800667e:	d82a      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006680:	a201      	add	r2, pc, #4	@ (adr r2, 8006688 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006686:	bf00      	nop
 8006688:	0800669d 	.word	0x0800669d
 800668c:	080066ab 	.word	0x080066ab
 8006690:	080066c1 	.word	0x080066c1
 8006694:	080066df 	.word	0x080066df
 8006698:	080066df 	.word	0x080066df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800669c:	4b8e      	ldr	r3, [pc, #568]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	4a8d      	ldr	r2, [pc, #564]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066a8:	e01a      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ae:	3308      	adds	r3, #8
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 f97e 	bl	80079b4 <RCCEx_PLL2_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066be:	e00f      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c4:	3328      	adds	r3, #40	@ 0x28
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 fa25 	bl	8007b18 <RCCEx_PLL3_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066d4:	e004      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066dc:	e000      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80066de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066e8:	4b7b      	ldr	r3, [pc, #492]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ec:	f023 0107 	bic.w	r1, r3, #7
 80066f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f6:	4a78      	ldr	r2, [pc, #480]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066f8:	430b      	orrs	r3, r1
 80066fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80066fc:	e003      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006712:	f04f 0b00 	mov.w	fp, #0
 8006716:	ea5a 030b 	orrs.w	r3, sl, fp
 800671a:	d04c      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006726:	d030      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800672c:	d829      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800672e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006730:	d02d      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006732:	2bc0      	cmp	r3, #192	@ 0xc0
 8006734:	d825      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006736:	2b80      	cmp	r3, #128	@ 0x80
 8006738:	d018      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800673a:	2b80      	cmp	r3, #128	@ 0x80
 800673c:	d821      	bhi.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800673e:	2b00      	cmp	r3, #0
 8006740:	d002      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006742:	2b40      	cmp	r3, #64	@ 0x40
 8006744:	d007      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006746:	e01c      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006748:	4b63      	ldr	r3, [pc, #396]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	4a62      	ldr	r2, [pc, #392]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800674e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006754:	e01c      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675a:	3308      	adds	r3, #8
 800675c:	2100      	movs	r1, #0
 800675e:	4618      	mov	r0, r3
 8006760:	f001 f928 	bl	80079b4 <RCCEx_PLL2_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800676a:	e011      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	3328      	adds	r3, #40	@ 0x28
 8006772:	2100      	movs	r1, #0
 8006774:	4618      	mov	r0, r3
 8006776:	f001 f9cf 	bl	8007b18 <RCCEx_PLL3_Config>
 800677a:	4603      	mov	r3, r0
 800677c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006780:	e006      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006788:	e002      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800678e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006798:	4b4f      	ldr	r3, [pc, #316]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800679a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800679c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80067a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a6:	4a4c      	ldr	r2, [pc, #304]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067a8:	430b      	orrs	r3, r1
 80067aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80067ac:	e003      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80067b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80067c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80067c6:	2300      	movs	r3, #0
 80067c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80067cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80067d0:	460b      	mov	r3, r1
 80067d2:	4313      	orrs	r3, r2
 80067d4:	d053      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80067d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80067de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067e2:	d035      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80067e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067e8:	d82e      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80067ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80067ee:	d031      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80067f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80067f4:	d828      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80067f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067fa:	d01a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80067fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006800:	d822      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800680a:	d007      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800680c:	e01c      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680e:	4b32      	ldr	r3, [pc, #200]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006812:	4a31      	ldr	r2, [pc, #196]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800681a:	e01c      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800681c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006820:	3308      	adds	r3, #8
 8006822:	2100      	movs	r1, #0
 8006824:	4618      	mov	r0, r3
 8006826:	f001 f8c5 	bl	80079b4 <RCCEx_PLL2_Config>
 800682a:	4603      	mov	r3, r0
 800682c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006830:	e011      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006836:	3328      	adds	r3, #40	@ 0x28
 8006838:	2100      	movs	r1, #0
 800683a:	4618      	mov	r0, r3
 800683c:	f001 f96c 	bl	8007b18 <RCCEx_PLL3_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006846:	e006      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800684e:	e002      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006850:	bf00      	nop
 8006852:	e000      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006854:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006856:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10b      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800685e:	4b1e      	ldr	r3, [pc, #120]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006862:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800686e:	4a1a      	ldr	r2, [pc, #104]	@ (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006870:	430b      	orrs	r3, r1
 8006872:	6593      	str	r3, [r2, #88]	@ 0x58
 8006874:	e003      	b.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800687a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800687e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006886:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800688a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800688e:	2300      	movs	r3, #0
 8006890:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006894:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006898:	460b      	mov	r3, r1
 800689a:	4313      	orrs	r3, r2
 800689c:	d056      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068aa:	d038      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80068ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068b0:	d831      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068b6:	d034      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80068b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068bc:	d82b      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068c2:	d01d      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80068c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068c8:	d825      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d006      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80068ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068d2:	d00a      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80068d4:	e01f      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80068d6:	bf00      	nop
 80068d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068dc:	4ba2      	ldr	r3, [pc, #648]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e0:	4aa1      	ldr	r2, [pc, #644]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068e8:	e01c      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	3308      	adds	r3, #8
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f001 f85e 	bl	80079b4 <RCCEx_PLL2_Config>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80068fe:	e011      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006904:	3328      	adds	r3, #40	@ 0x28
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f001 f905 	bl	8007b18 <RCCEx_PLL3_Config>
 800690e:	4603      	mov	r3, r0
 8006910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006914:	e006      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800691c:	e002      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800692c:	4b8e      	ldr	r3, [pc, #568]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800692e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006930:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006938:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800693c:	4a8a      	ldr	r2, [pc, #552]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800693e:	430b      	orrs	r3, r1
 8006940:	6593      	str	r3, [r2, #88]	@ 0x58
 8006942:	e003      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800695c:	2300      	movs	r3, #0
 800695e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006962:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006966:	460b      	mov	r3, r1
 8006968:	4313      	orrs	r3, r2
 800696a:	d03a      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800696c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006972:	2b30      	cmp	r3, #48	@ 0x30
 8006974:	d01f      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006976:	2b30      	cmp	r3, #48	@ 0x30
 8006978:	d819      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800697a:	2b20      	cmp	r3, #32
 800697c:	d00c      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800697e:	2b20      	cmp	r3, #32
 8006980:	d815      	bhi.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d019      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006986:	2b10      	cmp	r3, #16
 8006988:	d111      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800698a:	4b77      	ldr	r3, [pc, #476]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800698c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800698e:	4a76      	ldr	r2, [pc, #472]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006996:	e011      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699c:	3308      	adds	r3, #8
 800699e:	2102      	movs	r1, #2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 f807 	bl	80079b4 <RCCEx_PLL2_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80069ac:	e006      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80069b6:	bf00      	nop
 80069b8:	e000      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80069ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10a      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80069c4:	4b68      	ldr	r3, [pc, #416]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80069cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069d2:	4a65      	ldr	r2, [pc, #404]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069d4:	430b      	orrs	r3, r1
 80069d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069d8:	e003      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80069ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80069f2:	2300      	movs	r3, #0
 80069f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80069f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80069fc:	460b      	mov	r3, r1
 80069fe:	4313      	orrs	r3, r2
 8006a00:	d051      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a0c:	d035      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006a0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a12:	d82e      	bhi.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a14:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a18:	d031      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006a1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a1e:	d828      	bhi.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a24:	d01a      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a2a:	d822      	bhi.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a34:	d007      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006a36:	e01c      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a38:	4b4b      	ldr	r3, [pc, #300]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a44:	e01c      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 ffb0 	bl	80079b4 <RCCEx_PLL2_Config>
 8006a54:	4603      	mov	r3, r0
 8006a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a5a:	e011      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a60:	3328      	adds	r3, #40	@ 0x28
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f001 f857 	bl	8007b18 <RCCEx_PLL3_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a70:	e006      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a78:	e002      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10a      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a88:	4b37      	ldr	r3, [pc, #220]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a96:	4a34      	ldr	r2, [pc, #208]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a9c:	e003      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006abc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	d056      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006acc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ad0:	d033      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006ad2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ad6:	d82c      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006adc:	d02f      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006ade:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ae2:	d826      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006ae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006ae8:	d02b      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006aea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006aee:	d820      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006af0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006af4:	d012      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006afa:	d81a      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d022      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b04:	d115      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 ff50 	bl	80079b4 <RCCEx_PLL2_Config>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006b1a:	e015      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	3328      	adds	r3, #40	@ 0x28
 8006b22:	2101      	movs	r1, #1
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 fff7 	bl	8007b18 <RCCEx_PLL3_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006b30:	e00a      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b38:	e006      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b3a:	bf00      	nop
 8006b3c:	e004      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b3e:	bf00      	nop
 8006b40:	e002      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b42:	bf00      	nop
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10d      	bne.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b54:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b5e:	4a02      	ldr	r2, [pc, #8]	@ (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b60:	430b      	orrs	r3, r1
 8006b62:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b64:	e006      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b66:	bf00      	nop
 8006b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b84:	2300      	movs	r3, #0
 8006b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4313      	orrs	r3, r2
 8006b92:	d055      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006b9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ba0:	d033      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ba6:	d82c      	bhi.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bac:	d02f      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb2:	d826      	bhi.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006bb4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bb8:	d02b      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006bba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006bbe:	d820      	bhi.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bc4:	d012      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006bca:	d81a      	bhi.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d022      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006bd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006bd4:	d115      	bne.n	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	3308      	adds	r3, #8
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fee8 	bl	80079b4 <RCCEx_PLL2_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006bea:	e015      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf0:	3328      	adds	r3, #40	@ 0x28
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 ff8f 	bl	8007b18 <RCCEx_PLL3_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006c00:	e00a      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c08:	e006      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c0a:	bf00      	nop
 8006c0c:	e004      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c0e:	bf00      	nop
 8006c10:	e002      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006c16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10b      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006c20:	4ba3      	ldr	r3, [pc, #652]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006c30:	4a9f      	ldr	r2, [pc, #636]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c32:	430b      	orrs	r3, r1
 8006c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c36:	e003      	b.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c50:	2300      	movs	r3, #0
 8006c52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	d037      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c6a:	d00e      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c70:	d816      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d018      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006c76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c7a:	d111      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7c:	4b8c      	ldr	r3, [pc, #560]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c80:	4a8b      	ldr	r2, [pc, #556]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c88:	e00f      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8e:	3308      	adds	r3, #8
 8006c90:	2101      	movs	r1, #1
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fe8e 	bl	80079b4 <RCCEx_PLL2_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c9e:	e004      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ca6:	e000      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc0:	4a7b      	ldr	r2, [pc, #492]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cc2:	430b      	orrs	r3, r1
 8006cc4:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cc6:	e003      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ccc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006ce6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006cea:	460b      	mov	r3, r1
 8006cec:	4313      	orrs	r3, r2
 8006cee:	d039      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d81c      	bhi.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006d00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d3d 	.word	0x08006d3d
 8006d04:	08006d11 	.word	0x08006d11
 8006d08:	08006d1f 	.word	0x08006d1f
 8006d0c:	08006d3d 	.word	0x08006d3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d10:	4b67      	ldr	r3, [pc, #412]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d14:	4a66      	ldr	r2, [pc, #408]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006d1c:	e00f      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d22:	3308      	adds	r3, #8
 8006d24:	2102      	movs	r1, #2
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 fe44 	bl	80079b4 <RCCEx_PLL2_Config>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006d32:	e004      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d3a:	e000      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006d46:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4a:	f023 0103 	bic.w	r1, r3, #3
 8006d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d54:	4a56      	ldr	r2, [pc, #344]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d56:	430b      	orrs	r3, r1
 8006d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d5a:	e003      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d74:	2300      	movs	r3, #0
 8006d76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	f000 809f 	beq.w	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d86:	4b4b      	ldr	r3, [pc, #300]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d92:	f7fb fae3 	bl	800235c <HAL_GetTick>
 8006d96:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d9a:	e00b      	b.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d9c:	f7fb fade 	bl	800235c <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b64      	cmp	r3, #100	@ 0x64
 8006daa:	d903      	bls.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006db2:	e005      	b.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006db4:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0ed      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d179      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006dc8:	4b39      	ldr	r3, [pc, #228]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006dd4:	4053      	eors	r3, r2
 8006dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d015      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dde:	4b34      	ldr	r3, [pc, #208]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006de6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dea:	4b31      	ldr	r3, [pc, #196]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	4a30      	ldr	r2, [pc, #192]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006df4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006df6:	4b2e      	ldr	r3, [pc, #184]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e00:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006e02:	4a2b      	ldr	r2, [pc, #172]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006e08:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e16:	d118      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fb faa0 	bl	800235c <HAL_GetTick>
 8006e1c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e20:	e00d      	b.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e22:	f7fb fa9b 	bl	800235c <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006e2c:	1ad2      	subs	r2, r2, r3
 8006e2e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d903      	bls.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006e3c:	e005      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0eb      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d129      	bne.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e62:	d10e      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006e64:	4b12      	ldr	r3, [pc, #72]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e74:	091a      	lsrs	r2, r3, #4
 8006e76:	4b10      	ldr	r3, [pc, #64]	@ (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	6113      	str	r3, [r2, #16]
 8006e80:	e005      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006e82:	4b0b      	ldr	r3, [pc, #44]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e88:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e8c:	6113      	str	r3, [r2, #16]
 8006e8e:	4b08      	ldr	r3, [pc, #32]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e90:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e9e:	4a04      	ldr	r2, [pc, #16]	@ (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ea4:	e00e      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006eae:	e009      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006eb0:	58024400 	.word	0x58024400
 8006eb4:	58024800 	.word	0x58024800
 8006eb8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f002 0301 	and.w	r3, r2, #1
 8006ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006eda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f000 8089 	beq.w	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006eec:	2b28      	cmp	r3, #40	@ 0x28
 8006eee:	d86b      	bhi.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006fd1 	.word	0x08006fd1
 8006efc:	08006fc9 	.word	0x08006fc9
 8006f00:	08006fc9 	.word	0x08006fc9
 8006f04:	08006fc9 	.word	0x08006fc9
 8006f08:	08006fc9 	.word	0x08006fc9
 8006f0c:	08006fc9 	.word	0x08006fc9
 8006f10:	08006fc9 	.word	0x08006fc9
 8006f14:	08006fc9 	.word	0x08006fc9
 8006f18:	08006f9d 	.word	0x08006f9d
 8006f1c:	08006fc9 	.word	0x08006fc9
 8006f20:	08006fc9 	.word	0x08006fc9
 8006f24:	08006fc9 	.word	0x08006fc9
 8006f28:	08006fc9 	.word	0x08006fc9
 8006f2c:	08006fc9 	.word	0x08006fc9
 8006f30:	08006fc9 	.word	0x08006fc9
 8006f34:	08006fc9 	.word	0x08006fc9
 8006f38:	08006fb3 	.word	0x08006fb3
 8006f3c:	08006fc9 	.word	0x08006fc9
 8006f40:	08006fc9 	.word	0x08006fc9
 8006f44:	08006fc9 	.word	0x08006fc9
 8006f48:	08006fc9 	.word	0x08006fc9
 8006f4c:	08006fc9 	.word	0x08006fc9
 8006f50:	08006fc9 	.word	0x08006fc9
 8006f54:	08006fc9 	.word	0x08006fc9
 8006f58:	08006fd1 	.word	0x08006fd1
 8006f5c:	08006fc9 	.word	0x08006fc9
 8006f60:	08006fc9 	.word	0x08006fc9
 8006f64:	08006fc9 	.word	0x08006fc9
 8006f68:	08006fc9 	.word	0x08006fc9
 8006f6c:	08006fc9 	.word	0x08006fc9
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fc9 	.word	0x08006fc9
 8006f78:	08006fd1 	.word	0x08006fd1
 8006f7c:	08006fc9 	.word	0x08006fc9
 8006f80:	08006fc9 	.word	0x08006fc9
 8006f84:	08006fc9 	.word	0x08006fc9
 8006f88:	08006fc9 	.word	0x08006fc9
 8006f8c:	08006fc9 	.word	0x08006fc9
 8006f90:	08006fc9 	.word	0x08006fc9
 8006f94:	08006fc9 	.word	0x08006fc9
 8006f98:	08006fd1 	.word	0x08006fd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	2101      	movs	r1, #1
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fd05 	bl	80079b4 <RCCEx_PLL2_Config>
 8006faa:	4603      	mov	r3, r0
 8006fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006fb0:	e00f      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb6:	3328      	adds	r3, #40	@ 0x28
 8006fb8:	2101      	movs	r1, #1
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fdac 	bl	8007b18 <RCCEx_PLL3_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006fc6:	e004      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fce:	e000      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006fda:	4bbf      	ldr	r3, [pc, #764]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fde:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fe8:	4abb      	ldr	r2, [pc, #748]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fea:	430b      	orrs	r3, r1
 8006fec:	6553      	str	r3, [r2, #84]	@ 0x54
 8006fee:	e003      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f002 0302 	and.w	r3, r2, #2
 8007004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007008:	2300      	movs	r3, #0
 800700a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800700e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007012:	460b      	mov	r3, r1
 8007014:	4313      	orrs	r3, r2
 8007016:	d041      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800701e:	2b05      	cmp	r3, #5
 8007020:	d824      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007022:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	08007075 	.word	0x08007075
 800702c:	08007041 	.word	0x08007041
 8007030:	08007057 	.word	0x08007057
 8007034:	08007075 	.word	0x08007075
 8007038:	08007075 	.word	0x08007075
 800703c:	08007075 	.word	0x08007075
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007044:	3308      	adds	r3, #8
 8007046:	2101      	movs	r1, #1
 8007048:	4618      	mov	r0, r3
 800704a:	f000 fcb3 	bl	80079b4 <RCCEx_PLL2_Config>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007054:	e00f      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705a:	3328      	adds	r3, #40	@ 0x28
 800705c:	2101      	movs	r1, #1
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fd5a 	bl	8007b18 <RCCEx_PLL3_Config>
 8007064:	4603      	mov	r3, r0
 8007066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800706a:	e004      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007072:	e000      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800707e:	4b96      	ldr	r3, [pc, #600]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007082:	f023 0107 	bic.w	r1, r3, #7
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800708c:	4a92      	ldr	r2, [pc, #584]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800708e:	430b      	orrs	r3, r1
 8007090:	6553      	str	r3, [r2, #84]	@ 0x54
 8007092:	e003      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800709c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	f002 0304 	and.w	r3, r2, #4
 80070a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80070ac:	2300      	movs	r3, #0
 80070ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d044      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80070bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80070c4:	2b05      	cmp	r3, #5
 80070c6:	d825      	bhi.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80070c8:	a201      	add	r2, pc, #4	@ (adr r2, 80070d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	0800711d 	.word	0x0800711d
 80070d4:	080070e9 	.word	0x080070e9
 80070d8:	080070ff 	.word	0x080070ff
 80070dc:	0800711d 	.word	0x0800711d
 80070e0:	0800711d 	.word	0x0800711d
 80070e4:	0800711d 	.word	0x0800711d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070ec:	3308      	adds	r3, #8
 80070ee:	2101      	movs	r1, #1
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fc5f 	bl	80079b4 <RCCEx_PLL2_Config>
 80070f6:	4603      	mov	r3, r0
 80070f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070fc:	e00f      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007102:	3328      	adds	r3, #40	@ 0x28
 8007104:	2101      	movs	r1, #1
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fd06 	bl	8007b18 <RCCEx_PLL3_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007112:	e004      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800711a:	e000      	b.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800711c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007122:	2b00      	cmp	r3, #0
 8007124:	d10b      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007126:	4b6c      	ldr	r3, [pc, #432]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	f023 0107 	bic.w	r1, r3, #7
 800712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007136:	4a68      	ldr	r2, [pc, #416]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007138:	430b      	orrs	r3, r1
 800713a:	6593      	str	r3, [r2, #88]	@ 0x58
 800713c:	e003      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f002 0320 	and.w	r3, r2, #32
 8007152:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007156:	2300      	movs	r3, #0
 8007158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800715c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007160:	460b      	mov	r3, r1
 8007162:	4313      	orrs	r3, r2
 8007164:	d055      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800716e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007172:	d033      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007174:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007178:	d82c      	bhi.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800717a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800717e:	d02f      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007184:	d826      	bhi.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007186:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800718a:	d02b      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800718c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007190:	d820      	bhi.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007196:	d012      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007198:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719c:	d81a      	bhi.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d022      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80071a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071a6:	d115      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ac:	3308      	adds	r3, #8
 80071ae:	2100      	movs	r1, #0
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 fbff 	bl	80079b4 <RCCEx_PLL2_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80071bc:	e015      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c2:	3328      	adds	r3, #40	@ 0x28
 80071c4:	2102      	movs	r1, #2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fca6 	bl	8007b18 <RCCEx_PLL3_Config>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80071d2:	e00a      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071da:	e006      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80071dc:	bf00      	nop
 80071de:	e004      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80071e0:	bf00      	nop
 80071e2:	e002      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80071e4:	bf00      	nop
 80071e6:	e000      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80071e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10b      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071f2:	4b39      	ldr	r3, [pc, #228]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071f6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007202:	4a35      	ldr	r2, [pc, #212]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007204:	430b      	orrs	r3, r1
 8007206:	6553      	str	r3, [r2, #84]	@ 0x54
 8007208:	e003      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800720e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800721e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007222:	2300      	movs	r3, #0
 8007224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800722c:	460b      	mov	r3, r1
 800722e:	4313      	orrs	r3, r2
 8007230:	d058      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007236:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800723a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800723e:	d033      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007240:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007244:	d82c      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800724a:	d02f      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800724c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007250:	d826      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007252:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007256:	d02b      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800725c:	d820      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800725e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007262:	d012      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007268:	d81a      	bhi.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d022      	beq.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800726e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007272:	d115      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007278:	3308      	adds	r3, #8
 800727a:	2100      	movs	r1, #0
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fb99 	bl	80079b4 <RCCEx_PLL2_Config>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007288:	e015      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800728e:	3328      	adds	r3, #40	@ 0x28
 8007290:	2102      	movs	r1, #2
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fc40 	bl	8007b18 <RCCEx_PLL3_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800729e:	e00a      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072a6:	e006      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072a8:	bf00      	nop
 80072aa:	e004      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072ac:	bf00      	nop
 80072ae:	e002      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072b0:	bf00      	nop
 80072b2:	e000      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80072b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10e      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072be:	4b06      	ldr	r3, [pc, #24]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80072c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80072ce:	4a02      	ldr	r2, [pc, #8]	@ (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80072d0:	430b      	orrs	r3, r1
 80072d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80072d4:	e006      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80072d6:	bf00      	nop
 80072d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80072e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80072f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072f4:	2300      	movs	r3, #0
 80072f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80072fe:	460b      	mov	r3, r1
 8007300:	4313      	orrs	r3, r2
 8007302:	d055      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007308:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800730c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007310:	d033      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007312:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007316:	d82c      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800731c:	d02f      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800731e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007322:	d826      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007324:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007328:	d02b      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800732a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800732e:	d820      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007330:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007334:	d012      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800733a:	d81a      	bhi.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d022      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007344:	d115      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734a:	3308      	adds	r3, #8
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fb30 	bl	80079b4 <RCCEx_PLL2_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800735a:	e015      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800735c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007360:	3328      	adds	r3, #40	@ 0x28
 8007362:	2102      	movs	r1, #2
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fbd7 	bl	8007b18 <RCCEx_PLL3_Config>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007370:	e00a      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007378:	e006      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800737a:	bf00      	nop
 800737c:	e004      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800737e:	bf00      	nop
 8007380:	e002      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007382:	bf00      	nop
 8007384:	e000      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10b      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007390:	4ba1      	ldr	r3, [pc, #644]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007394:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073a0:	4a9d      	ldr	r2, [pc, #628]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073a2:	430b      	orrs	r3, r1
 80073a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80073a6:	e003      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80073b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	f002 0308 	and.w	r3, r2, #8
 80073bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073c0:	2300      	movs	r3, #0
 80073c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80073c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80073ca:	460b      	mov	r3, r1
 80073cc:	4313      	orrs	r3, r2
 80073ce:	d01e      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80073d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073dc:	d10c      	bne.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	3328      	adds	r3, #40	@ 0x28
 80073e4:	2102      	movs	r1, #2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fb96 	bl	8007b18 <RCCEx_PLL3_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073f8:	4b87      	ldr	r3, [pc, #540]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007404:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007408:	4a83      	ldr	r2, [pc, #524]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800740a:	430b      	orrs	r3, r1
 800740c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800740e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f002 0310 	and.w	r3, r2, #16
 800741a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800741e:	2300      	movs	r3, #0
 8007420:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007424:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007428:	460b      	mov	r3, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	d01e      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800743a:	d10c      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800743c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007440:	3328      	adds	r3, #40	@ 0x28
 8007442:	2102      	movs	r1, #2
 8007444:	4618      	mov	r0, r3
 8007446:	f000 fb67 	bl	8007b18 <RCCEx_PLL3_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007456:	4b70      	ldr	r3, [pc, #448]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800745a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800745e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007462:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007466:	4a6c      	ldr	r2, [pc, #432]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007468:	430b      	orrs	r3, r1
 800746a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800746c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007474:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007478:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800747c:	2300      	movs	r3, #0
 800747e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007482:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007486:	460b      	mov	r3, r1
 8007488:	4313      	orrs	r3, r2
 800748a:	d03e      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007498:	d022      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800749a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800749e:	d81b      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80074a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074a8:	d00b      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80074aa:	e015      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b0:	3308      	adds	r3, #8
 80074b2:	2100      	movs	r1, #0
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fa7d 	bl	80079b4 <RCCEx_PLL2_Config>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80074c0:	e00f      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c6:	3328      	adds	r3, #40	@ 0x28
 80074c8:	2102      	movs	r1, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 fb24 	bl	8007b18 <RCCEx_PLL3_Config>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80074d6:	e004      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074de:	e000      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80074e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10b      	bne.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80074ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80074f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074fa:	4a47      	ldr	r2, [pc, #284]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074fc:	430b      	orrs	r3, r1
 80074fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007500:	e003      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007506:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007516:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007518:	2300      	movs	r3, #0
 800751a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800751c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007520:	460b      	mov	r3, r1
 8007522:	4313      	orrs	r3, r2
 8007524:	d03b      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800752a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800752e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007532:	d01f      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007534:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007538:	d818      	bhi.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800753a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800753e:	d003      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007540:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007544:	d007      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007546:	e011      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007548:	4b33      	ldr	r3, [pc, #204]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	4a32      	ldr	r2, [pc, #200]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800754e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007554:	e00f      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755a:	3328      	adds	r3, #40	@ 0x28
 800755c:	2101      	movs	r1, #1
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fada 	bl	8007b18 <RCCEx_PLL3_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800756a:	e004      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007572:	e000      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10b      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800757e:	4b26      	ldr	r3, [pc, #152]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007582:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758e:	4a22      	ldr	r2, [pc, #136]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007590:	430b      	orrs	r3, r1
 8007592:	6553      	str	r3, [r2, #84]	@ 0x54
 8007594:	e003      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800759e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80075aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80075ac:	2300      	movs	r3, #0
 80075ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80075b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80075b4:	460b      	mov	r3, r1
 80075b6:	4313      	orrs	r3, r2
 80075b8:	d034      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80075ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80075c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075c8:	d007      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80075ca:	e011      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075cc:	4b12      	ldr	r3, [pc, #72]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	4a11      	ldr	r2, [pc, #68]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80075d8:	e00e      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075de:	3308      	adds	r3, #8
 80075e0:	2102      	movs	r1, #2
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f9e6 	bl	80079b4 <RCCEx_PLL2_Config>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80075ee:	e003      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10d      	bne.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007600:	4b05      	ldr	r3, [pc, #20]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007604:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800760e:	4a02      	ldr	r2, [pc, #8]	@ (8007618 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007610:	430b      	orrs	r3, r1
 8007612:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007614:	e006      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007616:	bf00      	nop
 8007618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800761c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007632:	2300      	movs	r3, #0
 8007634:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007636:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800763a:	460b      	mov	r3, r1
 800763c:	4313      	orrs	r3, r2
 800763e:	d00c      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007644:	3328      	adds	r3, #40	@ 0x28
 8007646:	2102      	movs	r1, #2
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fa65 	bl	8007b18 <RCCEx_PLL3_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007666:	663b      	str	r3, [r7, #96]	@ 0x60
 8007668:	2300      	movs	r3, #0
 800766a:	667b      	str	r3, [r7, #100]	@ 0x64
 800766c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007670:	460b      	mov	r3, r1
 8007672:	4313      	orrs	r3, r2
 8007674:	d038      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007682:	d018      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007684:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007688:	d811      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800768a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800768e:	d014      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007690:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007694:	d80b      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d011      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800769a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800769e:	d106      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a0:	4bc3      	ldr	r3, [pc, #780]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a4:	4ac2      	ldr	r2, [pc, #776]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80076ac:	e008      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076b4:	e004      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80076b6:	bf00      	nop
 80076b8:	e002      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80076ba:	bf00      	nop
 80076bc:	e000      	b.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80076be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10b      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076c8:	4bb9      	ldr	r3, [pc, #740]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076cc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80076d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d8:	4ab5      	ldr	r2, [pc, #724]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076da:	430b      	orrs	r3, r1
 80076dc:	6553      	str	r3, [r2, #84]	@ 0x54
 80076de:	e003      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80076f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076f6:	2300      	movs	r3, #0
 80076f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80076fe:	460b      	mov	r3, r1
 8007700:	4313      	orrs	r3, r2
 8007702:	d009      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007704:	4baa      	ldr	r3, [pc, #680]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007708:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007712:	4aa7      	ldr	r2, [pc, #668]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007714:	430b      	orrs	r3, r1
 8007716:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007724:	653b      	str	r3, [r7, #80]	@ 0x50
 8007726:	2300      	movs	r3, #0
 8007728:	657b      	str	r3, [r7, #84]	@ 0x54
 800772a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800772e:	460b      	mov	r3, r1
 8007730:	4313      	orrs	r3, r2
 8007732:	d00a      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007734:	4b9e      	ldr	r3, [pc, #632]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800773c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007740:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007744:	4a9a      	ldr	r2, [pc, #616]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007746:	430b      	orrs	r3, r1
 8007748:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800774a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007752:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007758:	2300      	movs	r3, #0
 800775a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800775c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007760:	460b      	mov	r3, r1
 8007762:	4313      	orrs	r3, r2
 8007764:	d009      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007766:	4b92      	ldr	r3, [pc, #584]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007768:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800776a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800776e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007772:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007774:	4a8e      	ldr	r2, [pc, #568]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007776:	430b      	orrs	r3, r1
 8007778:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007782:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007786:	643b      	str	r3, [r7, #64]	@ 0x40
 8007788:	2300      	movs	r3, #0
 800778a:	647b      	str	r3, [r7, #68]	@ 0x44
 800778c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007790:	460b      	mov	r3, r1
 8007792:	4313      	orrs	r3, r2
 8007794:	d00e      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007796:	4b86      	ldr	r3, [pc, #536]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	4a85      	ldr	r2, [pc, #532]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800779c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077a0:	6113      	str	r3, [r2, #16]
 80077a2:	4b83      	ldr	r3, [pc, #524]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077a4:	6919      	ldr	r1, [r3, #16]
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80077ae:	4a80      	ldr	r2, [pc, #512]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80077b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80077c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80077c2:	2300      	movs	r3, #0
 80077c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80077ca:	460b      	mov	r3, r1
 80077cc:	4313      	orrs	r3, r2
 80077ce:	d009      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80077d0:	4b77      	ldr	r3, [pc, #476]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077d4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80077d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077de:	4a74      	ldr	r2, [pc, #464]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077e0:	430b      	orrs	r3, r1
 80077e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80077f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80077f2:	2300      	movs	r3, #0
 80077f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80077fa:	460b      	mov	r3, r1
 80077fc:	4313      	orrs	r3, r2
 80077fe:	d00a      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007800:	4b6b      	ldr	r3, [pc, #428]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007804:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007810:	4a67      	ldr	r2, [pc, #412]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007812:	430b      	orrs	r3, r1
 8007814:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	2100      	movs	r1, #0
 8007820:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007828:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800782c:	460b      	mov	r3, r1
 800782e:	4313      	orrs	r3, r2
 8007830:	d011      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007836:	3308      	adds	r3, #8
 8007838:	2100      	movs	r1, #0
 800783a:	4618      	mov	r0, r3
 800783c:	f000 f8ba 	bl	80079b4 <RCCEx_PLL2_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	2100      	movs	r1, #0
 8007860:	6239      	str	r1, [r7, #32]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	627b      	str	r3, [r7, #36]	@ 0x24
 8007868:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800786c:	460b      	mov	r3, r1
 800786e:	4313      	orrs	r3, r2
 8007870:	d011      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007876:	3308      	adds	r3, #8
 8007878:	2101      	movs	r1, #1
 800787a:	4618      	mov	r0, r3
 800787c:	f000 f89a 	bl	80079b4 <RCCEx_PLL2_Config>
 8007880:	4603      	mov	r3, r0
 8007882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	2100      	movs	r1, #0
 80078a0:	61b9      	str	r1, [r7, #24]
 80078a2:	f003 0304 	and.w	r3, r3, #4
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80078ac:	460b      	mov	r3, r1
 80078ae:	4313      	orrs	r3, r2
 80078b0:	d011      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b6:	3308      	adds	r3, #8
 80078b8:	2102      	movs	r1, #2
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f87a 	bl	80079b4 <RCCEx_PLL2_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	2100      	movs	r1, #0
 80078e0:	6139      	str	r1, [r7, #16]
 80078e2:	f003 0308 	and.w	r3, r3, #8
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80078ec:	460b      	mov	r3, r1
 80078ee:	4313      	orrs	r3, r2
 80078f0:	d011      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078f6:	3328      	adds	r3, #40	@ 0x28
 80078f8:	2100      	movs	r1, #0
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 f90c 	bl	8007b18 <RCCEx_PLL3_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	2100      	movs	r1, #0
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	f003 0310 	and.w	r3, r3, #16
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800792c:	460b      	mov	r3, r1
 800792e:	4313      	orrs	r3, r2
 8007930:	d011      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007936:	3328      	adds	r3, #40	@ 0x28
 8007938:	2101      	movs	r1, #1
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f8ec 	bl	8007b18 <RCCEx_PLL3_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800794e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	2100      	movs	r1, #0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	607b      	str	r3, [r7, #4]
 8007968:	e9d7 1200 	ldrd	r1, r2, [r7]
 800796c:	460b      	mov	r3, r1
 800796e:	4313      	orrs	r3, r2
 8007970:	d011      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	3328      	adds	r3, #40	@ 0x28
 8007978:	2102      	movs	r1, #2
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f8cc 	bl	8007b18 <RCCEx_PLL3_Config>
 8007980:	4603      	mov	r3, r0
 8007982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800798e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007996:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	e000      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80079aa:	46bd      	mov	sp, r7
 80079ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079b0:	58024400 	.word	0x58024400

080079b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079c2:	4b53      	ldr	r3, [pc, #332]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 80079c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c6:	f003 0303 	and.w	r3, r3, #3
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d101      	bne.n	80079d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e099      	b.n	8007b06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80079d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079de:	f7fa fcbd 	bl	800235c <HAL_GetTick>
 80079e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079e4:	e008      	b.n	80079f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079e6:	f7fa fcb9 	bl	800235c <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e086      	b.n	8007b06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079f8:	4b45      	ldr	r3, [pc, #276]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f0      	bne.n	80079e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a04:	4b42      	ldr	r3, [pc, #264]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a08:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	031b      	lsls	r3, r3, #12
 8007a12:	493f      	ldr	r1, [pc, #252]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	628b      	str	r3, [r1, #40]	@ 0x28
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	025b      	lsls	r3, r3, #9
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	431a      	orrs	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	041b      	lsls	r3, r3, #16
 8007a36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	061b      	lsls	r3, r3, #24
 8007a44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007a48:	4931      	ldr	r1, [pc, #196]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007a4e:	4b30      	ldr	r3, [pc, #192]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a52:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	492d      	ldr	r1, [pc, #180]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007a60:	4b2b      	ldr	r3, [pc, #172]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a64:	f023 0220 	bic.w	r2, r3, #32
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	4928      	ldr	r1, [pc, #160]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007a72:	4b27      	ldr	r3, [pc, #156]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a76:	4a26      	ldr	r2, [pc, #152]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a78:	f023 0310 	bic.w	r3, r3, #16
 8007a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a7e:	4b24      	ldr	r3, [pc, #144]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a82:	4b24      	ldr	r3, [pc, #144]	@ (8007b14 <RCCEx_PLL2_Config+0x160>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	69d2      	ldr	r2, [r2, #28]
 8007a8a:	00d2      	lsls	r2, r2, #3
 8007a8c:	4920      	ldr	r1, [pc, #128]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a92:	4b1f      	ldr	r3, [pc, #124]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a96:	4a1e      	ldr	r2, [pc, #120]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007a98:	f043 0310 	orr.w	r3, r3, #16
 8007a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d106      	bne.n	8007ab2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	4a19      	ldr	r2, [pc, #100]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007aaa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007aae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ab0:	e00f      	b.n	8007ad2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d106      	bne.n	8007ac6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ab8:	4b15      	ldr	r3, [pc, #84]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abc:	4a14      	ldr	r2, [pc, #80]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007ac4:	e005      	b.n	8007ad2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ac6:	4b12      	ldr	r3, [pc, #72]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aca:	4a11      	ldr	r2, [pc, #68]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007acc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007ad8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ade:	f7fa fc3d 	bl	800235c <HAL_GetTick>
 8007ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ae4:	e008      	b.n	8007af8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ae6:	f7fa fc39 	bl	800235c <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e006      	b.n	8007b06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007af8:	4b05      	ldr	r3, [pc, #20]	@ (8007b10 <RCCEx_PLL2_Config+0x15c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	58024400 	.word	0x58024400
 8007b14:	ffff0007 	.word	0xffff0007

08007b18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b26:	4b53      	ldr	r3, [pc, #332]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d101      	bne.n	8007b36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e099      	b.n	8007c6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007b36:	4b4f      	ldr	r3, [pc, #316]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a4e      	ldr	r2, [pc, #312]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b42:	f7fa fc0b 	bl	800235c <HAL_GetTick>
 8007b46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b48:	e008      	b.n	8007b5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b4a:	f7fa fc07 	bl	800235c <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e086      	b.n	8007c6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b5c:	4b45      	ldr	r3, [pc, #276]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1f0      	bne.n	8007b4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007b68:	4b42      	ldr	r3, [pc, #264]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	051b      	lsls	r3, r3, #20
 8007b76:	493f      	ldr	r1, [pc, #252]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	025b      	lsls	r3, r3, #9
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	041b      	lsls	r3, r3, #16
 8007b9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	061b      	lsls	r3, r3, #24
 8007ba8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007bac:	4931      	ldr	r1, [pc, #196]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007bb2:	4b30      	ldr	r3, [pc, #192]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	492d      	ldr	r1, [pc, #180]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	4928      	ldr	r1, [pc, #160]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007bd6:	4b27      	ldr	r3, [pc, #156]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bda:	4a26      	ldr	r2, [pc, #152]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007be2:	4b24      	ldr	r3, [pc, #144]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007be6:	4b24      	ldr	r3, [pc, #144]	@ (8007c78 <RCCEx_PLL3_Config+0x160>)
 8007be8:	4013      	ands	r3, r2
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	69d2      	ldr	r2, [r2, #28]
 8007bee:	00d2      	lsls	r2, r2, #3
 8007bf0:	4920      	ldr	r1, [pc, #128]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d106      	bne.n	8007c16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c08:	4b1a      	ldr	r3, [pc, #104]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0c:	4a19      	ldr	r2, [pc, #100]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007c0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c14:	e00f      	b.n	8007c36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d106      	bne.n	8007c2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007c1c:	4b15      	ldr	r3, [pc, #84]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	4a14      	ldr	r2, [pc, #80]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007c22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007c26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c28:	e005      	b.n	8007c36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007c2a:	4b12      	ldr	r3, [pc, #72]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c2e:	4a11      	ldr	r2, [pc, #68]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007c30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007c36:	4b0f      	ldr	r3, [pc, #60]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a0e      	ldr	r2, [pc, #56]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c42:	f7fa fb8b 	bl	800235c <HAL_GetTick>
 8007c46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c48:	e008      	b.n	8007c5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c4a:	f7fa fb87 	bl	800235c <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e006      	b.n	8007c6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007c5c:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <RCCEx_PLL3_Config+0x15c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0f0      	beq.n	8007c4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	58024400 	.word	0x58024400
 8007c78:	ffff0007 	.word	0xffff0007

08007c7c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d101      	bne.n	8007c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e10f      	b.n	8007eae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a87      	ldr	r2, [pc, #540]	@ (8007eb8 <HAL_SPI_Init+0x23c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d00f      	beq.n	8007cbe <HAL_SPI_Init+0x42>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a86      	ldr	r2, [pc, #536]	@ (8007ebc <HAL_SPI_Init+0x240>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00a      	beq.n	8007cbe <HAL_SPI_Init+0x42>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a84      	ldr	r2, [pc, #528]	@ (8007ec0 <HAL_SPI_Init+0x244>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d005      	beq.n	8007cbe <HAL_SPI_Init+0x42>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	2b0f      	cmp	r3, #15
 8007cb8:	d901      	bls.n	8007cbe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e0f7      	b.n	8007eae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 ff3a 	bl	8008b38 <SPI_GetPacketSize>
 8007cc4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a7b      	ldr	r2, [pc, #492]	@ (8007eb8 <HAL_SPI_Init+0x23c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00c      	beq.n	8007cea <HAL_SPI_Init+0x6e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a79      	ldr	r2, [pc, #484]	@ (8007ebc <HAL_SPI_Init+0x240>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d007      	beq.n	8007cea <HAL_SPI_Init+0x6e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a78      	ldr	r2, [pc, #480]	@ (8007ec0 <HAL_SPI_Init+0x244>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d002      	beq.n	8007cea <HAL_SPI_Init+0x6e>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b08      	cmp	r3, #8
 8007ce8:	d811      	bhi.n	8007d0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007cee:	4a72      	ldr	r2, [pc, #456]	@ (8007eb8 <HAL_SPI_Init+0x23c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d009      	beq.n	8007d08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a70      	ldr	r2, [pc, #448]	@ (8007ebc <HAL_SPI_Init+0x240>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d004      	beq.n	8007d08 <HAL_SPI_Init+0x8c>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a6f      	ldr	r2, [pc, #444]	@ (8007ec0 <HAL_SPI_Init+0x244>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d104      	bne.n	8007d12 <HAL_SPI_Init+0x96>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b10      	cmp	r3, #16
 8007d0c:	d901      	bls.n	8007d12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e0cd      	b.n	8007eae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d106      	bne.n	8007d2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7f9 fce4 	bl	80016f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0201 	bic.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007d4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007d58:	d119      	bne.n	8007d8e <HAL_SPI_Init+0x112>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d62:	d103      	bne.n	8007d6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10c      	bne.n	8007d8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d7c:	d107      	bne.n	8007d8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007d8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00f      	beq.n	8007dba <HAL_SPI_Init+0x13e>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b06      	cmp	r3, #6
 8007da0:	d90b      	bls.n	8007dba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	e007      	b.n	8007dca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69da      	ldr	r2, [r3, #28]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ddc:	ea42 0103 	orr.w	r1, r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	431a      	orrs	r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	431a      	orrs	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	431a      	orrs	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e2a:	ea42 0103 	orr.w	r1, r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d113      	bne.n	8007e6a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0201 	bic.w	r2, r2, #1
 8007e78:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	40013000 	.word	0x40013000
 8007ebc:	40003800 	.word	0x40003800
 8007ec0:	40003c00 	.word	0x40003c00

08007ec4 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d001      	beq.n	8007ee2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e126      	b.n	8008130 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <HAL_SPI_Transmit_DMA+0x2a>
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e11e      	b.n	8008130 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d101      	bne.n	8007f00 <HAL_SPI_Transmit_DMA+0x3c>
 8007efc:	2302      	movs	r3, #2
 8007efe:	e117      	b.n	8008130 <HAL_SPI_Transmit_DMA+0x26c>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2203      	movs	r2, #3
 8007f0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	88fa      	ldrh	r2, [r7, #6]
 8007f22:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	88fa      	ldrh	r2, [r7, #6]
 8007f2a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007f58:	d108      	bne.n	8007f6c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f68:	601a      	str	r2, [r3, #0]
 8007f6a:	e009      	b.n	8007f80 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007f7e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	2b0f      	cmp	r3, #15
 8007f86:	d905      	bls.n	8007f94 <HAL_SPI_Transmit_DMA+0xd0>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f92:	d10f      	bne.n	8007fb4 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007f98:	2b07      	cmp	r3, #7
 8007f9a:	d911      	bls.n	8007fc0 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fa6:	d00b      	beq.n	8007fc0 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fac:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007fb2:	d005      	beq.n	8007fc0 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e0b7      	b.n	8008130 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	2b07      	cmp	r3, #7
 8007fc6:	d820      	bhi.n	800800a <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fd2:	d109      	bne.n	8007fe8 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	3301      	adds	r3, #1
 8007fde:	105b      	asrs	r3, r3, #1
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ff2:	d11e      	bne.n	8008032 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	3303      	adds	r3, #3
 8007ffe:	109b      	asrs	r3, r3, #2
 8008000:	b29a      	uxth	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008008:	e013      	b.n	8008032 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	2b0f      	cmp	r3, #15
 8008010:	d80f      	bhi.n	8008032 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800801c:	d109      	bne.n	8008032 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008024:	b29b      	uxth	r3, r3
 8008026:	3301      	adds	r3, #1
 8008028:	105b      	asrs	r3, r3, #1
 800802a:	b29a      	uxth	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008036:	4a40      	ldr	r2, [pc, #256]	@ (8008138 <HAL_SPI_Transmit_DMA+0x274>)
 8008038:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800803e:	4a3f      	ldr	r2, [pc, #252]	@ (800813c <HAL_SPI_Transmit_DMA+0x278>)
 8008040:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008046:	4a3e      	ldr	r2, [pc, #248]	@ (8008140 <HAL_SPI_Transmit_DMA+0x27c>)
 8008048:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800804e:	2200      	movs	r2, #0
 8008050:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008060:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800806a:	4619      	mov	r1, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3320      	adds	r3, #32
 8008072:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800807a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800807c:	f7fa fe16 	bl	8002cac <HAL_DMA_Start_IT>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d011      	beq.n	80080aa <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800808c:	f043 0210 	orr.w	r2, r3, #16
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e042      	b.n	8008130 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b4:	d108      	bne.n	80080c8 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6859      	ldr	r1, [r3, #4]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	4b20      	ldr	r3, [pc, #128]	@ (8008144 <HAL_SPI_Transmit_DMA+0x280>)
 80080c2:	400b      	ands	r3, r1
 80080c4:	6053      	str	r3, [r2, #4]
 80080c6:	e009      	b.n	80080dc <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008144 <HAL_SPI_Transmit_DMA+0x280>)
 80080d0:	4013      	ands	r3, r2
 80080d2:	88f9      	ldrh	r1, [r7, #6]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	430b      	orrs	r3, r1
 80080da:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080ea:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691a      	ldr	r2, [r3, #16]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80080fa:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008114:	d107      	bne.n	8008126 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008124:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	08008945 	.word	0x08008945
 800813c:	080088b9 	.word	0x080088b9
 8008140:	0800897d 	.word	0x0800897d
 8008144:	ffff0000 	.word	0xffff0000

08008148 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b01      	cmp	r3, #1
 8008160:	d001      	beq.n	8008166 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008162:	2302      	movs	r3, #2
 8008164:	e19c      	b.n	80084a0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <HAL_SPI_TransmitReceive_DMA+0x30>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_SPI_TransmitReceive_DMA+0x30>
 8008172:	887b      	ldrh	r3, [r7, #2]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e191      	b.n	80084a0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_SPI_TransmitReceive_DMA+0x42>
 8008186:	2302      	movs	r3, #2
 8008188:	e18a      	b.n	80084a0 <HAL_SPI_TransmitReceive_DMA+0x358>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2205      	movs	r2, #5
 8008196:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	887a      	ldrh	r2, [r7, #2]
 80081ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	887a      	ldrh	r2, [r7, #2]
 80081b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	887a      	ldrh	r2, [r7, #2]
 80081c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	887a      	ldrh	r2, [r7, #2]
 80081ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80081e8:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689a      	ldr	r2, [r3, #8]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80081f8:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	2b0f      	cmp	r3, #15
 8008200:	d90b      	bls.n	800821a <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008206:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800820c:	d121      	bne.n	8008252 <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008212:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8008214:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008218:	d11b      	bne.n	8008252 <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800821e:	2b07      	cmp	r3, #7
 8008220:	d91d      	bls.n	800825e <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008226:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800822c:	d005      	beq.n	800823a <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008232:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008234:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008238:	d10b      	bne.n	8008252 <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800823e:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8008240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008244:	d00b      	beq.n	800825e <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800824a:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800824c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008250:	d005      	beq.n	800825e <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e120      	b.n	80084a0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	2b07      	cmp	r3, #7
 8008264:	d840      	bhi.n	80082e8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008270:	d109      	bne.n	8008286 <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008278:	b29b      	uxth	r3, r3
 800827a:	3301      	adds	r3, #1
 800827c:	105b      	asrs	r3, r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800828a:	699b      	ldr	r3, [r3, #24]
 800828c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008290:	d109      	bne.n	80082a6 <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008298:	b29b      	uxth	r3, r3
 800829a:	3303      	adds	r3, #3
 800829c:	109b      	asrs	r3, r3, #2
 800829e:	b29a      	uxth	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082b0:	d109      	bne.n	80082c6 <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	3301      	adds	r3, #1
 80082bc:	105b      	asrs	r3, r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082d0:	d12e      	bne.n	8008330 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3303      	adds	r3, #3
 80082dc:	109b      	asrs	r3, r3, #2
 80082de:	b29a      	uxth	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082e6:	e023      	b.n	8008330 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	2b0f      	cmp	r3, #15
 80082ee:	d81f      	bhi.n	8008330 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082f4:	699b      	ldr	r3, [r3, #24]
 80082f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082fa:	d109      	bne.n	8008310 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008302:	b29b      	uxth	r3, r3
 8008304:	3301      	adds	r3, #1
 8008306:	105b      	asrs	r3, r3, #1
 8008308:	b29a      	uxth	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800831a:	d109      	bne.n	8008330 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008322:	b29b      	uxth	r3, r3
 8008324:	3301      	adds	r3, #1
 8008326:	105b      	asrs	r3, r3, #1
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008334:	4a5c      	ldr	r2, [pc, #368]	@ (80084a8 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8008336:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800833c:	4a5b      	ldr	r2, [pc, #364]	@ (80084ac <HAL_SPI_TransmitReceive_DMA+0x364>)
 800833e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008344:	4a5a      	ldr	r2, [pc, #360]	@ (80084b0 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8008346:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800834c:	2200      	movs	r2, #0
 800834e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3330      	adds	r3, #48	@ 0x30
 800835a:	4619      	mov	r1, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008360:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008368:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800836a:	f7fa fc9f 	bl	8002cac <HAL_DMA_Start_IT>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d011      	beq.n	8008398 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800837a:	f043 0210 	orr.w	r2, r3, #16
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e083      	b.n	80084a0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083a6:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083ac:	2200      	movs	r2, #0
 80083ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083b4:	2200      	movs	r2, #0
 80083b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083bc:	2200      	movs	r2, #0
 80083be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80083c4:	4a3a      	ldr	r2, [pc, #232]	@ (80084b0 <HAL_SPI_TransmitReceive_DMA+0x368>)
 80083c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d0:	4619      	mov	r1, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3320      	adds	r3, #32
 80083d8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80083e0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80083e2:	f7fa fc63 	bl	8002cac <HAL_DMA_Start_IT>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d016      	beq.n	800841a <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7fa fec5 	bl	8003180 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083fc:	f043 0210 	orr.w	r2, r3, #16
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e042      	b.n	80084a0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008424:	d108      	bne.n	8008438 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6859      	ldr	r1, [r3, #4]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	4b20      	ldr	r3, [pc, #128]	@ (80084b4 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8008432:	400b      	ands	r3, r1
 8008434:	6053      	str	r3, [r2, #4]
 8008436:	e009      	b.n	800844c <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	4b1d      	ldr	r3, [pc, #116]	@ (80084b4 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8008440:	4013      	ands	r3, r2
 8008442:	8879      	ldrh	r1, [r7, #2]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	6812      	ldr	r2, [r2, #0]
 8008448:	430b      	orrs	r3, r1
 800844a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800845a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691a      	ldr	r2, [r3, #16]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800846a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0201 	orr.w	r2, r2, #1
 800847a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008484:	d107      	bne.n	8008496 <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681a      	ldr	r2, [r3, #0]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008494:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3710      	adds	r7, #16
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	08008961 	.word	0x08008961
 80084ac:	080088ff 	.word	0x080088ff
 80084b0:	0800897d 	.word	0x0800897d
 80084b4:	ffff0000 	.word	0xffff0000

080084b8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08a      	sub	sp, #40	@ 0x28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4013      	ands	r3, r2
 80084d6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80084ea:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3330      	adds	r3, #48	@ 0x30
 80084f2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d010      	beq.n	8008520 <HAL_SPI_IRQHandler+0x68>
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699a      	ldr	r2, [r3, #24]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008516:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f9c3 	bl	80088a4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800851e:	e192      	b.n	8008846 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008526:	2b00      	cmp	r3, #0
 8008528:	d113      	bne.n	8008552 <HAL_SPI_IRQHandler+0x9a>
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	f003 0320 	and.w	r3, r3, #32
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10e      	bne.n	8008552 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800853a:	2b00      	cmp	r3, #0
 800853c:	d009      	beq.n	8008552 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	4798      	blx	r3
    handled = 1UL;
 800854e:	2301      	movs	r3, #1
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10f      	bne.n	800857c <HAL_SPI_IRQHandler+0xc4>
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800856c:	2b00      	cmp	r3, #0
 800856e:	d105      	bne.n	800857c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	4798      	blx	r3
    handled = 1UL;
 8008578:	2301      	movs	r3, #1
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10f      	bne.n	80085a6 <HAL_SPI_IRQHandler+0xee>
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4798      	blx	r3
    handled = 1UL;
 80085a2:	2301      	movs	r3, #1
 80085a4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f040 8147 	bne.w	800883c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 808b 	beq.w	80086d0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	699a      	ldr	r2, [r3, #24]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f042 0208 	orr.w	r2, r2, #8
 80085c8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	699a      	ldr	r2, [r3, #24]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f042 0210 	orr.w	r2, r2, #16
 80085d8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	699a      	ldr	r2, [r3, #24]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085e8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	691a      	ldr	r2, [r3, #16]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0208 	bic.w	r2, r2, #8
 80085f8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d13d      	bne.n	8008684 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008608:	e036      	b.n	8008678 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	2b0f      	cmp	r3, #15
 8008610:	d90b      	bls.n	800862a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800861a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800861c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008622:	1d1a      	adds	r2, r3, #4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	665a      	str	r2, [r3, #100]	@ 0x64
 8008628:	e01d      	b.n	8008666 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	2b07      	cmp	r3, #7
 8008630:	d90b      	bls.n	800864a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	8812      	ldrh	r2, [r2, #0]
 800863a:	b292      	uxth	r2, r2
 800863c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008642:	1c9a      	adds	r2, r3, #2
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	665a      	str	r2, [r3, #100]	@ 0x64
 8008648:	e00d      	b.n	8008666 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008656:	7812      	ldrb	r2, [r2, #0]
 8008658:	b2d2      	uxtb	r2, r2
 800865a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1c2      	bne.n	800860a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f9b7 	bl	80089f8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f8f7 	bl	8008890 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80086a2:	e0d0      	b.n	8008846 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80086a4:	7cfb      	ldrb	r3, [r7, #19]
 80086a6:	2b05      	cmp	r3, #5
 80086a8:	d103      	bne.n	80086b2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7f8 f9c2 	bl	8000a34 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80086b0:	e0c6      	b.n	8008840 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80086b2:	7cfb      	ldrb	r3, [r7, #19]
 80086b4:	2b04      	cmp	r3, #4
 80086b6:	d103      	bne.n	80086c0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f8cb 	bl	8008854 <HAL_SPI_RxCpltCallback>
    return;
 80086be:	e0bf      	b.n	8008840 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80086c0:	7cfb      	ldrb	r3, [r7, #19]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	f040 80bc 	bne.w	8008840 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7f8 f99b 	bl	8000a04 <HAL_SPI_TxCpltCallback>
    return;
 80086ce:	e0b7      	b.n	8008840 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 80b5 	beq.w	8008846 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00f      	beq.n	8008706 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086ec:	f043 0204 	orr.w	r2, r3, #4
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699a      	ldr	r2, [r3, #24]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008704:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00f      	beq.n	8008730 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008716:	f043 0201 	orr.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	699a      	ldr	r2, [r3, #24]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800872e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008736:	2b00      	cmp	r3, #0
 8008738:	d00f      	beq.n	800875a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008740:	f043 0208 	orr.w	r2, r3, #8
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699a      	ldr	r2, [r3, #24]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008758:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00f      	beq.n	8008784 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800876a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	699a      	ldr	r2, [r3, #24]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f042 0220 	orr.w	r2, r2, #32
 8008782:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800878a:	2b00      	cmp	r3, #0
 800878c:	d05a      	beq.n	8008844 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6919      	ldr	r1, [r3, #16]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	4b28      	ldr	r3, [pc, #160]	@ (800884c <HAL_SPI_IRQHandler+0x394>)
 80087aa:	400b      	ands	r3, r1
 80087ac:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80087b4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80087b8:	d138      	bne.n	800882c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80087c8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d013      	beq.n	80087fa <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008850 <HAL_SPI_IRQHandler+0x398>)
 80087d8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fa ffec 	bl	80037bc <HAL_DMA_Abort_IT>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d007      	beq.n	80087fa <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d020      	beq.n	8008844 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008806:	4a12      	ldr	r2, [pc, #72]	@ (8008850 <HAL_SPI_IRQHandler+0x398>)
 8008808:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800880e:	4618      	mov	r0, r3
 8008810:	f7fa ffd4 	bl	80037bc <HAL_DMA_Abort_IT>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d014      	beq.n	8008844 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008820:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800882a:	e00b      	b.n	8008844 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f82b 	bl	8008890 <HAL_SPI_ErrorCallback>
    return;
 800883a:	e003      	b.n	8008844 <HAL_SPI_IRQHandler+0x38c>
    return;
 800883c:	bf00      	nop
 800883e:	e002      	b.n	8008846 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008840:	bf00      	nop
 8008842:	e000      	b.n	8008846 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008844:	bf00      	nop
  }
}
 8008846:	3728      	adds	r7, #40	@ 0x28
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	fffffc94 	.word	0xfffffc94
 8008850:	080089c3 	.word	0x080089c3

08008854 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088c4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b07      	cmp	r3, #7
 80088d0:	d011      	beq.n	80088f6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088dc:	d103      	bne.n	80088e6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7f8 f890 	bl	8000a04 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80088e4:	e007      	b.n	80088f6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f042 0208 	orr.w	r2, r2, #8
 80088f4:	611a      	str	r2, [r3, #16]
}
 80088f6:	bf00      	nop
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b07      	cmp	r3, #7
 8008916:	d011      	beq.n	800893c <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008922:	d103      	bne.n	800892c <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7f8 f885 	bl	8000a34 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800892a:	e007      	b.n	800893c <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691a      	ldr	r2, [r3, #16]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0208 	orr.w	r2, r2, #8
 800893a:	611a      	str	r2, [r3, #16]
}
 800893c:	bf00      	nop
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008950:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff ff88 	bl	8008868 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008958:	bf00      	nop
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896c:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f7ff ff84 	bl	800887c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008974:	bf00      	nop
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008988:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7fc f886 	bl	8004a9c <HAL_DMA_GetError>
 8008990:	4603      	mov	r3, r0
 8008992:	2b02      	cmp	r3, #2
 8008994:	d011      	beq.n	80089ba <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f82e 	bl	80089f8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089a2:	f043 0210 	orr.w	r2, r3, #16
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f7ff ff6b 	bl	8008890 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ce:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff ff51 	bl	8008890 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80089ee:	bf00      	nop
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
	...

080089f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0208 	orr.w	r2, r2, #8
 8008a16:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f042 0210 	orr.w	r2, r2, #16
 8008a26:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0201 	bic.w	r2, r2, #1
 8008a36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6919      	ldr	r1, [r3, #16]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4b3c      	ldr	r3, [pc, #240]	@ (8008b34 <SPI_CloseTransfer+0x13c>)
 8008a44:	400b      	ands	r3, r1
 8008a46:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008a56:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d014      	beq.n	8008a8e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f003 0320 	and.w	r3, r3, #32
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00f      	beq.n	8008a8e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	699a      	ldr	r2, [r3, #24]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f042 0220 	orr.w	r2, r2, #32
 8008a8c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d014      	beq.n	8008ac4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00f      	beq.n	8008ac4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008aaa:	f043 0204 	orr.w	r2, r3, #4
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ac2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00f      	beq.n	8008aee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ad4:	f043 0201 	orr.w	r2, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	699a      	ldr	r2, [r3, #24]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00f      	beq.n	8008b18 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008afe:	f043 0208 	orr.w	r2, r3, #8
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699a      	ldr	r2, [r3, #24]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b16:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008b28:	bf00      	nop
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	fffffc90 	.word	0xfffffc90

08008b38 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	3301      	adds	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	3307      	adds	r3, #7
 8008b56:	08db      	lsrs	r3, r3, #3
 8008b58:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e049      	b.n	8008c14 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7f9 f9e9 	bl	8001f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4619      	mov	r1, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	f000 fc49 	bl	8009444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d001      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e054      	b.n	8008cde <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a26      	ldr	r2, [pc, #152]	@ (8008cec <HAL_TIM_Base_Start_IT+0xd0>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d022      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x80>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5e:	d01d      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x80>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a22      	ldr	r2, [pc, #136]	@ (8008cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d018      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x80>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a21      	ldr	r2, [pc, #132]	@ (8008cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d013      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x80>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1f      	ldr	r2, [pc, #124]	@ (8008cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00e      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x80>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1e      	ldr	r2, [pc, #120]	@ (8008cfc <HAL_TIM_Base_Start_IT+0xe0>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d009      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x80>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8008d00 <HAL_TIM_Base_Start_IT+0xe4>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d004      	beq.n	8008c9c <HAL_TIM_Base_Start_IT+0x80>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a1b      	ldr	r2, [pc, #108]	@ (8008d04 <HAL_TIM_Base_Start_IT+0xe8>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d115      	bne.n	8008cc8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	4b19      	ldr	r3, [pc, #100]	@ (8008d08 <HAL_TIM_Base_Start_IT+0xec>)
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b06      	cmp	r3, #6
 8008cac:	d015      	beq.n	8008cda <HAL_TIM_Base_Start_IT+0xbe>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cb4:	d011      	beq.n	8008cda <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f042 0201 	orr.w	r2, r2, #1
 8008cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc6:	e008      	b.n	8008cda <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f042 0201 	orr.w	r2, r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	e000      	b.n	8008cdc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	40010000 	.word	0x40010000
 8008cf0:	40000400 	.word	0x40000400
 8008cf4:	40000800 	.word	0x40000800
 8008cf8:	40000c00 	.word	0x40000c00
 8008cfc:	40010400 	.word	0x40010400
 8008d00:	40001800 	.word	0x40001800
 8008d04:	40014000 	.word	0x40014000
 8008d08:	00010007 	.word	0x00010007

08008d0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e049      	b.n	8008db2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d106      	bne.n	8008d38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f841 	bl	8008dba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4610      	mov	r0, r2
 8008d4c:	f000 fb7a 	bl	8009444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3708      	adds	r7, #8
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008dc2:	bf00      	nop
 8008dc4:	370c      	adds	r7, #12
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	f003 0302 	and.w	r3, r3, #2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d020      	beq.n	8008e32 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d01b      	beq.n	8008e32 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f06f 0202 	mvn.w	r2, #2
 8008e02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	f003 0303 	and.w	r3, r3, #3
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 faf5 	bl	8009408 <HAL_TIM_IC_CaptureCallback>
 8008e1e:	e005      	b.n	8008e2c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fae7 	bl	80093f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 faf8 	bl	800941c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f003 0304 	and.w	r3, r3, #4
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d020      	beq.n	8008e7e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01b      	beq.n	8008e7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f06f 0204 	mvn.w	r2, #4
 8008e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2202      	movs	r2, #2
 8008e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 facf 	bl	8009408 <HAL_TIM_IC_CaptureCallback>
 8008e6a:	e005      	b.n	8008e78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fac1 	bl	80093f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fad2 	bl	800941c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d020      	beq.n	8008eca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f003 0308 	and.w	r3, r3, #8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d01b      	beq.n	8008eca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f06f 0208 	mvn.w	r2, #8
 8008e9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2204      	movs	r2, #4
 8008ea0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 faa9 	bl	8009408 <HAL_TIM_IC_CaptureCallback>
 8008eb6:	e005      	b.n	8008ec4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fa9b 	bl	80093f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f000 faac 	bl	800941c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	f003 0310 	and.w	r3, r3, #16
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d020      	beq.n	8008f16 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 0310 	and.w	r3, r3, #16
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01b      	beq.n	8008f16 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f06f 0210 	mvn.w	r2, #16
 8008ee6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2208      	movs	r2, #8
 8008eec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fa83 	bl	8009408 <HAL_TIM_IC_CaptureCallback>
 8008f02:	e005      	b.n	8008f10 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fa75 	bl	80093f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa86 	bl	800941c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00c      	beq.n	8008f3a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d007      	beq.n	8008f3a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f06f 0201 	mvn.w	r2, #1
 8008f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f7f7 fd99 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00c      	beq.n	8008f68 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 ff98 	bl	8009e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00c      	beq.n	8008f8c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d007      	beq.n	8008f8c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 ff90 	bl	8009eac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00c      	beq.n	8008fb0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d007      	beq.n	8008fb0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa40 	bl	8009430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f003 0320 	and.w	r3, r3, #32
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00c      	beq.n	8008fd4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f003 0320 	and.w	r3, r3, #32
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d007      	beq.n	8008fd4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f06f 0220 	mvn.w	r2, #32
 8008fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 ff58 	bl	8009e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d101      	bne.n	8008ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	e0ff      	b.n	80091fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b14      	cmp	r3, #20
 8009006:	f200 80f0 	bhi.w	80091ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800900a:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009065 	.word	0x08009065
 8009014:	080091eb 	.word	0x080091eb
 8009018:	080091eb 	.word	0x080091eb
 800901c:	080091eb 	.word	0x080091eb
 8009020:	080090a5 	.word	0x080090a5
 8009024:	080091eb 	.word	0x080091eb
 8009028:	080091eb 	.word	0x080091eb
 800902c:	080091eb 	.word	0x080091eb
 8009030:	080090e7 	.word	0x080090e7
 8009034:	080091eb 	.word	0x080091eb
 8009038:	080091eb 	.word	0x080091eb
 800903c:	080091eb 	.word	0x080091eb
 8009040:	08009127 	.word	0x08009127
 8009044:	080091eb 	.word	0x080091eb
 8009048:	080091eb 	.word	0x080091eb
 800904c:	080091eb 	.word	0x080091eb
 8009050:	08009169 	.word	0x08009169
 8009054:	080091eb 	.word	0x080091eb
 8009058:	080091eb 	.word	0x080091eb
 800905c:	080091eb 	.word	0x080091eb
 8009060:	080091a9 	.word	0x080091a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	4618      	mov	r0, r3
 800906c:	f000 fa8a 	bl	8009584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0208 	orr.w	r2, r2, #8
 800907e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	699a      	ldr	r2, [r3, #24]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0204 	bic.w	r2, r2, #4
 800908e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6999      	ldr	r1, [r3, #24]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	691a      	ldr	r2, [r3, #16]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	619a      	str	r2, [r3, #24]
      break;
 80090a2:	e0a5      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68b9      	ldr	r1, [r7, #8]
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fafa 	bl	80096a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	699a      	ldr	r2, [r3, #24]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80090ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6999      	ldr	r1, [r3, #24]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	021a      	lsls	r2, r3, #8
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	619a      	str	r2, [r3, #24]
      break;
 80090e4:	e084      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68b9      	ldr	r1, [r7, #8]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 fb63 	bl	80097b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69da      	ldr	r2, [r3, #28]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0208 	orr.w	r2, r2, #8
 8009100:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69da      	ldr	r2, [r3, #28]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0204 	bic.w	r2, r2, #4
 8009110:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69d9      	ldr	r1, [r3, #28]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	691a      	ldr	r2, [r3, #16]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	61da      	str	r2, [r3, #28]
      break;
 8009124:	e064      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68b9      	ldr	r1, [r7, #8]
 800912c:	4618      	mov	r0, r3
 800912e:	f000 fbcb 	bl	80098c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69da      	ldr	r2, [r3, #28]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69da      	ldr	r2, [r3, #28]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69d9      	ldr	r1, [r3, #28]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	021a      	lsls	r2, r3, #8
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	61da      	str	r2, [r3, #28]
      break;
 8009166:	e043      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68b9      	ldr	r1, [r7, #8]
 800916e:	4618      	mov	r0, r3
 8009170:	f000 fc14 	bl	800999c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0208 	orr.w	r2, r2, #8
 8009182:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f022 0204 	bic.w	r2, r2, #4
 8009192:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80091a6:	e023      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68b9      	ldr	r1, [r7, #8]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 fc58 	bl	8009a64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	021a      	lsls	r2, r3, #8
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	430a      	orrs	r2, r1
 80091e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80091e8:	e002      	b.n	80091f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
 80091ec:	75fb      	strb	r3, [r7, #23]
      break;
 80091ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop

08009204 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009218:	2b01      	cmp	r3, #1
 800921a:	d101      	bne.n	8009220 <HAL_TIM_ConfigClockSource+0x1c>
 800921c:	2302      	movs	r3, #2
 800921e:	e0dc      	b.n	80093da <HAL_TIM_ConfigClockSource+0x1d6>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2202      	movs	r2, #2
 800922c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	4b6a      	ldr	r3, [pc, #424]	@ (80093e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800923c:	4013      	ands	r3, r2
 800923e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009246:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a64      	ldr	r2, [pc, #400]	@ (80093e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009256:	4293      	cmp	r3, r2
 8009258:	f000 80a9 	beq.w	80093ae <HAL_TIM_ConfigClockSource+0x1aa>
 800925c:	4a62      	ldr	r2, [pc, #392]	@ (80093e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800925e:	4293      	cmp	r3, r2
 8009260:	f200 80ae 	bhi.w	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009264:	4a61      	ldr	r2, [pc, #388]	@ (80093ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8009266:	4293      	cmp	r3, r2
 8009268:	f000 80a1 	beq.w	80093ae <HAL_TIM_ConfigClockSource+0x1aa>
 800926c:	4a5f      	ldr	r2, [pc, #380]	@ (80093ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800926e:	4293      	cmp	r3, r2
 8009270:	f200 80a6 	bhi.w	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009274:	4a5e      	ldr	r2, [pc, #376]	@ (80093f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009276:	4293      	cmp	r3, r2
 8009278:	f000 8099 	beq.w	80093ae <HAL_TIM_ConfigClockSource+0x1aa>
 800927c:	4a5c      	ldr	r2, [pc, #368]	@ (80093f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800927e:	4293      	cmp	r3, r2
 8009280:	f200 809e 	bhi.w	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009284:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009288:	f000 8091 	beq.w	80093ae <HAL_TIM_ConfigClockSource+0x1aa>
 800928c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009290:	f200 8096 	bhi.w	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009294:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009298:	f000 8089 	beq.w	80093ae <HAL_TIM_ConfigClockSource+0x1aa>
 800929c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092a0:	f200 808e 	bhi.w	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092a8:	d03e      	beq.n	8009328 <HAL_TIM_ConfigClockSource+0x124>
 80092aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ae:	f200 8087 	bhi.w	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092b6:	f000 8086 	beq.w	80093c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80092ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092be:	d87f      	bhi.n	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092c0:	2b70      	cmp	r3, #112	@ 0x70
 80092c2:	d01a      	beq.n	80092fa <HAL_TIM_ConfigClockSource+0xf6>
 80092c4:	2b70      	cmp	r3, #112	@ 0x70
 80092c6:	d87b      	bhi.n	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092c8:	2b60      	cmp	r3, #96	@ 0x60
 80092ca:	d050      	beq.n	800936e <HAL_TIM_ConfigClockSource+0x16a>
 80092cc:	2b60      	cmp	r3, #96	@ 0x60
 80092ce:	d877      	bhi.n	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092d0:	2b50      	cmp	r3, #80	@ 0x50
 80092d2:	d03c      	beq.n	800934e <HAL_TIM_ConfigClockSource+0x14a>
 80092d4:	2b50      	cmp	r3, #80	@ 0x50
 80092d6:	d873      	bhi.n	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092d8:	2b40      	cmp	r3, #64	@ 0x40
 80092da:	d058      	beq.n	800938e <HAL_TIM_ConfigClockSource+0x18a>
 80092dc:	2b40      	cmp	r3, #64	@ 0x40
 80092de:	d86f      	bhi.n	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092e0:	2b30      	cmp	r3, #48	@ 0x30
 80092e2:	d064      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0x1aa>
 80092e4:	2b30      	cmp	r3, #48	@ 0x30
 80092e6:	d86b      	bhi.n	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092e8:	2b20      	cmp	r3, #32
 80092ea:	d060      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0x1aa>
 80092ec:	2b20      	cmp	r3, #32
 80092ee:	d867      	bhi.n	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d05c      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0x1aa>
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d05a      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0x1aa>
 80092f8:	e062      	b.n	80093c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800930a:	f000 fc8f 	bl	8009c2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800931c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	609a      	str	r2, [r3, #8]
      break;
 8009326:	e04f      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009338:	f000 fc78 	bl	8009c2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800934a:	609a      	str	r2, [r3, #8]
      break;
 800934c:	e03c      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800935a:	461a      	mov	r2, r3
 800935c:	f000 fbe8 	bl	8009b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2150      	movs	r1, #80	@ 0x50
 8009366:	4618      	mov	r0, r3
 8009368:	f000 fc42 	bl	8009bf0 <TIM_ITRx_SetConfig>
      break;
 800936c:	e02c      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800937a:	461a      	mov	r2, r3
 800937c:	f000 fc07 	bl	8009b8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2160      	movs	r1, #96	@ 0x60
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fc32 	bl	8009bf0 <TIM_ITRx_SetConfig>
      break;
 800938c:	e01c      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800939a:	461a      	mov	r2, r3
 800939c:	f000 fbc8 	bl	8009b30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2140      	movs	r1, #64	@ 0x40
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fc22 	bl	8009bf0 <TIM_ITRx_SetConfig>
      break;
 80093ac:	e00c      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4619      	mov	r1, r3
 80093b8:	4610      	mov	r0, r2
 80093ba:	f000 fc19 	bl	8009bf0 <TIM_ITRx_SetConfig>
      break;
 80093be:	e003      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	73fb      	strb	r3, [r7, #15]
      break;
 80093c4:	e000      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80093c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	ffceff88 	.word	0xffceff88
 80093e8:	00100040 	.word	0x00100040
 80093ec:	00100030 	.word	0x00100030
 80093f0:	00100020 	.word	0x00100020

080093f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093fc:	bf00      	nop
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009410:	bf00      	nop
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009424:	bf00      	nop
 8009426:	370c      	adds	r7, #12
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a43      	ldr	r2, [pc, #268]	@ (8009564 <TIM_Base_SetConfig+0x120>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d013      	beq.n	8009484 <TIM_Base_SetConfig+0x40>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009462:	d00f      	beq.n	8009484 <TIM_Base_SetConfig+0x40>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a40      	ldr	r2, [pc, #256]	@ (8009568 <TIM_Base_SetConfig+0x124>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d00b      	beq.n	8009484 <TIM_Base_SetConfig+0x40>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a3f      	ldr	r2, [pc, #252]	@ (800956c <TIM_Base_SetConfig+0x128>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d007      	beq.n	8009484 <TIM_Base_SetConfig+0x40>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a3e      	ldr	r2, [pc, #248]	@ (8009570 <TIM_Base_SetConfig+0x12c>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d003      	beq.n	8009484 <TIM_Base_SetConfig+0x40>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a3d      	ldr	r2, [pc, #244]	@ (8009574 <TIM_Base_SetConfig+0x130>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d108      	bne.n	8009496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800948a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	4313      	orrs	r3, r2
 8009494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	4a32      	ldr	r2, [pc, #200]	@ (8009564 <TIM_Base_SetConfig+0x120>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d01f      	beq.n	80094de <TIM_Base_SetConfig+0x9a>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094a4:	d01b      	beq.n	80094de <TIM_Base_SetConfig+0x9a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4a2f      	ldr	r2, [pc, #188]	@ (8009568 <TIM_Base_SetConfig+0x124>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d017      	beq.n	80094de <TIM_Base_SetConfig+0x9a>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4a2e      	ldr	r2, [pc, #184]	@ (800956c <TIM_Base_SetConfig+0x128>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d013      	beq.n	80094de <TIM_Base_SetConfig+0x9a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4a2d      	ldr	r2, [pc, #180]	@ (8009570 <TIM_Base_SetConfig+0x12c>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d00f      	beq.n	80094de <TIM_Base_SetConfig+0x9a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4a2c      	ldr	r2, [pc, #176]	@ (8009574 <TIM_Base_SetConfig+0x130>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d00b      	beq.n	80094de <TIM_Base_SetConfig+0x9a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	4a2b      	ldr	r2, [pc, #172]	@ (8009578 <TIM_Base_SetConfig+0x134>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d007      	beq.n	80094de <TIM_Base_SetConfig+0x9a>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a2a      	ldr	r2, [pc, #168]	@ (800957c <TIM_Base_SetConfig+0x138>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d003      	beq.n	80094de <TIM_Base_SetConfig+0x9a>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a29      	ldr	r2, [pc, #164]	@ (8009580 <TIM_Base_SetConfig+0x13c>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d108      	bne.n	80094f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	689a      	ldr	r2, [r3, #8]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a14      	ldr	r2, [pc, #80]	@ (8009564 <TIM_Base_SetConfig+0x120>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d00f      	beq.n	8009536 <TIM_Base_SetConfig+0xf2>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a16      	ldr	r2, [pc, #88]	@ (8009574 <TIM_Base_SetConfig+0x130>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d00b      	beq.n	8009536 <TIM_Base_SetConfig+0xf2>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a15      	ldr	r2, [pc, #84]	@ (8009578 <TIM_Base_SetConfig+0x134>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d007      	beq.n	8009536 <TIM_Base_SetConfig+0xf2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a14      	ldr	r2, [pc, #80]	@ (800957c <TIM_Base_SetConfig+0x138>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d003      	beq.n	8009536 <TIM_Base_SetConfig+0xf2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a13      	ldr	r2, [pc, #76]	@ (8009580 <TIM_Base_SetConfig+0x13c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d103      	bne.n	800953e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	691a      	ldr	r2, [r3, #16]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f043 0204 	orr.w	r2, r3, #4
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	601a      	str	r2, [r3, #0]
}
 8009556:	bf00      	nop
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
 8009562:	bf00      	nop
 8009564:	40010000 	.word	0x40010000
 8009568:	40000400 	.word	0x40000400
 800956c:	40000800 	.word	0x40000800
 8009570:	40000c00 	.word	0x40000c00
 8009574:	40010400 	.word	0x40010400
 8009578:	40014000 	.word	0x40014000
 800957c:	40014400 	.word	0x40014400
 8009580:	40014800 	.word	0x40014800

08009584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	f023 0201 	bic.w	r2, r3, #1
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	4b37      	ldr	r3, [pc, #220]	@ (800968c <TIM_OC1_SetConfig+0x108>)
 80095b0:	4013      	ands	r3, r2
 80095b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0303 	bic.w	r3, r3, #3
 80095ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f023 0302 	bic.w	r3, r3, #2
 80095cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a2d      	ldr	r2, [pc, #180]	@ (8009690 <TIM_OC1_SetConfig+0x10c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d00f      	beq.n	8009600 <TIM_OC1_SetConfig+0x7c>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009694 <TIM_OC1_SetConfig+0x110>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00b      	beq.n	8009600 <TIM_OC1_SetConfig+0x7c>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a2b      	ldr	r2, [pc, #172]	@ (8009698 <TIM_OC1_SetConfig+0x114>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d007      	beq.n	8009600 <TIM_OC1_SetConfig+0x7c>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a2a      	ldr	r2, [pc, #168]	@ (800969c <TIM_OC1_SetConfig+0x118>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d003      	beq.n	8009600 <TIM_OC1_SetConfig+0x7c>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a29      	ldr	r2, [pc, #164]	@ (80096a0 <TIM_OC1_SetConfig+0x11c>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d10c      	bne.n	800961a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	f023 0308 	bic.w	r3, r3, #8
 8009606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f023 0304 	bic.w	r3, r3, #4
 8009618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a1c      	ldr	r2, [pc, #112]	@ (8009690 <TIM_OC1_SetConfig+0x10c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d00f      	beq.n	8009642 <TIM_OC1_SetConfig+0xbe>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a1b      	ldr	r2, [pc, #108]	@ (8009694 <TIM_OC1_SetConfig+0x110>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d00b      	beq.n	8009642 <TIM_OC1_SetConfig+0xbe>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a1a      	ldr	r2, [pc, #104]	@ (8009698 <TIM_OC1_SetConfig+0x114>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d007      	beq.n	8009642 <TIM_OC1_SetConfig+0xbe>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a19      	ldr	r2, [pc, #100]	@ (800969c <TIM_OC1_SetConfig+0x118>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d003      	beq.n	8009642 <TIM_OC1_SetConfig+0xbe>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a18      	ldr	r2, [pc, #96]	@ (80096a0 <TIM_OC1_SetConfig+0x11c>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d111      	bne.n	8009666 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	4313      	orrs	r3, r2
 800965a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	4313      	orrs	r3, r2
 8009664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685a      	ldr	r2, [r3, #4]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	621a      	str	r2, [r3, #32]
}
 8009680:	bf00      	nop
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	fffeff8f 	.word	0xfffeff8f
 8009690:	40010000 	.word	0x40010000
 8009694:	40010400 	.word	0x40010400
 8009698:	40014000 	.word	0x40014000
 800969c:	40014400 	.word	0x40014400
 80096a0:	40014800 	.word	0x40014800

080096a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	f023 0210 	bic.w	r2, r3, #16
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4b34      	ldr	r3, [pc, #208]	@ (80097a0 <TIM_OC2_SetConfig+0xfc>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	f023 0320 	bic.w	r3, r3, #32
 80096ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	011b      	lsls	r3, r3, #4
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a29      	ldr	r2, [pc, #164]	@ (80097a4 <TIM_OC2_SetConfig+0x100>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d003      	beq.n	800970c <TIM_OC2_SetConfig+0x68>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a28      	ldr	r2, [pc, #160]	@ (80097a8 <TIM_OC2_SetConfig+0x104>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d10d      	bne.n	8009728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	697a      	ldr	r2, [r7, #20]
 800971c:	4313      	orrs	r3, r2
 800971e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009726:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a1e      	ldr	r2, [pc, #120]	@ (80097a4 <TIM_OC2_SetConfig+0x100>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d00f      	beq.n	8009750 <TIM_OC2_SetConfig+0xac>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a1d      	ldr	r2, [pc, #116]	@ (80097a8 <TIM_OC2_SetConfig+0x104>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d00b      	beq.n	8009750 <TIM_OC2_SetConfig+0xac>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a1c      	ldr	r2, [pc, #112]	@ (80097ac <TIM_OC2_SetConfig+0x108>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d007      	beq.n	8009750 <TIM_OC2_SetConfig+0xac>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a1b      	ldr	r2, [pc, #108]	@ (80097b0 <TIM_OC2_SetConfig+0x10c>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d003      	beq.n	8009750 <TIM_OC2_SetConfig+0xac>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a1a      	ldr	r2, [pc, #104]	@ (80097b4 <TIM_OC2_SetConfig+0x110>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d113      	bne.n	8009778 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800975e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	4313      	orrs	r3, r2
 800976a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	4313      	orrs	r3, r2
 8009776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	621a      	str	r2, [r3, #32]
}
 8009792:	bf00      	nop
 8009794:	371c      	adds	r7, #28
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	feff8fff 	.word	0xfeff8fff
 80097a4:	40010000 	.word	0x40010000
 80097a8:	40010400 	.word	0x40010400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800

080097b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b087      	sub	sp, #28
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a1b      	ldr	r3, [r3, #32]
 80097c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
 80097de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	4b33      	ldr	r3, [pc, #204]	@ (80098b0 <TIM_OC3_SetConfig+0xf8>)
 80097e4:	4013      	ands	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f023 0303 	bic.w	r3, r3, #3
 80097ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	4313      	orrs	r3, r2
 800980c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a28      	ldr	r2, [pc, #160]	@ (80098b4 <TIM_OC3_SetConfig+0xfc>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d003      	beq.n	800981e <TIM_OC3_SetConfig+0x66>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a27      	ldr	r2, [pc, #156]	@ (80098b8 <TIM_OC3_SetConfig+0x100>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d10d      	bne.n	800983a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	021b      	lsls	r3, r3, #8
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a1d      	ldr	r2, [pc, #116]	@ (80098b4 <TIM_OC3_SetConfig+0xfc>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00f      	beq.n	8009862 <TIM_OC3_SetConfig+0xaa>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a1c      	ldr	r2, [pc, #112]	@ (80098b8 <TIM_OC3_SetConfig+0x100>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00b      	beq.n	8009862 <TIM_OC3_SetConfig+0xaa>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a1b      	ldr	r2, [pc, #108]	@ (80098bc <TIM_OC3_SetConfig+0x104>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d007      	beq.n	8009862 <TIM_OC3_SetConfig+0xaa>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a1a      	ldr	r2, [pc, #104]	@ (80098c0 <TIM_OC3_SetConfig+0x108>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d003      	beq.n	8009862 <TIM_OC3_SetConfig+0xaa>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a19      	ldr	r2, [pc, #100]	@ (80098c4 <TIM_OC3_SetConfig+0x10c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d113      	bne.n	800988a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	011b      	lsls	r3, r3, #4
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	4313      	orrs	r3, r2
 800987c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	011b      	lsls	r3, r3, #4
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	4313      	orrs	r3, r2
 8009888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	685a      	ldr	r2, [r3, #4]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	621a      	str	r2, [r3, #32]
}
 80098a4:	bf00      	nop
 80098a6:	371c      	adds	r7, #28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	fffeff8f 	.word	0xfffeff8f
 80098b4:	40010000 	.word	0x40010000
 80098b8:	40010400 	.word	0x40010400
 80098bc:	40014000 	.word	0x40014000
 80098c0:	40014400 	.word	0x40014400
 80098c4:	40014800 	.word	0x40014800

080098c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69db      	ldr	r3, [r3, #28]
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	4b24      	ldr	r3, [pc, #144]	@ (8009984 <TIM_OC4_SetConfig+0xbc>)
 80098f4:	4013      	ands	r3, r2
 80098f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	021b      	lsls	r3, r3, #8
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	4313      	orrs	r3, r2
 800990a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	031b      	lsls	r3, r3, #12
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	4313      	orrs	r3, r2
 800991e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a19      	ldr	r2, [pc, #100]	@ (8009988 <TIM_OC4_SetConfig+0xc0>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d00f      	beq.n	8009948 <TIM_OC4_SetConfig+0x80>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a18      	ldr	r2, [pc, #96]	@ (800998c <TIM_OC4_SetConfig+0xc4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00b      	beq.n	8009948 <TIM_OC4_SetConfig+0x80>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a17      	ldr	r2, [pc, #92]	@ (8009990 <TIM_OC4_SetConfig+0xc8>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d007      	beq.n	8009948 <TIM_OC4_SetConfig+0x80>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a16      	ldr	r2, [pc, #88]	@ (8009994 <TIM_OC4_SetConfig+0xcc>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d003      	beq.n	8009948 <TIM_OC4_SetConfig+0x80>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a15      	ldr	r2, [pc, #84]	@ (8009998 <TIM_OC4_SetConfig+0xd0>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d109      	bne.n	800995c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800994e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	019b      	lsls	r3, r3, #6
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	4313      	orrs	r3, r2
 800995a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	697a      	ldr	r2, [r7, #20]
 8009960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	621a      	str	r2, [r3, #32]
}
 8009976:	bf00      	nop
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	feff8fff 	.word	0xfeff8fff
 8009988:	40010000 	.word	0x40010000
 800998c:	40010400 	.word	0x40010400
 8009990:	40014000 	.word	0x40014000
 8009994:	40014400 	.word	0x40014400
 8009998:	40014800 	.word	0x40014800

0800999c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800999c:	b480      	push	{r7}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6a1b      	ldr	r3, [r3, #32]
 80099b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4b21      	ldr	r3, [pc, #132]	@ (8009a4c <TIM_OC5_SetConfig+0xb0>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80099dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	041b      	lsls	r3, r3, #16
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a18      	ldr	r2, [pc, #96]	@ (8009a50 <TIM_OC5_SetConfig+0xb4>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d00f      	beq.n	8009a12 <TIM_OC5_SetConfig+0x76>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a17      	ldr	r2, [pc, #92]	@ (8009a54 <TIM_OC5_SetConfig+0xb8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00b      	beq.n	8009a12 <TIM_OC5_SetConfig+0x76>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a16      	ldr	r2, [pc, #88]	@ (8009a58 <TIM_OC5_SetConfig+0xbc>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d007      	beq.n	8009a12 <TIM_OC5_SetConfig+0x76>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a15      	ldr	r2, [pc, #84]	@ (8009a5c <TIM_OC5_SetConfig+0xc0>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d003      	beq.n	8009a12 <TIM_OC5_SetConfig+0x76>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a14      	ldr	r2, [pc, #80]	@ (8009a60 <TIM_OC5_SetConfig+0xc4>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d109      	bne.n	8009a26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	021b      	lsls	r3, r3, #8
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	621a      	str	r2, [r3, #32]
}
 8009a40:	bf00      	nop
 8009a42:	371c      	adds	r7, #28
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr
 8009a4c:	fffeff8f 	.word	0xfffeff8f
 8009a50:	40010000 	.word	0x40010000
 8009a54:	40010400 	.word	0x40010400
 8009a58:	40014000 	.word	0x40014000
 8009a5c:	40014400 	.word	0x40014400
 8009a60:	40014800 	.word	0x40014800

08009a64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4b22      	ldr	r3, [pc, #136]	@ (8009b18 <TIM_OC6_SetConfig+0xb4>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	021b      	lsls	r3, r3, #8
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	051b      	lsls	r3, r3, #20
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a19      	ldr	r2, [pc, #100]	@ (8009b1c <TIM_OC6_SetConfig+0xb8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d00f      	beq.n	8009adc <TIM_OC6_SetConfig+0x78>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a18      	ldr	r2, [pc, #96]	@ (8009b20 <TIM_OC6_SetConfig+0xbc>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00b      	beq.n	8009adc <TIM_OC6_SetConfig+0x78>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a17      	ldr	r2, [pc, #92]	@ (8009b24 <TIM_OC6_SetConfig+0xc0>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d007      	beq.n	8009adc <TIM_OC6_SetConfig+0x78>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a16      	ldr	r2, [pc, #88]	@ (8009b28 <TIM_OC6_SetConfig+0xc4>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d003      	beq.n	8009adc <TIM_OC6_SetConfig+0x78>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a15      	ldr	r2, [pc, #84]	@ (8009b2c <TIM_OC6_SetConfig+0xc8>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d109      	bne.n	8009af0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	029b      	lsls	r3, r3, #10
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	4313      	orrs	r3, r2
 8009aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	697a      	ldr	r2, [r7, #20]
 8009af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685a      	ldr	r2, [r3, #4]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	621a      	str	r2, [r3, #32]
}
 8009b0a:	bf00      	nop
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	feff8fff 	.word	0xfeff8fff
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40010400 	.word	0x40010400
 8009b24:	40014000 	.word	0x40014000
 8009b28:	40014400 	.word	0x40014400
 8009b2c:	40014800 	.word	0x40014800

08009b30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6a1b      	ldr	r3, [r3, #32]
 8009b40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	f023 0201 	bic.w	r2, r3, #1
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	011b      	lsls	r3, r3, #4
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	f023 030a 	bic.w	r3, r3, #10
 8009b6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b6e:	697a      	ldr	r2, [r7, #20]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	4313      	orrs	r3, r2
 8009b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	621a      	str	r2, [r3, #32]
}
 8009b82:	bf00      	nop
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b087      	sub	sp, #28
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	60f8      	str	r0, [r7, #12]
 8009b96:	60b9      	str	r1, [r7, #8]
 8009b98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6a1b      	ldr	r3, [r3, #32]
 8009ba4:	f023 0210 	bic.w	r2, r3, #16
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	031b      	lsls	r3, r3, #12
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009bca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	697a      	ldr	r2, [r7, #20]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	697a      	ldr	r2, [r7, #20]
 8009be0:	621a      	str	r2, [r3, #32]
}
 8009be2:	bf00      	nop
 8009be4:	371c      	adds	r7, #28
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
	...

08009bf0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4b09      	ldr	r3, [pc, #36]	@ (8009c28 <TIM_ITRx_SetConfig+0x38>)
 8009c04:	4013      	ands	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	f043 0307 	orr.w	r3, r3, #7
 8009c12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	609a      	str	r2, [r3, #8]
}
 8009c1a:	bf00      	nop
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	ffcfff8f 	.word	0xffcfff8f

08009c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	021a      	lsls	r2, r3, #8
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	609a      	str	r2, [r3, #8]
}
 8009c60:	bf00      	nop
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d101      	bne.n	8009c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c80:	2302      	movs	r3, #2
 8009c82:	e06d      	b.n	8009d60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a30      	ldr	r2, [pc, #192]	@ (8009d6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d004      	beq.n	8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8009d70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d108      	bne.n	8009cca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009cbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a20      	ldr	r2, [pc, #128]	@ (8009d6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d022      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf6:	d01d      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d018      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a1c      	ldr	r2, [pc, #112]	@ (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d013      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a1a      	ldr	r2, [pc, #104]	@ (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d00e      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a15      	ldr	r2, [pc, #84]	@ (8009d70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d009      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a16      	ldr	r2, [pc, #88]	@ (8009d80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d004      	beq.n	8009d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a15      	ldr	r2, [pc, #84]	@ (8009d84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d10c      	bne.n	8009d4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68ba      	ldr	r2, [r7, #8]
 8009d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	40010000 	.word	0x40010000
 8009d70:	40010400 	.word	0x40010400
 8009d74:	40000400 	.word	0x40000400
 8009d78:	40000800 	.word	0x40000800
 8009d7c:	40000c00 	.word	0x40000c00
 8009d80:	40001800 	.word	0x40001800
 8009d84:	40014000 	.word	0x40014000

08009d88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d101      	bne.n	8009da4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009da0:	2302      	movs	r3, #2
 8009da2:	e065      	b.n	8009e70 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	041b      	lsls	r3, r3, #16
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a16      	ldr	r2, [pc, #88]	@ (8009e7c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d004      	beq.n	8009e32 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a14      	ldr	r2, [pc, #80]	@ (8009e80 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d115      	bne.n	8009e5e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3c:	051b      	lsls	r3, r3, #20
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	40010000 	.word	0x40010000
 8009e80:	40010400 	.word	0x40010400

08009e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <__cvt>:
 8009ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec2:	ed2d 8b02 	vpush	{d8}
 8009ec6:	eeb0 8b40 	vmov.f64	d8, d0
 8009eca:	b085      	sub	sp, #20
 8009ecc:	4617      	mov	r7, r2
 8009ece:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8009ed0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ed2:	ee18 2a90 	vmov	r2, s17
 8009ed6:	f025 0520 	bic.w	r5, r5, #32
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	bfb6      	itet	lt
 8009ede:	222d      	movlt	r2, #45	@ 0x2d
 8009ee0:	2200      	movge	r2, #0
 8009ee2:	eeb1 8b40 	vneglt.f64	d8, d0
 8009ee6:	2d46      	cmp	r5, #70	@ 0x46
 8009ee8:	460c      	mov	r4, r1
 8009eea:	701a      	strb	r2, [r3, #0]
 8009eec:	d004      	beq.n	8009ef8 <__cvt+0x38>
 8009eee:	2d45      	cmp	r5, #69	@ 0x45
 8009ef0:	d100      	bne.n	8009ef4 <__cvt+0x34>
 8009ef2:	3401      	adds	r4, #1
 8009ef4:	2102      	movs	r1, #2
 8009ef6:	e000      	b.n	8009efa <__cvt+0x3a>
 8009ef8:	2103      	movs	r1, #3
 8009efa:	ab03      	add	r3, sp, #12
 8009efc:	9301      	str	r3, [sp, #4]
 8009efe:	ab02      	add	r3, sp, #8
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	4622      	mov	r2, r4
 8009f04:	4633      	mov	r3, r6
 8009f06:	eeb0 0b48 	vmov.f64	d0, d8
 8009f0a:	f000 fe31 	bl	800ab70 <_dtoa_r>
 8009f0e:	2d47      	cmp	r5, #71	@ 0x47
 8009f10:	d114      	bne.n	8009f3c <__cvt+0x7c>
 8009f12:	07fb      	lsls	r3, r7, #31
 8009f14:	d50a      	bpl.n	8009f2c <__cvt+0x6c>
 8009f16:	1902      	adds	r2, r0, r4
 8009f18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f20:	bf08      	it	eq
 8009f22:	9203      	streq	r2, [sp, #12]
 8009f24:	2130      	movs	r1, #48	@ 0x30
 8009f26:	9b03      	ldr	r3, [sp, #12]
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d319      	bcc.n	8009f60 <__cvt+0xa0>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f30:	1a1b      	subs	r3, r3, r0
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	b005      	add	sp, #20
 8009f36:	ecbd 8b02 	vpop	{d8}
 8009f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f3c:	2d46      	cmp	r5, #70	@ 0x46
 8009f3e:	eb00 0204 	add.w	r2, r0, r4
 8009f42:	d1e9      	bne.n	8009f18 <__cvt+0x58>
 8009f44:	7803      	ldrb	r3, [r0, #0]
 8009f46:	2b30      	cmp	r3, #48	@ 0x30
 8009f48:	d107      	bne.n	8009f5a <__cvt+0x9a>
 8009f4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f52:	bf1c      	itt	ne
 8009f54:	f1c4 0401 	rsbne	r4, r4, #1
 8009f58:	6034      	strne	r4, [r6, #0]
 8009f5a:	6833      	ldr	r3, [r6, #0]
 8009f5c:	441a      	add	r2, r3
 8009f5e:	e7db      	b.n	8009f18 <__cvt+0x58>
 8009f60:	1c5c      	adds	r4, r3, #1
 8009f62:	9403      	str	r4, [sp, #12]
 8009f64:	7019      	strb	r1, [r3, #0]
 8009f66:	e7de      	b.n	8009f26 <__cvt+0x66>

08009f68 <__exponent>:
 8009f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f6a:	2900      	cmp	r1, #0
 8009f6c:	bfba      	itte	lt
 8009f6e:	4249      	neglt	r1, r1
 8009f70:	232d      	movlt	r3, #45	@ 0x2d
 8009f72:	232b      	movge	r3, #43	@ 0x2b
 8009f74:	2909      	cmp	r1, #9
 8009f76:	7002      	strb	r2, [r0, #0]
 8009f78:	7043      	strb	r3, [r0, #1]
 8009f7a:	dd29      	ble.n	8009fd0 <__exponent+0x68>
 8009f7c:	f10d 0307 	add.w	r3, sp, #7
 8009f80:	461d      	mov	r5, r3
 8009f82:	270a      	movs	r7, #10
 8009f84:	461a      	mov	r2, r3
 8009f86:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f8a:	fb07 1416 	mls	r4, r7, r6, r1
 8009f8e:	3430      	adds	r4, #48	@ 0x30
 8009f90:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f94:	460c      	mov	r4, r1
 8009f96:	2c63      	cmp	r4, #99	@ 0x63
 8009f98:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f9c:	4631      	mov	r1, r6
 8009f9e:	dcf1      	bgt.n	8009f84 <__exponent+0x1c>
 8009fa0:	3130      	adds	r1, #48	@ 0x30
 8009fa2:	1e94      	subs	r4, r2, #2
 8009fa4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fa8:	1c41      	adds	r1, r0, #1
 8009faa:	4623      	mov	r3, r4
 8009fac:	42ab      	cmp	r3, r5
 8009fae:	d30a      	bcc.n	8009fc6 <__exponent+0x5e>
 8009fb0:	f10d 0309 	add.w	r3, sp, #9
 8009fb4:	1a9b      	subs	r3, r3, r2
 8009fb6:	42ac      	cmp	r4, r5
 8009fb8:	bf88      	it	hi
 8009fba:	2300      	movhi	r3, #0
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	4403      	add	r3, r0
 8009fc0:	1a18      	subs	r0, r3, r0
 8009fc2:	b003      	add	sp, #12
 8009fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fc6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fca:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fce:	e7ed      	b.n	8009fac <__exponent+0x44>
 8009fd0:	2330      	movs	r3, #48	@ 0x30
 8009fd2:	3130      	adds	r1, #48	@ 0x30
 8009fd4:	7083      	strb	r3, [r0, #2]
 8009fd6:	70c1      	strb	r1, [r0, #3]
 8009fd8:	1d03      	adds	r3, r0, #4
 8009fda:	e7f1      	b.n	8009fc0 <__exponent+0x58>
 8009fdc:	0000      	movs	r0, r0
	...

08009fe0 <_printf_float>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	b08d      	sub	sp, #52	@ 0x34
 8009fe6:	460c      	mov	r4, r1
 8009fe8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009fec:	4616      	mov	r6, r2
 8009fee:	461f      	mov	r7, r3
 8009ff0:	4605      	mov	r5, r0
 8009ff2:	f000 fcbb 	bl	800a96c <_localeconv_r>
 8009ff6:	f8d0 b000 	ldr.w	fp, [r0]
 8009ffa:	4658      	mov	r0, fp
 8009ffc:	f7f6 f9c0 	bl	8000380 <strlen>
 800a000:	2300      	movs	r3, #0
 800a002:	930a      	str	r3, [sp, #40]	@ 0x28
 800a004:	f8d8 3000 	ldr.w	r3, [r8]
 800a008:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a00c:	6822      	ldr	r2, [r4, #0]
 800a00e:	9005      	str	r0, [sp, #20]
 800a010:	3307      	adds	r3, #7
 800a012:	f023 0307 	bic.w	r3, r3, #7
 800a016:	f103 0108 	add.w	r1, r3, #8
 800a01a:	f8c8 1000 	str.w	r1, [r8]
 800a01e:	ed93 0b00 	vldr	d0, [r3]
 800a022:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a280 <_printf_float+0x2a0>
 800a026:	eeb0 7bc0 	vabs.f64	d7, d0
 800a02a:	eeb4 7b46 	vcmp.f64	d7, d6
 800a02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a032:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a036:	dd24      	ble.n	800a082 <_printf_float+0xa2>
 800a038:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a040:	d502      	bpl.n	800a048 <_printf_float+0x68>
 800a042:	232d      	movs	r3, #45	@ 0x2d
 800a044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a048:	498f      	ldr	r1, [pc, #572]	@ (800a288 <_printf_float+0x2a8>)
 800a04a:	4b90      	ldr	r3, [pc, #576]	@ (800a28c <_printf_float+0x2ac>)
 800a04c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a050:	bf8c      	ite	hi
 800a052:	4688      	movhi	r8, r1
 800a054:	4698      	movls	r8, r3
 800a056:	f022 0204 	bic.w	r2, r2, #4
 800a05a:	2303      	movs	r3, #3
 800a05c:	6123      	str	r3, [r4, #16]
 800a05e:	6022      	str	r2, [r4, #0]
 800a060:	f04f 0a00 	mov.w	sl, #0
 800a064:	9700      	str	r7, [sp, #0]
 800a066:	4633      	mov	r3, r6
 800a068:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a06a:	4621      	mov	r1, r4
 800a06c:	4628      	mov	r0, r5
 800a06e:	f000 f9d1 	bl	800a414 <_printf_common>
 800a072:	3001      	adds	r0, #1
 800a074:	f040 8089 	bne.w	800a18a <_printf_float+0x1aa>
 800a078:	f04f 30ff 	mov.w	r0, #4294967295
 800a07c:	b00d      	add	sp, #52	@ 0x34
 800a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a082:	eeb4 0b40 	vcmp.f64	d0, d0
 800a086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a08a:	d709      	bvc.n	800a0a0 <_printf_float+0xc0>
 800a08c:	ee10 3a90 	vmov	r3, s1
 800a090:	2b00      	cmp	r3, #0
 800a092:	bfbc      	itt	lt
 800a094:	232d      	movlt	r3, #45	@ 0x2d
 800a096:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a09a:	497d      	ldr	r1, [pc, #500]	@ (800a290 <_printf_float+0x2b0>)
 800a09c:	4b7d      	ldr	r3, [pc, #500]	@ (800a294 <_printf_float+0x2b4>)
 800a09e:	e7d5      	b.n	800a04c <_printf_float+0x6c>
 800a0a0:	6863      	ldr	r3, [r4, #4]
 800a0a2:	1c59      	adds	r1, r3, #1
 800a0a4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a0a8:	d139      	bne.n	800a11e <_printf_float+0x13e>
 800a0aa:	2306      	movs	r3, #6
 800a0ac:	6063      	str	r3, [r4, #4]
 800a0ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	6022      	str	r2, [r4, #0]
 800a0b6:	9303      	str	r3, [sp, #12]
 800a0b8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0ba:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a0be:	ab09      	add	r3, sp, #36	@ 0x24
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	6861      	ldr	r1, [r4, #4]
 800a0c4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	f7ff fef9 	bl	8009ec0 <__cvt>
 800a0ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0d4:	4680      	mov	r8, r0
 800a0d6:	d129      	bne.n	800a12c <_printf_float+0x14c>
 800a0d8:	1cc8      	adds	r0, r1, #3
 800a0da:	db02      	blt.n	800a0e2 <_printf_float+0x102>
 800a0dc:	6863      	ldr	r3, [r4, #4]
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	dd41      	ble.n	800a166 <_printf_float+0x186>
 800a0e2:	f1a9 0902 	sub.w	r9, r9, #2
 800a0e6:	fa5f f989 	uxtb.w	r9, r9
 800a0ea:	3901      	subs	r1, #1
 800a0ec:	464a      	mov	r2, r9
 800a0ee:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0f4:	f7ff ff38 	bl	8009f68 <__exponent>
 800a0f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0fa:	1813      	adds	r3, r2, r0
 800a0fc:	2a01      	cmp	r2, #1
 800a0fe:	4682      	mov	sl, r0
 800a100:	6123      	str	r3, [r4, #16]
 800a102:	dc02      	bgt.n	800a10a <_printf_float+0x12a>
 800a104:	6822      	ldr	r2, [r4, #0]
 800a106:	07d2      	lsls	r2, r2, #31
 800a108:	d501      	bpl.n	800a10e <_printf_float+0x12e>
 800a10a:	3301      	adds	r3, #1
 800a10c:	6123      	str	r3, [r4, #16]
 800a10e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0a6      	beq.n	800a064 <_printf_float+0x84>
 800a116:	232d      	movs	r3, #45	@ 0x2d
 800a118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a11c:	e7a2      	b.n	800a064 <_printf_float+0x84>
 800a11e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a122:	d1c4      	bne.n	800a0ae <_printf_float+0xce>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1c2      	bne.n	800a0ae <_printf_float+0xce>
 800a128:	2301      	movs	r3, #1
 800a12a:	e7bf      	b.n	800a0ac <_printf_float+0xcc>
 800a12c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a130:	d9db      	bls.n	800a0ea <_printf_float+0x10a>
 800a132:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a136:	d118      	bne.n	800a16a <_printf_float+0x18a>
 800a138:	2900      	cmp	r1, #0
 800a13a:	6863      	ldr	r3, [r4, #4]
 800a13c:	dd0b      	ble.n	800a156 <_printf_float+0x176>
 800a13e:	6121      	str	r1, [r4, #16]
 800a140:	b913      	cbnz	r3, 800a148 <_printf_float+0x168>
 800a142:	6822      	ldr	r2, [r4, #0]
 800a144:	07d0      	lsls	r0, r2, #31
 800a146:	d502      	bpl.n	800a14e <_printf_float+0x16e>
 800a148:	3301      	adds	r3, #1
 800a14a:	440b      	add	r3, r1
 800a14c:	6123      	str	r3, [r4, #16]
 800a14e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a150:	f04f 0a00 	mov.w	sl, #0
 800a154:	e7db      	b.n	800a10e <_printf_float+0x12e>
 800a156:	b913      	cbnz	r3, 800a15e <_printf_float+0x17e>
 800a158:	6822      	ldr	r2, [r4, #0]
 800a15a:	07d2      	lsls	r2, r2, #31
 800a15c:	d501      	bpl.n	800a162 <_printf_float+0x182>
 800a15e:	3302      	adds	r3, #2
 800a160:	e7f4      	b.n	800a14c <_printf_float+0x16c>
 800a162:	2301      	movs	r3, #1
 800a164:	e7f2      	b.n	800a14c <_printf_float+0x16c>
 800a166:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a16a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16c:	4299      	cmp	r1, r3
 800a16e:	db05      	blt.n	800a17c <_printf_float+0x19c>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	6121      	str	r1, [r4, #16]
 800a174:	07d8      	lsls	r0, r3, #31
 800a176:	d5ea      	bpl.n	800a14e <_printf_float+0x16e>
 800a178:	1c4b      	adds	r3, r1, #1
 800a17a:	e7e7      	b.n	800a14c <_printf_float+0x16c>
 800a17c:	2900      	cmp	r1, #0
 800a17e:	bfd4      	ite	le
 800a180:	f1c1 0202 	rsble	r2, r1, #2
 800a184:	2201      	movgt	r2, #1
 800a186:	4413      	add	r3, r2
 800a188:	e7e0      	b.n	800a14c <_printf_float+0x16c>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	055a      	lsls	r2, r3, #21
 800a18e:	d407      	bmi.n	800a1a0 <_printf_float+0x1c0>
 800a190:	6923      	ldr	r3, [r4, #16]
 800a192:	4642      	mov	r2, r8
 800a194:	4631      	mov	r1, r6
 800a196:	4628      	mov	r0, r5
 800a198:	47b8      	blx	r7
 800a19a:	3001      	adds	r0, #1
 800a19c:	d12a      	bne.n	800a1f4 <_printf_float+0x214>
 800a19e:	e76b      	b.n	800a078 <_printf_float+0x98>
 800a1a0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a1a4:	f240 80e0 	bls.w	800a368 <_printf_float+0x388>
 800a1a8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a1ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b4:	d133      	bne.n	800a21e <_printf_float+0x23e>
 800a1b6:	4a38      	ldr	r2, [pc, #224]	@ (800a298 <_printf_float+0x2b8>)
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f43f af59 	beq.w	800a078 <_printf_float+0x98>
 800a1c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1ca:	4543      	cmp	r3, r8
 800a1cc:	db02      	blt.n	800a1d4 <_printf_float+0x1f4>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	07d8      	lsls	r0, r3, #31
 800a1d2:	d50f      	bpl.n	800a1f4 <_printf_float+0x214>
 800a1d4:	9b05      	ldr	r3, [sp, #20]
 800a1d6:	465a      	mov	r2, fp
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4628      	mov	r0, r5
 800a1dc:	47b8      	blx	r7
 800a1de:	3001      	adds	r0, #1
 800a1e0:	f43f af4a 	beq.w	800a078 <_printf_float+0x98>
 800a1e4:	f04f 0900 	mov.w	r9, #0
 800a1e8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1ec:	f104 0a1a 	add.w	sl, r4, #26
 800a1f0:	45c8      	cmp	r8, r9
 800a1f2:	dc09      	bgt.n	800a208 <_printf_float+0x228>
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	079b      	lsls	r3, r3, #30
 800a1f8:	f100 8107 	bmi.w	800a40a <_printf_float+0x42a>
 800a1fc:	68e0      	ldr	r0, [r4, #12]
 800a1fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a200:	4298      	cmp	r0, r3
 800a202:	bfb8      	it	lt
 800a204:	4618      	movlt	r0, r3
 800a206:	e739      	b.n	800a07c <_printf_float+0x9c>
 800a208:	2301      	movs	r3, #1
 800a20a:	4652      	mov	r2, sl
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	47b8      	blx	r7
 800a212:	3001      	adds	r0, #1
 800a214:	f43f af30 	beq.w	800a078 <_printf_float+0x98>
 800a218:	f109 0901 	add.w	r9, r9, #1
 800a21c:	e7e8      	b.n	800a1f0 <_printf_float+0x210>
 800a21e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a220:	2b00      	cmp	r3, #0
 800a222:	dc3b      	bgt.n	800a29c <_printf_float+0x2bc>
 800a224:	4a1c      	ldr	r2, [pc, #112]	@ (800a298 <_printf_float+0x2b8>)
 800a226:	2301      	movs	r3, #1
 800a228:	4631      	mov	r1, r6
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b8      	blx	r7
 800a22e:	3001      	adds	r0, #1
 800a230:	f43f af22 	beq.w	800a078 <_printf_float+0x98>
 800a234:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a238:	ea59 0303 	orrs.w	r3, r9, r3
 800a23c:	d102      	bne.n	800a244 <_printf_float+0x264>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	07d9      	lsls	r1, r3, #31
 800a242:	d5d7      	bpl.n	800a1f4 <_printf_float+0x214>
 800a244:	9b05      	ldr	r3, [sp, #20]
 800a246:	465a      	mov	r2, fp
 800a248:	4631      	mov	r1, r6
 800a24a:	4628      	mov	r0, r5
 800a24c:	47b8      	blx	r7
 800a24e:	3001      	adds	r0, #1
 800a250:	f43f af12 	beq.w	800a078 <_printf_float+0x98>
 800a254:	f04f 0a00 	mov.w	sl, #0
 800a258:	f104 0b1a 	add.w	fp, r4, #26
 800a25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25e:	425b      	negs	r3, r3
 800a260:	4553      	cmp	r3, sl
 800a262:	dc01      	bgt.n	800a268 <_printf_float+0x288>
 800a264:	464b      	mov	r3, r9
 800a266:	e794      	b.n	800a192 <_printf_float+0x1b2>
 800a268:	2301      	movs	r3, #1
 800a26a:	465a      	mov	r2, fp
 800a26c:	4631      	mov	r1, r6
 800a26e:	4628      	mov	r0, r5
 800a270:	47b8      	blx	r7
 800a272:	3001      	adds	r0, #1
 800a274:	f43f af00 	beq.w	800a078 <_printf_float+0x98>
 800a278:	f10a 0a01 	add.w	sl, sl, #1
 800a27c:	e7ee      	b.n	800a25c <_printf_float+0x27c>
 800a27e:	bf00      	nop
 800a280:	ffffffff 	.word	0xffffffff
 800a284:	7fefffff 	.word	0x7fefffff
 800a288:	0800d83c 	.word	0x0800d83c
 800a28c:	0800d838 	.word	0x0800d838
 800a290:	0800d844 	.word	0x0800d844
 800a294:	0800d840 	.word	0x0800d840
 800a298:	0800d848 	.word	0x0800d848
 800a29c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a29e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2a2:	4553      	cmp	r3, sl
 800a2a4:	bfa8      	it	ge
 800a2a6:	4653      	movge	r3, sl
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	4699      	mov	r9, r3
 800a2ac:	dc37      	bgt.n	800a31e <_printf_float+0x33e>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	9307      	str	r3, [sp, #28]
 800a2b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2b6:	f104 021a 	add.w	r2, r4, #26
 800a2ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2bc:	9907      	ldr	r1, [sp, #28]
 800a2be:	9306      	str	r3, [sp, #24]
 800a2c0:	eba3 0309 	sub.w	r3, r3, r9
 800a2c4:	428b      	cmp	r3, r1
 800a2c6:	dc31      	bgt.n	800a32c <_printf_float+0x34c>
 800a2c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ca:	459a      	cmp	sl, r3
 800a2cc:	dc3b      	bgt.n	800a346 <_printf_float+0x366>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	07da      	lsls	r2, r3, #31
 800a2d2:	d438      	bmi.n	800a346 <_printf_float+0x366>
 800a2d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d6:	ebaa 0903 	sub.w	r9, sl, r3
 800a2da:	9b06      	ldr	r3, [sp, #24]
 800a2dc:	ebaa 0303 	sub.w	r3, sl, r3
 800a2e0:	4599      	cmp	r9, r3
 800a2e2:	bfa8      	it	ge
 800a2e4:	4699      	movge	r9, r3
 800a2e6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ea:	dc34      	bgt.n	800a356 <_printf_float+0x376>
 800a2ec:	f04f 0800 	mov.w	r8, #0
 800a2f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2f4:	f104 0b1a 	add.w	fp, r4, #26
 800a2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2fa:	ebaa 0303 	sub.w	r3, sl, r3
 800a2fe:	eba3 0309 	sub.w	r3, r3, r9
 800a302:	4543      	cmp	r3, r8
 800a304:	f77f af76 	ble.w	800a1f4 <_printf_float+0x214>
 800a308:	2301      	movs	r3, #1
 800a30a:	465a      	mov	r2, fp
 800a30c:	4631      	mov	r1, r6
 800a30e:	4628      	mov	r0, r5
 800a310:	47b8      	blx	r7
 800a312:	3001      	adds	r0, #1
 800a314:	f43f aeb0 	beq.w	800a078 <_printf_float+0x98>
 800a318:	f108 0801 	add.w	r8, r8, #1
 800a31c:	e7ec      	b.n	800a2f8 <_printf_float+0x318>
 800a31e:	4642      	mov	r2, r8
 800a320:	4631      	mov	r1, r6
 800a322:	4628      	mov	r0, r5
 800a324:	47b8      	blx	r7
 800a326:	3001      	adds	r0, #1
 800a328:	d1c1      	bne.n	800a2ae <_printf_float+0x2ce>
 800a32a:	e6a5      	b.n	800a078 <_printf_float+0x98>
 800a32c:	2301      	movs	r3, #1
 800a32e:	4631      	mov	r1, r6
 800a330:	4628      	mov	r0, r5
 800a332:	9206      	str	r2, [sp, #24]
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	f43f ae9e 	beq.w	800a078 <_printf_float+0x98>
 800a33c:	9b07      	ldr	r3, [sp, #28]
 800a33e:	9a06      	ldr	r2, [sp, #24]
 800a340:	3301      	adds	r3, #1
 800a342:	9307      	str	r3, [sp, #28]
 800a344:	e7b9      	b.n	800a2ba <_printf_float+0x2da>
 800a346:	9b05      	ldr	r3, [sp, #20]
 800a348:	465a      	mov	r2, fp
 800a34a:	4631      	mov	r1, r6
 800a34c:	4628      	mov	r0, r5
 800a34e:	47b8      	blx	r7
 800a350:	3001      	adds	r0, #1
 800a352:	d1bf      	bne.n	800a2d4 <_printf_float+0x2f4>
 800a354:	e690      	b.n	800a078 <_printf_float+0x98>
 800a356:	9a06      	ldr	r2, [sp, #24]
 800a358:	464b      	mov	r3, r9
 800a35a:	4442      	add	r2, r8
 800a35c:	4631      	mov	r1, r6
 800a35e:	4628      	mov	r0, r5
 800a360:	47b8      	blx	r7
 800a362:	3001      	adds	r0, #1
 800a364:	d1c2      	bne.n	800a2ec <_printf_float+0x30c>
 800a366:	e687      	b.n	800a078 <_printf_float+0x98>
 800a368:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800a36c:	f1b9 0f01 	cmp.w	r9, #1
 800a370:	dc01      	bgt.n	800a376 <_printf_float+0x396>
 800a372:	07db      	lsls	r3, r3, #31
 800a374:	d536      	bpl.n	800a3e4 <_printf_float+0x404>
 800a376:	2301      	movs	r3, #1
 800a378:	4642      	mov	r2, r8
 800a37a:	4631      	mov	r1, r6
 800a37c:	4628      	mov	r0, r5
 800a37e:	47b8      	blx	r7
 800a380:	3001      	adds	r0, #1
 800a382:	f43f ae79 	beq.w	800a078 <_printf_float+0x98>
 800a386:	9b05      	ldr	r3, [sp, #20]
 800a388:	465a      	mov	r2, fp
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b8      	blx	r7
 800a390:	3001      	adds	r0, #1
 800a392:	f43f ae71 	beq.w	800a078 <_printf_float+0x98>
 800a396:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a39a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a39e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3a6:	d018      	beq.n	800a3da <_printf_float+0x3fa>
 800a3a8:	464b      	mov	r3, r9
 800a3aa:	f108 0201 	add.w	r2, r8, #1
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	47b8      	blx	r7
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	d10c      	bne.n	800a3d2 <_printf_float+0x3f2>
 800a3b8:	e65e      	b.n	800a078 <_printf_float+0x98>
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	465a      	mov	r2, fp
 800a3be:	4631      	mov	r1, r6
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	47b8      	blx	r7
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	f43f ae57 	beq.w	800a078 <_printf_float+0x98>
 800a3ca:	f108 0801 	add.w	r8, r8, #1
 800a3ce:	45c8      	cmp	r8, r9
 800a3d0:	dbf3      	blt.n	800a3ba <_printf_float+0x3da>
 800a3d2:	4653      	mov	r3, sl
 800a3d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a3d8:	e6dc      	b.n	800a194 <_printf_float+0x1b4>
 800a3da:	f04f 0800 	mov.w	r8, #0
 800a3de:	f104 0b1a 	add.w	fp, r4, #26
 800a3e2:	e7f4      	b.n	800a3ce <_printf_float+0x3ee>
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	4642      	mov	r2, r8
 800a3e8:	e7e1      	b.n	800a3ae <_printf_float+0x3ce>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	464a      	mov	r2, r9
 800a3ee:	4631      	mov	r1, r6
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	47b8      	blx	r7
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	f43f ae3f 	beq.w	800a078 <_printf_float+0x98>
 800a3fa:	f108 0801 	add.w	r8, r8, #1
 800a3fe:	68e3      	ldr	r3, [r4, #12]
 800a400:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a402:	1a5b      	subs	r3, r3, r1
 800a404:	4543      	cmp	r3, r8
 800a406:	dcf0      	bgt.n	800a3ea <_printf_float+0x40a>
 800a408:	e6f8      	b.n	800a1fc <_printf_float+0x21c>
 800a40a:	f04f 0800 	mov.w	r8, #0
 800a40e:	f104 0919 	add.w	r9, r4, #25
 800a412:	e7f4      	b.n	800a3fe <_printf_float+0x41e>

0800a414 <_printf_common>:
 800a414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a418:	4616      	mov	r6, r2
 800a41a:	4698      	mov	r8, r3
 800a41c:	688a      	ldr	r2, [r1, #8]
 800a41e:	690b      	ldr	r3, [r1, #16]
 800a420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a424:	4293      	cmp	r3, r2
 800a426:	bfb8      	it	lt
 800a428:	4613      	movlt	r3, r2
 800a42a:	6033      	str	r3, [r6, #0]
 800a42c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a430:	4607      	mov	r7, r0
 800a432:	460c      	mov	r4, r1
 800a434:	b10a      	cbz	r2, 800a43a <_printf_common+0x26>
 800a436:	3301      	adds	r3, #1
 800a438:	6033      	str	r3, [r6, #0]
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	0699      	lsls	r1, r3, #26
 800a43e:	bf42      	ittt	mi
 800a440:	6833      	ldrmi	r3, [r6, #0]
 800a442:	3302      	addmi	r3, #2
 800a444:	6033      	strmi	r3, [r6, #0]
 800a446:	6825      	ldr	r5, [r4, #0]
 800a448:	f015 0506 	ands.w	r5, r5, #6
 800a44c:	d106      	bne.n	800a45c <_printf_common+0x48>
 800a44e:	f104 0a19 	add.w	sl, r4, #25
 800a452:	68e3      	ldr	r3, [r4, #12]
 800a454:	6832      	ldr	r2, [r6, #0]
 800a456:	1a9b      	subs	r3, r3, r2
 800a458:	42ab      	cmp	r3, r5
 800a45a:	dc26      	bgt.n	800a4aa <_printf_common+0x96>
 800a45c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a460:	6822      	ldr	r2, [r4, #0]
 800a462:	3b00      	subs	r3, #0
 800a464:	bf18      	it	ne
 800a466:	2301      	movne	r3, #1
 800a468:	0692      	lsls	r2, r2, #26
 800a46a:	d42b      	bmi.n	800a4c4 <_printf_common+0xb0>
 800a46c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a470:	4641      	mov	r1, r8
 800a472:	4638      	mov	r0, r7
 800a474:	47c8      	blx	r9
 800a476:	3001      	adds	r0, #1
 800a478:	d01e      	beq.n	800a4b8 <_printf_common+0xa4>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	6922      	ldr	r2, [r4, #16]
 800a47e:	f003 0306 	and.w	r3, r3, #6
 800a482:	2b04      	cmp	r3, #4
 800a484:	bf02      	ittt	eq
 800a486:	68e5      	ldreq	r5, [r4, #12]
 800a488:	6833      	ldreq	r3, [r6, #0]
 800a48a:	1aed      	subeq	r5, r5, r3
 800a48c:	68a3      	ldr	r3, [r4, #8]
 800a48e:	bf0c      	ite	eq
 800a490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a494:	2500      	movne	r5, #0
 800a496:	4293      	cmp	r3, r2
 800a498:	bfc4      	itt	gt
 800a49a:	1a9b      	subgt	r3, r3, r2
 800a49c:	18ed      	addgt	r5, r5, r3
 800a49e:	2600      	movs	r6, #0
 800a4a0:	341a      	adds	r4, #26
 800a4a2:	42b5      	cmp	r5, r6
 800a4a4:	d11a      	bne.n	800a4dc <_printf_common+0xc8>
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	e008      	b.n	800a4bc <_printf_common+0xa8>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	4652      	mov	r2, sl
 800a4ae:	4641      	mov	r1, r8
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	47c8      	blx	r9
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d103      	bne.n	800a4c0 <_printf_common+0xac>
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c0:	3501      	adds	r5, #1
 800a4c2:	e7c6      	b.n	800a452 <_printf_common+0x3e>
 800a4c4:	18e1      	adds	r1, r4, r3
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	2030      	movs	r0, #48	@ 0x30
 800a4ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4ce:	4422      	add	r2, r4
 800a4d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4d8:	3302      	adds	r3, #2
 800a4da:	e7c7      	b.n	800a46c <_printf_common+0x58>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	4622      	mov	r2, r4
 800a4e0:	4641      	mov	r1, r8
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	47c8      	blx	r9
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	d0e6      	beq.n	800a4b8 <_printf_common+0xa4>
 800a4ea:	3601      	adds	r6, #1
 800a4ec:	e7d9      	b.n	800a4a2 <_printf_common+0x8e>
	...

0800a4f0 <_printf_i>:
 800a4f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f4:	7e0f      	ldrb	r7, [r1, #24]
 800a4f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4f8:	2f78      	cmp	r7, #120	@ 0x78
 800a4fa:	4691      	mov	r9, r2
 800a4fc:	4680      	mov	r8, r0
 800a4fe:	460c      	mov	r4, r1
 800a500:	469a      	mov	sl, r3
 800a502:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a506:	d807      	bhi.n	800a518 <_printf_i+0x28>
 800a508:	2f62      	cmp	r7, #98	@ 0x62
 800a50a:	d80a      	bhi.n	800a522 <_printf_i+0x32>
 800a50c:	2f00      	cmp	r7, #0
 800a50e:	f000 80d1 	beq.w	800a6b4 <_printf_i+0x1c4>
 800a512:	2f58      	cmp	r7, #88	@ 0x58
 800a514:	f000 80b8 	beq.w	800a688 <_printf_i+0x198>
 800a518:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a51c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a520:	e03a      	b.n	800a598 <_printf_i+0xa8>
 800a522:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a526:	2b15      	cmp	r3, #21
 800a528:	d8f6      	bhi.n	800a518 <_printf_i+0x28>
 800a52a:	a101      	add	r1, pc, #4	@ (adr r1, 800a530 <_printf_i+0x40>)
 800a52c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a530:	0800a589 	.word	0x0800a589
 800a534:	0800a59d 	.word	0x0800a59d
 800a538:	0800a519 	.word	0x0800a519
 800a53c:	0800a519 	.word	0x0800a519
 800a540:	0800a519 	.word	0x0800a519
 800a544:	0800a519 	.word	0x0800a519
 800a548:	0800a59d 	.word	0x0800a59d
 800a54c:	0800a519 	.word	0x0800a519
 800a550:	0800a519 	.word	0x0800a519
 800a554:	0800a519 	.word	0x0800a519
 800a558:	0800a519 	.word	0x0800a519
 800a55c:	0800a69b 	.word	0x0800a69b
 800a560:	0800a5c7 	.word	0x0800a5c7
 800a564:	0800a655 	.word	0x0800a655
 800a568:	0800a519 	.word	0x0800a519
 800a56c:	0800a519 	.word	0x0800a519
 800a570:	0800a6bd 	.word	0x0800a6bd
 800a574:	0800a519 	.word	0x0800a519
 800a578:	0800a5c7 	.word	0x0800a5c7
 800a57c:	0800a519 	.word	0x0800a519
 800a580:	0800a519 	.word	0x0800a519
 800a584:	0800a65d 	.word	0x0800a65d
 800a588:	6833      	ldr	r3, [r6, #0]
 800a58a:	1d1a      	adds	r2, r3, #4
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6032      	str	r2, [r6, #0]
 800a590:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a594:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a598:	2301      	movs	r3, #1
 800a59a:	e09c      	b.n	800a6d6 <_printf_i+0x1e6>
 800a59c:	6833      	ldr	r3, [r6, #0]
 800a59e:	6820      	ldr	r0, [r4, #0]
 800a5a0:	1d19      	adds	r1, r3, #4
 800a5a2:	6031      	str	r1, [r6, #0]
 800a5a4:	0606      	lsls	r6, r0, #24
 800a5a6:	d501      	bpl.n	800a5ac <_printf_i+0xbc>
 800a5a8:	681d      	ldr	r5, [r3, #0]
 800a5aa:	e003      	b.n	800a5b4 <_printf_i+0xc4>
 800a5ac:	0645      	lsls	r5, r0, #25
 800a5ae:	d5fb      	bpl.n	800a5a8 <_printf_i+0xb8>
 800a5b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5b4:	2d00      	cmp	r5, #0
 800a5b6:	da03      	bge.n	800a5c0 <_printf_i+0xd0>
 800a5b8:	232d      	movs	r3, #45	@ 0x2d
 800a5ba:	426d      	negs	r5, r5
 800a5bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5c0:	4858      	ldr	r0, [pc, #352]	@ (800a724 <_printf_i+0x234>)
 800a5c2:	230a      	movs	r3, #10
 800a5c4:	e011      	b.n	800a5ea <_printf_i+0xfa>
 800a5c6:	6821      	ldr	r1, [r4, #0]
 800a5c8:	6833      	ldr	r3, [r6, #0]
 800a5ca:	0608      	lsls	r0, r1, #24
 800a5cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5d0:	d402      	bmi.n	800a5d8 <_printf_i+0xe8>
 800a5d2:	0649      	lsls	r1, r1, #25
 800a5d4:	bf48      	it	mi
 800a5d6:	b2ad      	uxthmi	r5, r5
 800a5d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5da:	4852      	ldr	r0, [pc, #328]	@ (800a724 <_printf_i+0x234>)
 800a5dc:	6033      	str	r3, [r6, #0]
 800a5de:	bf14      	ite	ne
 800a5e0:	230a      	movne	r3, #10
 800a5e2:	2308      	moveq	r3, #8
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a5ea:	6866      	ldr	r6, [r4, #4]
 800a5ec:	60a6      	str	r6, [r4, #8]
 800a5ee:	2e00      	cmp	r6, #0
 800a5f0:	db05      	blt.n	800a5fe <_printf_i+0x10e>
 800a5f2:	6821      	ldr	r1, [r4, #0]
 800a5f4:	432e      	orrs	r6, r5
 800a5f6:	f021 0104 	bic.w	r1, r1, #4
 800a5fa:	6021      	str	r1, [r4, #0]
 800a5fc:	d04b      	beq.n	800a696 <_printf_i+0x1a6>
 800a5fe:	4616      	mov	r6, r2
 800a600:	fbb5 f1f3 	udiv	r1, r5, r3
 800a604:	fb03 5711 	mls	r7, r3, r1, r5
 800a608:	5dc7      	ldrb	r7, [r0, r7]
 800a60a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a60e:	462f      	mov	r7, r5
 800a610:	42bb      	cmp	r3, r7
 800a612:	460d      	mov	r5, r1
 800a614:	d9f4      	bls.n	800a600 <_printf_i+0x110>
 800a616:	2b08      	cmp	r3, #8
 800a618:	d10b      	bne.n	800a632 <_printf_i+0x142>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	07df      	lsls	r7, r3, #31
 800a61e:	d508      	bpl.n	800a632 <_printf_i+0x142>
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	6861      	ldr	r1, [r4, #4]
 800a624:	4299      	cmp	r1, r3
 800a626:	bfde      	ittt	le
 800a628:	2330      	movle	r3, #48	@ 0x30
 800a62a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a62e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a632:	1b92      	subs	r2, r2, r6
 800a634:	6122      	str	r2, [r4, #16]
 800a636:	f8cd a000 	str.w	sl, [sp]
 800a63a:	464b      	mov	r3, r9
 800a63c:	aa03      	add	r2, sp, #12
 800a63e:	4621      	mov	r1, r4
 800a640:	4640      	mov	r0, r8
 800a642:	f7ff fee7 	bl	800a414 <_printf_common>
 800a646:	3001      	adds	r0, #1
 800a648:	d14a      	bne.n	800a6e0 <_printf_i+0x1f0>
 800a64a:	f04f 30ff 	mov.w	r0, #4294967295
 800a64e:	b004      	add	sp, #16
 800a650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	f043 0320 	orr.w	r3, r3, #32
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	4832      	ldr	r0, [pc, #200]	@ (800a728 <_printf_i+0x238>)
 800a65e:	2778      	movs	r7, #120	@ 0x78
 800a660:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	6831      	ldr	r1, [r6, #0]
 800a668:	061f      	lsls	r7, r3, #24
 800a66a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a66e:	d402      	bmi.n	800a676 <_printf_i+0x186>
 800a670:	065f      	lsls	r7, r3, #25
 800a672:	bf48      	it	mi
 800a674:	b2ad      	uxthmi	r5, r5
 800a676:	6031      	str	r1, [r6, #0]
 800a678:	07d9      	lsls	r1, r3, #31
 800a67a:	bf44      	itt	mi
 800a67c:	f043 0320 	orrmi.w	r3, r3, #32
 800a680:	6023      	strmi	r3, [r4, #0]
 800a682:	b11d      	cbz	r5, 800a68c <_printf_i+0x19c>
 800a684:	2310      	movs	r3, #16
 800a686:	e7ad      	b.n	800a5e4 <_printf_i+0xf4>
 800a688:	4826      	ldr	r0, [pc, #152]	@ (800a724 <_printf_i+0x234>)
 800a68a:	e7e9      	b.n	800a660 <_printf_i+0x170>
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	f023 0320 	bic.w	r3, r3, #32
 800a692:	6023      	str	r3, [r4, #0]
 800a694:	e7f6      	b.n	800a684 <_printf_i+0x194>
 800a696:	4616      	mov	r6, r2
 800a698:	e7bd      	b.n	800a616 <_printf_i+0x126>
 800a69a:	6833      	ldr	r3, [r6, #0]
 800a69c:	6825      	ldr	r5, [r4, #0]
 800a69e:	6961      	ldr	r1, [r4, #20]
 800a6a0:	1d18      	adds	r0, r3, #4
 800a6a2:	6030      	str	r0, [r6, #0]
 800a6a4:	062e      	lsls	r6, r5, #24
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	d501      	bpl.n	800a6ae <_printf_i+0x1be>
 800a6aa:	6019      	str	r1, [r3, #0]
 800a6ac:	e002      	b.n	800a6b4 <_printf_i+0x1c4>
 800a6ae:	0668      	lsls	r0, r5, #25
 800a6b0:	d5fb      	bpl.n	800a6aa <_printf_i+0x1ba>
 800a6b2:	8019      	strh	r1, [r3, #0]
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	6123      	str	r3, [r4, #16]
 800a6b8:	4616      	mov	r6, r2
 800a6ba:	e7bc      	b.n	800a636 <_printf_i+0x146>
 800a6bc:	6833      	ldr	r3, [r6, #0]
 800a6be:	1d1a      	adds	r2, r3, #4
 800a6c0:	6032      	str	r2, [r6, #0]
 800a6c2:	681e      	ldr	r6, [r3, #0]
 800a6c4:	6862      	ldr	r2, [r4, #4]
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7f5 fe09 	bl	80002e0 <memchr>
 800a6ce:	b108      	cbz	r0, 800a6d4 <_printf_i+0x1e4>
 800a6d0:	1b80      	subs	r0, r0, r6
 800a6d2:	6060      	str	r0, [r4, #4]
 800a6d4:	6863      	ldr	r3, [r4, #4]
 800a6d6:	6123      	str	r3, [r4, #16]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6de:	e7aa      	b.n	800a636 <_printf_i+0x146>
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	4632      	mov	r2, r6
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	47d0      	blx	sl
 800a6ea:	3001      	adds	r0, #1
 800a6ec:	d0ad      	beq.n	800a64a <_printf_i+0x15a>
 800a6ee:	6823      	ldr	r3, [r4, #0]
 800a6f0:	079b      	lsls	r3, r3, #30
 800a6f2:	d413      	bmi.n	800a71c <_printf_i+0x22c>
 800a6f4:	68e0      	ldr	r0, [r4, #12]
 800a6f6:	9b03      	ldr	r3, [sp, #12]
 800a6f8:	4298      	cmp	r0, r3
 800a6fa:	bfb8      	it	lt
 800a6fc:	4618      	movlt	r0, r3
 800a6fe:	e7a6      	b.n	800a64e <_printf_i+0x15e>
 800a700:	2301      	movs	r3, #1
 800a702:	4632      	mov	r2, r6
 800a704:	4649      	mov	r1, r9
 800a706:	4640      	mov	r0, r8
 800a708:	47d0      	blx	sl
 800a70a:	3001      	adds	r0, #1
 800a70c:	d09d      	beq.n	800a64a <_printf_i+0x15a>
 800a70e:	3501      	adds	r5, #1
 800a710:	68e3      	ldr	r3, [r4, #12]
 800a712:	9903      	ldr	r1, [sp, #12]
 800a714:	1a5b      	subs	r3, r3, r1
 800a716:	42ab      	cmp	r3, r5
 800a718:	dcf2      	bgt.n	800a700 <_printf_i+0x210>
 800a71a:	e7eb      	b.n	800a6f4 <_printf_i+0x204>
 800a71c:	2500      	movs	r5, #0
 800a71e:	f104 0619 	add.w	r6, r4, #25
 800a722:	e7f5      	b.n	800a710 <_printf_i+0x220>
 800a724:	0800d84a 	.word	0x0800d84a
 800a728:	0800d85b 	.word	0x0800d85b

0800a72c <std>:
 800a72c:	2300      	movs	r3, #0
 800a72e:	b510      	push	{r4, lr}
 800a730:	4604      	mov	r4, r0
 800a732:	e9c0 3300 	strd	r3, r3, [r0]
 800a736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a73a:	6083      	str	r3, [r0, #8]
 800a73c:	8181      	strh	r1, [r0, #12]
 800a73e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a740:	81c2      	strh	r2, [r0, #14]
 800a742:	6183      	str	r3, [r0, #24]
 800a744:	4619      	mov	r1, r3
 800a746:	2208      	movs	r2, #8
 800a748:	305c      	adds	r0, #92	@ 0x5c
 800a74a:	f000 f906 	bl	800a95a <memset>
 800a74e:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <std+0x58>)
 800a750:	6263      	str	r3, [r4, #36]	@ 0x24
 800a752:	4b0d      	ldr	r3, [pc, #52]	@ (800a788 <std+0x5c>)
 800a754:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a756:	4b0d      	ldr	r3, [pc, #52]	@ (800a78c <std+0x60>)
 800a758:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a75a:	4b0d      	ldr	r3, [pc, #52]	@ (800a790 <std+0x64>)
 800a75c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a75e:	4b0d      	ldr	r3, [pc, #52]	@ (800a794 <std+0x68>)
 800a760:	6224      	str	r4, [r4, #32]
 800a762:	429c      	cmp	r4, r3
 800a764:	d006      	beq.n	800a774 <std+0x48>
 800a766:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a76a:	4294      	cmp	r4, r2
 800a76c:	d002      	beq.n	800a774 <std+0x48>
 800a76e:	33d0      	adds	r3, #208	@ 0xd0
 800a770:	429c      	cmp	r4, r3
 800a772:	d105      	bne.n	800a780 <std+0x54>
 800a774:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a77c:	f000 b96a 	b.w	800aa54 <__retarget_lock_init_recursive>
 800a780:	bd10      	pop	{r4, pc}
 800a782:	bf00      	nop
 800a784:	0800a8d5 	.word	0x0800a8d5
 800a788:	0800a8f7 	.word	0x0800a8f7
 800a78c:	0800a92f 	.word	0x0800a92f
 800a790:	0800a953 	.word	0x0800a953
 800a794:	24000734 	.word	0x24000734

0800a798 <stdio_exit_handler>:
 800a798:	4a02      	ldr	r2, [pc, #8]	@ (800a7a4 <stdio_exit_handler+0xc>)
 800a79a:	4903      	ldr	r1, [pc, #12]	@ (800a7a8 <stdio_exit_handler+0x10>)
 800a79c:	4803      	ldr	r0, [pc, #12]	@ (800a7ac <stdio_exit_handler+0x14>)
 800a79e:	f000 b869 	b.w	800a874 <_fwalk_sglue>
 800a7a2:	bf00      	nop
 800a7a4:	24000018 	.word	0x24000018
 800a7a8:	0800c2ad 	.word	0x0800c2ad
 800a7ac:	24000028 	.word	0x24000028

0800a7b0 <cleanup_stdio>:
 800a7b0:	6841      	ldr	r1, [r0, #4]
 800a7b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e4 <cleanup_stdio+0x34>)
 800a7b4:	4299      	cmp	r1, r3
 800a7b6:	b510      	push	{r4, lr}
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	d001      	beq.n	800a7c0 <cleanup_stdio+0x10>
 800a7bc:	f001 fd76 	bl	800c2ac <_fflush_r>
 800a7c0:	68a1      	ldr	r1, [r4, #8]
 800a7c2:	4b09      	ldr	r3, [pc, #36]	@ (800a7e8 <cleanup_stdio+0x38>)
 800a7c4:	4299      	cmp	r1, r3
 800a7c6:	d002      	beq.n	800a7ce <cleanup_stdio+0x1e>
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f001 fd6f 	bl	800c2ac <_fflush_r>
 800a7ce:	68e1      	ldr	r1, [r4, #12]
 800a7d0:	4b06      	ldr	r3, [pc, #24]	@ (800a7ec <cleanup_stdio+0x3c>)
 800a7d2:	4299      	cmp	r1, r3
 800a7d4:	d004      	beq.n	800a7e0 <cleanup_stdio+0x30>
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7dc:	f001 bd66 	b.w	800c2ac <_fflush_r>
 800a7e0:	bd10      	pop	{r4, pc}
 800a7e2:	bf00      	nop
 800a7e4:	24000734 	.word	0x24000734
 800a7e8:	2400079c 	.word	0x2400079c
 800a7ec:	24000804 	.word	0x24000804

0800a7f0 <global_stdio_init.part.0>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a820 <global_stdio_init.part.0+0x30>)
 800a7f4:	4c0b      	ldr	r4, [pc, #44]	@ (800a824 <global_stdio_init.part.0+0x34>)
 800a7f6:	4a0c      	ldr	r2, [pc, #48]	@ (800a828 <global_stdio_init.part.0+0x38>)
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2104      	movs	r1, #4
 800a800:	f7ff ff94 	bl	800a72c <std>
 800a804:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a808:	2201      	movs	r2, #1
 800a80a:	2109      	movs	r1, #9
 800a80c:	f7ff ff8e 	bl	800a72c <std>
 800a810:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a814:	2202      	movs	r2, #2
 800a816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a81a:	2112      	movs	r1, #18
 800a81c:	f7ff bf86 	b.w	800a72c <std>
 800a820:	2400086c 	.word	0x2400086c
 800a824:	24000734 	.word	0x24000734
 800a828:	0800a799 	.word	0x0800a799

0800a82c <__sfp_lock_acquire>:
 800a82c:	4801      	ldr	r0, [pc, #4]	@ (800a834 <__sfp_lock_acquire+0x8>)
 800a82e:	f000 b912 	b.w	800aa56 <__retarget_lock_acquire_recursive>
 800a832:	bf00      	nop
 800a834:	24000875 	.word	0x24000875

0800a838 <__sfp_lock_release>:
 800a838:	4801      	ldr	r0, [pc, #4]	@ (800a840 <__sfp_lock_release+0x8>)
 800a83a:	f000 b90d 	b.w	800aa58 <__retarget_lock_release_recursive>
 800a83e:	bf00      	nop
 800a840:	24000875 	.word	0x24000875

0800a844 <__sinit>:
 800a844:	b510      	push	{r4, lr}
 800a846:	4604      	mov	r4, r0
 800a848:	f7ff fff0 	bl	800a82c <__sfp_lock_acquire>
 800a84c:	6a23      	ldr	r3, [r4, #32]
 800a84e:	b11b      	cbz	r3, 800a858 <__sinit+0x14>
 800a850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a854:	f7ff bff0 	b.w	800a838 <__sfp_lock_release>
 800a858:	4b04      	ldr	r3, [pc, #16]	@ (800a86c <__sinit+0x28>)
 800a85a:	6223      	str	r3, [r4, #32]
 800a85c:	4b04      	ldr	r3, [pc, #16]	@ (800a870 <__sinit+0x2c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d1f5      	bne.n	800a850 <__sinit+0xc>
 800a864:	f7ff ffc4 	bl	800a7f0 <global_stdio_init.part.0>
 800a868:	e7f2      	b.n	800a850 <__sinit+0xc>
 800a86a:	bf00      	nop
 800a86c:	0800a7b1 	.word	0x0800a7b1
 800a870:	2400086c 	.word	0x2400086c

0800a874 <_fwalk_sglue>:
 800a874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a878:	4607      	mov	r7, r0
 800a87a:	4688      	mov	r8, r1
 800a87c:	4614      	mov	r4, r2
 800a87e:	2600      	movs	r6, #0
 800a880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a884:	f1b9 0901 	subs.w	r9, r9, #1
 800a888:	d505      	bpl.n	800a896 <_fwalk_sglue+0x22>
 800a88a:	6824      	ldr	r4, [r4, #0]
 800a88c:	2c00      	cmp	r4, #0
 800a88e:	d1f7      	bne.n	800a880 <_fwalk_sglue+0xc>
 800a890:	4630      	mov	r0, r6
 800a892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a896:	89ab      	ldrh	r3, [r5, #12]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d907      	bls.n	800a8ac <_fwalk_sglue+0x38>
 800a89c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	d003      	beq.n	800a8ac <_fwalk_sglue+0x38>
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	47c0      	blx	r8
 800a8aa:	4306      	orrs	r6, r0
 800a8ac:	3568      	adds	r5, #104	@ 0x68
 800a8ae:	e7e9      	b.n	800a884 <_fwalk_sglue+0x10>

0800a8b0 <iprintf>:
 800a8b0:	b40f      	push	{r0, r1, r2, r3}
 800a8b2:	b507      	push	{r0, r1, r2, lr}
 800a8b4:	4906      	ldr	r1, [pc, #24]	@ (800a8d0 <iprintf+0x20>)
 800a8b6:	ab04      	add	r3, sp, #16
 800a8b8:	6808      	ldr	r0, [r1, #0]
 800a8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8be:	6881      	ldr	r1, [r0, #8]
 800a8c0:	9301      	str	r3, [sp, #4]
 800a8c2:	f001 fb57 	bl	800bf74 <_vfiprintf_r>
 800a8c6:	b003      	add	sp, #12
 800a8c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8cc:	b004      	add	sp, #16
 800a8ce:	4770      	bx	lr
 800a8d0:	24000024 	.word	0x24000024

0800a8d4 <__sread>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8dc:	f000 f86c 	bl	800a9b8 <_read_r>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	bfab      	itete	ge
 800a8e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a8e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8e8:	181b      	addge	r3, r3, r0
 800a8ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a8ee:	bfac      	ite	ge
 800a8f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a8f2:	81a3      	strhlt	r3, [r4, #12]
 800a8f4:	bd10      	pop	{r4, pc}

0800a8f6 <__swrite>:
 800a8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fa:	461f      	mov	r7, r3
 800a8fc:	898b      	ldrh	r3, [r1, #12]
 800a8fe:	05db      	lsls	r3, r3, #23
 800a900:	4605      	mov	r5, r0
 800a902:	460c      	mov	r4, r1
 800a904:	4616      	mov	r6, r2
 800a906:	d505      	bpl.n	800a914 <__swrite+0x1e>
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	2302      	movs	r3, #2
 800a90e:	2200      	movs	r2, #0
 800a910:	f000 f840 	bl	800a994 <_lseek_r>
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a91a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a91e:	81a3      	strh	r3, [r4, #12]
 800a920:	4632      	mov	r2, r6
 800a922:	463b      	mov	r3, r7
 800a924:	4628      	mov	r0, r5
 800a926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a92a:	f000 b857 	b.w	800a9dc <_write_r>

0800a92e <__sseek>:
 800a92e:	b510      	push	{r4, lr}
 800a930:	460c      	mov	r4, r1
 800a932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a936:	f000 f82d 	bl	800a994 <_lseek_r>
 800a93a:	1c43      	adds	r3, r0, #1
 800a93c:	89a3      	ldrh	r3, [r4, #12]
 800a93e:	bf15      	itete	ne
 800a940:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a94a:	81a3      	strheq	r3, [r4, #12]
 800a94c:	bf18      	it	ne
 800a94e:	81a3      	strhne	r3, [r4, #12]
 800a950:	bd10      	pop	{r4, pc}

0800a952 <__sclose>:
 800a952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a956:	f000 b80d 	b.w	800a974 <_close_r>

0800a95a <memset>:
 800a95a:	4402      	add	r2, r0
 800a95c:	4603      	mov	r3, r0
 800a95e:	4293      	cmp	r3, r2
 800a960:	d100      	bne.n	800a964 <memset+0xa>
 800a962:	4770      	bx	lr
 800a964:	f803 1b01 	strb.w	r1, [r3], #1
 800a968:	e7f9      	b.n	800a95e <memset+0x4>
	...

0800a96c <_localeconv_r>:
 800a96c:	4800      	ldr	r0, [pc, #0]	@ (800a970 <_localeconv_r+0x4>)
 800a96e:	4770      	bx	lr
 800a970:	24000164 	.word	0x24000164

0800a974 <_close_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	4d06      	ldr	r5, [pc, #24]	@ (800a990 <_close_r+0x1c>)
 800a978:	2300      	movs	r3, #0
 800a97a:	4604      	mov	r4, r0
 800a97c:	4608      	mov	r0, r1
 800a97e:	602b      	str	r3, [r5, #0]
 800a980:	f7f7 f8ac 	bl	8001adc <_close>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d102      	bne.n	800a98e <_close_r+0x1a>
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	b103      	cbz	r3, 800a98e <_close_r+0x1a>
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	bd38      	pop	{r3, r4, r5, pc}
 800a990:	24000870 	.word	0x24000870

0800a994 <_lseek_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4d07      	ldr	r5, [pc, #28]	@ (800a9b4 <_lseek_r+0x20>)
 800a998:	4604      	mov	r4, r0
 800a99a:	4608      	mov	r0, r1
 800a99c:	4611      	mov	r1, r2
 800a99e:	2200      	movs	r2, #0
 800a9a0:	602a      	str	r2, [r5, #0]
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	f7f7 f8c1 	bl	8001b2a <_lseek>
 800a9a8:	1c43      	adds	r3, r0, #1
 800a9aa:	d102      	bne.n	800a9b2 <_lseek_r+0x1e>
 800a9ac:	682b      	ldr	r3, [r5, #0]
 800a9ae:	b103      	cbz	r3, 800a9b2 <_lseek_r+0x1e>
 800a9b0:	6023      	str	r3, [r4, #0]
 800a9b2:	bd38      	pop	{r3, r4, r5, pc}
 800a9b4:	24000870 	.word	0x24000870

0800a9b8 <_read_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4d07      	ldr	r5, [pc, #28]	@ (800a9d8 <_read_r+0x20>)
 800a9bc:	4604      	mov	r4, r0
 800a9be:	4608      	mov	r0, r1
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	602a      	str	r2, [r5, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	f7f7 f84f 	bl	8001a6a <_read>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	d102      	bne.n	800a9d6 <_read_r+0x1e>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	b103      	cbz	r3, 800a9d6 <_read_r+0x1e>
 800a9d4:	6023      	str	r3, [r4, #0]
 800a9d6:	bd38      	pop	{r3, r4, r5, pc}
 800a9d8:	24000870 	.word	0x24000870

0800a9dc <_write_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	4d07      	ldr	r5, [pc, #28]	@ (800a9fc <_write_r+0x20>)
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	4608      	mov	r0, r1
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	602a      	str	r2, [r5, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f7f7 f85a 	bl	8001aa4 <_write>
 800a9f0:	1c43      	adds	r3, r0, #1
 800a9f2:	d102      	bne.n	800a9fa <_write_r+0x1e>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	b103      	cbz	r3, 800a9fa <_write_r+0x1e>
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	24000870 	.word	0x24000870

0800aa00 <__errno>:
 800aa00:	4b01      	ldr	r3, [pc, #4]	@ (800aa08 <__errno+0x8>)
 800aa02:	6818      	ldr	r0, [r3, #0]
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	24000024 	.word	0x24000024

0800aa0c <__libc_init_array>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	4d0d      	ldr	r5, [pc, #52]	@ (800aa44 <__libc_init_array+0x38>)
 800aa10:	4c0d      	ldr	r4, [pc, #52]	@ (800aa48 <__libc_init_array+0x3c>)
 800aa12:	1b64      	subs	r4, r4, r5
 800aa14:	10a4      	asrs	r4, r4, #2
 800aa16:	2600      	movs	r6, #0
 800aa18:	42a6      	cmp	r6, r4
 800aa1a:	d109      	bne.n	800aa30 <__libc_init_array+0x24>
 800aa1c:	4d0b      	ldr	r5, [pc, #44]	@ (800aa4c <__libc_init_array+0x40>)
 800aa1e:	4c0c      	ldr	r4, [pc, #48]	@ (800aa50 <__libc_init_array+0x44>)
 800aa20:	f002 fee8 	bl	800d7f4 <_init>
 800aa24:	1b64      	subs	r4, r4, r5
 800aa26:	10a4      	asrs	r4, r4, #2
 800aa28:	2600      	movs	r6, #0
 800aa2a:	42a6      	cmp	r6, r4
 800aa2c:	d105      	bne.n	800aa3a <__libc_init_array+0x2e>
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
 800aa30:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa34:	4798      	blx	r3
 800aa36:	3601      	adds	r6, #1
 800aa38:	e7ee      	b.n	800aa18 <__libc_init_array+0xc>
 800aa3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa3e:	4798      	blx	r3
 800aa40:	3601      	adds	r6, #1
 800aa42:	e7f2      	b.n	800aa2a <__libc_init_array+0x1e>
 800aa44:	0800e100 	.word	0x0800e100
 800aa48:	0800e100 	.word	0x0800e100
 800aa4c:	0800e100 	.word	0x0800e100
 800aa50:	0800e104 	.word	0x0800e104

0800aa54 <__retarget_lock_init_recursive>:
 800aa54:	4770      	bx	lr

0800aa56 <__retarget_lock_acquire_recursive>:
 800aa56:	4770      	bx	lr

0800aa58 <__retarget_lock_release_recursive>:
 800aa58:	4770      	bx	lr

0800aa5a <quorem>:
 800aa5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5e:	6903      	ldr	r3, [r0, #16]
 800aa60:	690c      	ldr	r4, [r1, #16]
 800aa62:	42a3      	cmp	r3, r4
 800aa64:	4607      	mov	r7, r0
 800aa66:	db7e      	blt.n	800ab66 <quorem+0x10c>
 800aa68:	3c01      	subs	r4, #1
 800aa6a:	f101 0814 	add.w	r8, r1, #20
 800aa6e:	00a3      	lsls	r3, r4, #2
 800aa70:	f100 0514 	add.w	r5, r0, #20
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa7a:	9301      	str	r3, [sp, #4]
 800aa7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa84:	3301      	adds	r3, #1
 800aa86:	429a      	cmp	r2, r3
 800aa88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa90:	d32e      	bcc.n	800aaf0 <quorem+0x96>
 800aa92:	f04f 0a00 	mov.w	sl, #0
 800aa96:	46c4      	mov	ip, r8
 800aa98:	46ae      	mov	lr, r5
 800aa9a:	46d3      	mov	fp, sl
 800aa9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aaa0:	b298      	uxth	r0, r3
 800aaa2:	fb06 a000 	mla	r0, r6, r0, sl
 800aaa6:	0c02      	lsrs	r2, r0, #16
 800aaa8:	0c1b      	lsrs	r3, r3, #16
 800aaaa:	fb06 2303 	mla	r3, r6, r3, r2
 800aaae:	f8de 2000 	ldr.w	r2, [lr]
 800aab2:	b280      	uxth	r0, r0
 800aab4:	b292      	uxth	r2, r2
 800aab6:	1a12      	subs	r2, r2, r0
 800aab8:	445a      	add	r2, fp
 800aaba:	f8de 0000 	ldr.w	r0, [lr]
 800aabe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800aac8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800aacc:	b292      	uxth	r2, r2
 800aace:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800aad2:	45e1      	cmp	r9, ip
 800aad4:	f84e 2b04 	str.w	r2, [lr], #4
 800aad8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aadc:	d2de      	bcs.n	800aa9c <quorem+0x42>
 800aade:	9b00      	ldr	r3, [sp, #0]
 800aae0:	58eb      	ldr	r3, [r5, r3]
 800aae2:	b92b      	cbnz	r3, 800aaf0 <quorem+0x96>
 800aae4:	9b01      	ldr	r3, [sp, #4]
 800aae6:	3b04      	subs	r3, #4
 800aae8:	429d      	cmp	r5, r3
 800aaea:	461a      	mov	r2, r3
 800aaec:	d32f      	bcc.n	800ab4e <quorem+0xf4>
 800aaee:	613c      	str	r4, [r7, #16]
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	f001 f90d 	bl	800bd10 <__mcmp>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	db25      	blt.n	800ab46 <quorem+0xec>
 800aafa:	4629      	mov	r1, r5
 800aafc:	2000      	movs	r0, #0
 800aafe:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab02:	f8d1 c000 	ldr.w	ip, [r1]
 800ab06:	fa1f fe82 	uxth.w	lr, r2
 800ab0a:	fa1f f38c 	uxth.w	r3, ip
 800ab0e:	eba3 030e 	sub.w	r3, r3, lr
 800ab12:	4403      	add	r3, r0
 800ab14:	0c12      	lsrs	r2, r2, #16
 800ab16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ab1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab24:	45c1      	cmp	r9, r8
 800ab26:	f841 3b04 	str.w	r3, [r1], #4
 800ab2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab2e:	d2e6      	bcs.n	800aafe <quorem+0xa4>
 800ab30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab38:	b922      	cbnz	r2, 800ab44 <quorem+0xea>
 800ab3a:	3b04      	subs	r3, #4
 800ab3c:	429d      	cmp	r5, r3
 800ab3e:	461a      	mov	r2, r3
 800ab40:	d30b      	bcc.n	800ab5a <quorem+0x100>
 800ab42:	613c      	str	r4, [r7, #16]
 800ab44:	3601      	adds	r6, #1
 800ab46:	4630      	mov	r0, r6
 800ab48:	b003      	add	sp, #12
 800ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4e:	6812      	ldr	r2, [r2, #0]
 800ab50:	3b04      	subs	r3, #4
 800ab52:	2a00      	cmp	r2, #0
 800ab54:	d1cb      	bne.n	800aaee <quorem+0x94>
 800ab56:	3c01      	subs	r4, #1
 800ab58:	e7c6      	b.n	800aae8 <quorem+0x8e>
 800ab5a:	6812      	ldr	r2, [r2, #0]
 800ab5c:	3b04      	subs	r3, #4
 800ab5e:	2a00      	cmp	r2, #0
 800ab60:	d1ef      	bne.n	800ab42 <quorem+0xe8>
 800ab62:	3c01      	subs	r4, #1
 800ab64:	e7ea      	b.n	800ab3c <quorem+0xe2>
 800ab66:	2000      	movs	r0, #0
 800ab68:	e7ee      	b.n	800ab48 <quorem+0xee>
 800ab6a:	0000      	movs	r0, r0
 800ab6c:	0000      	movs	r0, r0
	...

0800ab70 <_dtoa_r>:
 800ab70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab74:	ed2d 8b02 	vpush	{d8}
 800ab78:	69c7      	ldr	r7, [r0, #28]
 800ab7a:	b091      	sub	sp, #68	@ 0x44
 800ab7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ab80:	ec55 4b10 	vmov	r4, r5, d0
 800ab84:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ab86:	9107      	str	r1, [sp, #28]
 800ab88:	4681      	mov	r9, r0
 800ab8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab8c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ab8e:	b97f      	cbnz	r7, 800abb0 <_dtoa_r+0x40>
 800ab90:	2010      	movs	r0, #16
 800ab92:	f000 fd95 	bl	800b6c0 <malloc>
 800ab96:	4602      	mov	r2, r0
 800ab98:	f8c9 001c 	str.w	r0, [r9, #28]
 800ab9c:	b920      	cbnz	r0, 800aba8 <_dtoa_r+0x38>
 800ab9e:	4ba0      	ldr	r3, [pc, #640]	@ (800ae20 <_dtoa_r+0x2b0>)
 800aba0:	21ef      	movs	r1, #239	@ 0xef
 800aba2:	48a0      	ldr	r0, [pc, #640]	@ (800ae24 <_dtoa_r+0x2b4>)
 800aba4:	f001 fc5c 	bl	800c460 <__assert_func>
 800aba8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800abac:	6007      	str	r7, [r0, #0]
 800abae:	60c7      	str	r7, [r0, #12]
 800abb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abb4:	6819      	ldr	r1, [r3, #0]
 800abb6:	b159      	cbz	r1, 800abd0 <_dtoa_r+0x60>
 800abb8:	685a      	ldr	r2, [r3, #4]
 800abba:	604a      	str	r2, [r1, #4]
 800abbc:	2301      	movs	r3, #1
 800abbe:	4093      	lsls	r3, r2
 800abc0:	608b      	str	r3, [r1, #8]
 800abc2:	4648      	mov	r0, r9
 800abc4:	f000 fe72 	bl	800b8ac <_Bfree>
 800abc8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	1e2b      	subs	r3, r5, #0
 800abd2:	bfbb      	ittet	lt
 800abd4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800abd8:	9303      	strlt	r3, [sp, #12]
 800abda:	2300      	movge	r3, #0
 800abdc:	2201      	movlt	r2, #1
 800abde:	bfac      	ite	ge
 800abe0:	6033      	strge	r3, [r6, #0]
 800abe2:	6032      	strlt	r2, [r6, #0]
 800abe4:	4b90      	ldr	r3, [pc, #576]	@ (800ae28 <_dtoa_r+0x2b8>)
 800abe6:	9e03      	ldr	r6, [sp, #12]
 800abe8:	43b3      	bics	r3, r6
 800abea:	d110      	bne.n	800ac0e <_dtoa_r+0x9e>
 800abec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800abee:	f242 730f 	movw	r3, #9999	@ 0x270f
 800abf2:	6013      	str	r3, [r2, #0]
 800abf4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800abf8:	4323      	orrs	r3, r4
 800abfa:	f000 84e6 	beq.w	800b5ca <_dtoa_r+0xa5a>
 800abfe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac00:	4f8a      	ldr	r7, [pc, #552]	@ (800ae2c <_dtoa_r+0x2bc>)
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f000 84e8 	beq.w	800b5d8 <_dtoa_r+0xa68>
 800ac08:	1cfb      	adds	r3, r7, #3
 800ac0a:	f000 bce3 	b.w	800b5d4 <_dtoa_r+0xa64>
 800ac0e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ac12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ac16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1a:	d10a      	bne.n	800ac32 <_dtoa_r+0xc2>
 800ac1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac1e:	2301      	movs	r3, #1
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac24:	b113      	cbz	r3, 800ac2c <_dtoa_r+0xbc>
 800ac26:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ac28:	4b81      	ldr	r3, [pc, #516]	@ (800ae30 <_dtoa_r+0x2c0>)
 800ac2a:	6013      	str	r3, [r2, #0]
 800ac2c:	4f81      	ldr	r7, [pc, #516]	@ (800ae34 <_dtoa_r+0x2c4>)
 800ac2e:	f000 bcd3 	b.w	800b5d8 <_dtoa_r+0xa68>
 800ac32:	aa0e      	add	r2, sp, #56	@ 0x38
 800ac34:	a90f      	add	r1, sp, #60	@ 0x3c
 800ac36:	4648      	mov	r0, r9
 800ac38:	eeb0 0b48 	vmov.f64	d0, d8
 800ac3c:	f001 f918 	bl	800be70 <__d2b>
 800ac40:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ac44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac46:	9001      	str	r0, [sp, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d045      	beq.n	800acd8 <_dtoa_r+0x168>
 800ac4c:	eeb0 7b48 	vmov.f64	d7, d8
 800ac50:	ee18 1a90 	vmov	r1, s17
 800ac54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ac58:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ac5c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ac60:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ac64:	2500      	movs	r5, #0
 800ac66:	ee07 1a90 	vmov	s15, r1
 800ac6a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ac6e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ae08 <_dtoa_r+0x298>
 800ac72:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ac76:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800ae10 <_dtoa_r+0x2a0>
 800ac7a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ac7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800ae18 <_dtoa_r+0x2a8>
 800ac82:	ee07 3a90 	vmov	s15, r3
 800ac86:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ac8a:	eeb0 7b46 	vmov.f64	d7, d6
 800ac8e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ac92:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ac96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ac9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9e:	ee16 8a90 	vmov	r8, s13
 800aca2:	d508      	bpl.n	800acb6 <_dtoa_r+0x146>
 800aca4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800aca8:	eeb4 6b47 	vcmp.f64	d6, d7
 800acac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb0:	bf18      	it	ne
 800acb2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800acb6:	f1b8 0f16 	cmp.w	r8, #22
 800acba:	d82b      	bhi.n	800ad14 <_dtoa_r+0x1a4>
 800acbc:	495e      	ldr	r1, [pc, #376]	@ (800ae38 <_dtoa_r+0x2c8>)
 800acbe:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800acc2:	ed91 7b00 	vldr	d7, [r1]
 800acc6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800acca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acce:	d501      	bpl.n	800acd4 <_dtoa_r+0x164>
 800acd0:	f108 38ff 	add.w	r8, r8, #4294967295
 800acd4:	2100      	movs	r1, #0
 800acd6:	e01e      	b.n	800ad16 <_dtoa_r+0x1a6>
 800acd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acda:	4413      	add	r3, r2
 800acdc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ace0:	2920      	cmp	r1, #32
 800ace2:	bfc1      	itttt	gt
 800ace4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ace8:	408e      	lslgt	r6, r1
 800acea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800acee:	fa24 f101 	lsrgt.w	r1, r4, r1
 800acf2:	bfd6      	itet	le
 800acf4:	f1c1 0120 	rsble	r1, r1, #32
 800acf8:	4331      	orrgt	r1, r6
 800acfa:	fa04 f101 	lslle.w	r1, r4, r1
 800acfe:	ee07 1a90 	vmov	s15, r1
 800ad02:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ad06:	3b01      	subs	r3, #1
 800ad08:	ee17 1a90 	vmov	r1, s15
 800ad0c:	2501      	movs	r5, #1
 800ad0e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ad12:	e7a8      	b.n	800ac66 <_dtoa_r+0xf6>
 800ad14:	2101      	movs	r1, #1
 800ad16:	1ad2      	subs	r2, r2, r3
 800ad18:	1e53      	subs	r3, r2, #1
 800ad1a:	9306      	str	r3, [sp, #24]
 800ad1c:	bf45      	ittet	mi
 800ad1e:	f1c2 0301 	rsbmi	r3, r2, #1
 800ad22:	9304      	strmi	r3, [sp, #16]
 800ad24:	2300      	movpl	r3, #0
 800ad26:	2300      	movmi	r3, #0
 800ad28:	bf4c      	ite	mi
 800ad2a:	9306      	strmi	r3, [sp, #24]
 800ad2c:	9304      	strpl	r3, [sp, #16]
 800ad2e:	f1b8 0f00 	cmp.w	r8, #0
 800ad32:	910c      	str	r1, [sp, #48]	@ 0x30
 800ad34:	db18      	blt.n	800ad68 <_dtoa_r+0x1f8>
 800ad36:	9b06      	ldr	r3, [sp, #24]
 800ad38:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ad3c:	4443      	add	r3, r8
 800ad3e:	9306      	str	r3, [sp, #24]
 800ad40:	2300      	movs	r3, #0
 800ad42:	9a07      	ldr	r2, [sp, #28]
 800ad44:	2a09      	cmp	r2, #9
 800ad46:	d845      	bhi.n	800add4 <_dtoa_r+0x264>
 800ad48:	2a05      	cmp	r2, #5
 800ad4a:	bfc4      	itt	gt
 800ad4c:	3a04      	subgt	r2, #4
 800ad4e:	9207      	strgt	r2, [sp, #28]
 800ad50:	9a07      	ldr	r2, [sp, #28]
 800ad52:	f1a2 0202 	sub.w	r2, r2, #2
 800ad56:	bfcc      	ite	gt
 800ad58:	2400      	movgt	r4, #0
 800ad5a:	2401      	movle	r4, #1
 800ad5c:	2a03      	cmp	r2, #3
 800ad5e:	d844      	bhi.n	800adea <_dtoa_r+0x27a>
 800ad60:	e8df f002 	tbb	[pc, r2]
 800ad64:	0b173634 	.word	0x0b173634
 800ad68:	9b04      	ldr	r3, [sp, #16]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	eba3 0308 	sub.w	r3, r3, r8
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad74:	f1c8 0300 	rsb	r3, r8, #0
 800ad78:	e7e3      	b.n	800ad42 <_dtoa_r+0x1d2>
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	9208      	str	r2, [sp, #32]
 800ad7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad80:	eb08 0b02 	add.w	fp, r8, r2
 800ad84:	f10b 0a01 	add.w	sl, fp, #1
 800ad88:	4652      	mov	r2, sl
 800ad8a:	2a01      	cmp	r2, #1
 800ad8c:	bfb8      	it	lt
 800ad8e:	2201      	movlt	r2, #1
 800ad90:	e006      	b.n	800ada0 <_dtoa_r+0x230>
 800ad92:	2201      	movs	r2, #1
 800ad94:	9208      	str	r2, [sp, #32]
 800ad96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad98:	2a00      	cmp	r2, #0
 800ad9a:	dd29      	ble.n	800adf0 <_dtoa_r+0x280>
 800ad9c:	4693      	mov	fp, r2
 800ad9e:	4692      	mov	sl, r2
 800ada0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800ada4:	2100      	movs	r1, #0
 800ada6:	2004      	movs	r0, #4
 800ada8:	f100 0614 	add.w	r6, r0, #20
 800adac:	4296      	cmp	r6, r2
 800adae:	d926      	bls.n	800adfe <_dtoa_r+0x28e>
 800adb0:	6079      	str	r1, [r7, #4]
 800adb2:	4648      	mov	r0, r9
 800adb4:	9305      	str	r3, [sp, #20]
 800adb6:	f000 fd39 	bl	800b82c <_Balloc>
 800adba:	9b05      	ldr	r3, [sp, #20]
 800adbc:	4607      	mov	r7, r0
 800adbe:	2800      	cmp	r0, #0
 800adc0:	d13e      	bne.n	800ae40 <_dtoa_r+0x2d0>
 800adc2:	4b1e      	ldr	r3, [pc, #120]	@ (800ae3c <_dtoa_r+0x2cc>)
 800adc4:	4602      	mov	r2, r0
 800adc6:	f240 11af 	movw	r1, #431	@ 0x1af
 800adca:	e6ea      	b.n	800aba2 <_dtoa_r+0x32>
 800adcc:	2200      	movs	r2, #0
 800adce:	e7e1      	b.n	800ad94 <_dtoa_r+0x224>
 800add0:	2200      	movs	r2, #0
 800add2:	e7d3      	b.n	800ad7c <_dtoa_r+0x20c>
 800add4:	2401      	movs	r4, #1
 800add6:	2200      	movs	r2, #0
 800add8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800addc:	f04f 3bff 	mov.w	fp, #4294967295
 800ade0:	2100      	movs	r1, #0
 800ade2:	46da      	mov	sl, fp
 800ade4:	2212      	movs	r2, #18
 800ade6:	9109      	str	r1, [sp, #36]	@ 0x24
 800ade8:	e7da      	b.n	800ada0 <_dtoa_r+0x230>
 800adea:	2201      	movs	r2, #1
 800adec:	9208      	str	r2, [sp, #32]
 800adee:	e7f5      	b.n	800addc <_dtoa_r+0x26c>
 800adf0:	f04f 0b01 	mov.w	fp, #1
 800adf4:	46da      	mov	sl, fp
 800adf6:	465a      	mov	r2, fp
 800adf8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800adfc:	e7d0      	b.n	800ada0 <_dtoa_r+0x230>
 800adfe:	3101      	adds	r1, #1
 800ae00:	0040      	lsls	r0, r0, #1
 800ae02:	e7d1      	b.n	800ada8 <_dtoa_r+0x238>
 800ae04:	f3af 8000 	nop.w
 800ae08:	636f4361 	.word	0x636f4361
 800ae0c:	3fd287a7 	.word	0x3fd287a7
 800ae10:	8b60c8b3 	.word	0x8b60c8b3
 800ae14:	3fc68a28 	.word	0x3fc68a28
 800ae18:	509f79fb 	.word	0x509f79fb
 800ae1c:	3fd34413 	.word	0x3fd34413
 800ae20:	0800d879 	.word	0x0800d879
 800ae24:	0800d890 	.word	0x0800d890
 800ae28:	7ff00000 	.word	0x7ff00000
 800ae2c:	0800d875 	.word	0x0800d875
 800ae30:	0800d849 	.word	0x0800d849
 800ae34:	0800d848 	.word	0x0800d848
 800ae38:	0800d9e0 	.word	0x0800d9e0
 800ae3c:	0800d8e8 	.word	0x0800d8e8
 800ae40:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800ae44:	f1ba 0f0e 	cmp.w	sl, #14
 800ae48:	6010      	str	r0, [r2, #0]
 800ae4a:	d86e      	bhi.n	800af2a <_dtoa_r+0x3ba>
 800ae4c:	2c00      	cmp	r4, #0
 800ae4e:	d06c      	beq.n	800af2a <_dtoa_r+0x3ba>
 800ae50:	f1b8 0f00 	cmp.w	r8, #0
 800ae54:	f340 80b4 	ble.w	800afc0 <_dtoa_r+0x450>
 800ae58:	4ac8      	ldr	r2, [pc, #800]	@ (800b17c <_dtoa_r+0x60c>)
 800ae5a:	f008 010f 	and.w	r1, r8, #15
 800ae5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ae62:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800ae66:	ed92 7b00 	vldr	d7, [r2]
 800ae6a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800ae6e:	f000 809b 	beq.w	800afa8 <_dtoa_r+0x438>
 800ae72:	4ac3      	ldr	r2, [pc, #780]	@ (800b180 <_dtoa_r+0x610>)
 800ae74:	ed92 6b08 	vldr	d6, [r2, #32]
 800ae78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ae7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ae80:	f001 010f 	and.w	r1, r1, #15
 800ae84:	2203      	movs	r2, #3
 800ae86:	48be      	ldr	r0, [pc, #760]	@ (800b180 <_dtoa_r+0x610>)
 800ae88:	2900      	cmp	r1, #0
 800ae8a:	f040 808f 	bne.w	800afac <_dtoa_r+0x43c>
 800ae8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ae92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ae96:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ae9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ae9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aea0:	2900      	cmp	r1, #0
 800aea2:	f000 80b3 	beq.w	800b00c <_dtoa_r+0x49c>
 800aea6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800aeaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800aeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb2:	f140 80ab 	bpl.w	800b00c <_dtoa_r+0x49c>
 800aeb6:	f1ba 0f00 	cmp.w	sl, #0
 800aeba:	f000 80a7 	beq.w	800b00c <_dtoa_r+0x49c>
 800aebe:	f1bb 0f00 	cmp.w	fp, #0
 800aec2:	dd30      	ble.n	800af26 <_dtoa_r+0x3b6>
 800aec4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800aec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aecc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aed0:	f108 31ff 	add.w	r1, r8, #4294967295
 800aed4:	9105      	str	r1, [sp, #20]
 800aed6:	3201      	adds	r2, #1
 800aed8:	465c      	mov	r4, fp
 800aeda:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aede:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800aee2:	ee07 2a90 	vmov	s15, r2
 800aee6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aeea:	eea7 5b06 	vfma.f64	d5, d7, d6
 800aeee:	ee15 2a90 	vmov	r2, s11
 800aef2:	ec51 0b15 	vmov	r0, r1, d5
 800aef6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800aefa:	2c00      	cmp	r4, #0
 800aefc:	f040 808a 	bne.w	800b014 <_dtoa_r+0x4a4>
 800af00:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800af04:	ee36 6b47 	vsub.f64	d6, d6, d7
 800af08:	ec41 0b17 	vmov	d7, r0, r1
 800af0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af14:	f300 826a 	bgt.w	800b3ec <_dtoa_r+0x87c>
 800af18:	eeb1 7b47 	vneg.f64	d7, d7
 800af1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af24:	d423      	bmi.n	800af6e <_dtoa_r+0x3fe>
 800af26:	ed8d 8b02 	vstr	d8, [sp, #8]
 800af2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af2c:	2a00      	cmp	r2, #0
 800af2e:	f2c0 8129 	blt.w	800b184 <_dtoa_r+0x614>
 800af32:	f1b8 0f0e 	cmp.w	r8, #14
 800af36:	f300 8125 	bgt.w	800b184 <_dtoa_r+0x614>
 800af3a:	4b90      	ldr	r3, [pc, #576]	@ (800b17c <_dtoa_r+0x60c>)
 800af3c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af40:	ed93 6b00 	vldr	d6, [r3]
 800af44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af46:	2b00      	cmp	r3, #0
 800af48:	f280 80c8 	bge.w	800b0dc <_dtoa_r+0x56c>
 800af4c:	f1ba 0f00 	cmp.w	sl, #0
 800af50:	f300 80c4 	bgt.w	800b0dc <_dtoa_r+0x56c>
 800af54:	d10b      	bne.n	800af6e <_dtoa_r+0x3fe>
 800af56:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800af5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800af66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6a:	f2c0 823c 	blt.w	800b3e6 <_dtoa_r+0x876>
 800af6e:	2400      	movs	r4, #0
 800af70:	4625      	mov	r5, r4
 800af72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af74:	43db      	mvns	r3, r3
 800af76:	9305      	str	r3, [sp, #20]
 800af78:	463e      	mov	r6, r7
 800af7a:	f04f 0800 	mov.w	r8, #0
 800af7e:	4621      	mov	r1, r4
 800af80:	4648      	mov	r0, r9
 800af82:	f000 fc93 	bl	800b8ac <_Bfree>
 800af86:	2d00      	cmp	r5, #0
 800af88:	f000 80a2 	beq.w	800b0d0 <_dtoa_r+0x560>
 800af8c:	f1b8 0f00 	cmp.w	r8, #0
 800af90:	d005      	beq.n	800af9e <_dtoa_r+0x42e>
 800af92:	45a8      	cmp	r8, r5
 800af94:	d003      	beq.n	800af9e <_dtoa_r+0x42e>
 800af96:	4641      	mov	r1, r8
 800af98:	4648      	mov	r0, r9
 800af9a:	f000 fc87 	bl	800b8ac <_Bfree>
 800af9e:	4629      	mov	r1, r5
 800afa0:	4648      	mov	r0, r9
 800afa2:	f000 fc83 	bl	800b8ac <_Bfree>
 800afa6:	e093      	b.n	800b0d0 <_dtoa_r+0x560>
 800afa8:	2202      	movs	r2, #2
 800afaa:	e76c      	b.n	800ae86 <_dtoa_r+0x316>
 800afac:	07cc      	lsls	r4, r1, #31
 800afae:	d504      	bpl.n	800afba <_dtoa_r+0x44a>
 800afb0:	ed90 6b00 	vldr	d6, [r0]
 800afb4:	3201      	adds	r2, #1
 800afb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800afba:	1049      	asrs	r1, r1, #1
 800afbc:	3008      	adds	r0, #8
 800afbe:	e763      	b.n	800ae88 <_dtoa_r+0x318>
 800afc0:	d022      	beq.n	800b008 <_dtoa_r+0x498>
 800afc2:	f1c8 0100 	rsb	r1, r8, #0
 800afc6:	4a6d      	ldr	r2, [pc, #436]	@ (800b17c <_dtoa_r+0x60c>)
 800afc8:	f001 000f 	and.w	r0, r1, #15
 800afcc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800afd0:	ed92 7b00 	vldr	d7, [r2]
 800afd4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800afd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800afdc:	4868      	ldr	r0, [pc, #416]	@ (800b180 <_dtoa_r+0x610>)
 800afde:	1109      	asrs	r1, r1, #4
 800afe0:	2400      	movs	r4, #0
 800afe2:	2202      	movs	r2, #2
 800afe4:	b929      	cbnz	r1, 800aff2 <_dtoa_r+0x482>
 800afe6:	2c00      	cmp	r4, #0
 800afe8:	f43f af57 	beq.w	800ae9a <_dtoa_r+0x32a>
 800afec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aff0:	e753      	b.n	800ae9a <_dtoa_r+0x32a>
 800aff2:	07ce      	lsls	r6, r1, #31
 800aff4:	d505      	bpl.n	800b002 <_dtoa_r+0x492>
 800aff6:	ed90 6b00 	vldr	d6, [r0]
 800affa:	3201      	adds	r2, #1
 800affc:	2401      	movs	r4, #1
 800affe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b002:	1049      	asrs	r1, r1, #1
 800b004:	3008      	adds	r0, #8
 800b006:	e7ed      	b.n	800afe4 <_dtoa_r+0x474>
 800b008:	2202      	movs	r2, #2
 800b00a:	e746      	b.n	800ae9a <_dtoa_r+0x32a>
 800b00c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b010:	4654      	mov	r4, sl
 800b012:	e762      	b.n	800aeda <_dtoa_r+0x36a>
 800b014:	4a59      	ldr	r2, [pc, #356]	@ (800b17c <_dtoa_r+0x60c>)
 800b016:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b01a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b01e:	9a08      	ldr	r2, [sp, #32]
 800b020:	ec41 0b17 	vmov	d7, r0, r1
 800b024:	443c      	add	r4, r7
 800b026:	b34a      	cbz	r2, 800b07c <_dtoa_r+0x50c>
 800b028:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b02c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b030:	463e      	mov	r6, r7
 800b032:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b036:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b03a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b03e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b042:	ee14 2a90 	vmov	r2, s9
 800b046:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b04a:	3230      	adds	r2, #48	@ 0x30
 800b04c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b050:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b058:	f806 2b01 	strb.w	r2, [r6], #1
 800b05c:	d438      	bmi.n	800b0d0 <_dtoa_r+0x560>
 800b05e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b062:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b06a:	d46e      	bmi.n	800b14a <_dtoa_r+0x5da>
 800b06c:	42a6      	cmp	r6, r4
 800b06e:	f43f af5a 	beq.w	800af26 <_dtoa_r+0x3b6>
 800b072:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b076:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b07a:	e7e0      	b.n	800b03e <_dtoa_r+0x4ce>
 800b07c:	4621      	mov	r1, r4
 800b07e:	463e      	mov	r6, r7
 800b080:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b084:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b088:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b08c:	ee14 2a90 	vmov	r2, s9
 800b090:	3230      	adds	r2, #48	@ 0x30
 800b092:	f806 2b01 	strb.w	r2, [r6], #1
 800b096:	42a6      	cmp	r6, r4
 800b098:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b09c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b0a0:	d119      	bne.n	800b0d6 <_dtoa_r+0x566>
 800b0a2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b0a6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b0aa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b2:	dc4a      	bgt.n	800b14a <_dtoa_r+0x5da>
 800b0b4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b0b8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c0:	f57f af31 	bpl.w	800af26 <_dtoa_r+0x3b6>
 800b0c4:	460e      	mov	r6, r1
 800b0c6:	3901      	subs	r1, #1
 800b0c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b0cc:	2b30      	cmp	r3, #48	@ 0x30
 800b0ce:	d0f9      	beq.n	800b0c4 <_dtoa_r+0x554>
 800b0d0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b0d4:	e027      	b.n	800b126 <_dtoa_r+0x5b6>
 800b0d6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b0da:	e7d5      	b.n	800b088 <_dtoa_r+0x518>
 800b0dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0e0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b0e4:	463e      	mov	r6, r7
 800b0e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b0ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b0ee:	ee15 3a10 	vmov	r3, s10
 800b0f2:	3330      	adds	r3, #48	@ 0x30
 800b0f4:	f806 3b01 	strb.w	r3, [r6], #1
 800b0f8:	1bf3      	subs	r3, r6, r7
 800b0fa:	459a      	cmp	sl, r3
 800b0fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b100:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b104:	d132      	bne.n	800b16c <_dtoa_r+0x5fc>
 800b106:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b10a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b112:	dc18      	bgt.n	800b146 <_dtoa_r+0x5d6>
 800b114:	eeb4 7b46 	vcmp.f64	d7, d6
 800b118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11c:	d103      	bne.n	800b126 <_dtoa_r+0x5b6>
 800b11e:	ee15 3a10 	vmov	r3, s10
 800b122:	07db      	lsls	r3, r3, #31
 800b124:	d40f      	bmi.n	800b146 <_dtoa_r+0x5d6>
 800b126:	9901      	ldr	r1, [sp, #4]
 800b128:	4648      	mov	r0, r9
 800b12a:	f000 fbbf 	bl	800b8ac <_Bfree>
 800b12e:	2300      	movs	r3, #0
 800b130:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b132:	7033      	strb	r3, [r6, #0]
 800b134:	f108 0301 	add.w	r3, r8, #1
 800b138:	6013      	str	r3, [r2, #0]
 800b13a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 824b 	beq.w	800b5d8 <_dtoa_r+0xa68>
 800b142:	601e      	str	r6, [r3, #0]
 800b144:	e248      	b.n	800b5d8 <_dtoa_r+0xa68>
 800b146:	f8cd 8014 	str.w	r8, [sp, #20]
 800b14a:	4633      	mov	r3, r6
 800b14c:	461e      	mov	r6, r3
 800b14e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b152:	2a39      	cmp	r2, #57	@ 0x39
 800b154:	d106      	bne.n	800b164 <_dtoa_r+0x5f4>
 800b156:	429f      	cmp	r7, r3
 800b158:	d1f8      	bne.n	800b14c <_dtoa_r+0x5dc>
 800b15a:	9a05      	ldr	r2, [sp, #20]
 800b15c:	3201      	adds	r2, #1
 800b15e:	9205      	str	r2, [sp, #20]
 800b160:	2230      	movs	r2, #48	@ 0x30
 800b162:	703a      	strb	r2, [r7, #0]
 800b164:	781a      	ldrb	r2, [r3, #0]
 800b166:	3201      	adds	r2, #1
 800b168:	701a      	strb	r2, [r3, #0]
 800b16a:	e7b1      	b.n	800b0d0 <_dtoa_r+0x560>
 800b16c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b170:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b178:	d1b5      	bne.n	800b0e6 <_dtoa_r+0x576>
 800b17a:	e7d4      	b.n	800b126 <_dtoa_r+0x5b6>
 800b17c:	0800d9e0 	.word	0x0800d9e0
 800b180:	0800d9b8 	.word	0x0800d9b8
 800b184:	9908      	ldr	r1, [sp, #32]
 800b186:	2900      	cmp	r1, #0
 800b188:	f000 80e9 	beq.w	800b35e <_dtoa_r+0x7ee>
 800b18c:	9907      	ldr	r1, [sp, #28]
 800b18e:	2901      	cmp	r1, #1
 800b190:	f300 80cb 	bgt.w	800b32a <_dtoa_r+0x7ba>
 800b194:	2d00      	cmp	r5, #0
 800b196:	f000 80c4 	beq.w	800b322 <_dtoa_r+0x7b2>
 800b19a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b19e:	9e04      	ldr	r6, [sp, #16]
 800b1a0:	461c      	mov	r4, r3
 800b1a2:	9305      	str	r3, [sp, #20]
 800b1a4:	9b04      	ldr	r3, [sp, #16]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	9304      	str	r3, [sp, #16]
 800b1aa:	9b06      	ldr	r3, [sp, #24]
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	4413      	add	r3, r2
 800b1b0:	4648      	mov	r0, r9
 800b1b2:	9306      	str	r3, [sp, #24]
 800b1b4:	f000 fc2e 	bl	800ba14 <__i2b>
 800b1b8:	9b05      	ldr	r3, [sp, #20]
 800b1ba:	4605      	mov	r5, r0
 800b1bc:	b166      	cbz	r6, 800b1d8 <_dtoa_r+0x668>
 800b1be:	9a06      	ldr	r2, [sp, #24]
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	dd09      	ble.n	800b1d8 <_dtoa_r+0x668>
 800b1c4:	42b2      	cmp	r2, r6
 800b1c6:	9904      	ldr	r1, [sp, #16]
 800b1c8:	bfa8      	it	ge
 800b1ca:	4632      	movge	r2, r6
 800b1cc:	1a89      	subs	r1, r1, r2
 800b1ce:	9104      	str	r1, [sp, #16]
 800b1d0:	9906      	ldr	r1, [sp, #24]
 800b1d2:	1ab6      	subs	r6, r6, r2
 800b1d4:	1a8a      	subs	r2, r1, r2
 800b1d6:	9206      	str	r2, [sp, #24]
 800b1d8:	b30b      	cbz	r3, 800b21e <_dtoa_r+0x6ae>
 800b1da:	9a08      	ldr	r2, [sp, #32]
 800b1dc:	2a00      	cmp	r2, #0
 800b1de:	f000 80c5 	beq.w	800b36c <_dtoa_r+0x7fc>
 800b1e2:	2c00      	cmp	r4, #0
 800b1e4:	f000 80bf 	beq.w	800b366 <_dtoa_r+0x7f6>
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	4622      	mov	r2, r4
 800b1ec:	4648      	mov	r0, r9
 800b1ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1f0:	f000 fcc8 	bl	800bb84 <__pow5mult>
 800b1f4:	9a01      	ldr	r2, [sp, #4]
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	4648      	mov	r0, r9
 800b1fc:	f000 fc20 	bl	800ba40 <__multiply>
 800b200:	9901      	ldr	r1, [sp, #4]
 800b202:	9005      	str	r0, [sp, #20]
 800b204:	4648      	mov	r0, r9
 800b206:	f000 fb51 	bl	800b8ac <_Bfree>
 800b20a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b20c:	1b1b      	subs	r3, r3, r4
 800b20e:	f000 80b0 	beq.w	800b372 <_dtoa_r+0x802>
 800b212:	9905      	ldr	r1, [sp, #20]
 800b214:	461a      	mov	r2, r3
 800b216:	4648      	mov	r0, r9
 800b218:	f000 fcb4 	bl	800bb84 <__pow5mult>
 800b21c:	9001      	str	r0, [sp, #4]
 800b21e:	2101      	movs	r1, #1
 800b220:	4648      	mov	r0, r9
 800b222:	f000 fbf7 	bl	800ba14 <__i2b>
 800b226:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b228:	4604      	mov	r4, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 81da 	beq.w	800b5e4 <_dtoa_r+0xa74>
 800b230:	461a      	mov	r2, r3
 800b232:	4601      	mov	r1, r0
 800b234:	4648      	mov	r0, r9
 800b236:	f000 fca5 	bl	800bb84 <__pow5mult>
 800b23a:	9b07      	ldr	r3, [sp, #28]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	4604      	mov	r4, r0
 800b240:	f300 80a0 	bgt.w	800b384 <_dtoa_r+0x814>
 800b244:	9b02      	ldr	r3, [sp, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	f040 8096 	bne.w	800b378 <_dtoa_r+0x808>
 800b24c:	9b03      	ldr	r3, [sp, #12]
 800b24e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b252:	2a00      	cmp	r2, #0
 800b254:	f040 8092 	bne.w	800b37c <_dtoa_r+0x80c>
 800b258:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b25c:	0d12      	lsrs	r2, r2, #20
 800b25e:	0512      	lsls	r2, r2, #20
 800b260:	2a00      	cmp	r2, #0
 800b262:	f000 808d 	beq.w	800b380 <_dtoa_r+0x810>
 800b266:	9b04      	ldr	r3, [sp, #16]
 800b268:	3301      	adds	r3, #1
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	9b06      	ldr	r3, [sp, #24]
 800b26e:	3301      	adds	r3, #1
 800b270:	9306      	str	r3, [sp, #24]
 800b272:	2301      	movs	r3, #1
 800b274:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 81b9 	beq.w	800b5f0 <_dtoa_r+0xa80>
 800b27e:	6922      	ldr	r2, [r4, #16]
 800b280:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b284:	6910      	ldr	r0, [r2, #16]
 800b286:	f000 fb79 	bl	800b97c <__hi0bits>
 800b28a:	f1c0 0020 	rsb	r0, r0, #32
 800b28e:	9b06      	ldr	r3, [sp, #24]
 800b290:	4418      	add	r0, r3
 800b292:	f010 001f 	ands.w	r0, r0, #31
 800b296:	f000 8081 	beq.w	800b39c <_dtoa_r+0x82c>
 800b29a:	f1c0 0220 	rsb	r2, r0, #32
 800b29e:	2a04      	cmp	r2, #4
 800b2a0:	dd73      	ble.n	800b38a <_dtoa_r+0x81a>
 800b2a2:	9b04      	ldr	r3, [sp, #16]
 800b2a4:	f1c0 001c 	rsb	r0, r0, #28
 800b2a8:	4403      	add	r3, r0
 800b2aa:	9304      	str	r3, [sp, #16]
 800b2ac:	9b06      	ldr	r3, [sp, #24]
 800b2ae:	4406      	add	r6, r0
 800b2b0:	4403      	add	r3, r0
 800b2b2:	9306      	str	r3, [sp, #24]
 800b2b4:	9b04      	ldr	r3, [sp, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	dd05      	ble.n	800b2c6 <_dtoa_r+0x756>
 800b2ba:	9901      	ldr	r1, [sp, #4]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	4648      	mov	r0, r9
 800b2c0:	f000 fcba 	bl	800bc38 <__lshift>
 800b2c4:	9001      	str	r0, [sp, #4]
 800b2c6:	9b06      	ldr	r3, [sp, #24]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	dd05      	ble.n	800b2d8 <_dtoa_r+0x768>
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	4648      	mov	r0, r9
 800b2d2:	f000 fcb1 	bl	800bc38 <__lshift>
 800b2d6:	4604      	mov	r4, r0
 800b2d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d060      	beq.n	800b3a0 <_dtoa_r+0x830>
 800b2de:	9801      	ldr	r0, [sp, #4]
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	f000 fd15 	bl	800bd10 <__mcmp>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	da5a      	bge.n	800b3a0 <_dtoa_r+0x830>
 800b2ea:	f108 33ff 	add.w	r3, r8, #4294967295
 800b2ee:	9305      	str	r3, [sp, #20]
 800b2f0:	9901      	ldr	r1, [sp, #4]
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	220a      	movs	r2, #10
 800b2f6:	4648      	mov	r0, r9
 800b2f8:	f000 fafa 	bl	800b8f0 <__multadd>
 800b2fc:	9b08      	ldr	r3, [sp, #32]
 800b2fe:	9001      	str	r0, [sp, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	f000 8177 	beq.w	800b5f4 <_dtoa_r+0xa84>
 800b306:	4629      	mov	r1, r5
 800b308:	2300      	movs	r3, #0
 800b30a:	220a      	movs	r2, #10
 800b30c:	4648      	mov	r0, r9
 800b30e:	f000 faef 	bl	800b8f0 <__multadd>
 800b312:	f1bb 0f00 	cmp.w	fp, #0
 800b316:	4605      	mov	r5, r0
 800b318:	dc6e      	bgt.n	800b3f8 <_dtoa_r+0x888>
 800b31a:	9b07      	ldr	r3, [sp, #28]
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	dc48      	bgt.n	800b3b2 <_dtoa_r+0x842>
 800b320:	e06a      	b.n	800b3f8 <_dtoa_r+0x888>
 800b322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b324:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b328:	e739      	b.n	800b19e <_dtoa_r+0x62e>
 800b32a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800b32e:	42a3      	cmp	r3, r4
 800b330:	db07      	blt.n	800b342 <_dtoa_r+0x7d2>
 800b332:	f1ba 0f00 	cmp.w	sl, #0
 800b336:	eba3 0404 	sub.w	r4, r3, r4
 800b33a:	db0b      	blt.n	800b354 <_dtoa_r+0x7e4>
 800b33c:	9e04      	ldr	r6, [sp, #16]
 800b33e:	4652      	mov	r2, sl
 800b340:	e72f      	b.n	800b1a2 <_dtoa_r+0x632>
 800b342:	1ae2      	subs	r2, r4, r3
 800b344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b346:	9e04      	ldr	r6, [sp, #16]
 800b348:	4413      	add	r3, r2
 800b34a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b34c:	4652      	mov	r2, sl
 800b34e:	4623      	mov	r3, r4
 800b350:	2400      	movs	r4, #0
 800b352:	e726      	b.n	800b1a2 <_dtoa_r+0x632>
 800b354:	9a04      	ldr	r2, [sp, #16]
 800b356:	eba2 060a 	sub.w	r6, r2, sl
 800b35a:	2200      	movs	r2, #0
 800b35c:	e721      	b.n	800b1a2 <_dtoa_r+0x632>
 800b35e:	9e04      	ldr	r6, [sp, #16]
 800b360:	9d08      	ldr	r5, [sp, #32]
 800b362:	461c      	mov	r4, r3
 800b364:	e72a      	b.n	800b1bc <_dtoa_r+0x64c>
 800b366:	9a01      	ldr	r2, [sp, #4]
 800b368:	9205      	str	r2, [sp, #20]
 800b36a:	e752      	b.n	800b212 <_dtoa_r+0x6a2>
 800b36c:	9901      	ldr	r1, [sp, #4]
 800b36e:	461a      	mov	r2, r3
 800b370:	e751      	b.n	800b216 <_dtoa_r+0x6a6>
 800b372:	9b05      	ldr	r3, [sp, #20]
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	e752      	b.n	800b21e <_dtoa_r+0x6ae>
 800b378:	2300      	movs	r3, #0
 800b37a:	e77b      	b.n	800b274 <_dtoa_r+0x704>
 800b37c:	9b02      	ldr	r3, [sp, #8]
 800b37e:	e779      	b.n	800b274 <_dtoa_r+0x704>
 800b380:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b382:	e778      	b.n	800b276 <_dtoa_r+0x706>
 800b384:	2300      	movs	r3, #0
 800b386:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b388:	e779      	b.n	800b27e <_dtoa_r+0x70e>
 800b38a:	d093      	beq.n	800b2b4 <_dtoa_r+0x744>
 800b38c:	9b04      	ldr	r3, [sp, #16]
 800b38e:	321c      	adds	r2, #28
 800b390:	4413      	add	r3, r2
 800b392:	9304      	str	r3, [sp, #16]
 800b394:	9b06      	ldr	r3, [sp, #24]
 800b396:	4416      	add	r6, r2
 800b398:	4413      	add	r3, r2
 800b39a:	e78a      	b.n	800b2b2 <_dtoa_r+0x742>
 800b39c:	4602      	mov	r2, r0
 800b39e:	e7f5      	b.n	800b38c <_dtoa_r+0x81c>
 800b3a0:	f1ba 0f00 	cmp.w	sl, #0
 800b3a4:	f8cd 8014 	str.w	r8, [sp, #20]
 800b3a8:	46d3      	mov	fp, sl
 800b3aa:	dc21      	bgt.n	800b3f0 <_dtoa_r+0x880>
 800b3ac:	9b07      	ldr	r3, [sp, #28]
 800b3ae:	2b02      	cmp	r3, #2
 800b3b0:	dd1e      	ble.n	800b3f0 <_dtoa_r+0x880>
 800b3b2:	f1bb 0f00 	cmp.w	fp, #0
 800b3b6:	f47f addc 	bne.w	800af72 <_dtoa_r+0x402>
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	465b      	mov	r3, fp
 800b3be:	2205      	movs	r2, #5
 800b3c0:	4648      	mov	r0, r9
 800b3c2:	f000 fa95 	bl	800b8f0 <__multadd>
 800b3c6:	4601      	mov	r1, r0
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	9801      	ldr	r0, [sp, #4]
 800b3cc:	f000 fca0 	bl	800bd10 <__mcmp>
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	f77f adce 	ble.w	800af72 <_dtoa_r+0x402>
 800b3d6:	463e      	mov	r6, r7
 800b3d8:	2331      	movs	r3, #49	@ 0x31
 800b3da:	f806 3b01 	strb.w	r3, [r6], #1
 800b3de:	9b05      	ldr	r3, [sp, #20]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	9305      	str	r3, [sp, #20]
 800b3e4:	e5c9      	b.n	800af7a <_dtoa_r+0x40a>
 800b3e6:	f8cd 8014 	str.w	r8, [sp, #20]
 800b3ea:	4654      	mov	r4, sl
 800b3ec:	4625      	mov	r5, r4
 800b3ee:	e7f2      	b.n	800b3d6 <_dtoa_r+0x866>
 800b3f0:	9b08      	ldr	r3, [sp, #32]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 8102 	beq.w	800b5fc <_dtoa_r+0xa8c>
 800b3f8:	2e00      	cmp	r6, #0
 800b3fa:	dd05      	ble.n	800b408 <_dtoa_r+0x898>
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	4632      	mov	r2, r6
 800b400:	4648      	mov	r0, r9
 800b402:	f000 fc19 	bl	800bc38 <__lshift>
 800b406:	4605      	mov	r5, r0
 800b408:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d058      	beq.n	800b4c0 <_dtoa_r+0x950>
 800b40e:	6869      	ldr	r1, [r5, #4]
 800b410:	4648      	mov	r0, r9
 800b412:	f000 fa0b 	bl	800b82c <_Balloc>
 800b416:	4606      	mov	r6, r0
 800b418:	b928      	cbnz	r0, 800b426 <_dtoa_r+0x8b6>
 800b41a:	4b82      	ldr	r3, [pc, #520]	@ (800b624 <_dtoa_r+0xab4>)
 800b41c:	4602      	mov	r2, r0
 800b41e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b422:	f7ff bbbe 	b.w	800aba2 <_dtoa_r+0x32>
 800b426:	692a      	ldr	r2, [r5, #16]
 800b428:	3202      	adds	r2, #2
 800b42a:	0092      	lsls	r2, r2, #2
 800b42c:	f105 010c 	add.w	r1, r5, #12
 800b430:	300c      	adds	r0, #12
 800b432:	f001 f807 	bl	800c444 <memcpy>
 800b436:	2201      	movs	r2, #1
 800b438:	4631      	mov	r1, r6
 800b43a:	4648      	mov	r0, r9
 800b43c:	f000 fbfc 	bl	800bc38 <__lshift>
 800b440:	1c7b      	adds	r3, r7, #1
 800b442:	9304      	str	r3, [sp, #16]
 800b444:	eb07 030b 	add.w	r3, r7, fp
 800b448:	9309      	str	r3, [sp, #36]	@ 0x24
 800b44a:	9b02      	ldr	r3, [sp, #8]
 800b44c:	f003 0301 	and.w	r3, r3, #1
 800b450:	46a8      	mov	r8, r5
 800b452:	9308      	str	r3, [sp, #32]
 800b454:	4605      	mov	r5, r0
 800b456:	9b04      	ldr	r3, [sp, #16]
 800b458:	9801      	ldr	r0, [sp, #4]
 800b45a:	4621      	mov	r1, r4
 800b45c:	f103 3bff 	add.w	fp, r3, #4294967295
 800b460:	f7ff fafb 	bl	800aa5a <quorem>
 800b464:	4641      	mov	r1, r8
 800b466:	9002      	str	r0, [sp, #8]
 800b468:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b46c:	9801      	ldr	r0, [sp, #4]
 800b46e:	f000 fc4f 	bl	800bd10 <__mcmp>
 800b472:	462a      	mov	r2, r5
 800b474:	9006      	str	r0, [sp, #24]
 800b476:	4621      	mov	r1, r4
 800b478:	4648      	mov	r0, r9
 800b47a:	f000 fc65 	bl	800bd48 <__mdiff>
 800b47e:	68c2      	ldr	r2, [r0, #12]
 800b480:	4606      	mov	r6, r0
 800b482:	b9fa      	cbnz	r2, 800b4c4 <_dtoa_r+0x954>
 800b484:	4601      	mov	r1, r0
 800b486:	9801      	ldr	r0, [sp, #4]
 800b488:	f000 fc42 	bl	800bd10 <__mcmp>
 800b48c:	4602      	mov	r2, r0
 800b48e:	4631      	mov	r1, r6
 800b490:	4648      	mov	r0, r9
 800b492:	920a      	str	r2, [sp, #40]	@ 0x28
 800b494:	f000 fa0a 	bl	800b8ac <_Bfree>
 800b498:	9b07      	ldr	r3, [sp, #28]
 800b49a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b49c:	9e04      	ldr	r6, [sp, #16]
 800b49e:	ea42 0103 	orr.w	r1, r2, r3
 800b4a2:	9b08      	ldr	r3, [sp, #32]
 800b4a4:	4319      	orrs	r1, r3
 800b4a6:	d10f      	bne.n	800b4c8 <_dtoa_r+0x958>
 800b4a8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b4ac:	d028      	beq.n	800b500 <_dtoa_r+0x990>
 800b4ae:	9b06      	ldr	r3, [sp, #24]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dd02      	ble.n	800b4ba <_dtoa_r+0x94a>
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800b4ba:	f88b a000 	strb.w	sl, [fp]
 800b4be:	e55e      	b.n	800af7e <_dtoa_r+0x40e>
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	e7bd      	b.n	800b440 <_dtoa_r+0x8d0>
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	e7e2      	b.n	800b48e <_dtoa_r+0x91e>
 800b4c8:	9b06      	ldr	r3, [sp, #24]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	db04      	blt.n	800b4d8 <_dtoa_r+0x968>
 800b4ce:	9907      	ldr	r1, [sp, #28]
 800b4d0:	430b      	orrs	r3, r1
 800b4d2:	9908      	ldr	r1, [sp, #32]
 800b4d4:	430b      	orrs	r3, r1
 800b4d6:	d120      	bne.n	800b51a <_dtoa_r+0x9aa>
 800b4d8:	2a00      	cmp	r2, #0
 800b4da:	ddee      	ble.n	800b4ba <_dtoa_r+0x94a>
 800b4dc:	9901      	ldr	r1, [sp, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	4648      	mov	r0, r9
 800b4e2:	f000 fba9 	bl	800bc38 <__lshift>
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	9001      	str	r0, [sp, #4]
 800b4ea:	f000 fc11 	bl	800bd10 <__mcmp>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	dc03      	bgt.n	800b4fa <_dtoa_r+0x98a>
 800b4f2:	d1e2      	bne.n	800b4ba <_dtoa_r+0x94a>
 800b4f4:	f01a 0f01 	tst.w	sl, #1
 800b4f8:	d0df      	beq.n	800b4ba <_dtoa_r+0x94a>
 800b4fa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b4fe:	d1d9      	bne.n	800b4b4 <_dtoa_r+0x944>
 800b500:	2339      	movs	r3, #57	@ 0x39
 800b502:	f88b 3000 	strb.w	r3, [fp]
 800b506:	4633      	mov	r3, r6
 800b508:	461e      	mov	r6, r3
 800b50a:	3b01      	subs	r3, #1
 800b50c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b510:	2a39      	cmp	r2, #57	@ 0x39
 800b512:	d052      	beq.n	800b5ba <_dtoa_r+0xa4a>
 800b514:	3201      	adds	r2, #1
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	e531      	b.n	800af7e <_dtoa_r+0x40e>
 800b51a:	2a00      	cmp	r2, #0
 800b51c:	dd07      	ble.n	800b52e <_dtoa_r+0x9be>
 800b51e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b522:	d0ed      	beq.n	800b500 <_dtoa_r+0x990>
 800b524:	f10a 0301 	add.w	r3, sl, #1
 800b528:	f88b 3000 	strb.w	r3, [fp]
 800b52c:	e527      	b.n	800af7e <_dtoa_r+0x40e>
 800b52e:	9b04      	ldr	r3, [sp, #16]
 800b530:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b532:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b536:	4293      	cmp	r3, r2
 800b538:	d029      	beq.n	800b58e <_dtoa_r+0xa1e>
 800b53a:	9901      	ldr	r1, [sp, #4]
 800b53c:	2300      	movs	r3, #0
 800b53e:	220a      	movs	r2, #10
 800b540:	4648      	mov	r0, r9
 800b542:	f000 f9d5 	bl	800b8f0 <__multadd>
 800b546:	45a8      	cmp	r8, r5
 800b548:	9001      	str	r0, [sp, #4]
 800b54a:	f04f 0300 	mov.w	r3, #0
 800b54e:	f04f 020a 	mov.w	r2, #10
 800b552:	4641      	mov	r1, r8
 800b554:	4648      	mov	r0, r9
 800b556:	d107      	bne.n	800b568 <_dtoa_r+0x9f8>
 800b558:	f000 f9ca 	bl	800b8f0 <__multadd>
 800b55c:	4680      	mov	r8, r0
 800b55e:	4605      	mov	r5, r0
 800b560:	9b04      	ldr	r3, [sp, #16]
 800b562:	3301      	adds	r3, #1
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	e776      	b.n	800b456 <_dtoa_r+0x8e6>
 800b568:	f000 f9c2 	bl	800b8f0 <__multadd>
 800b56c:	4629      	mov	r1, r5
 800b56e:	4680      	mov	r8, r0
 800b570:	2300      	movs	r3, #0
 800b572:	220a      	movs	r2, #10
 800b574:	4648      	mov	r0, r9
 800b576:	f000 f9bb 	bl	800b8f0 <__multadd>
 800b57a:	4605      	mov	r5, r0
 800b57c:	e7f0      	b.n	800b560 <_dtoa_r+0x9f0>
 800b57e:	f1bb 0f00 	cmp.w	fp, #0
 800b582:	bfcc      	ite	gt
 800b584:	465e      	movgt	r6, fp
 800b586:	2601      	movle	r6, #1
 800b588:	443e      	add	r6, r7
 800b58a:	f04f 0800 	mov.w	r8, #0
 800b58e:	9901      	ldr	r1, [sp, #4]
 800b590:	2201      	movs	r2, #1
 800b592:	4648      	mov	r0, r9
 800b594:	f000 fb50 	bl	800bc38 <__lshift>
 800b598:	4621      	mov	r1, r4
 800b59a:	9001      	str	r0, [sp, #4]
 800b59c:	f000 fbb8 	bl	800bd10 <__mcmp>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	dcb0      	bgt.n	800b506 <_dtoa_r+0x996>
 800b5a4:	d102      	bne.n	800b5ac <_dtoa_r+0xa3c>
 800b5a6:	f01a 0f01 	tst.w	sl, #1
 800b5aa:	d1ac      	bne.n	800b506 <_dtoa_r+0x996>
 800b5ac:	4633      	mov	r3, r6
 800b5ae:	461e      	mov	r6, r3
 800b5b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5b4:	2a30      	cmp	r2, #48	@ 0x30
 800b5b6:	d0fa      	beq.n	800b5ae <_dtoa_r+0xa3e>
 800b5b8:	e4e1      	b.n	800af7e <_dtoa_r+0x40e>
 800b5ba:	429f      	cmp	r7, r3
 800b5bc:	d1a4      	bne.n	800b508 <_dtoa_r+0x998>
 800b5be:	9b05      	ldr	r3, [sp, #20]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	9305      	str	r3, [sp, #20]
 800b5c4:	2331      	movs	r3, #49	@ 0x31
 800b5c6:	703b      	strb	r3, [r7, #0]
 800b5c8:	e4d9      	b.n	800af7e <_dtoa_r+0x40e>
 800b5ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b5cc:	4f16      	ldr	r7, [pc, #88]	@ (800b628 <_dtoa_r+0xab8>)
 800b5ce:	b11b      	cbz	r3, 800b5d8 <_dtoa_r+0xa68>
 800b5d0:	f107 0308 	add.w	r3, r7, #8
 800b5d4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	4638      	mov	r0, r7
 800b5da:	b011      	add	sp, #68	@ 0x44
 800b5dc:	ecbd 8b02 	vpop	{d8}
 800b5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e4:	9b07      	ldr	r3, [sp, #28]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	f77f ae2c 	ble.w	800b244 <_dtoa_r+0x6d4>
 800b5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5f0:	2001      	movs	r0, #1
 800b5f2:	e64c      	b.n	800b28e <_dtoa_r+0x71e>
 800b5f4:	f1bb 0f00 	cmp.w	fp, #0
 800b5f8:	f77f aed8 	ble.w	800b3ac <_dtoa_r+0x83c>
 800b5fc:	463e      	mov	r6, r7
 800b5fe:	9801      	ldr	r0, [sp, #4]
 800b600:	4621      	mov	r1, r4
 800b602:	f7ff fa2a 	bl	800aa5a <quorem>
 800b606:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b60a:	f806 ab01 	strb.w	sl, [r6], #1
 800b60e:	1bf2      	subs	r2, r6, r7
 800b610:	4593      	cmp	fp, r2
 800b612:	ddb4      	ble.n	800b57e <_dtoa_r+0xa0e>
 800b614:	9901      	ldr	r1, [sp, #4]
 800b616:	2300      	movs	r3, #0
 800b618:	220a      	movs	r2, #10
 800b61a:	4648      	mov	r0, r9
 800b61c:	f000 f968 	bl	800b8f0 <__multadd>
 800b620:	9001      	str	r0, [sp, #4]
 800b622:	e7ec      	b.n	800b5fe <_dtoa_r+0xa8e>
 800b624:	0800d8e8 	.word	0x0800d8e8
 800b628:	0800d86c 	.word	0x0800d86c

0800b62c <_free_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4605      	mov	r5, r0
 800b630:	2900      	cmp	r1, #0
 800b632:	d041      	beq.n	800b6b8 <_free_r+0x8c>
 800b634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b638:	1f0c      	subs	r4, r1, #4
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	bfb8      	it	lt
 800b63e:	18e4      	addlt	r4, r4, r3
 800b640:	f000 f8e8 	bl	800b814 <__malloc_lock>
 800b644:	4a1d      	ldr	r2, [pc, #116]	@ (800b6bc <_free_r+0x90>)
 800b646:	6813      	ldr	r3, [r2, #0]
 800b648:	b933      	cbnz	r3, 800b658 <_free_r+0x2c>
 800b64a:	6063      	str	r3, [r4, #4]
 800b64c:	6014      	str	r4, [r2, #0]
 800b64e:	4628      	mov	r0, r5
 800b650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b654:	f000 b8e4 	b.w	800b820 <__malloc_unlock>
 800b658:	42a3      	cmp	r3, r4
 800b65a:	d908      	bls.n	800b66e <_free_r+0x42>
 800b65c:	6820      	ldr	r0, [r4, #0]
 800b65e:	1821      	adds	r1, r4, r0
 800b660:	428b      	cmp	r3, r1
 800b662:	bf01      	itttt	eq
 800b664:	6819      	ldreq	r1, [r3, #0]
 800b666:	685b      	ldreq	r3, [r3, #4]
 800b668:	1809      	addeq	r1, r1, r0
 800b66a:	6021      	streq	r1, [r4, #0]
 800b66c:	e7ed      	b.n	800b64a <_free_r+0x1e>
 800b66e:	461a      	mov	r2, r3
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	b10b      	cbz	r3, 800b678 <_free_r+0x4c>
 800b674:	42a3      	cmp	r3, r4
 800b676:	d9fa      	bls.n	800b66e <_free_r+0x42>
 800b678:	6811      	ldr	r1, [r2, #0]
 800b67a:	1850      	adds	r0, r2, r1
 800b67c:	42a0      	cmp	r0, r4
 800b67e:	d10b      	bne.n	800b698 <_free_r+0x6c>
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	4401      	add	r1, r0
 800b684:	1850      	adds	r0, r2, r1
 800b686:	4283      	cmp	r3, r0
 800b688:	6011      	str	r1, [r2, #0]
 800b68a:	d1e0      	bne.n	800b64e <_free_r+0x22>
 800b68c:	6818      	ldr	r0, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	6053      	str	r3, [r2, #4]
 800b692:	4408      	add	r0, r1
 800b694:	6010      	str	r0, [r2, #0]
 800b696:	e7da      	b.n	800b64e <_free_r+0x22>
 800b698:	d902      	bls.n	800b6a0 <_free_r+0x74>
 800b69a:	230c      	movs	r3, #12
 800b69c:	602b      	str	r3, [r5, #0]
 800b69e:	e7d6      	b.n	800b64e <_free_r+0x22>
 800b6a0:	6820      	ldr	r0, [r4, #0]
 800b6a2:	1821      	adds	r1, r4, r0
 800b6a4:	428b      	cmp	r3, r1
 800b6a6:	bf04      	itt	eq
 800b6a8:	6819      	ldreq	r1, [r3, #0]
 800b6aa:	685b      	ldreq	r3, [r3, #4]
 800b6ac:	6063      	str	r3, [r4, #4]
 800b6ae:	bf04      	itt	eq
 800b6b0:	1809      	addeq	r1, r1, r0
 800b6b2:	6021      	streq	r1, [r4, #0]
 800b6b4:	6054      	str	r4, [r2, #4]
 800b6b6:	e7ca      	b.n	800b64e <_free_r+0x22>
 800b6b8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ba:	bf00      	nop
 800b6bc:	2400087c 	.word	0x2400087c

0800b6c0 <malloc>:
 800b6c0:	4b02      	ldr	r3, [pc, #8]	@ (800b6cc <malloc+0xc>)
 800b6c2:	4601      	mov	r1, r0
 800b6c4:	6818      	ldr	r0, [r3, #0]
 800b6c6:	f000 b825 	b.w	800b714 <_malloc_r>
 800b6ca:	bf00      	nop
 800b6cc:	24000024 	.word	0x24000024

0800b6d0 <sbrk_aligned>:
 800b6d0:	b570      	push	{r4, r5, r6, lr}
 800b6d2:	4e0f      	ldr	r6, [pc, #60]	@ (800b710 <sbrk_aligned+0x40>)
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	6831      	ldr	r1, [r6, #0]
 800b6d8:	4605      	mov	r5, r0
 800b6da:	b911      	cbnz	r1, 800b6e2 <sbrk_aligned+0x12>
 800b6dc:	f000 fea2 	bl	800c424 <_sbrk_r>
 800b6e0:	6030      	str	r0, [r6, #0]
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	4628      	mov	r0, r5
 800b6e6:	f000 fe9d 	bl	800c424 <_sbrk_r>
 800b6ea:	1c43      	adds	r3, r0, #1
 800b6ec:	d103      	bne.n	800b6f6 <sbrk_aligned+0x26>
 800b6ee:	f04f 34ff 	mov.w	r4, #4294967295
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	bd70      	pop	{r4, r5, r6, pc}
 800b6f6:	1cc4      	adds	r4, r0, #3
 800b6f8:	f024 0403 	bic.w	r4, r4, #3
 800b6fc:	42a0      	cmp	r0, r4
 800b6fe:	d0f8      	beq.n	800b6f2 <sbrk_aligned+0x22>
 800b700:	1a21      	subs	r1, r4, r0
 800b702:	4628      	mov	r0, r5
 800b704:	f000 fe8e 	bl	800c424 <_sbrk_r>
 800b708:	3001      	adds	r0, #1
 800b70a:	d1f2      	bne.n	800b6f2 <sbrk_aligned+0x22>
 800b70c:	e7ef      	b.n	800b6ee <sbrk_aligned+0x1e>
 800b70e:	bf00      	nop
 800b710:	24000878 	.word	0x24000878

0800b714 <_malloc_r>:
 800b714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b718:	1ccd      	adds	r5, r1, #3
 800b71a:	f025 0503 	bic.w	r5, r5, #3
 800b71e:	3508      	adds	r5, #8
 800b720:	2d0c      	cmp	r5, #12
 800b722:	bf38      	it	cc
 800b724:	250c      	movcc	r5, #12
 800b726:	2d00      	cmp	r5, #0
 800b728:	4606      	mov	r6, r0
 800b72a:	db01      	blt.n	800b730 <_malloc_r+0x1c>
 800b72c:	42a9      	cmp	r1, r5
 800b72e:	d904      	bls.n	800b73a <_malloc_r+0x26>
 800b730:	230c      	movs	r3, #12
 800b732:	6033      	str	r3, [r6, #0]
 800b734:	2000      	movs	r0, #0
 800b736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b810 <_malloc_r+0xfc>
 800b73e:	f000 f869 	bl	800b814 <__malloc_lock>
 800b742:	f8d8 3000 	ldr.w	r3, [r8]
 800b746:	461c      	mov	r4, r3
 800b748:	bb44      	cbnz	r4, 800b79c <_malloc_r+0x88>
 800b74a:	4629      	mov	r1, r5
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7ff ffbf 	bl	800b6d0 <sbrk_aligned>
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	4604      	mov	r4, r0
 800b756:	d158      	bne.n	800b80a <_malloc_r+0xf6>
 800b758:	f8d8 4000 	ldr.w	r4, [r8]
 800b75c:	4627      	mov	r7, r4
 800b75e:	2f00      	cmp	r7, #0
 800b760:	d143      	bne.n	800b7ea <_malloc_r+0xd6>
 800b762:	2c00      	cmp	r4, #0
 800b764:	d04b      	beq.n	800b7fe <_malloc_r+0xea>
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	4639      	mov	r1, r7
 800b76a:	4630      	mov	r0, r6
 800b76c:	eb04 0903 	add.w	r9, r4, r3
 800b770:	f000 fe58 	bl	800c424 <_sbrk_r>
 800b774:	4581      	cmp	r9, r0
 800b776:	d142      	bne.n	800b7fe <_malloc_r+0xea>
 800b778:	6821      	ldr	r1, [r4, #0]
 800b77a:	1a6d      	subs	r5, r5, r1
 800b77c:	4629      	mov	r1, r5
 800b77e:	4630      	mov	r0, r6
 800b780:	f7ff ffa6 	bl	800b6d0 <sbrk_aligned>
 800b784:	3001      	adds	r0, #1
 800b786:	d03a      	beq.n	800b7fe <_malloc_r+0xea>
 800b788:	6823      	ldr	r3, [r4, #0]
 800b78a:	442b      	add	r3, r5
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	f8d8 3000 	ldr.w	r3, [r8]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	bb62      	cbnz	r2, 800b7f0 <_malloc_r+0xdc>
 800b796:	f8c8 7000 	str.w	r7, [r8]
 800b79a:	e00f      	b.n	800b7bc <_malloc_r+0xa8>
 800b79c:	6822      	ldr	r2, [r4, #0]
 800b79e:	1b52      	subs	r2, r2, r5
 800b7a0:	d420      	bmi.n	800b7e4 <_malloc_r+0xd0>
 800b7a2:	2a0b      	cmp	r2, #11
 800b7a4:	d917      	bls.n	800b7d6 <_malloc_r+0xc2>
 800b7a6:	1961      	adds	r1, r4, r5
 800b7a8:	42a3      	cmp	r3, r4
 800b7aa:	6025      	str	r5, [r4, #0]
 800b7ac:	bf18      	it	ne
 800b7ae:	6059      	strne	r1, [r3, #4]
 800b7b0:	6863      	ldr	r3, [r4, #4]
 800b7b2:	bf08      	it	eq
 800b7b4:	f8c8 1000 	streq.w	r1, [r8]
 800b7b8:	5162      	str	r2, [r4, r5]
 800b7ba:	604b      	str	r3, [r1, #4]
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f000 f82f 	bl	800b820 <__malloc_unlock>
 800b7c2:	f104 000b 	add.w	r0, r4, #11
 800b7c6:	1d23      	adds	r3, r4, #4
 800b7c8:	f020 0007 	bic.w	r0, r0, #7
 800b7cc:	1ac2      	subs	r2, r0, r3
 800b7ce:	bf1c      	itt	ne
 800b7d0:	1a1b      	subne	r3, r3, r0
 800b7d2:	50a3      	strne	r3, [r4, r2]
 800b7d4:	e7af      	b.n	800b736 <_malloc_r+0x22>
 800b7d6:	6862      	ldr	r2, [r4, #4]
 800b7d8:	42a3      	cmp	r3, r4
 800b7da:	bf0c      	ite	eq
 800b7dc:	f8c8 2000 	streq.w	r2, [r8]
 800b7e0:	605a      	strne	r2, [r3, #4]
 800b7e2:	e7eb      	b.n	800b7bc <_malloc_r+0xa8>
 800b7e4:	4623      	mov	r3, r4
 800b7e6:	6864      	ldr	r4, [r4, #4]
 800b7e8:	e7ae      	b.n	800b748 <_malloc_r+0x34>
 800b7ea:	463c      	mov	r4, r7
 800b7ec:	687f      	ldr	r7, [r7, #4]
 800b7ee:	e7b6      	b.n	800b75e <_malloc_r+0x4a>
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	d1fb      	bne.n	800b7f0 <_malloc_r+0xdc>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	6053      	str	r3, [r2, #4]
 800b7fc:	e7de      	b.n	800b7bc <_malloc_r+0xa8>
 800b7fe:	230c      	movs	r3, #12
 800b800:	6033      	str	r3, [r6, #0]
 800b802:	4630      	mov	r0, r6
 800b804:	f000 f80c 	bl	800b820 <__malloc_unlock>
 800b808:	e794      	b.n	800b734 <_malloc_r+0x20>
 800b80a:	6005      	str	r5, [r0, #0]
 800b80c:	e7d6      	b.n	800b7bc <_malloc_r+0xa8>
 800b80e:	bf00      	nop
 800b810:	2400087c 	.word	0x2400087c

0800b814 <__malloc_lock>:
 800b814:	4801      	ldr	r0, [pc, #4]	@ (800b81c <__malloc_lock+0x8>)
 800b816:	f7ff b91e 	b.w	800aa56 <__retarget_lock_acquire_recursive>
 800b81a:	bf00      	nop
 800b81c:	24000874 	.word	0x24000874

0800b820 <__malloc_unlock>:
 800b820:	4801      	ldr	r0, [pc, #4]	@ (800b828 <__malloc_unlock+0x8>)
 800b822:	f7ff b919 	b.w	800aa58 <__retarget_lock_release_recursive>
 800b826:	bf00      	nop
 800b828:	24000874 	.word	0x24000874

0800b82c <_Balloc>:
 800b82c:	b570      	push	{r4, r5, r6, lr}
 800b82e:	69c6      	ldr	r6, [r0, #28]
 800b830:	4604      	mov	r4, r0
 800b832:	460d      	mov	r5, r1
 800b834:	b976      	cbnz	r6, 800b854 <_Balloc+0x28>
 800b836:	2010      	movs	r0, #16
 800b838:	f7ff ff42 	bl	800b6c0 <malloc>
 800b83c:	4602      	mov	r2, r0
 800b83e:	61e0      	str	r0, [r4, #28]
 800b840:	b920      	cbnz	r0, 800b84c <_Balloc+0x20>
 800b842:	4b18      	ldr	r3, [pc, #96]	@ (800b8a4 <_Balloc+0x78>)
 800b844:	4818      	ldr	r0, [pc, #96]	@ (800b8a8 <_Balloc+0x7c>)
 800b846:	216b      	movs	r1, #107	@ 0x6b
 800b848:	f000 fe0a 	bl	800c460 <__assert_func>
 800b84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b850:	6006      	str	r6, [r0, #0]
 800b852:	60c6      	str	r6, [r0, #12]
 800b854:	69e6      	ldr	r6, [r4, #28]
 800b856:	68f3      	ldr	r3, [r6, #12]
 800b858:	b183      	cbz	r3, 800b87c <_Balloc+0x50>
 800b85a:	69e3      	ldr	r3, [r4, #28]
 800b85c:	68db      	ldr	r3, [r3, #12]
 800b85e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b862:	b9b8      	cbnz	r0, 800b894 <_Balloc+0x68>
 800b864:	2101      	movs	r1, #1
 800b866:	fa01 f605 	lsl.w	r6, r1, r5
 800b86a:	1d72      	adds	r2, r6, #5
 800b86c:	0092      	lsls	r2, r2, #2
 800b86e:	4620      	mov	r0, r4
 800b870:	f000 fe14 	bl	800c49c <_calloc_r>
 800b874:	b160      	cbz	r0, 800b890 <_Balloc+0x64>
 800b876:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b87a:	e00e      	b.n	800b89a <_Balloc+0x6e>
 800b87c:	2221      	movs	r2, #33	@ 0x21
 800b87e:	2104      	movs	r1, #4
 800b880:	4620      	mov	r0, r4
 800b882:	f000 fe0b 	bl	800c49c <_calloc_r>
 800b886:	69e3      	ldr	r3, [r4, #28]
 800b888:	60f0      	str	r0, [r6, #12]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1e4      	bne.n	800b85a <_Balloc+0x2e>
 800b890:	2000      	movs	r0, #0
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	6802      	ldr	r2, [r0, #0]
 800b896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b89a:	2300      	movs	r3, #0
 800b89c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8a0:	e7f7      	b.n	800b892 <_Balloc+0x66>
 800b8a2:	bf00      	nop
 800b8a4:	0800d879 	.word	0x0800d879
 800b8a8:	0800d8f9 	.word	0x0800d8f9

0800b8ac <_Bfree>:
 800b8ac:	b570      	push	{r4, r5, r6, lr}
 800b8ae:	69c6      	ldr	r6, [r0, #28]
 800b8b0:	4605      	mov	r5, r0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	b976      	cbnz	r6, 800b8d4 <_Bfree+0x28>
 800b8b6:	2010      	movs	r0, #16
 800b8b8:	f7ff ff02 	bl	800b6c0 <malloc>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	61e8      	str	r0, [r5, #28]
 800b8c0:	b920      	cbnz	r0, 800b8cc <_Bfree+0x20>
 800b8c2:	4b09      	ldr	r3, [pc, #36]	@ (800b8e8 <_Bfree+0x3c>)
 800b8c4:	4809      	ldr	r0, [pc, #36]	@ (800b8ec <_Bfree+0x40>)
 800b8c6:	218f      	movs	r1, #143	@ 0x8f
 800b8c8:	f000 fdca 	bl	800c460 <__assert_func>
 800b8cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8d0:	6006      	str	r6, [r0, #0]
 800b8d2:	60c6      	str	r6, [r0, #12]
 800b8d4:	b13c      	cbz	r4, 800b8e6 <_Bfree+0x3a>
 800b8d6:	69eb      	ldr	r3, [r5, #28]
 800b8d8:	6862      	ldr	r2, [r4, #4]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8e0:	6021      	str	r1, [r4, #0]
 800b8e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8e6:	bd70      	pop	{r4, r5, r6, pc}
 800b8e8:	0800d879 	.word	0x0800d879
 800b8ec:	0800d8f9 	.word	0x0800d8f9

0800b8f0 <__multadd>:
 800b8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f4:	690d      	ldr	r5, [r1, #16]
 800b8f6:	4607      	mov	r7, r0
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	461e      	mov	r6, r3
 800b8fc:	f101 0c14 	add.w	ip, r1, #20
 800b900:	2000      	movs	r0, #0
 800b902:	f8dc 3000 	ldr.w	r3, [ip]
 800b906:	b299      	uxth	r1, r3
 800b908:	fb02 6101 	mla	r1, r2, r1, r6
 800b90c:	0c1e      	lsrs	r6, r3, #16
 800b90e:	0c0b      	lsrs	r3, r1, #16
 800b910:	fb02 3306 	mla	r3, r2, r6, r3
 800b914:	b289      	uxth	r1, r1
 800b916:	3001      	adds	r0, #1
 800b918:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b91c:	4285      	cmp	r5, r0
 800b91e:	f84c 1b04 	str.w	r1, [ip], #4
 800b922:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b926:	dcec      	bgt.n	800b902 <__multadd+0x12>
 800b928:	b30e      	cbz	r6, 800b96e <__multadd+0x7e>
 800b92a:	68a3      	ldr	r3, [r4, #8]
 800b92c:	42ab      	cmp	r3, r5
 800b92e:	dc19      	bgt.n	800b964 <__multadd+0x74>
 800b930:	6861      	ldr	r1, [r4, #4]
 800b932:	4638      	mov	r0, r7
 800b934:	3101      	adds	r1, #1
 800b936:	f7ff ff79 	bl	800b82c <_Balloc>
 800b93a:	4680      	mov	r8, r0
 800b93c:	b928      	cbnz	r0, 800b94a <__multadd+0x5a>
 800b93e:	4602      	mov	r2, r0
 800b940:	4b0c      	ldr	r3, [pc, #48]	@ (800b974 <__multadd+0x84>)
 800b942:	480d      	ldr	r0, [pc, #52]	@ (800b978 <__multadd+0x88>)
 800b944:	21ba      	movs	r1, #186	@ 0xba
 800b946:	f000 fd8b 	bl	800c460 <__assert_func>
 800b94a:	6922      	ldr	r2, [r4, #16]
 800b94c:	3202      	adds	r2, #2
 800b94e:	f104 010c 	add.w	r1, r4, #12
 800b952:	0092      	lsls	r2, r2, #2
 800b954:	300c      	adds	r0, #12
 800b956:	f000 fd75 	bl	800c444 <memcpy>
 800b95a:	4621      	mov	r1, r4
 800b95c:	4638      	mov	r0, r7
 800b95e:	f7ff ffa5 	bl	800b8ac <_Bfree>
 800b962:	4644      	mov	r4, r8
 800b964:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b968:	3501      	adds	r5, #1
 800b96a:	615e      	str	r6, [r3, #20]
 800b96c:	6125      	str	r5, [r4, #16]
 800b96e:	4620      	mov	r0, r4
 800b970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b974:	0800d8e8 	.word	0x0800d8e8
 800b978:	0800d8f9 	.word	0x0800d8f9

0800b97c <__hi0bits>:
 800b97c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b980:	4603      	mov	r3, r0
 800b982:	bf36      	itet	cc
 800b984:	0403      	lslcc	r3, r0, #16
 800b986:	2000      	movcs	r0, #0
 800b988:	2010      	movcc	r0, #16
 800b98a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b98e:	bf3c      	itt	cc
 800b990:	021b      	lslcc	r3, r3, #8
 800b992:	3008      	addcc	r0, #8
 800b994:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b998:	bf3c      	itt	cc
 800b99a:	011b      	lslcc	r3, r3, #4
 800b99c:	3004      	addcc	r0, #4
 800b99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9a2:	bf3c      	itt	cc
 800b9a4:	009b      	lslcc	r3, r3, #2
 800b9a6:	3002      	addcc	r0, #2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	db05      	blt.n	800b9b8 <__hi0bits+0x3c>
 800b9ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9b0:	f100 0001 	add.w	r0, r0, #1
 800b9b4:	bf08      	it	eq
 800b9b6:	2020      	moveq	r0, #32
 800b9b8:	4770      	bx	lr

0800b9ba <__lo0bits>:
 800b9ba:	6803      	ldr	r3, [r0, #0]
 800b9bc:	4602      	mov	r2, r0
 800b9be:	f013 0007 	ands.w	r0, r3, #7
 800b9c2:	d00b      	beq.n	800b9dc <__lo0bits+0x22>
 800b9c4:	07d9      	lsls	r1, r3, #31
 800b9c6:	d421      	bmi.n	800ba0c <__lo0bits+0x52>
 800b9c8:	0798      	lsls	r0, r3, #30
 800b9ca:	bf49      	itett	mi
 800b9cc:	085b      	lsrmi	r3, r3, #1
 800b9ce:	089b      	lsrpl	r3, r3, #2
 800b9d0:	2001      	movmi	r0, #1
 800b9d2:	6013      	strmi	r3, [r2, #0]
 800b9d4:	bf5c      	itt	pl
 800b9d6:	6013      	strpl	r3, [r2, #0]
 800b9d8:	2002      	movpl	r0, #2
 800b9da:	4770      	bx	lr
 800b9dc:	b299      	uxth	r1, r3
 800b9de:	b909      	cbnz	r1, 800b9e4 <__lo0bits+0x2a>
 800b9e0:	0c1b      	lsrs	r3, r3, #16
 800b9e2:	2010      	movs	r0, #16
 800b9e4:	b2d9      	uxtb	r1, r3
 800b9e6:	b909      	cbnz	r1, 800b9ec <__lo0bits+0x32>
 800b9e8:	3008      	adds	r0, #8
 800b9ea:	0a1b      	lsrs	r3, r3, #8
 800b9ec:	0719      	lsls	r1, r3, #28
 800b9ee:	bf04      	itt	eq
 800b9f0:	091b      	lsreq	r3, r3, #4
 800b9f2:	3004      	addeq	r0, #4
 800b9f4:	0799      	lsls	r1, r3, #30
 800b9f6:	bf04      	itt	eq
 800b9f8:	089b      	lsreq	r3, r3, #2
 800b9fa:	3002      	addeq	r0, #2
 800b9fc:	07d9      	lsls	r1, r3, #31
 800b9fe:	d403      	bmi.n	800ba08 <__lo0bits+0x4e>
 800ba00:	085b      	lsrs	r3, r3, #1
 800ba02:	f100 0001 	add.w	r0, r0, #1
 800ba06:	d003      	beq.n	800ba10 <__lo0bits+0x56>
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	4770      	bx	lr
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	4770      	bx	lr
 800ba10:	2020      	movs	r0, #32
 800ba12:	4770      	bx	lr

0800ba14 <__i2b>:
 800ba14:	b510      	push	{r4, lr}
 800ba16:	460c      	mov	r4, r1
 800ba18:	2101      	movs	r1, #1
 800ba1a:	f7ff ff07 	bl	800b82c <_Balloc>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	b928      	cbnz	r0, 800ba2e <__i2b+0x1a>
 800ba22:	4b05      	ldr	r3, [pc, #20]	@ (800ba38 <__i2b+0x24>)
 800ba24:	4805      	ldr	r0, [pc, #20]	@ (800ba3c <__i2b+0x28>)
 800ba26:	f240 1145 	movw	r1, #325	@ 0x145
 800ba2a:	f000 fd19 	bl	800c460 <__assert_func>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	6144      	str	r4, [r0, #20]
 800ba32:	6103      	str	r3, [r0, #16]
 800ba34:	bd10      	pop	{r4, pc}
 800ba36:	bf00      	nop
 800ba38:	0800d8e8 	.word	0x0800d8e8
 800ba3c:	0800d8f9 	.word	0x0800d8f9

0800ba40 <__multiply>:
 800ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba44:	4617      	mov	r7, r2
 800ba46:	690a      	ldr	r2, [r1, #16]
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	bfa8      	it	ge
 800ba4e:	463b      	movge	r3, r7
 800ba50:	4689      	mov	r9, r1
 800ba52:	bfa4      	itt	ge
 800ba54:	460f      	movge	r7, r1
 800ba56:	4699      	movge	r9, r3
 800ba58:	693d      	ldr	r5, [r7, #16]
 800ba5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	6879      	ldr	r1, [r7, #4]
 800ba62:	eb05 060a 	add.w	r6, r5, sl
 800ba66:	42b3      	cmp	r3, r6
 800ba68:	b085      	sub	sp, #20
 800ba6a:	bfb8      	it	lt
 800ba6c:	3101      	addlt	r1, #1
 800ba6e:	f7ff fedd 	bl	800b82c <_Balloc>
 800ba72:	b930      	cbnz	r0, 800ba82 <__multiply+0x42>
 800ba74:	4602      	mov	r2, r0
 800ba76:	4b41      	ldr	r3, [pc, #260]	@ (800bb7c <__multiply+0x13c>)
 800ba78:	4841      	ldr	r0, [pc, #260]	@ (800bb80 <__multiply+0x140>)
 800ba7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba7e:	f000 fcef 	bl	800c460 <__assert_func>
 800ba82:	f100 0414 	add.w	r4, r0, #20
 800ba86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ba8a:	4623      	mov	r3, r4
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4573      	cmp	r3, lr
 800ba90:	d320      	bcc.n	800bad4 <__multiply+0x94>
 800ba92:	f107 0814 	add.w	r8, r7, #20
 800ba96:	f109 0114 	add.w	r1, r9, #20
 800ba9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ba9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800baa2:	9302      	str	r3, [sp, #8]
 800baa4:	1beb      	subs	r3, r5, r7
 800baa6:	3b15      	subs	r3, #21
 800baa8:	f023 0303 	bic.w	r3, r3, #3
 800baac:	3304      	adds	r3, #4
 800baae:	3715      	adds	r7, #21
 800bab0:	42bd      	cmp	r5, r7
 800bab2:	bf38      	it	cc
 800bab4:	2304      	movcc	r3, #4
 800bab6:	9301      	str	r3, [sp, #4]
 800bab8:	9b02      	ldr	r3, [sp, #8]
 800baba:	9103      	str	r1, [sp, #12]
 800babc:	428b      	cmp	r3, r1
 800babe:	d80c      	bhi.n	800bada <__multiply+0x9a>
 800bac0:	2e00      	cmp	r6, #0
 800bac2:	dd03      	ble.n	800bacc <__multiply+0x8c>
 800bac4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d055      	beq.n	800bb78 <__multiply+0x138>
 800bacc:	6106      	str	r6, [r0, #16]
 800bace:	b005      	add	sp, #20
 800bad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad4:	f843 2b04 	str.w	r2, [r3], #4
 800bad8:	e7d9      	b.n	800ba8e <__multiply+0x4e>
 800bada:	f8b1 a000 	ldrh.w	sl, [r1]
 800bade:	f1ba 0f00 	cmp.w	sl, #0
 800bae2:	d01f      	beq.n	800bb24 <__multiply+0xe4>
 800bae4:	46c4      	mov	ip, r8
 800bae6:	46a1      	mov	r9, r4
 800bae8:	2700      	movs	r7, #0
 800baea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800baee:	f8d9 3000 	ldr.w	r3, [r9]
 800baf2:	fa1f fb82 	uxth.w	fp, r2
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	fb0a 330b 	mla	r3, sl, fp, r3
 800bafc:	443b      	add	r3, r7
 800bafe:	f8d9 7000 	ldr.w	r7, [r9]
 800bb02:	0c12      	lsrs	r2, r2, #16
 800bb04:	0c3f      	lsrs	r7, r7, #16
 800bb06:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb14:	4565      	cmp	r5, ip
 800bb16:	f849 3b04 	str.w	r3, [r9], #4
 800bb1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bb1e:	d8e4      	bhi.n	800baea <__multiply+0xaa>
 800bb20:	9b01      	ldr	r3, [sp, #4]
 800bb22:	50e7      	str	r7, [r4, r3]
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb2a:	3104      	adds	r1, #4
 800bb2c:	f1b9 0f00 	cmp.w	r9, #0
 800bb30:	d020      	beq.n	800bb74 <__multiply+0x134>
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	4647      	mov	r7, r8
 800bb36:	46a4      	mov	ip, r4
 800bb38:	f04f 0a00 	mov.w	sl, #0
 800bb3c:	f8b7 b000 	ldrh.w	fp, [r7]
 800bb40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bb44:	fb09 220b 	mla	r2, r9, fp, r2
 800bb48:	4452      	add	r2, sl
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb50:	f84c 3b04 	str.w	r3, [ip], #4
 800bb54:	f857 3b04 	ldr.w	r3, [r7], #4
 800bb58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb5c:	f8bc 3000 	ldrh.w	r3, [ip]
 800bb60:	fb09 330a 	mla	r3, r9, sl, r3
 800bb64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bb68:	42bd      	cmp	r5, r7
 800bb6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb6e:	d8e5      	bhi.n	800bb3c <__multiply+0xfc>
 800bb70:	9a01      	ldr	r2, [sp, #4]
 800bb72:	50a3      	str	r3, [r4, r2]
 800bb74:	3404      	adds	r4, #4
 800bb76:	e79f      	b.n	800bab8 <__multiply+0x78>
 800bb78:	3e01      	subs	r6, #1
 800bb7a:	e7a1      	b.n	800bac0 <__multiply+0x80>
 800bb7c:	0800d8e8 	.word	0x0800d8e8
 800bb80:	0800d8f9 	.word	0x0800d8f9

0800bb84 <__pow5mult>:
 800bb84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb88:	4615      	mov	r5, r2
 800bb8a:	f012 0203 	ands.w	r2, r2, #3
 800bb8e:	4607      	mov	r7, r0
 800bb90:	460e      	mov	r6, r1
 800bb92:	d007      	beq.n	800bba4 <__pow5mult+0x20>
 800bb94:	4c25      	ldr	r4, [pc, #148]	@ (800bc2c <__pow5mult+0xa8>)
 800bb96:	3a01      	subs	r2, #1
 800bb98:	2300      	movs	r3, #0
 800bb9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb9e:	f7ff fea7 	bl	800b8f0 <__multadd>
 800bba2:	4606      	mov	r6, r0
 800bba4:	10ad      	asrs	r5, r5, #2
 800bba6:	d03d      	beq.n	800bc24 <__pow5mult+0xa0>
 800bba8:	69fc      	ldr	r4, [r7, #28]
 800bbaa:	b97c      	cbnz	r4, 800bbcc <__pow5mult+0x48>
 800bbac:	2010      	movs	r0, #16
 800bbae:	f7ff fd87 	bl	800b6c0 <malloc>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	61f8      	str	r0, [r7, #28]
 800bbb6:	b928      	cbnz	r0, 800bbc4 <__pow5mult+0x40>
 800bbb8:	4b1d      	ldr	r3, [pc, #116]	@ (800bc30 <__pow5mult+0xac>)
 800bbba:	481e      	ldr	r0, [pc, #120]	@ (800bc34 <__pow5mult+0xb0>)
 800bbbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bbc0:	f000 fc4e 	bl	800c460 <__assert_func>
 800bbc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbc8:	6004      	str	r4, [r0, #0]
 800bbca:	60c4      	str	r4, [r0, #12]
 800bbcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bbd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbd4:	b94c      	cbnz	r4, 800bbea <__pow5mult+0x66>
 800bbd6:	f240 2171 	movw	r1, #625	@ 0x271
 800bbda:	4638      	mov	r0, r7
 800bbdc:	f7ff ff1a 	bl	800ba14 <__i2b>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbe6:	4604      	mov	r4, r0
 800bbe8:	6003      	str	r3, [r0, #0]
 800bbea:	f04f 0900 	mov.w	r9, #0
 800bbee:	07eb      	lsls	r3, r5, #31
 800bbf0:	d50a      	bpl.n	800bc08 <__pow5mult+0x84>
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	4638      	mov	r0, r7
 800bbf8:	f7ff ff22 	bl	800ba40 <__multiply>
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	4680      	mov	r8, r0
 800bc00:	4638      	mov	r0, r7
 800bc02:	f7ff fe53 	bl	800b8ac <_Bfree>
 800bc06:	4646      	mov	r6, r8
 800bc08:	106d      	asrs	r5, r5, #1
 800bc0a:	d00b      	beq.n	800bc24 <__pow5mult+0xa0>
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	b938      	cbnz	r0, 800bc20 <__pow5mult+0x9c>
 800bc10:	4622      	mov	r2, r4
 800bc12:	4621      	mov	r1, r4
 800bc14:	4638      	mov	r0, r7
 800bc16:	f7ff ff13 	bl	800ba40 <__multiply>
 800bc1a:	6020      	str	r0, [r4, #0]
 800bc1c:	f8c0 9000 	str.w	r9, [r0]
 800bc20:	4604      	mov	r4, r0
 800bc22:	e7e4      	b.n	800bbee <__pow5mult+0x6a>
 800bc24:	4630      	mov	r0, r6
 800bc26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2a:	bf00      	nop
 800bc2c:	0800d9ac 	.word	0x0800d9ac
 800bc30:	0800d879 	.word	0x0800d879
 800bc34:	0800d8f9 	.word	0x0800d8f9

0800bc38 <__lshift>:
 800bc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	6849      	ldr	r1, [r1, #4]
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	4607      	mov	r7, r0
 800bc4a:	4691      	mov	r9, r2
 800bc4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc50:	f108 0601 	add.w	r6, r8, #1
 800bc54:	42b3      	cmp	r3, r6
 800bc56:	db0b      	blt.n	800bc70 <__lshift+0x38>
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff fde7 	bl	800b82c <_Balloc>
 800bc5e:	4605      	mov	r5, r0
 800bc60:	b948      	cbnz	r0, 800bc76 <__lshift+0x3e>
 800bc62:	4602      	mov	r2, r0
 800bc64:	4b28      	ldr	r3, [pc, #160]	@ (800bd08 <__lshift+0xd0>)
 800bc66:	4829      	ldr	r0, [pc, #164]	@ (800bd0c <__lshift+0xd4>)
 800bc68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc6c:	f000 fbf8 	bl	800c460 <__assert_func>
 800bc70:	3101      	adds	r1, #1
 800bc72:	005b      	lsls	r3, r3, #1
 800bc74:	e7ee      	b.n	800bc54 <__lshift+0x1c>
 800bc76:	2300      	movs	r3, #0
 800bc78:	f100 0114 	add.w	r1, r0, #20
 800bc7c:	f100 0210 	add.w	r2, r0, #16
 800bc80:	4618      	mov	r0, r3
 800bc82:	4553      	cmp	r3, sl
 800bc84:	db33      	blt.n	800bcee <__lshift+0xb6>
 800bc86:	6920      	ldr	r0, [r4, #16]
 800bc88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc8c:	f104 0314 	add.w	r3, r4, #20
 800bc90:	f019 091f 	ands.w	r9, r9, #31
 800bc94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc9c:	d02b      	beq.n	800bcf6 <__lshift+0xbe>
 800bc9e:	f1c9 0e20 	rsb	lr, r9, #32
 800bca2:	468a      	mov	sl, r1
 800bca4:	2200      	movs	r2, #0
 800bca6:	6818      	ldr	r0, [r3, #0]
 800bca8:	fa00 f009 	lsl.w	r0, r0, r9
 800bcac:	4310      	orrs	r0, r2
 800bcae:	f84a 0b04 	str.w	r0, [sl], #4
 800bcb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcb6:	459c      	cmp	ip, r3
 800bcb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcbc:	d8f3      	bhi.n	800bca6 <__lshift+0x6e>
 800bcbe:	ebac 0304 	sub.w	r3, ip, r4
 800bcc2:	3b15      	subs	r3, #21
 800bcc4:	f023 0303 	bic.w	r3, r3, #3
 800bcc8:	3304      	adds	r3, #4
 800bcca:	f104 0015 	add.w	r0, r4, #21
 800bcce:	4560      	cmp	r0, ip
 800bcd0:	bf88      	it	hi
 800bcd2:	2304      	movhi	r3, #4
 800bcd4:	50ca      	str	r2, [r1, r3]
 800bcd6:	b10a      	cbz	r2, 800bcdc <__lshift+0xa4>
 800bcd8:	f108 0602 	add.w	r6, r8, #2
 800bcdc:	3e01      	subs	r6, #1
 800bcde:	4638      	mov	r0, r7
 800bce0:	612e      	str	r6, [r5, #16]
 800bce2:	4621      	mov	r1, r4
 800bce4:	f7ff fde2 	bl	800b8ac <_Bfree>
 800bce8:	4628      	mov	r0, r5
 800bcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcee:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	e7c5      	b.n	800bc82 <__lshift+0x4a>
 800bcf6:	3904      	subs	r1, #4
 800bcf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcfc:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd00:	459c      	cmp	ip, r3
 800bd02:	d8f9      	bhi.n	800bcf8 <__lshift+0xc0>
 800bd04:	e7ea      	b.n	800bcdc <__lshift+0xa4>
 800bd06:	bf00      	nop
 800bd08:	0800d8e8 	.word	0x0800d8e8
 800bd0c:	0800d8f9 	.word	0x0800d8f9

0800bd10 <__mcmp>:
 800bd10:	690a      	ldr	r2, [r1, #16]
 800bd12:	4603      	mov	r3, r0
 800bd14:	6900      	ldr	r0, [r0, #16]
 800bd16:	1a80      	subs	r0, r0, r2
 800bd18:	b530      	push	{r4, r5, lr}
 800bd1a:	d10e      	bne.n	800bd3a <__mcmp+0x2a>
 800bd1c:	3314      	adds	r3, #20
 800bd1e:	3114      	adds	r1, #20
 800bd20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd30:	4295      	cmp	r5, r2
 800bd32:	d003      	beq.n	800bd3c <__mcmp+0x2c>
 800bd34:	d205      	bcs.n	800bd42 <__mcmp+0x32>
 800bd36:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3a:	bd30      	pop	{r4, r5, pc}
 800bd3c:	42a3      	cmp	r3, r4
 800bd3e:	d3f3      	bcc.n	800bd28 <__mcmp+0x18>
 800bd40:	e7fb      	b.n	800bd3a <__mcmp+0x2a>
 800bd42:	2001      	movs	r0, #1
 800bd44:	e7f9      	b.n	800bd3a <__mcmp+0x2a>
	...

0800bd48 <__mdiff>:
 800bd48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	4689      	mov	r9, r1
 800bd4e:	4606      	mov	r6, r0
 800bd50:	4611      	mov	r1, r2
 800bd52:	4648      	mov	r0, r9
 800bd54:	4614      	mov	r4, r2
 800bd56:	f7ff ffdb 	bl	800bd10 <__mcmp>
 800bd5a:	1e05      	subs	r5, r0, #0
 800bd5c:	d112      	bne.n	800bd84 <__mdiff+0x3c>
 800bd5e:	4629      	mov	r1, r5
 800bd60:	4630      	mov	r0, r6
 800bd62:	f7ff fd63 	bl	800b82c <_Balloc>
 800bd66:	4602      	mov	r2, r0
 800bd68:	b928      	cbnz	r0, 800bd76 <__mdiff+0x2e>
 800bd6a:	4b3f      	ldr	r3, [pc, #252]	@ (800be68 <__mdiff+0x120>)
 800bd6c:	f240 2137 	movw	r1, #567	@ 0x237
 800bd70:	483e      	ldr	r0, [pc, #248]	@ (800be6c <__mdiff+0x124>)
 800bd72:	f000 fb75 	bl	800c460 <__assert_func>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	b003      	add	sp, #12
 800bd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd84:	bfbc      	itt	lt
 800bd86:	464b      	movlt	r3, r9
 800bd88:	46a1      	movlt	r9, r4
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd90:	bfba      	itte	lt
 800bd92:	461c      	movlt	r4, r3
 800bd94:	2501      	movlt	r5, #1
 800bd96:	2500      	movge	r5, #0
 800bd98:	f7ff fd48 	bl	800b82c <_Balloc>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	b918      	cbnz	r0, 800bda8 <__mdiff+0x60>
 800bda0:	4b31      	ldr	r3, [pc, #196]	@ (800be68 <__mdiff+0x120>)
 800bda2:	f240 2145 	movw	r1, #581	@ 0x245
 800bda6:	e7e3      	b.n	800bd70 <__mdiff+0x28>
 800bda8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bdac:	6926      	ldr	r6, [r4, #16]
 800bdae:	60c5      	str	r5, [r0, #12]
 800bdb0:	f109 0310 	add.w	r3, r9, #16
 800bdb4:	f109 0514 	add.w	r5, r9, #20
 800bdb8:	f104 0e14 	add.w	lr, r4, #20
 800bdbc:	f100 0b14 	add.w	fp, r0, #20
 800bdc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bdc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	46d9      	mov	r9, fp
 800bdcc:	f04f 0c00 	mov.w	ip, #0
 800bdd0:	9b01      	ldr	r3, [sp, #4]
 800bdd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bdd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bdda:	9301      	str	r3, [sp, #4]
 800bddc:	fa1f f38a 	uxth.w	r3, sl
 800bde0:	4619      	mov	r1, r3
 800bde2:	b283      	uxth	r3, r0
 800bde4:	1acb      	subs	r3, r1, r3
 800bde6:	0c00      	lsrs	r0, r0, #16
 800bde8:	4463      	add	r3, ip
 800bdea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bdee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdf8:	4576      	cmp	r6, lr
 800bdfa:	f849 3b04 	str.w	r3, [r9], #4
 800bdfe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be02:	d8e5      	bhi.n	800bdd0 <__mdiff+0x88>
 800be04:	1b33      	subs	r3, r6, r4
 800be06:	3b15      	subs	r3, #21
 800be08:	f023 0303 	bic.w	r3, r3, #3
 800be0c:	3415      	adds	r4, #21
 800be0e:	3304      	adds	r3, #4
 800be10:	42a6      	cmp	r6, r4
 800be12:	bf38      	it	cc
 800be14:	2304      	movcc	r3, #4
 800be16:	441d      	add	r5, r3
 800be18:	445b      	add	r3, fp
 800be1a:	461e      	mov	r6, r3
 800be1c:	462c      	mov	r4, r5
 800be1e:	4544      	cmp	r4, r8
 800be20:	d30e      	bcc.n	800be40 <__mdiff+0xf8>
 800be22:	f108 0103 	add.w	r1, r8, #3
 800be26:	1b49      	subs	r1, r1, r5
 800be28:	f021 0103 	bic.w	r1, r1, #3
 800be2c:	3d03      	subs	r5, #3
 800be2e:	45a8      	cmp	r8, r5
 800be30:	bf38      	it	cc
 800be32:	2100      	movcc	r1, #0
 800be34:	440b      	add	r3, r1
 800be36:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be3a:	b191      	cbz	r1, 800be62 <__mdiff+0x11a>
 800be3c:	6117      	str	r7, [r2, #16]
 800be3e:	e79d      	b.n	800bd7c <__mdiff+0x34>
 800be40:	f854 1b04 	ldr.w	r1, [r4], #4
 800be44:	46e6      	mov	lr, ip
 800be46:	0c08      	lsrs	r0, r1, #16
 800be48:	fa1c fc81 	uxtah	ip, ip, r1
 800be4c:	4471      	add	r1, lr
 800be4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be52:	b289      	uxth	r1, r1
 800be54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be58:	f846 1b04 	str.w	r1, [r6], #4
 800be5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be60:	e7dd      	b.n	800be1e <__mdiff+0xd6>
 800be62:	3f01      	subs	r7, #1
 800be64:	e7e7      	b.n	800be36 <__mdiff+0xee>
 800be66:	bf00      	nop
 800be68:	0800d8e8 	.word	0x0800d8e8
 800be6c:	0800d8f9 	.word	0x0800d8f9

0800be70 <__d2b>:
 800be70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be74:	460f      	mov	r7, r1
 800be76:	2101      	movs	r1, #1
 800be78:	ec59 8b10 	vmov	r8, r9, d0
 800be7c:	4616      	mov	r6, r2
 800be7e:	f7ff fcd5 	bl	800b82c <_Balloc>
 800be82:	4604      	mov	r4, r0
 800be84:	b930      	cbnz	r0, 800be94 <__d2b+0x24>
 800be86:	4602      	mov	r2, r0
 800be88:	4b23      	ldr	r3, [pc, #140]	@ (800bf18 <__d2b+0xa8>)
 800be8a:	4824      	ldr	r0, [pc, #144]	@ (800bf1c <__d2b+0xac>)
 800be8c:	f240 310f 	movw	r1, #783	@ 0x30f
 800be90:	f000 fae6 	bl	800c460 <__assert_func>
 800be94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be9c:	b10d      	cbz	r5, 800bea2 <__d2b+0x32>
 800be9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bea2:	9301      	str	r3, [sp, #4]
 800bea4:	f1b8 0300 	subs.w	r3, r8, #0
 800bea8:	d023      	beq.n	800bef2 <__d2b+0x82>
 800beaa:	4668      	mov	r0, sp
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	f7ff fd84 	bl	800b9ba <__lo0bits>
 800beb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800beb6:	b1d0      	cbz	r0, 800beee <__d2b+0x7e>
 800beb8:	f1c0 0320 	rsb	r3, r0, #32
 800bebc:	fa02 f303 	lsl.w	r3, r2, r3
 800bec0:	430b      	orrs	r3, r1
 800bec2:	40c2      	lsrs	r2, r0
 800bec4:	6163      	str	r3, [r4, #20]
 800bec6:	9201      	str	r2, [sp, #4]
 800bec8:	9b01      	ldr	r3, [sp, #4]
 800beca:	61a3      	str	r3, [r4, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	bf0c      	ite	eq
 800bed0:	2201      	moveq	r2, #1
 800bed2:	2202      	movne	r2, #2
 800bed4:	6122      	str	r2, [r4, #16]
 800bed6:	b1a5      	cbz	r5, 800bf02 <__d2b+0x92>
 800bed8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bedc:	4405      	add	r5, r0
 800bede:	603d      	str	r5, [r7, #0]
 800bee0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bee4:	6030      	str	r0, [r6, #0]
 800bee6:	4620      	mov	r0, r4
 800bee8:	b003      	add	sp, #12
 800beea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beee:	6161      	str	r1, [r4, #20]
 800bef0:	e7ea      	b.n	800bec8 <__d2b+0x58>
 800bef2:	a801      	add	r0, sp, #4
 800bef4:	f7ff fd61 	bl	800b9ba <__lo0bits>
 800bef8:	9b01      	ldr	r3, [sp, #4]
 800befa:	6163      	str	r3, [r4, #20]
 800befc:	3020      	adds	r0, #32
 800befe:	2201      	movs	r2, #1
 800bf00:	e7e8      	b.n	800bed4 <__d2b+0x64>
 800bf02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf0a:	6038      	str	r0, [r7, #0]
 800bf0c:	6918      	ldr	r0, [r3, #16]
 800bf0e:	f7ff fd35 	bl	800b97c <__hi0bits>
 800bf12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf16:	e7e5      	b.n	800bee4 <__d2b+0x74>
 800bf18:	0800d8e8 	.word	0x0800d8e8
 800bf1c:	0800d8f9 	.word	0x0800d8f9

0800bf20 <__sfputc_r>:
 800bf20:	6893      	ldr	r3, [r2, #8]
 800bf22:	3b01      	subs	r3, #1
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	b410      	push	{r4}
 800bf28:	6093      	str	r3, [r2, #8]
 800bf2a:	da08      	bge.n	800bf3e <__sfputc_r+0x1e>
 800bf2c:	6994      	ldr	r4, [r2, #24]
 800bf2e:	42a3      	cmp	r3, r4
 800bf30:	db01      	blt.n	800bf36 <__sfputc_r+0x16>
 800bf32:	290a      	cmp	r1, #10
 800bf34:	d103      	bne.n	800bf3e <__sfputc_r+0x1e>
 800bf36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf3a:	f000 b9df 	b.w	800c2fc <__swbuf_r>
 800bf3e:	6813      	ldr	r3, [r2, #0]
 800bf40:	1c58      	adds	r0, r3, #1
 800bf42:	6010      	str	r0, [r2, #0]
 800bf44:	7019      	strb	r1, [r3, #0]
 800bf46:	4608      	mov	r0, r1
 800bf48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <__sfputs_r>:
 800bf4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf50:	4606      	mov	r6, r0
 800bf52:	460f      	mov	r7, r1
 800bf54:	4614      	mov	r4, r2
 800bf56:	18d5      	adds	r5, r2, r3
 800bf58:	42ac      	cmp	r4, r5
 800bf5a:	d101      	bne.n	800bf60 <__sfputs_r+0x12>
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	e007      	b.n	800bf70 <__sfputs_r+0x22>
 800bf60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf64:	463a      	mov	r2, r7
 800bf66:	4630      	mov	r0, r6
 800bf68:	f7ff ffda 	bl	800bf20 <__sfputc_r>
 800bf6c:	1c43      	adds	r3, r0, #1
 800bf6e:	d1f3      	bne.n	800bf58 <__sfputs_r+0xa>
 800bf70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf74 <_vfiprintf_r>:
 800bf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf78:	460d      	mov	r5, r1
 800bf7a:	b09d      	sub	sp, #116	@ 0x74
 800bf7c:	4614      	mov	r4, r2
 800bf7e:	4698      	mov	r8, r3
 800bf80:	4606      	mov	r6, r0
 800bf82:	b118      	cbz	r0, 800bf8c <_vfiprintf_r+0x18>
 800bf84:	6a03      	ldr	r3, [r0, #32]
 800bf86:	b90b      	cbnz	r3, 800bf8c <_vfiprintf_r+0x18>
 800bf88:	f7fe fc5c 	bl	800a844 <__sinit>
 800bf8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf8e:	07d9      	lsls	r1, r3, #31
 800bf90:	d405      	bmi.n	800bf9e <_vfiprintf_r+0x2a>
 800bf92:	89ab      	ldrh	r3, [r5, #12]
 800bf94:	059a      	lsls	r2, r3, #22
 800bf96:	d402      	bmi.n	800bf9e <_vfiprintf_r+0x2a>
 800bf98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf9a:	f7fe fd5c 	bl	800aa56 <__retarget_lock_acquire_recursive>
 800bf9e:	89ab      	ldrh	r3, [r5, #12]
 800bfa0:	071b      	lsls	r3, r3, #28
 800bfa2:	d501      	bpl.n	800bfa8 <_vfiprintf_r+0x34>
 800bfa4:	692b      	ldr	r3, [r5, #16]
 800bfa6:	b99b      	cbnz	r3, 800bfd0 <_vfiprintf_r+0x5c>
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f000 f9e4 	bl	800c378 <__swsetup_r>
 800bfb0:	b170      	cbz	r0, 800bfd0 <_vfiprintf_r+0x5c>
 800bfb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfb4:	07dc      	lsls	r4, r3, #31
 800bfb6:	d504      	bpl.n	800bfc2 <_vfiprintf_r+0x4e>
 800bfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfbc:	b01d      	add	sp, #116	@ 0x74
 800bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc2:	89ab      	ldrh	r3, [r5, #12]
 800bfc4:	0598      	lsls	r0, r3, #22
 800bfc6:	d4f7      	bmi.n	800bfb8 <_vfiprintf_r+0x44>
 800bfc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfca:	f7fe fd45 	bl	800aa58 <__retarget_lock_release_recursive>
 800bfce:	e7f3      	b.n	800bfb8 <_vfiprintf_r+0x44>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfd4:	2320      	movs	r3, #32
 800bfd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfda:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfde:	2330      	movs	r3, #48	@ 0x30
 800bfe0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c190 <_vfiprintf_r+0x21c>
 800bfe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfe8:	f04f 0901 	mov.w	r9, #1
 800bfec:	4623      	mov	r3, r4
 800bfee:	469a      	mov	sl, r3
 800bff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bff4:	b10a      	cbz	r2, 800bffa <_vfiprintf_r+0x86>
 800bff6:	2a25      	cmp	r2, #37	@ 0x25
 800bff8:	d1f9      	bne.n	800bfee <_vfiprintf_r+0x7a>
 800bffa:	ebba 0b04 	subs.w	fp, sl, r4
 800bffe:	d00b      	beq.n	800c018 <_vfiprintf_r+0xa4>
 800c000:	465b      	mov	r3, fp
 800c002:	4622      	mov	r2, r4
 800c004:	4629      	mov	r1, r5
 800c006:	4630      	mov	r0, r6
 800c008:	f7ff ffa1 	bl	800bf4e <__sfputs_r>
 800c00c:	3001      	adds	r0, #1
 800c00e:	f000 80a7 	beq.w	800c160 <_vfiprintf_r+0x1ec>
 800c012:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c014:	445a      	add	r2, fp
 800c016:	9209      	str	r2, [sp, #36]	@ 0x24
 800c018:	f89a 3000 	ldrb.w	r3, [sl]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 809f 	beq.w	800c160 <_vfiprintf_r+0x1ec>
 800c022:	2300      	movs	r3, #0
 800c024:	f04f 32ff 	mov.w	r2, #4294967295
 800c028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c02c:	f10a 0a01 	add.w	sl, sl, #1
 800c030:	9304      	str	r3, [sp, #16]
 800c032:	9307      	str	r3, [sp, #28]
 800c034:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c038:	931a      	str	r3, [sp, #104]	@ 0x68
 800c03a:	4654      	mov	r4, sl
 800c03c:	2205      	movs	r2, #5
 800c03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c042:	4853      	ldr	r0, [pc, #332]	@ (800c190 <_vfiprintf_r+0x21c>)
 800c044:	f7f4 f94c 	bl	80002e0 <memchr>
 800c048:	9a04      	ldr	r2, [sp, #16]
 800c04a:	b9d8      	cbnz	r0, 800c084 <_vfiprintf_r+0x110>
 800c04c:	06d1      	lsls	r1, r2, #27
 800c04e:	bf44      	itt	mi
 800c050:	2320      	movmi	r3, #32
 800c052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c056:	0713      	lsls	r3, r2, #28
 800c058:	bf44      	itt	mi
 800c05a:	232b      	movmi	r3, #43	@ 0x2b
 800c05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c060:	f89a 3000 	ldrb.w	r3, [sl]
 800c064:	2b2a      	cmp	r3, #42	@ 0x2a
 800c066:	d015      	beq.n	800c094 <_vfiprintf_r+0x120>
 800c068:	9a07      	ldr	r2, [sp, #28]
 800c06a:	4654      	mov	r4, sl
 800c06c:	2000      	movs	r0, #0
 800c06e:	f04f 0c0a 	mov.w	ip, #10
 800c072:	4621      	mov	r1, r4
 800c074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c078:	3b30      	subs	r3, #48	@ 0x30
 800c07a:	2b09      	cmp	r3, #9
 800c07c:	d94b      	bls.n	800c116 <_vfiprintf_r+0x1a2>
 800c07e:	b1b0      	cbz	r0, 800c0ae <_vfiprintf_r+0x13a>
 800c080:	9207      	str	r2, [sp, #28]
 800c082:	e014      	b.n	800c0ae <_vfiprintf_r+0x13a>
 800c084:	eba0 0308 	sub.w	r3, r0, r8
 800c088:	fa09 f303 	lsl.w	r3, r9, r3
 800c08c:	4313      	orrs	r3, r2
 800c08e:	9304      	str	r3, [sp, #16]
 800c090:	46a2      	mov	sl, r4
 800c092:	e7d2      	b.n	800c03a <_vfiprintf_r+0xc6>
 800c094:	9b03      	ldr	r3, [sp, #12]
 800c096:	1d19      	adds	r1, r3, #4
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	9103      	str	r1, [sp, #12]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	bfbb      	ittet	lt
 800c0a0:	425b      	neglt	r3, r3
 800c0a2:	f042 0202 	orrlt.w	r2, r2, #2
 800c0a6:	9307      	strge	r3, [sp, #28]
 800c0a8:	9307      	strlt	r3, [sp, #28]
 800c0aa:	bfb8      	it	lt
 800c0ac:	9204      	strlt	r2, [sp, #16]
 800c0ae:	7823      	ldrb	r3, [r4, #0]
 800c0b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c0b2:	d10a      	bne.n	800c0ca <_vfiprintf_r+0x156>
 800c0b4:	7863      	ldrb	r3, [r4, #1]
 800c0b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0b8:	d132      	bne.n	800c120 <_vfiprintf_r+0x1ac>
 800c0ba:	9b03      	ldr	r3, [sp, #12]
 800c0bc:	1d1a      	adds	r2, r3, #4
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	9203      	str	r2, [sp, #12]
 800c0c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0c6:	3402      	adds	r4, #2
 800c0c8:	9305      	str	r3, [sp, #20]
 800c0ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c1a0 <_vfiprintf_r+0x22c>
 800c0ce:	7821      	ldrb	r1, [r4, #0]
 800c0d0:	2203      	movs	r2, #3
 800c0d2:	4650      	mov	r0, sl
 800c0d4:	f7f4 f904 	bl	80002e0 <memchr>
 800c0d8:	b138      	cbz	r0, 800c0ea <_vfiprintf_r+0x176>
 800c0da:	9b04      	ldr	r3, [sp, #16]
 800c0dc:	eba0 000a 	sub.w	r0, r0, sl
 800c0e0:	2240      	movs	r2, #64	@ 0x40
 800c0e2:	4082      	lsls	r2, r0
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	3401      	adds	r4, #1
 800c0e8:	9304      	str	r3, [sp, #16]
 800c0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ee:	4829      	ldr	r0, [pc, #164]	@ (800c194 <_vfiprintf_r+0x220>)
 800c0f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0f4:	2206      	movs	r2, #6
 800c0f6:	f7f4 f8f3 	bl	80002e0 <memchr>
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d03f      	beq.n	800c17e <_vfiprintf_r+0x20a>
 800c0fe:	4b26      	ldr	r3, [pc, #152]	@ (800c198 <_vfiprintf_r+0x224>)
 800c100:	bb1b      	cbnz	r3, 800c14a <_vfiprintf_r+0x1d6>
 800c102:	9b03      	ldr	r3, [sp, #12]
 800c104:	3307      	adds	r3, #7
 800c106:	f023 0307 	bic.w	r3, r3, #7
 800c10a:	3308      	adds	r3, #8
 800c10c:	9303      	str	r3, [sp, #12]
 800c10e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c110:	443b      	add	r3, r7
 800c112:	9309      	str	r3, [sp, #36]	@ 0x24
 800c114:	e76a      	b.n	800bfec <_vfiprintf_r+0x78>
 800c116:	fb0c 3202 	mla	r2, ip, r2, r3
 800c11a:	460c      	mov	r4, r1
 800c11c:	2001      	movs	r0, #1
 800c11e:	e7a8      	b.n	800c072 <_vfiprintf_r+0xfe>
 800c120:	2300      	movs	r3, #0
 800c122:	3401      	adds	r4, #1
 800c124:	9305      	str	r3, [sp, #20]
 800c126:	4619      	mov	r1, r3
 800c128:	f04f 0c0a 	mov.w	ip, #10
 800c12c:	4620      	mov	r0, r4
 800c12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c132:	3a30      	subs	r2, #48	@ 0x30
 800c134:	2a09      	cmp	r2, #9
 800c136:	d903      	bls.n	800c140 <_vfiprintf_r+0x1cc>
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d0c6      	beq.n	800c0ca <_vfiprintf_r+0x156>
 800c13c:	9105      	str	r1, [sp, #20]
 800c13e:	e7c4      	b.n	800c0ca <_vfiprintf_r+0x156>
 800c140:	fb0c 2101 	mla	r1, ip, r1, r2
 800c144:	4604      	mov	r4, r0
 800c146:	2301      	movs	r3, #1
 800c148:	e7f0      	b.n	800c12c <_vfiprintf_r+0x1b8>
 800c14a:	ab03      	add	r3, sp, #12
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	462a      	mov	r2, r5
 800c150:	4b12      	ldr	r3, [pc, #72]	@ (800c19c <_vfiprintf_r+0x228>)
 800c152:	a904      	add	r1, sp, #16
 800c154:	4630      	mov	r0, r6
 800c156:	f7fd ff43 	bl	8009fe0 <_printf_float>
 800c15a:	4607      	mov	r7, r0
 800c15c:	1c78      	adds	r0, r7, #1
 800c15e:	d1d6      	bne.n	800c10e <_vfiprintf_r+0x19a>
 800c160:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c162:	07d9      	lsls	r1, r3, #31
 800c164:	d405      	bmi.n	800c172 <_vfiprintf_r+0x1fe>
 800c166:	89ab      	ldrh	r3, [r5, #12]
 800c168:	059a      	lsls	r2, r3, #22
 800c16a:	d402      	bmi.n	800c172 <_vfiprintf_r+0x1fe>
 800c16c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c16e:	f7fe fc73 	bl	800aa58 <__retarget_lock_release_recursive>
 800c172:	89ab      	ldrh	r3, [r5, #12]
 800c174:	065b      	lsls	r3, r3, #25
 800c176:	f53f af1f 	bmi.w	800bfb8 <_vfiprintf_r+0x44>
 800c17a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c17c:	e71e      	b.n	800bfbc <_vfiprintf_r+0x48>
 800c17e:	ab03      	add	r3, sp, #12
 800c180:	9300      	str	r3, [sp, #0]
 800c182:	462a      	mov	r2, r5
 800c184:	4b05      	ldr	r3, [pc, #20]	@ (800c19c <_vfiprintf_r+0x228>)
 800c186:	a904      	add	r1, sp, #16
 800c188:	4630      	mov	r0, r6
 800c18a:	f7fe f9b1 	bl	800a4f0 <_printf_i>
 800c18e:	e7e4      	b.n	800c15a <_vfiprintf_r+0x1e6>
 800c190:	0800d952 	.word	0x0800d952
 800c194:	0800d95c 	.word	0x0800d95c
 800c198:	08009fe1 	.word	0x08009fe1
 800c19c:	0800bf4f 	.word	0x0800bf4f
 800c1a0:	0800d958 	.word	0x0800d958

0800c1a4 <__sflush_r>:
 800c1a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ac:	0716      	lsls	r6, r2, #28
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	d454      	bmi.n	800c25e <__sflush_r+0xba>
 800c1b4:	684b      	ldr	r3, [r1, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	dc02      	bgt.n	800c1c0 <__sflush_r+0x1c>
 800c1ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	dd48      	ble.n	800c252 <__sflush_r+0xae>
 800c1c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1c2:	2e00      	cmp	r6, #0
 800c1c4:	d045      	beq.n	800c252 <__sflush_r+0xae>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1cc:	682f      	ldr	r7, [r5, #0]
 800c1ce:	6a21      	ldr	r1, [r4, #32]
 800c1d0:	602b      	str	r3, [r5, #0]
 800c1d2:	d030      	beq.n	800c236 <__sflush_r+0x92>
 800c1d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	0759      	lsls	r1, r3, #29
 800c1da:	d505      	bpl.n	800c1e8 <__sflush_r+0x44>
 800c1dc:	6863      	ldr	r3, [r4, #4]
 800c1de:	1ad2      	subs	r2, r2, r3
 800c1e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c1e2:	b10b      	cbz	r3, 800c1e8 <__sflush_r+0x44>
 800c1e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c1e6:	1ad2      	subs	r2, r2, r3
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1ec:	6a21      	ldr	r1, [r4, #32]
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	47b0      	blx	r6
 800c1f2:	1c43      	adds	r3, r0, #1
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	d106      	bne.n	800c206 <__sflush_r+0x62>
 800c1f8:	6829      	ldr	r1, [r5, #0]
 800c1fa:	291d      	cmp	r1, #29
 800c1fc:	d82b      	bhi.n	800c256 <__sflush_r+0xb2>
 800c1fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c2a8 <__sflush_r+0x104>)
 800c200:	40ca      	lsrs	r2, r1
 800c202:	07d6      	lsls	r6, r2, #31
 800c204:	d527      	bpl.n	800c256 <__sflush_r+0xb2>
 800c206:	2200      	movs	r2, #0
 800c208:	6062      	str	r2, [r4, #4]
 800c20a:	04d9      	lsls	r1, r3, #19
 800c20c:	6922      	ldr	r2, [r4, #16]
 800c20e:	6022      	str	r2, [r4, #0]
 800c210:	d504      	bpl.n	800c21c <__sflush_r+0x78>
 800c212:	1c42      	adds	r2, r0, #1
 800c214:	d101      	bne.n	800c21a <__sflush_r+0x76>
 800c216:	682b      	ldr	r3, [r5, #0]
 800c218:	b903      	cbnz	r3, 800c21c <__sflush_r+0x78>
 800c21a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c21c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c21e:	602f      	str	r7, [r5, #0]
 800c220:	b1b9      	cbz	r1, 800c252 <__sflush_r+0xae>
 800c222:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c226:	4299      	cmp	r1, r3
 800c228:	d002      	beq.n	800c230 <__sflush_r+0x8c>
 800c22a:	4628      	mov	r0, r5
 800c22c:	f7ff f9fe 	bl	800b62c <_free_r>
 800c230:	2300      	movs	r3, #0
 800c232:	6363      	str	r3, [r4, #52]	@ 0x34
 800c234:	e00d      	b.n	800c252 <__sflush_r+0xae>
 800c236:	2301      	movs	r3, #1
 800c238:	4628      	mov	r0, r5
 800c23a:	47b0      	blx	r6
 800c23c:	4602      	mov	r2, r0
 800c23e:	1c50      	adds	r0, r2, #1
 800c240:	d1c9      	bne.n	800c1d6 <__sflush_r+0x32>
 800c242:	682b      	ldr	r3, [r5, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d0c6      	beq.n	800c1d6 <__sflush_r+0x32>
 800c248:	2b1d      	cmp	r3, #29
 800c24a:	d001      	beq.n	800c250 <__sflush_r+0xac>
 800c24c:	2b16      	cmp	r3, #22
 800c24e:	d11e      	bne.n	800c28e <__sflush_r+0xea>
 800c250:	602f      	str	r7, [r5, #0]
 800c252:	2000      	movs	r0, #0
 800c254:	e022      	b.n	800c29c <__sflush_r+0xf8>
 800c256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c25a:	b21b      	sxth	r3, r3
 800c25c:	e01b      	b.n	800c296 <__sflush_r+0xf2>
 800c25e:	690f      	ldr	r7, [r1, #16]
 800c260:	2f00      	cmp	r7, #0
 800c262:	d0f6      	beq.n	800c252 <__sflush_r+0xae>
 800c264:	0793      	lsls	r3, r2, #30
 800c266:	680e      	ldr	r6, [r1, #0]
 800c268:	bf08      	it	eq
 800c26a:	694b      	ldreq	r3, [r1, #20]
 800c26c:	600f      	str	r7, [r1, #0]
 800c26e:	bf18      	it	ne
 800c270:	2300      	movne	r3, #0
 800c272:	eba6 0807 	sub.w	r8, r6, r7
 800c276:	608b      	str	r3, [r1, #8]
 800c278:	f1b8 0f00 	cmp.w	r8, #0
 800c27c:	dde9      	ble.n	800c252 <__sflush_r+0xae>
 800c27e:	6a21      	ldr	r1, [r4, #32]
 800c280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c282:	4643      	mov	r3, r8
 800c284:	463a      	mov	r2, r7
 800c286:	4628      	mov	r0, r5
 800c288:	47b0      	blx	r6
 800c28a:	2800      	cmp	r0, #0
 800c28c:	dc08      	bgt.n	800c2a0 <__sflush_r+0xfc>
 800c28e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c296:	81a3      	strh	r3, [r4, #12]
 800c298:	f04f 30ff 	mov.w	r0, #4294967295
 800c29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a0:	4407      	add	r7, r0
 800c2a2:	eba8 0800 	sub.w	r8, r8, r0
 800c2a6:	e7e7      	b.n	800c278 <__sflush_r+0xd4>
 800c2a8:	20400001 	.word	0x20400001

0800c2ac <_fflush_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	690b      	ldr	r3, [r1, #16]
 800c2b0:	4605      	mov	r5, r0
 800c2b2:	460c      	mov	r4, r1
 800c2b4:	b913      	cbnz	r3, 800c2bc <_fflush_r+0x10>
 800c2b6:	2500      	movs	r5, #0
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	bd38      	pop	{r3, r4, r5, pc}
 800c2bc:	b118      	cbz	r0, 800c2c6 <_fflush_r+0x1a>
 800c2be:	6a03      	ldr	r3, [r0, #32]
 800c2c0:	b90b      	cbnz	r3, 800c2c6 <_fflush_r+0x1a>
 800c2c2:	f7fe fabf 	bl	800a844 <__sinit>
 800c2c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d0f3      	beq.n	800c2b6 <_fflush_r+0xa>
 800c2ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2d0:	07d0      	lsls	r0, r2, #31
 800c2d2:	d404      	bmi.n	800c2de <_fflush_r+0x32>
 800c2d4:	0599      	lsls	r1, r3, #22
 800c2d6:	d402      	bmi.n	800c2de <_fflush_r+0x32>
 800c2d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2da:	f7fe fbbc 	bl	800aa56 <__retarget_lock_acquire_recursive>
 800c2de:	4628      	mov	r0, r5
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	f7ff ff5f 	bl	800c1a4 <__sflush_r>
 800c2e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2e8:	07da      	lsls	r2, r3, #31
 800c2ea:	4605      	mov	r5, r0
 800c2ec:	d4e4      	bmi.n	800c2b8 <_fflush_r+0xc>
 800c2ee:	89a3      	ldrh	r3, [r4, #12]
 800c2f0:	059b      	lsls	r3, r3, #22
 800c2f2:	d4e1      	bmi.n	800c2b8 <_fflush_r+0xc>
 800c2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2f6:	f7fe fbaf 	bl	800aa58 <__retarget_lock_release_recursive>
 800c2fa:	e7dd      	b.n	800c2b8 <_fflush_r+0xc>

0800c2fc <__swbuf_r>:
 800c2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fe:	460e      	mov	r6, r1
 800c300:	4614      	mov	r4, r2
 800c302:	4605      	mov	r5, r0
 800c304:	b118      	cbz	r0, 800c30e <__swbuf_r+0x12>
 800c306:	6a03      	ldr	r3, [r0, #32]
 800c308:	b90b      	cbnz	r3, 800c30e <__swbuf_r+0x12>
 800c30a:	f7fe fa9b 	bl	800a844 <__sinit>
 800c30e:	69a3      	ldr	r3, [r4, #24]
 800c310:	60a3      	str	r3, [r4, #8]
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	071a      	lsls	r2, r3, #28
 800c316:	d501      	bpl.n	800c31c <__swbuf_r+0x20>
 800c318:	6923      	ldr	r3, [r4, #16]
 800c31a:	b943      	cbnz	r3, 800c32e <__swbuf_r+0x32>
 800c31c:	4621      	mov	r1, r4
 800c31e:	4628      	mov	r0, r5
 800c320:	f000 f82a 	bl	800c378 <__swsetup_r>
 800c324:	b118      	cbz	r0, 800c32e <__swbuf_r+0x32>
 800c326:	f04f 37ff 	mov.w	r7, #4294967295
 800c32a:	4638      	mov	r0, r7
 800c32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c32e:	6823      	ldr	r3, [r4, #0]
 800c330:	6922      	ldr	r2, [r4, #16]
 800c332:	1a98      	subs	r0, r3, r2
 800c334:	6963      	ldr	r3, [r4, #20]
 800c336:	b2f6      	uxtb	r6, r6
 800c338:	4283      	cmp	r3, r0
 800c33a:	4637      	mov	r7, r6
 800c33c:	dc05      	bgt.n	800c34a <__swbuf_r+0x4e>
 800c33e:	4621      	mov	r1, r4
 800c340:	4628      	mov	r0, r5
 800c342:	f7ff ffb3 	bl	800c2ac <_fflush_r>
 800c346:	2800      	cmp	r0, #0
 800c348:	d1ed      	bne.n	800c326 <__swbuf_r+0x2a>
 800c34a:	68a3      	ldr	r3, [r4, #8]
 800c34c:	3b01      	subs	r3, #1
 800c34e:	60a3      	str	r3, [r4, #8]
 800c350:	6823      	ldr	r3, [r4, #0]
 800c352:	1c5a      	adds	r2, r3, #1
 800c354:	6022      	str	r2, [r4, #0]
 800c356:	701e      	strb	r6, [r3, #0]
 800c358:	6962      	ldr	r2, [r4, #20]
 800c35a:	1c43      	adds	r3, r0, #1
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d004      	beq.n	800c36a <__swbuf_r+0x6e>
 800c360:	89a3      	ldrh	r3, [r4, #12]
 800c362:	07db      	lsls	r3, r3, #31
 800c364:	d5e1      	bpl.n	800c32a <__swbuf_r+0x2e>
 800c366:	2e0a      	cmp	r6, #10
 800c368:	d1df      	bne.n	800c32a <__swbuf_r+0x2e>
 800c36a:	4621      	mov	r1, r4
 800c36c:	4628      	mov	r0, r5
 800c36e:	f7ff ff9d 	bl	800c2ac <_fflush_r>
 800c372:	2800      	cmp	r0, #0
 800c374:	d0d9      	beq.n	800c32a <__swbuf_r+0x2e>
 800c376:	e7d6      	b.n	800c326 <__swbuf_r+0x2a>

0800c378 <__swsetup_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4b29      	ldr	r3, [pc, #164]	@ (800c420 <__swsetup_r+0xa8>)
 800c37c:	4605      	mov	r5, r0
 800c37e:	6818      	ldr	r0, [r3, #0]
 800c380:	460c      	mov	r4, r1
 800c382:	b118      	cbz	r0, 800c38c <__swsetup_r+0x14>
 800c384:	6a03      	ldr	r3, [r0, #32]
 800c386:	b90b      	cbnz	r3, 800c38c <__swsetup_r+0x14>
 800c388:	f7fe fa5c 	bl	800a844 <__sinit>
 800c38c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c390:	0719      	lsls	r1, r3, #28
 800c392:	d422      	bmi.n	800c3da <__swsetup_r+0x62>
 800c394:	06da      	lsls	r2, r3, #27
 800c396:	d407      	bmi.n	800c3a8 <__swsetup_r+0x30>
 800c398:	2209      	movs	r2, #9
 800c39a:	602a      	str	r2, [r5, #0]
 800c39c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3a0:	81a3      	strh	r3, [r4, #12]
 800c3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a6:	e033      	b.n	800c410 <__swsetup_r+0x98>
 800c3a8:	0758      	lsls	r0, r3, #29
 800c3aa:	d512      	bpl.n	800c3d2 <__swsetup_r+0x5a>
 800c3ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3ae:	b141      	cbz	r1, 800c3c2 <__swsetup_r+0x4a>
 800c3b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3b4:	4299      	cmp	r1, r3
 800c3b6:	d002      	beq.n	800c3be <__swsetup_r+0x46>
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	f7ff f937 	bl	800b62c <_free_r>
 800c3be:	2300      	movs	r3, #0
 800c3c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c3c8:	81a3      	strh	r3, [r4, #12]
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	6063      	str	r3, [r4, #4]
 800c3ce:	6923      	ldr	r3, [r4, #16]
 800c3d0:	6023      	str	r3, [r4, #0]
 800c3d2:	89a3      	ldrh	r3, [r4, #12]
 800c3d4:	f043 0308 	orr.w	r3, r3, #8
 800c3d8:	81a3      	strh	r3, [r4, #12]
 800c3da:	6923      	ldr	r3, [r4, #16]
 800c3dc:	b94b      	cbnz	r3, 800c3f2 <__swsetup_r+0x7a>
 800c3de:	89a3      	ldrh	r3, [r4, #12]
 800c3e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c3e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3e8:	d003      	beq.n	800c3f2 <__swsetup_r+0x7a>
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	f000 f8c1 	bl	800c574 <__smakebuf_r>
 800c3f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f6:	f013 0201 	ands.w	r2, r3, #1
 800c3fa:	d00a      	beq.n	800c412 <__swsetup_r+0x9a>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	60a2      	str	r2, [r4, #8]
 800c400:	6962      	ldr	r2, [r4, #20]
 800c402:	4252      	negs	r2, r2
 800c404:	61a2      	str	r2, [r4, #24]
 800c406:	6922      	ldr	r2, [r4, #16]
 800c408:	b942      	cbnz	r2, 800c41c <__swsetup_r+0xa4>
 800c40a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c40e:	d1c5      	bne.n	800c39c <__swsetup_r+0x24>
 800c410:	bd38      	pop	{r3, r4, r5, pc}
 800c412:	0799      	lsls	r1, r3, #30
 800c414:	bf58      	it	pl
 800c416:	6962      	ldrpl	r2, [r4, #20]
 800c418:	60a2      	str	r2, [r4, #8]
 800c41a:	e7f4      	b.n	800c406 <__swsetup_r+0x8e>
 800c41c:	2000      	movs	r0, #0
 800c41e:	e7f7      	b.n	800c410 <__swsetup_r+0x98>
 800c420:	24000024 	.word	0x24000024

0800c424 <_sbrk_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4d06      	ldr	r5, [pc, #24]	@ (800c440 <_sbrk_r+0x1c>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4604      	mov	r4, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	602b      	str	r3, [r5, #0]
 800c430:	f7f5 fb88 	bl	8001b44 <_sbrk>
 800c434:	1c43      	adds	r3, r0, #1
 800c436:	d102      	bne.n	800c43e <_sbrk_r+0x1a>
 800c438:	682b      	ldr	r3, [r5, #0]
 800c43a:	b103      	cbz	r3, 800c43e <_sbrk_r+0x1a>
 800c43c:	6023      	str	r3, [r4, #0]
 800c43e:	bd38      	pop	{r3, r4, r5, pc}
 800c440:	24000870 	.word	0x24000870

0800c444 <memcpy>:
 800c444:	440a      	add	r2, r1
 800c446:	4291      	cmp	r1, r2
 800c448:	f100 33ff 	add.w	r3, r0, #4294967295
 800c44c:	d100      	bne.n	800c450 <memcpy+0xc>
 800c44e:	4770      	bx	lr
 800c450:	b510      	push	{r4, lr}
 800c452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c45a:	4291      	cmp	r1, r2
 800c45c:	d1f9      	bne.n	800c452 <memcpy+0xe>
 800c45e:	bd10      	pop	{r4, pc}

0800c460 <__assert_func>:
 800c460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c462:	4614      	mov	r4, r2
 800c464:	461a      	mov	r2, r3
 800c466:	4b09      	ldr	r3, [pc, #36]	@ (800c48c <__assert_func+0x2c>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4605      	mov	r5, r0
 800c46c:	68d8      	ldr	r0, [r3, #12]
 800c46e:	b14c      	cbz	r4, 800c484 <__assert_func+0x24>
 800c470:	4b07      	ldr	r3, [pc, #28]	@ (800c490 <__assert_func+0x30>)
 800c472:	9100      	str	r1, [sp, #0]
 800c474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c478:	4906      	ldr	r1, [pc, #24]	@ (800c494 <__assert_func+0x34>)
 800c47a:	462b      	mov	r3, r5
 800c47c:	f000 f842 	bl	800c504 <fiprintf>
 800c480:	f000 f8d6 	bl	800c630 <abort>
 800c484:	4b04      	ldr	r3, [pc, #16]	@ (800c498 <__assert_func+0x38>)
 800c486:	461c      	mov	r4, r3
 800c488:	e7f3      	b.n	800c472 <__assert_func+0x12>
 800c48a:	bf00      	nop
 800c48c:	24000024 	.word	0x24000024
 800c490:	0800d96d 	.word	0x0800d96d
 800c494:	0800d97a 	.word	0x0800d97a
 800c498:	0800d9a8 	.word	0x0800d9a8

0800c49c <_calloc_r>:
 800c49c:	b570      	push	{r4, r5, r6, lr}
 800c49e:	fba1 5402 	umull	r5, r4, r1, r2
 800c4a2:	b934      	cbnz	r4, 800c4b2 <_calloc_r+0x16>
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	f7ff f935 	bl	800b714 <_malloc_r>
 800c4aa:	4606      	mov	r6, r0
 800c4ac:	b928      	cbnz	r0, 800c4ba <_calloc_r+0x1e>
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	bd70      	pop	{r4, r5, r6, pc}
 800c4b2:	220c      	movs	r2, #12
 800c4b4:	6002      	str	r2, [r0, #0]
 800c4b6:	2600      	movs	r6, #0
 800c4b8:	e7f9      	b.n	800c4ae <_calloc_r+0x12>
 800c4ba:	462a      	mov	r2, r5
 800c4bc:	4621      	mov	r1, r4
 800c4be:	f7fe fa4c 	bl	800a95a <memset>
 800c4c2:	e7f4      	b.n	800c4ae <_calloc_r+0x12>

0800c4c4 <__ascii_mbtowc>:
 800c4c4:	b082      	sub	sp, #8
 800c4c6:	b901      	cbnz	r1, 800c4ca <__ascii_mbtowc+0x6>
 800c4c8:	a901      	add	r1, sp, #4
 800c4ca:	b142      	cbz	r2, 800c4de <__ascii_mbtowc+0x1a>
 800c4cc:	b14b      	cbz	r3, 800c4e2 <__ascii_mbtowc+0x1e>
 800c4ce:	7813      	ldrb	r3, [r2, #0]
 800c4d0:	600b      	str	r3, [r1, #0]
 800c4d2:	7812      	ldrb	r2, [r2, #0]
 800c4d4:	1e10      	subs	r0, r2, #0
 800c4d6:	bf18      	it	ne
 800c4d8:	2001      	movne	r0, #1
 800c4da:	b002      	add	sp, #8
 800c4dc:	4770      	bx	lr
 800c4de:	4610      	mov	r0, r2
 800c4e0:	e7fb      	b.n	800c4da <__ascii_mbtowc+0x16>
 800c4e2:	f06f 0001 	mvn.w	r0, #1
 800c4e6:	e7f8      	b.n	800c4da <__ascii_mbtowc+0x16>

0800c4e8 <__ascii_wctomb>:
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	4608      	mov	r0, r1
 800c4ec:	b141      	cbz	r1, 800c500 <__ascii_wctomb+0x18>
 800c4ee:	2aff      	cmp	r2, #255	@ 0xff
 800c4f0:	d904      	bls.n	800c4fc <__ascii_wctomb+0x14>
 800c4f2:	228a      	movs	r2, #138	@ 0x8a
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fa:	4770      	bx	lr
 800c4fc:	700a      	strb	r2, [r1, #0]
 800c4fe:	2001      	movs	r0, #1
 800c500:	4770      	bx	lr
	...

0800c504 <fiprintf>:
 800c504:	b40e      	push	{r1, r2, r3}
 800c506:	b503      	push	{r0, r1, lr}
 800c508:	4601      	mov	r1, r0
 800c50a:	ab03      	add	r3, sp, #12
 800c50c:	4805      	ldr	r0, [pc, #20]	@ (800c524 <fiprintf+0x20>)
 800c50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c512:	6800      	ldr	r0, [r0, #0]
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	f7ff fd2d 	bl	800bf74 <_vfiprintf_r>
 800c51a:	b002      	add	sp, #8
 800c51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c520:	b003      	add	sp, #12
 800c522:	4770      	bx	lr
 800c524:	24000024 	.word	0x24000024

0800c528 <__swhatbuf_r>:
 800c528:	b570      	push	{r4, r5, r6, lr}
 800c52a:	460c      	mov	r4, r1
 800c52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c530:	2900      	cmp	r1, #0
 800c532:	b096      	sub	sp, #88	@ 0x58
 800c534:	4615      	mov	r5, r2
 800c536:	461e      	mov	r6, r3
 800c538:	da0d      	bge.n	800c556 <__swhatbuf_r+0x2e>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c540:	f04f 0100 	mov.w	r1, #0
 800c544:	bf14      	ite	ne
 800c546:	2340      	movne	r3, #64	@ 0x40
 800c548:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c54c:	2000      	movs	r0, #0
 800c54e:	6031      	str	r1, [r6, #0]
 800c550:	602b      	str	r3, [r5, #0]
 800c552:	b016      	add	sp, #88	@ 0x58
 800c554:	bd70      	pop	{r4, r5, r6, pc}
 800c556:	466a      	mov	r2, sp
 800c558:	f000 f848 	bl	800c5ec <_fstat_r>
 800c55c:	2800      	cmp	r0, #0
 800c55e:	dbec      	blt.n	800c53a <__swhatbuf_r+0x12>
 800c560:	9901      	ldr	r1, [sp, #4]
 800c562:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c566:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c56a:	4259      	negs	r1, r3
 800c56c:	4159      	adcs	r1, r3
 800c56e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c572:	e7eb      	b.n	800c54c <__swhatbuf_r+0x24>

0800c574 <__smakebuf_r>:
 800c574:	898b      	ldrh	r3, [r1, #12]
 800c576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c578:	079d      	lsls	r5, r3, #30
 800c57a:	4606      	mov	r6, r0
 800c57c:	460c      	mov	r4, r1
 800c57e:	d507      	bpl.n	800c590 <__smakebuf_r+0x1c>
 800c580:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c584:	6023      	str	r3, [r4, #0]
 800c586:	6123      	str	r3, [r4, #16]
 800c588:	2301      	movs	r3, #1
 800c58a:	6163      	str	r3, [r4, #20]
 800c58c:	b003      	add	sp, #12
 800c58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c590:	ab01      	add	r3, sp, #4
 800c592:	466a      	mov	r2, sp
 800c594:	f7ff ffc8 	bl	800c528 <__swhatbuf_r>
 800c598:	9f00      	ldr	r7, [sp, #0]
 800c59a:	4605      	mov	r5, r0
 800c59c:	4639      	mov	r1, r7
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f7ff f8b8 	bl	800b714 <_malloc_r>
 800c5a4:	b948      	cbnz	r0, 800c5ba <__smakebuf_r+0x46>
 800c5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5aa:	059a      	lsls	r2, r3, #22
 800c5ac:	d4ee      	bmi.n	800c58c <__smakebuf_r+0x18>
 800c5ae:	f023 0303 	bic.w	r3, r3, #3
 800c5b2:	f043 0302 	orr.w	r3, r3, #2
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	e7e2      	b.n	800c580 <__smakebuf_r+0xc>
 800c5ba:	89a3      	ldrh	r3, [r4, #12]
 800c5bc:	6020      	str	r0, [r4, #0]
 800c5be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5c2:	81a3      	strh	r3, [r4, #12]
 800c5c4:	9b01      	ldr	r3, [sp, #4]
 800c5c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c5ca:	b15b      	cbz	r3, 800c5e4 <__smakebuf_r+0x70>
 800c5cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f000 f81d 	bl	800c610 <_isatty_r>
 800c5d6:	b128      	cbz	r0, 800c5e4 <__smakebuf_r+0x70>
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	f023 0303 	bic.w	r3, r3, #3
 800c5de:	f043 0301 	orr.w	r3, r3, #1
 800c5e2:	81a3      	strh	r3, [r4, #12]
 800c5e4:	89a3      	ldrh	r3, [r4, #12]
 800c5e6:	431d      	orrs	r5, r3
 800c5e8:	81a5      	strh	r5, [r4, #12]
 800c5ea:	e7cf      	b.n	800c58c <__smakebuf_r+0x18>

0800c5ec <_fstat_r>:
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4d07      	ldr	r5, [pc, #28]	@ (800c60c <_fstat_r+0x20>)
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4604      	mov	r4, r0
 800c5f4:	4608      	mov	r0, r1
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	602b      	str	r3, [r5, #0]
 800c5fa:	f7f5 fa7b 	bl	8001af4 <_fstat>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	d102      	bne.n	800c608 <_fstat_r+0x1c>
 800c602:	682b      	ldr	r3, [r5, #0]
 800c604:	b103      	cbz	r3, 800c608 <_fstat_r+0x1c>
 800c606:	6023      	str	r3, [r4, #0]
 800c608:	bd38      	pop	{r3, r4, r5, pc}
 800c60a:	bf00      	nop
 800c60c:	24000870 	.word	0x24000870

0800c610 <_isatty_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	4d06      	ldr	r5, [pc, #24]	@ (800c62c <_isatty_r+0x1c>)
 800c614:	2300      	movs	r3, #0
 800c616:	4604      	mov	r4, r0
 800c618:	4608      	mov	r0, r1
 800c61a:	602b      	str	r3, [r5, #0]
 800c61c:	f7f5 fa7a 	bl	8001b14 <_isatty>
 800c620:	1c43      	adds	r3, r0, #1
 800c622:	d102      	bne.n	800c62a <_isatty_r+0x1a>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	b103      	cbz	r3, 800c62a <_isatty_r+0x1a>
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	bd38      	pop	{r3, r4, r5, pc}
 800c62c:	24000870 	.word	0x24000870

0800c630 <abort>:
 800c630:	b508      	push	{r3, lr}
 800c632:	2006      	movs	r0, #6
 800c634:	f000 f82c 	bl	800c690 <raise>
 800c638:	2001      	movs	r0, #1
 800c63a:	f7f5 fa0b 	bl	8001a54 <_exit>

0800c63e <_raise_r>:
 800c63e:	291f      	cmp	r1, #31
 800c640:	b538      	push	{r3, r4, r5, lr}
 800c642:	4605      	mov	r5, r0
 800c644:	460c      	mov	r4, r1
 800c646:	d904      	bls.n	800c652 <_raise_r+0x14>
 800c648:	2316      	movs	r3, #22
 800c64a:	6003      	str	r3, [r0, #0]
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	bd38      	pop	{r3, r4, r5, pc}
 800c652:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c654:	b112      	cbz	r2, 800c65c <_raise_r+0x1e>
 800c656:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c65a:	b94b      	cbnz	r3, 800c670 <_raise_r+0x32>
 800c65c:	4628      	mov	r0, r5
 800c65e:	f000 f831 	bl	800c6c4 <_getpid_r>
 800c662:	4622      	mov	r2, r4
 800c664:	4601      	mov	r1, r0
 800c666:	4628      	mov	r0, r5
 800c668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c66c:	f000 b818 	b.w	800c6a0 <_kill_r>
 800c670:	2b01      	cmp	r3, #1
 800c672:	d00a      	beq.n	800c68a <_raise_r+0x4c>
 800c674:	1c59      	adds	r1, r3, #1
 800c676:	d103      	bne.n	800c680 <_raise_r+0x42>
 800c678:	2316      	movs	r3, #22
 800c67a:	6003      	str	r3, [r0, #0]
 800c67c:	2001      	movs	r0, #1
 800c67e:	e7e7      	b.n	800c650 <_raise_r+0x12>
 800c680:	2100      	movs	r1, #0
 800c682:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c686:	4620      	mov	r0, r4
 800c688:	4798      	blx	r3
 800c68a:	2000      	movs	r0, #0
 800c68c:	e7e0      	b.n	800c650 <_raise_r+0x12>
	...

0800c690 <raise>:
 800c690:	4b02      	ldr	r3, [pc, #8]	@ (800c69c <raise+0xc>)
 800c692:	4601      	mov	r1, r0
 800c694:	6818      	ldr	r0, [r3, #0]
 800c696:	f7ff bfd2 	b.w	800c63e <_raise_r>
 800c69a:	bf00      	nop
 800c69c:	24000024 	.word	0x24000024

0800c6a0 <_kill_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4d07      	ldr	r5, [pc, #28]	@ (800c6c0 <_kill_r+0x20>)
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	602b      	str	r3, [r5, #0]
 800c6ae:	f7f5 f9c1 	bl	8001a34 <_kill>
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	d102      	bne.n	800c6bc <_kill_r+0x1c>
 800c6b6:	682b      	ldr	r3, [r5, #0]
 800c6b8:	b103      	cbz	r3, 800c6bc <_kill_r+0x1c>
 800c6ba:	6023      	str	r3, [r4, #0]
 800c6bc:	bd38      	pop	{r3, r4, r5, pc}
 800c6be:	bf00      	nop
 800c6c0:	24000870 	.word	0x24000870

0800c6c4 <_getpid_r>:
 800c6c4:	f7f5 b9ae 	b.w	8001a24 <_getpid>

0800c6c8 <atan2f>:
 800c6c8:	f000 bada 	b.w	800cc80 <__ieee754_atan2f>

0800c6cc <sqrtf>:
 800c6cc:	b508      	push	{r3, lr}
 800c6ce:	ed2d 8b02 	vpush	{d8}
 800c6d2:	eeb0 8a40 	vmov.f32	s16, s0
 800c6d6:	f000 f9f0 	bl	800caba <__ieee754_sqrtf>
 800c6da:	eeb4 8a48 	vcmp.f32	s16, s16
 800c6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6e2:	d60c      	bvs.n	800c6fe <sqrtf+0x32>
 800c6e4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c704 <sqrtf+0x38>
 800c6e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f0:	d505      	bpl.n	800c6fe <sqrtf+0x32>
 800c6f2:	f7fe f985 	bl	800aa00 <__errno>
 800c6f6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c6fa:	2321      	movs	r3, #33	@ 0x21
 800c6fc:	6003      	str	r3, [r0, #0]
 800c6fe:	ecbd 8b02 	vpop	{d8}
 800c702:	bd08      	pop	{r3, pc}
 800c704:	00000000 	.word	0x00000000

0800c708 <tanf>:
 800c708:	ee10 3a10 	vmov	r3, s0
 800c70c:	b507      	push	{r0, r1, r2, lr}
 800c70e:	4a12      	ldr	r2, [pc, #72]	@ (800c758 <tanf+0x50>)
 800c710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c714:	4293      	cmp	r3, r2
 800c716:	d807      	bhi.n	800c728 <tanf+0x20>
 800c718:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800c75c <tanf+0x54>
 800c71c:	2001      	movs	r0, #1
 800c71e:	b003      	add	sp, #12
 800c720:	f85d eb04 	ldr.w	lr, [sp], #4
 800c724:	f000 b9cc 	b.w	800cac0 <__kernel_tanf>
 800c728:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c72c:	d304      	bcc.n	800c738 <tanf+0x30>
 800c72e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c732:	b003      	add	sp, #12
 800c734:	f85d fb04 	ldr.w	pc, [sp], #4
 800c738:	4668      	mov	r0, sp
 800c73a:	f000 fb3f 	bl	800cdbc <__ieee754_rem_pio2f>
 800c73e:	0040      	lsls	r0, r0, #1
 800c740:	f000 0002 	and.w	r0, r0, #2
 800c744:	eddd 0a01 	vldr	s1, [sp, #4]
 800c748:	ed9d 0a00 	vldr	s0, [sp]
 800c74c:	f1c0 0001 	rsb	r0, r0, #1
 800c750:	f000 f9b6 	bl	800cac0 <__kernel_tanf>
 800c754:	e7ed      	b.n	800c732 <tanf+0x2a>
 800c756:	bf00      	nop
 800c758:	3f490fda 	.word	0x3f490fda
 800c75c:	00000000 	.word	0x00000000

0800c760 <sinf_poly>:
 800c760:	07cb      	lsls	r3, r1, #31
 800c762:	d412      	bmi.n	800c78a <sinf_poly+0x2a>
 800c764:	ee21 5b00 	vmul.f64	d5, d1, d0
 800c768:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800c76c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800c770:	eea6 7b01 	vfma.f64	d7, d6, d1
 800c774:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800c778:	ee21 1b05 	vmul.f64	d1, d1, d5
 800c77c:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c780:	eea7 0b01 	vfma.f64	d0, d7, d1
 800c784:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c788:	4770      	bx	lr
 800c78a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800c78e:	ee21 5b01 	vmul.f64	d5, d1, d1
 800c792:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800c796:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800c79a:	eea1 7b06 	vfma.f64	d7, d1, d6
 800c79e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800c7a2:	eea1 0b06 	vfma.f64	d0, d1, d6
 800c7a6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800c7aa:	ee21 1b05 	vmul.f64	d1, d1, d5
 800c7ae:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c7b2:	e7e5      	b.n	800c780 <sinf_poly+0x20>
 800c7b4:	0000      	movs	r0, r0
	...

0800c7b8 <sinf>:
 800c7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7ba:	ee10 4a10 	vmov	r4, s0
 800c7be:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c7c2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800c7c6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c7ca:	eef0 7a40 	vmov.f32	s15, s0
 800c7ce:	d218      	bcs.n	800c802 <sinf+0x4a>
 800c7d0:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c7d4:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800c7d8:	d20a      	bcs.n	800c7f0 <sinf+0x38>
 800c7da:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800c7de:	d103      	bne.n	800c7e8 <sinf+0x30>
 800c7e0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800c7e4:	ed8d 1a01 	vstr	s2, [sp, #4]
 800c7e8:	eeb0 0a67 	vmov.f32	s0, s15
 800c7ec:	b003      	add	sp, #12
 800c7ee:	bd30      	pop	{r4, r5, pc}
 800c7f0:	483b      	ldr	r0, [pc, #236]	@ (800c8e0 <sinf+0x128>)
 800c7f2:	eeb0 0b46 	vmov.f64	d0, d6
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	b003      	add	sp, #12
 800c7fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7fe:	f7ff bfaf 	b.w	800c760 <sinf_poly>
 800c802:	f240 422e 	movw	r2, #1070	@ 0x42e
 800c806:	4293      	cmp	r3, r2
 800c808:	d824      	bhi.n	800c854 <sinf+0x9c>
 800c80a:	4b35      	ldr	r3, [pc, #212]	@ (800c8e0 <sinf+0x128>)
 800c80c:	ed93 7b08 	vldr	d7, [r3, #32]
 800c810:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c814:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c818:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800c81c:	ee17 1a90 	vmov	r1, s15
 800c820:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800c824:	1609      	asrs	r1, r1, #24
 800c826:	ee07 1a90 	vmov	s15, r1
 800c82a:	f001 0203 	and.w	r2, r1, #3
 800c82e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c832:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c836:	ed92 0b00 	vldr	d0, [r2]
 800c83a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800c83e:	f011 0f02 	tst.w	r1, #2
 800c842:	eea5 6b47 	vfms.f64	d6, d5, d7
 800c846:	bf08      	it	eq
 800c848:	4618      	moveq	r0, r3
 800c84a:	ee26 1b06 	vmul.f64	d1, d6, d6
 800c84e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c852:	e7d1      	b.n	800c7f8 <sinf+0x40>
 800c854:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800c858:	d237      	bcs.n	800c8ca <sinf+0x112>
 800c85a:	4922      	ldr	r1, [pc, #136]	@ (800c8e4 <sinf+0x12c>)
 800c85c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800c860:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800c864:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800c868:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800c86c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c870:	6a10      	ldr	r0, [r2, #32]
 800c872:	6912      	ldr	r2, [r2, #16]
 800c874:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c878:	40ab      	lsls	r3, r5
 800c87a:	fba0 5003 	umull	r5, r0, r0, r3
 800c87e:	4359      	muls	r1, r3
 800c880:	fbe3 0102 	umlal	r0, r1, r3, r2
 800c884:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800c888:	0f9d      	lsrs	r5, r3, #30
 800c88a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c88e:	1ac9      	subs	r1, r1, r3
 800c890:	f7f3 ff0c 	bl	80006ac <__aeabi_l2d>
 800c894:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800c898:	4b11      	ldr	r3, [pc, #68]	@ (800c8e0 <sinf+0x128>)
 800c89a:	f004 0203 	and.w	r2, r4, #3
 800c89e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c8a2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 800c8d8 <sinf+0x120>
 800c8a6:	ed92 0b00 	vldr	d0, [r2]
 800c8aa:	ec41 0b17 	vmov	d7, r0, r1
 800c8ae:	f014 0f02 	tst.w	r4, #2
 800c8b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8b6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	bf08      	it	eq
 800c8be:	4618      	moveq	r0, r3
 800c8c0:	ee27 1b07 	vmul.f64	d1, d7, d7
 800c8c4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c8c8:	e796      	b.n	800c7f8 <sinf+0x40>
 800c8ca:	b003      	add	sp, #12
 800c8cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8d0:	f000 b8e4 	b.w	800ca9c <__math_invalidf>
 800c8d4:	f3af 8000 	nop.w
 800c8d8:	54442d18 	.word	0x54442d18
 800c8dc:	3c1921fb 	.word	0x3c1921fb
 800c8e0:	0800dc10 	.word	0x0800dc10
 800c8e4:	0800dbac 	.word	0x0800dbac

0800c8e8 <sinf_poly>:
 800c8e8:	07cb      	lsls	r3, r1, #31
 800c8ea:	d412      	bmi.n	800c912 <sinf_poly+0x2a>
 800c8ec:	ee21 5b00 	vmul.f64	d5, d1, d0
 800c8f0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800c8f4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800c8f8:	eea6 7b01 	vfma.f64	d7, d6, d1
 800c8fc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800c900:	ee21 1b05 	vmul.f64	d1, d1, d5
 800c904:	eea6 0b05 	vfma.f64	d0, d6, d5
 800c908:	eea7 0b01 	vfma.f64	d0, d7, d1
 800c90c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c910:	4770      	bx	lr
 800c912:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800c916:	ee21 5b01 	vmul.f64	d5, d1, d1
 800c91a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800c91e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800c922:	eea1 7b06 	vfma.f64	d7, d1, d6
 800c926:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800c92a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800c92e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800c932:	ee21 1b05 	vmul.f64	d1, d1, d5
 800c936:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c93a:	e7e5      	b.n	800c908 <sinf_poly+0x20>
 800c93c:	0000      	movs	r0, r0
	...

0800c940 <cosf>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	ee10 4a10 	vmov	r4, s0
 800c946:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800c94a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800c94e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800c952:	d21f      	bcs.n	800c994 <cosf+0x54>
 800c954:	ee27 7b07 	vmul.f64	d7, d7, d7
 800c958:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800c95c:	f0c0 8082 	bcc.w	800ca64 <cosf+0x124>
 800c960:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c964:	4b44      	ldr	r3, [pc, #272]	@ (800ca78 <cosf+0x138>)
 800c966:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800c96a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800c96e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 800c972:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c976:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800c97a:	eea7 0b05 	vfma.f64	d0, d7, d5
 800c97e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 800c982:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c986:	eea4 0b05 	vfma.f64	d0, d4, d5
 800c98a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800c98e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c992:	bd38      	pop	{r3, r4, r5, pc}
 800c994:	f240 422e 	movw	r2, #1070	@ 0x42e
 800c998:	4293      	cmp	r3, r2
 800c99a:	d829      	bhi.n	800c9f0 <cosf+0xb0>
 800c99c:	4b36      	ldr	r3, [pc, #216]	@ (800ca78 <cosf+0x138>)
 800c99e:	ed93 6b08 	vldr	d6, [r3, #32]
 800c9a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c9a6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800c9aa:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800c9ae:	ee16 1a90 	vmov	r1, s13
 800c9b2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800c9b6:	1609      	asrs	r1, r1, #24
 800c9b8:	ee06 1a90 	vmov	s13, r1
 800c9bc:	f001 0203 	and.w	r2, r1, #3
 800c9c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c9c4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800c9c8:	ed92 0b00 	vldr	d0, [r2]
 800c9cc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 800c9d0:	f011 0f02 	tst.w	r1, #2
 800c9d4:	f081 0101 	eor.w	r1, r1, #1
 800c9d8:	eea5 7b46 	vfms.f64	d7, d5, d6
 800c9dc:	bf08      	it	eq
 800c9de:	4618      	moveq	r0, r3
 800c9e0:	ee27 1b07 	vmul.f64	d1, d7, d7
 800c9e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c9ec:	f7ff bf7c 	b.w	800c8e8 <sinf_poly>
 800c9f0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800c9f4:	d232      	bcs.n	800ca5c <cosf+0x11c>
 800c9f6:	4921      	ldr	r1, [pc, #132]	@ (800ca7c <cosf+0x13c>)
 800c9f8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800c9fc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800ca00:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800ca04:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800ca08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ca0c:	6a10      	ldr	r0, [r2, #32]
 800ca0e:	6912      	ldr	r2, [r2, #16]
 800ca10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ca14:	40ab      	lsls	r3, r5
 800ca16:	fba0 5003 	umull	r5, r0, r0, r3
 800ca1a:	4359      	muls	r1, r3
 800ca1c:	fbe3 0102 	umlal	r0, r1, r3, r2
 800ca20:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800ca24:	0f9d      	lsrs	r5, r3, #30
 800ca26:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ca2a:	1ac9      	subs	r1, r1, r3
 800ca2c:	f7f3 fe3e 	bl	80006ac <__aeabi_l2d>
 800ca30:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800ca34:	4b10      	ldr	r3, [pc, #64]	@ (800ca78 <cosf+0x138>)
 800ca36:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800ca70 <cosf+0x130>
 800ca3a:	ec41 0b17 	vmov	d7, r0, r1
 800ca3e:	f004 0203 	and.w	r2, r4, #3
 800ca42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ca46:	ed92 0b00 	vldr	d0, [r2]
 800ca4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca4e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800ca52:	f014 0f02 	tst.w	r4, #2
 800ca56:	f085 0101 	eor.w	r1, r5, #1
 800ca5a:	e7bf      	b.n	800c9dc <cosf+0x9c>
 800ca5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca60:	f000 b81c 	b.w	800ca9c <__math_invalidf>
 800ca64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ca68:	e793      	b.n	800c992 <cosf+0x52>
 800ca6a:	bf00      	nop
 800ca6c:	f3af 8000 	nop.w
 800ca70:	54442d18 	.word	0x54442d18
 800ca74:	3c1921fb 	.word	0x3c1921fb
 800ca78:	0800dc10 	.word	0x0800dc10
 800ca7c:	0800dbac 	.word	0x0800dbac

0800ca80 <with_errnof>:
 800ca80:	b510      	push	{r4, lr}
 800ca82:	ed2d 8b02 	vpush	{d8}
 800ca86:	eeb0 8a40 	vmov.f32	s16, s0
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	f7fd ffb8 	bl	800aa00 <__errno>
 800ca90:	eeb0 0a48 	vmov.f32	s0, s16
 800ca94:	ecbd 8b02 	vpop	{d8}
 800ca98:	6004      	str	r4, [r0, #0]
 800ca9a:	bd10      	pop	{r4, pc}

0800ca9c <__math_invalidf>:
 800ca9c:	eef0 7a40 	vmov.f32	s15, s0
 800caa0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800caa4:	eef4 7a67 	vcmp.f32	s15, s15
 800caa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caac:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800cab0:	d602      	bvs.n	800cab8 <__math_invalidf+0x1c>
 800cab2:	2021      	movs	r0, #33	@ 0x21
 800cab4:	f7ff bfe4 	b.w	800ca80 <with_errnof>
 800cab8:	4770      	bx	lr

0800caba <__ieee754_sqrtf>:
 800caba:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cabe:	4770      	bx	lr

0800cac0 <__kernel_tanf>:
 800cac0:	b508      	push	{r3, lr}
 800cac2:	ee10 3a10 	vmov	r3, s0
 800cac6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800caca:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 800cace:	eef0 7a40 	vmov.f32	s15, s0
 800cad2:	d217      	bcs.n	800cb04 <__kernel_tanf+0x44>
 800cad4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800cad8:	ee17 1a10 	vmov	r1, s14
 800cadc:	bb41      	cbnz	r1, 800cb30 <__kernel_tanf+0x70>
 800cade:	1c43      	adds	r3, r0, #1
 800cae0:	4313      	orrs	r3, r2
 800cae2:	d108      	bne.n	800caf6 <__kernel_tanf+0x36>
 800cae4:	f000 fb6e 	bl	800d1c4 <fabsf>
 800cae8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800caec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800caf0:	eeb0 0a67 	vmov.f32	s0, s15
 800caf4:	bd08      	pop	{r3, pc}
 800caf6:	2801      	cmp	r0, #1
 800caf8:	d0fa      	beq.n	800caf0 <__kernel_tanf+0x30>
 800cafa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800cafe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cb02:	e7f5      	b.n	800caf0 <__kernel_tanf+0x30>
 800cb04:	494c      	ldr	r1, [pc, #304]	@ (800cc38 <__kernel_tanf+0x178>)
 800cb06:	428a      	cmp	r2, r1
 800cb08:	d312      	bcc.n	800cb30 <__kernel_tanf+0x70>
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800cc3c <__kernel_tanf+0x17c>
 800cb10:	bfb8      	it	lt
 800cb12:	eef1 7a40 	vneglt.f32	s15, s0
 800cb16:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cb1a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800cc40 <__kernel_tanf+0x180>
 800cb1e:	bfb8      	it	lt
 800cb20:	eef1 0a60 	vneglt.f32	s1, s1
 800cb24:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cb28:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800cc44 <__kernel_tanf+0x184>
 800cb2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb30:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800cb34:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800cc48 <__kernel_tanf+0x188>
 800cb38:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 800cc4c <__kernel_tanf+0x18c>
 800cb3c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 800cc50 <__kernel_tanf+0x190>
 800cb40:	493d      	ldr	r1, [pc, #244]	@ (800cc38 <__kernel_tanf+0x178>)
 800cb42:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cb46:	428a      	cmp	r2, r1
 800cb48:	eea7 6a25 	vfma.f32	s12, s14, s11
 800cb4c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 800cc54 <__kernel_tanf+0x194>
 800cb50:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb54:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800cc58 <__kernel_tanf+0x198>
 800cb58:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cb5c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cc5c <__kernel_tanf+0x19c>
 800cb60:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb64:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800cc60 <__kernel_tanf+0x1a0>
 800cb68:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cb6c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800cc64 <__kernel_tanf+0x1a4>
 800cb70:	eee7 5a05 	vfma.f32	s11, s14, s10
 800cb74:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800cc68 <__kernel_tanf+0x1a8>
 800cb78:	eea5 5a87 	vfma.f32	s10, s11, s14
 800cb7c:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800cc6c <__kernel_tanf+0x1ac>
 800cb80:	eee5 5a07 	vfma.f32	s11, s10, s14
 800cb84:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800cc70 <__kernel_tanf+0x1b0>
 800cb88:	eea5 5a87 	vfma.f32	s10, s11, s14
 800cb8c:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800cc74 <__kernel_tanf+0x1b4>
 800cb90:	eee5 5a07 	vfma.f32	s11, s10, s14
 800cb94:	eeb0 7a46 	vmov.f32	s14, s12
 800cb98:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800cb9c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800cba0:	eeb0 6a60 	vmov.f32	s12, s1
 800cba4:	eea7 6a05 	vfma.f32	s12, s14, s10
 800cba8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800cc78 <__kernel_tanf+0x1b8>
 800cbac:	eee6 0a26 	vfma.f32	s1, s12, s13
 800cbb0:	eee5 0a07 	vfma.f32	s1, s10, s14
 800cbb4:	ee37 6aa0 	vadd.f32	s12, s15, s1
 800cbb8:	d31d      	bcc.n	800cbf6 <__kernel_tanf+0x136>
 800cbba:	ee07 0a10 	vmov	s14, r0
 800cbbe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cbc2:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cbc6:	ee36 6a07 	vadd.f32	s12, s12, s14
 800cbca:	179b      	asrs	r3, r3, #30
 800cbcc:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800cbd0:	f003 0302 	and.w	r3, r3, #2
 800cbd4:	f1c3 0301 	rsb	r3, r3, #1
 800cbd8:	ee06 3a90 	vmov	s13, r3
 800cbdc:	ee35 6ae0 	vsub.f32	s12, s11, s1
 800cbe0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800cbe4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cbe8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800cbec:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800cbf0:	ee66 7a87 	vmul.f32	s15, s13, s14
 800cbf4:	e77c      	b.n	800caf0 <__kernel_tanf+0x30>
 800cbf6:	2801      	cmp	r0, #1
 800cbf8:	d01b      	beq.n	800cc32 <__kernel_tanf+0x172>
 800cbfa:	4b20      	ldr	r3, [pc, #128]	@ (800cc7c <__kernel_tanf+0x1bc>)
 800cbfc:	ee16 2a10 	vmov	r2, s12
 800cc00:	401a      	ands	r2, r3
 800cc02:	ee05 2a90 	vmov	s11, r2
 800cc06:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800cc0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cc0e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800cc12:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800cc16:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800cc1a:	ee16 2a90 	vmov	r2, s13
 800cc1e:	4013      	ands	r3, r2
 800cc20:	ee07 3a90 	vmov	s15, r3
 800cc24:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cc28:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800cc2c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800cc30:	e75e      	b.n	800caf0 <__kernel_tanf+0x30>
 800cc32:	eef0 7a46 	vmov.f32	s15, s12
 800cc36:	e75b      	b.n	800caf0 <__kernel_tanf+0x30>
 800cc38:	3f2ca140 	.word	0x3f2ca140
 800cc3c:	3f490fda 	.word	0x3f490fda
 800cc40:	33222168 	.word	0x33222168
 800cc44:	00000000 	.word	0x00000000
 800cc48:	b79bae5f 	.word	0xb79bae5f
 800cc4c:	38a3f445 	.word	0x38a3f445
 800cc50:	37d95384 	.word	0x37d95384
 800cc54:	3a1a26c8 	.word	0x3a1a26c8
 800cc58:	3b6b6916 	.word	0x3b6b6916
 800cc5c:	3cb327a4 	.word	0x3cb327a4
 800cc60:	3e088889 	.word	0x3e088889
 800cc64:	3895c07a 	.word	0x3895c07a
 800cc68:	398137b9 	.word	0x398137b9
 800cc6c:	3abede48 	.word	0x3abede48
 800cc70:	3c11371f 	.word	0x3c11371f
 800cc74:	3d5d0dd1 	.word	0x3d5d0dd1
 800cc78:	3eaaaaab 	.word	0x3eaaaaab
 800cc7c:	fffff000 	.word	0xfffff000

0800cc80 <__ieee754_atan2f>:
 800cc80:	ee10 2a90 	vmov	r2, s1
 800cc84:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800cc88:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	eef0 7a40 	vmov.f32	s15, s0
 800cc92:	d806      	bhi.n	800cca2 <__ieee754_atan2f+0x22>
 800cc94:	ee10 0a10 	vmov	r0, s0
 800cc98:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800cc9c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cca0:	d904      	bls.n	800ccac <__ieee754_atan2f+0x2c>
 800cca2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800cca6:	eeb0 0a67 	vmov.f32	s0, s15
 800ccaa:	bd10      	pop	{r4, pc}
 800ccac:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800ccb0:	d103      	bne.n	800ccba <__ieee754_atan2f+0x3a>
 800ccb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccb6:	f000 b9b1 	b.w	800d01c <atanf>
 800ccba:	1794      	asrs	r4, r2, #30
 800ccbc:	f004 0402 	and.w	r4, r4, #2
 800ccc0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ccc4:	b93b      	cbnz	r3, 800ccd6 <__ieee754_atan2f+0x56>
 800ccc6:	2c02      	cmp	r4, #2
 800ccc8:	d05c      	beq.n	800cd84 <__ieee754_atan2f+0x104>
 800ccca:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800cd98 <__ieee754_atan2f+0x118>
 800ccce:	2c03      	cmp	r4, #3
 800ccd0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800ccd4:	e7e7      	b.n	800cca6 <__ieee754_atan2f+0x26>
 800ccd6:	b939      	cbnz	r1, 800cce8 <__ieee754_atan2f+0x68>
 800ccd8:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800cd9c <__ieee754_atan2f+0x11c>
 800ccdc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800cda0 <__ieee754_atan2f+0x120>
 800cce0:	2800      	cmp	r0, #0
 800cce2:	fe67 7a27 	vselge.f32	s15, s14, s15
 800cce6:	e7de      	b.n	800cca6 <__ieee754_atan2f+0x26>
 800cce8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ccec:	d110      	bne.n	800cd10 <__ieee754_atan2f+0x90>
 800ccee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ccf2:	f104 34ff 	add.w	r4, r4, #4294967295
 800ccf6:	d107      	bne.n	800cd08 <__ieee754_atan2f+0x88>
 800ccf8:	2c02      	cmp	r4, #2
 800ccfa:	d846      	bhi.n	800cd8a <__ieee754_atan2f+0x10a>
 800ccfc:	4b29      	ldr	r3, [pc, #164]	@ (800cda4 <__ieee754_atan2f+0x124>)
 800ccfe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cd02:	edd3 7a00 	vldr	s15, [r3]
 800cd06:	e7ce      	b.n	800cca6 <__ieee754_atan2f+0x26>
 800cd08:	2c02      	cmp	r4, #2
 800cd0a:	d841      	bhi.n	800cd90 <__ieee754_atan2f+0x110>
 800cd0c:	4b26      	ldr	r3, [pc, #152]	@ (800cda8 <__ieee754_atan2f+0x128>)
 800cd0e:	e7f6      	b.n	800ccfe <__ieee754_atan2f+0x7e>
 800cd10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cd14:	d0e0      	beq.n	800ccd8 <__ieee754_atan2f+0x58>
 800cd16:	1a5b      	subs	r3, r3, r1
 800cd18:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800cd1c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800cd20:	da1a      	bge.n	800cd58 <__ieee754_atan2f+0xd8>
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	da01      	bge.n	800cd2a <__ieee754_atan2f+0xaa>
 800cd26:	313c      	adds	r1, #60	@ 0x3c
 800cd28:	db19      	blt.n	800cd5e <__ieee754_atan2f+0xde>
 800cd2a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800cd2e:	f000 fa49 	bl	800d1c4 <fabsf>
 800cd32:	f000 f973 	bl	800d01c <atanf>
 800cd36:	eef0 7a40 	vmov.f32	s15, s0
 800cd3a:	2c01      	cmp	r4, #1
 800cd3c:	d012      	beq.n	800cd64 <__ieee754_atan2f+0xe4>
 800cd3e:	2c02      	cmp	r4, #2
 800cd40:	d017      	beq.n	800cd72 <__ieee754_atan2f+0xf2>
 800cd42:	2c00      	cmp	r4, #0
 800cd44:	d0af      	beq.n	800cca6 <__ieee754_atan2f+0x26>
 800cd46:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800cdac <__ieee754_atan2f+0x12c>
 800cd4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd4e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800cdb0 <__ieee754_atan2f+0x130>
 800cd52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cd56:	e7a6      	b.n	800cca6 <__ieee754_atan2f+0x26>
 800cd58:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800cda0 <__ieee754_atan2f+0x120>
 800cd5c:	e7ed      	b.n	800cd3a <__ieee754_atan2f+0xba>
 800cd5e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cdb4 <__ieee754_atan2f+0x134>
 800cd62:	e7ea      	b.n	800cd3a <__ieee754_atan2f+0xba>
 800cd64:	ee17 3a90 	vmov	r3, s15
 800cd68:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cd6c:	ee07 3a90 	vmov	s15, r3
 800cd70:	e799      	b.n	800cca6 <__ieee754_atan2f+0x26>
 800cd72:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800cdac <__ieee754_atan2f+0x12c>
 800cd76:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd7a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800cdb0 <__ieee754_atan2f+0x130>
 800cd7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd82:	e790      	b.n	800cca6 <__ieee754_atan2f+0x26>
 800cd84:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800cdb0 <__ieee754_atan2f+0x130>
 800cd88:	e78d      	b.n	800cca6 <__ieee754_atan2f+0x26>
 800cd8a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800cdb8 <__ieee754_atan2f+0x138>
 800cd8e:	e78a      	b.n	800cca6 <__ieee754_atan2f+0x26>
 800cd90:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800cdb4 <__ieee754_atan2f+0x134>
 800cd94:	e787      	b.n	800cca6 <__ieee754_atan2f+0x26>
 800cd96:	bf00      	nop
 800cd98:	c0490fdb 	.word	0xc0490fdb
 800cd9c:	bfc90fdb 	.word	0xbfc90fdb
 800cda0:	3fc90fdb 	.word	0x3fc90fdb
 800cda4:	0800dcfc 	.word	0x0800dcfc
 800cda8:	0800dcf0 	.word	0x0800dcf0
 800cdac:	33bbbd2e 	.word	0x33bbbd2e
 800cdb0:	40490fdb 	.word	0x40490fdb
 800cdb4:	00000000 	.word	0x00000000
 800cdb8:	3f490fdb 	.word	0x3f490fdb

0800cdbc <__ieee754_rem_pio2f>:
 800cdbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdbe:	ee10 6a10 	vmov	r6, s0
 800cdc2:	4b88      	ldr	r3, [pc, #544]	@ (800cfe4 <__ieee754_rem_pio2f+0x228>)
 800cdc4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800cdc8:	429d      	cmp	r5, r3
 800cdca:	b087      	sub	sp, #28
 800cdcc:	4604      	mov	r4, r0
 800cdce:	d805      	bhi.n	800cddc <__ieee754_rem_pio2f+0x20>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	ed80 0a00 	vstr	s0, [r0]
 800cdd6:	6043      	str	r3, [r0, #4]
 800cdd8:	2000      	movs	r0, #0
 800cdda:	e022      	b.n	800ce22 <__ieee754_rem_pio2f+0x66>
 800cddc:	4b82      	ldr	r3, [pc, #520]	@ (800cfe8 <__ieee754_rem_pio2f+0x22c>)
 800cdde:	429d      	cmp	r5, r3
 800cde0:	d83a      	bhi.n	800ce58 <__ieee754_rem_pio2f+0x9c>
 800cde2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cde6:	2e00      	cmp	r6, #0
 800cde8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800cfec <__ieee754_rem_pio2f+0x230>
 800cdec:	4a80      	ldr	r2, [pc, #512]	@ (800cff0 <__ieee754_rem_pio2f+0x234>)
 800cdee:	f023 030f 	bic.w	r3, r3, #15
 800cdf2:	dd18      	ble.n	800ce26 <__ieee754_rem_pio2f+0x6a>
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800cdfa:	bf09      	itett	eq
 800cdfc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800cff4 <__ieee754_rem_pio2f+0x238>
 800ce00:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800cff8 <__ieee754_rem_pio2f+0x23c>
 800ce04:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800cffc <__ieee754_rem_pio2f+0x240>
 800ce08:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ce0c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800ce10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce14:	ed80 7a00 	vstr	s14, [r0]
 800ce18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ce1c:	edc0 7a01 	vstr	s15, [r0, #4]
 800ce20:	2001      	movs	r0, #1
 800ce22:	b007      	add	sp, #28
 800ce24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce26:	4293      	cmp	r3, r2
 800ce28:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ce2c:	bf09      	itett	eq
 800ce2e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800cff4 <__ieee754_rem_pio2f+0x238>
 800ce32:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800cff8 <__ieee754_rem_pio2f+0x23c>
 800ce36:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800cffc <__ieee754_rem_pio2f+0x240>
 800ce3a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ce3e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ce42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ce46:	ed80 7a00 	vstr	s14, [r0]
 800ce4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce4e:	edc0 7a01 	vstr	s15, [r0, #4]
 800ce52:	f04f 30ff 	mov.w	r0, #4294967295
 800ce56:	e7e4      	b.n	800ce22 <__ieee754_rem_pio2f+0x66>
 800ce58:	4b69      	ldr	r3, [pc, #420]	@ (800d000 <__ieee754_rem_pio2f+0x244>)
 800ce5a:	429d      	cmp	r5, r3
 800ce5c:	d873      	bhi.n	800cf46 <__ieee754_rem_pio2f+0x18a>
 800ce5e:	f000 f9b1 	bl	800d1c4 <fabsf>
 800ce62:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d004 <__ieee754_rem_pio2f+0x248>
 800ce66:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ce6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ce6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ce72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce76:	ee17 0a90 	vmov	r0, s15
 800ce7a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cfec <__ieee754_rem_pio2f+0x230>
 800ce7e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ce82:	281f      	cmp	r0, #31
 800ce84:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800cff8 <__ieee754_rem_pio2f+0x23c>
 800ce88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce8c:	eeb1 6a47 	vneg.f32	s12, s14
 800ce90:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ce94:	ee16 1a90 	vmov	r1, s13
 800ce98:	dc09      	bgt.n	800ceae <__ieee754_rem_pio2f+0xf2>
 800ce9a:	4a5b      	ldr	r2, [pc, #364]	@ (800d008 <__ieee754_rem_pio2f+0x24c>)
 800ce9c:	1e47      	subs	r7, r0, #1
 800ce9e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cea2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800cea6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d107      	bne.n	800cebe <__ieee754_rem_pio2f+0x102>
 800ceae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ceb2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ceb6:	2a08      	cmp	r2, #8
 800ceb8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800cebc:	dc14      	bgt.n	800cee8 <__ieee754_rem_pio2f+0x12c>
 800cebe:	6021      	str	r1, [r4, #0]
 800cec0:	ed94 7a00 	vldr	s14, [r4]
 800cec4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cec8:	2e00      	cmp	r6, #0
 800ceca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cece:	ed84 0a01 	vstr	s0, [r4, #4]
 800ced2:	daa6      	bge.n	800ce22 <__ieee754_rem_pio2f+0x66>
 800ced4:	eeb1 7a47 	vneg.f32	s14, s14
 800ced8:	eeb1 0a40 	vneg.f32	s0, s0
 800cedc:	ed84 7a00 	vstr	s14, [r4]
 800cee0:	ed84 0a01 	vstr	s0, [r4, #4]
 800cee4:	4240      	negs	r0, r0
 800cee6:	e79c      	b.n	800ce22 <__ieee754_rem_pio2f+0x66>
 800cee8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800cff4 <__ieee754_rem_pio2f+0x238>
 800ceec:	eef0 6a40 	vmov.f32	s13, s0
 800cef0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800cef4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800cef8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cefc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cffc <__ieee754_rem_pio2f+0x240>
 800cf00:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800cf04:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800cf08:	ee15 2a90 	vmov	r2, s11
 800cf0c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800cf10:	1a5b      	subs	r3, r3, r1
 800cf12:	2b19      	cmp	r3, #25
 800cf14:	dc04      	bgt.n	800cf20 <__ieee754_rem_pio2f+0x164>
 800cf16:	edc4 5a00 	vstr	s11, [r4]
 800cf1a:	eeb0 0a66 	vmov.f32	s0, s13
 800cf1e:	e7cf      	b.n	800cec0 <__ieee754_rem_pio2f+0x104>
 800cf20:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d00c <__ieee754_rem_pio2f+0x250>
 800cf24:	eeb0 0a66 	vmov.f32	s0, s13
 800cf28:	eea6 0a25 	vfma.f32	s0, s12, s11
 800cf2c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800cf30:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d010 <__ieee754_rem_pio2f+0x254>
 800cf34:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cf38:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800cf3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cf40:	ed84 7a00 	vstr	s14, [r4]
 800cf44:	e7bc      	b.n	800cec0 <__ieee754_rem_pio2f+0x104>
 800cf46:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800cf4a:	d306      	bcc.n	800cf5a <__ieee754_rem_pio2f+0x19e>
 800cf4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cf50:	edc0 7a01 	vstr	s15, [r0, #4]
 800cf54:	edc0 7a00 	vstr	s15, [r0]
 800cf58:	e73e      	b.n	800cdd8 <__ieee754_rem_pio2f+0x1c>
 800cf5a:	15ea      	asrs	r2, r5, #23
 800cf5c:	3a86      	subs	r2, #134	@ 0x86
 800cf5e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800cf62:	ee07 3a90 	vmov	s15, r3
 800cf66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cf6a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d014 <__ieee754_rem_pio2f+0x258>
 800cf6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cf72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf76:	ed8d 7a03 	vstr	s14, [sp, #12]
 800cf7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cf7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800cf82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cf86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf8a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800cf8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cf92:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf9a:	edcd 7a05 	vstr	s15, [sp, #20]
 800cf9e:	d11e      	bne.n	800cfde <__ieee754_rem_pio2f+0x222>
 800cfa0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa8:	bf0c      	ite	eq
 800cfaa:	2301      	moveq	r3, #1
 800cfac:	2302      	movne	r3, #2
 800cfae:	491a      	ldr	r1, [pc, #104]	@ (800d018 <__ieee754_rem_pio2f+0x25c>)
 800cfb0:	9101      	str	r1, [sp, #4]
 800cfb2:	2102      	movs	r1, #2
 800cfb4:	9100      	str	r1, [sp, #0]
 800cfb6:	a803      	add	r0, sp, #12
 800cfb8:	4621      	mov	r1, r4
 800cfba:	f000 f90b 	bl	800d1d4 <__kernel_rem_pio2f>
 800cfbe:	2e00      	cmp	r6, #0
 800cfc0:	f6bf af2f 	bge.w	800ce22 <__ieee754_rem_pio2f+0x66>
 800cfc4:	edd4 7a00 	vldr	s15, [r4]
 800cfc8:	eef1 7a67 	vneg.f32	s15, s15
 800cfcc:	edc4 7a00 	vstr	s15, [r4]
 800cfd0:	edd4 7a01 	vldr	s15, [r4, #4]
 800cfd4:	eef1 7a67 	vneg.f32	s15, s15
 800cfd8:	edc4 7a01 	vstr	s15, [r4, #4]
 800cfdc:	e782      	b.n	800cee4 <__ieee754_rem_pio2f+0x128>
 800cfde:	2303      	movs	r3, #3
 800cfe0:	e7e5      	b.n	800cfae <__ieee754_rem_pio2f+0x1f2>
 800cfe2:	bf00      	nop
 800cfe4:	3f490fd8 	.word	0x3f490fd8
 800cfe8:	4016cbe3 	.word	0x4016cbe3
 800cfec:	3fc90f80 	.word	0x3fc90f80
 800cff0:	3fc90fd0 	.word	0x3fc90fd0
 800cff4:	37354400 	.word	0x37354400
 800cff8:	37354443 	.word	0x37354443
 800cffc:	2e85a308 	.word	0x2e85a308
 800d000:	43490f80 	.word	0x43490f80
 800d004:	3f22f984 	.word	0x3f22f984
 800d008:	0800dd08 	.word	0x0800dd08
 800d00c:	2e85a300 	.word	0x2e85a300
 800d010:	248d3132 	.word	0x248d3132
 800d014:	43800000 	.word	0x43800000
 800d018:	0800dd88 	.word	0x0800dd88

0800d01c <atanf>:
 800d01c:	b538      	push	{r3, r4, r5, lr}
 800d01e:	ee10 5a10 	vmov	r5, s0
 800d022:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d026:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d02a:	eef0 7a40 	vmov.f32	s15, s0
 800d02e:	d30f      	bcc.n	800d050 <atanf+0x34>
 800d030:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d034:	d904      	bls.n	800d040 <atanf+0x24>
 800d036:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d03a:	eeb0 0a67 	vmov.f32	s0, s15
 800d03e:	bd38      	pop	{r3, r4, r5, pc}
 800d040:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d178 <atanf+0x15c>
 800d044:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d17c <atanf+0x160>
 800d048:	2d00      	cmp	r5, #0
 800d04a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800d04e:	e7f4      	b.n	800d03a <atanf+0x1e>
 800d050:	4b4b      	ldr	r3, [pc, #300]	@ (800d180 <atanf+0x164>)
 800d052:	429c      	cmp	r4, r3
 800d054:	d810      	bhi.n	800d078 <atanf+0x5c>
 800d056:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d05a:	d20a      	bcs.n	800d072 <atanf+0x56>
 800d05c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d184 <atanf+0x168>
 800d060:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d064:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d068:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d070:	dce3      	bgt.n	800d03a <atanf+0x1e>
 800d072:	f04f 33ff 	mov.w	r3, #4294967295
 800d076:	e013      	b.n	800d0a0 <atanf+0x84>
 800d078:	f000 f8a4 	bl	800d1c4 <fabsf>
 800d07c:	4b42      	ldr	r3, [pc, #264]	@ (800d188 <atanf+0x16c>)
 800d07e:	429c      	cmp	r4, r3
 800d080:	d84f      	bhi.n	800d122 <atanf+0x106>
 800d082:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d086:	429c      	cmp	r4, r3
 800d088:	d841      	bhi.n	800d10e <atanf+0xf2>
 800d08a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d08e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d092:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d096:	2300      	movs	r3, #0
 800d098:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d09c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d0a6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800d18c <atanf+0x170>
 800d0aa:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800d190 <atanf+0x174>
 800d0ae:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800d194 <atanf+0x178>
 800d0b2:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d0b6:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d0ba:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800d198 <atanf+0x17c>
 800d0be:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d0c2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800d19c <atanf+0x180>
 800d0c6:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d0ca:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800d1a0 <atanf+0x184>
 800d0ce:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d0d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d1a4 <atanf+0x188>
 800d0d6:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d0da:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800d1a8 <atanf+0x18c>
 800d0de:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d0e2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d1ac <atanf+0x190>
 800d0e6:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d0ea:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800d1b0 <atanf+0x194>
 800d0ee:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d0f2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800d1b4 <atanf+0x198>
 800d0f6:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d0fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d0fe:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d102:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d106:	d121      	bne.n	800d14c <atanf+0x130>
 800d108:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d10c:	e795      	b.n	800d03a <atanf+0x1e>
 800d10e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d112:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d116:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d11a:	2301      	movs	r3, #1
 800d11c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d120:	e7be      	b.n	800d0a0 <atanf+0x84>
 800d122:	4b25      	ldr	r3, [pc, #148]	@ (800d1b8 <atanf+0x19c>)
 800d124:	429c      	cmp	r4, r3
 800d126:	d80b      	bhi.n	800d140 <atanf+0x124>
 800d128:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d12c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d130:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d134:	2302      	movs	r3, #2
 800d136:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d13a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d13e:	e7af      	b.n	800d0a0 <atanf+0x84>
 800d140:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d144:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d148:	2303      	movs	r3, #3
 800d14a:	e7a9      	b.n	800d0a0 <atanf+0x84>
 800d14c:	4a1b      	ldr	r2, [pc, #108]	@ (800d1bc <atanf+0x1a0>)
 800d14e:	491c      	ldr	r1, [pc, #112]	@ (800d1c0 <atanf+0x1a4>)
 800d150:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d154:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d158:	edd3 6a00 	vldr	s13, [r3]
 800d15c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d160:	2d00      	cmp	r5, #0
 800d162:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d166:	edd2 7a00 	vldr	s15, [r2]
 800d16a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d16e:	bfb8      	it	lt
 800d170:	eef1 7a67 	vneglt.f32	s15, s15
 800d174:	e761      	b.n	800d03a <atanf+0x1e>
 800d176:	bf00      	nop
 800d178:	bfc90fdb 	.word	0xbfc90fdb
 800d17c:	3fc90fdb 	.word	0x3fc90fdb
 800d180:	3edfffff 	.word	0x3edfffff
 800d184:	7149f2ca 	.word	0x7149f2ca
 800d188:	3f97ffff 	.word	0x3f97ffff
 800d18c:	3c8569d7 	.word	0x3c8569d7
 800d190:	3d4bda59 	.word	0x3d4bda59
 800d194:	bd6ef16b 	.word	0xbd6ef16b
 800d198:	3d886b35 	.word	0x3d886b35
 800d19c:	3dba2e6e 	.word	0x3dba2e6e
 800d1a0:	3e124925 	.word	0x3e124925
 800d1a4:	3eaaaaab 	.word	0x3eaaaaab
 800d1a8:	bd15a221 	.word	0xbd15a221
 800d1ac:	bd9d8795 	.word	0xbd9d8795
 800d1b0:	bde38e38 	.word	0xbde38e38
 800d1b4:	be4ccccd 	.word	0xbe4ccccd
 800d1b8:	401bffff 	.word	0x401bffff
 800d1bc:	0800e0b0 	.word	0x0800e0b0
 800d1c0:	0800e0a0 	.word	0x0800e0a0

0800d1c4 <fabsf>:
 800d1c4:	ee10 3a10 	vmov	r3, s0
 800d1c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d1cc:	ee00 3a10 	vmov	s0, r3
 800d1d0:	4770      	bx	lr
	...

0800d1d4 <__kernel_rem_pio2f>:
 800d1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1d8:	ed2d 8b04 	vpush	{d8-d9}
 800d1dc:	b0d9      	sub	sp, #356	@ 0x164
 800d1de:	4690      	mov	r8, r2
 800d1e0:	9001      	str	r0, [sp, #4]
 800d1e2:	4ab6      	ldr	r2, [pc, #728]	@ (800d4bc <__kernel_rem_pio2f+0x2e8>)
 800d1e4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d1e6:	f118 0f04 	cmn.w	r8, #4
 800d1ea:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d1ee:	460f      	mov	r7, r1
 800d1f0:	f103 3bff 	add.w	fp, r3, #4294967295
 800d1f4:	db26      	blt.n	800d244 <__kernel_rem_pio2f+0x70>
 800d1f6:	f1b8 0203 	subs.w	r2, r8, #3
 800d1fa:	bf48      	it	mi
 800d1fc:	f108 0204 	addmi.w	r2, r8, #4
 800d200:	10d2      	asrs	r2, r2, #3
 800d202:	1c55      	adds	r5, r2, #1
 800d204:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d206:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d4cc <__kernel_rem_pio2f+0x2f8>
 800d20a:	00e8      	lsls	r0, r5, #3
 800d20c:	eba2 060b 	sub.w	r6, r2, fp
 800d210:	9002      	str	r0, [sp, #8]
 800d212:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d216:	eb0a 0c0b 	add.w	ip, sl, fp
 800d21a:	ac1c      	add	r4, sp, #112	@ 0x70
 800d21c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d220:	2000      	movs	r0, #0
 800d222:	4560      	cmp	r0, ip
 800d224:	dd10      	ble.n	800d248 <__kernel_rem_pio2f+0x74>
 800d226:	a91c      	add	r1, sp, #112	@ 0x70
 800d228:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d22c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d230:	2600      	movs	r6, #0
 800d232:	4556      	cmp	r6, sl
 800d234:	dc24      	bgt.n	800d280 <__kernel_rem_pio2f+0xac>
 800d236:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d23a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d4cc <__kernel_rem_pio2f+0x2f8>
 800d23e:	4684      	mov	ip, r0
 800d240:	2400      	movs	r4, #0
 800d242:	e016      	b.n	800d272 <__kernel_rem_pio2f+0x9e>
 800d244:	2200      	movs	r2, #0
 800d246:	e7dc      	b.n	800d202 <__kernel_rem_pio2f+0x2e>
 800d248:	42c6      	cmn	r6, r0
 800d24a:	bf5d      	ittte	pl
 800d24c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d250:	ee07 1a90 	vmovpl	s15, r1
 800d254:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d258:	eef0 7a47 	vmovmi.f32	s15, s14
 800d25c:	ece4 7a01 	vstmia	r4!, {s15}
 800d260:	3001      	adds	r0, #1
 800d262:	e7de      	b.n	800d222 <__kernel_rem_pio2f+0x4e>
 800d264:	ecfe 6a01 	vldmia	lr!, {s13}
 800d268:	ed3c 7a01 	vldmdb	ip!, {s14}
 800d26c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d270:	3401      	adds	r4, #1
 800d272:	455c      	cmp	r4, fp
 800d274:	ddf6      	ble.n	800d264 <__kernel_rem_pio2f+0x90>
 800d276:	ece9 7a01 	vstmia	r9!, {s15}
 800d27a:	3601      	adds	r6, #1
 800d27c:	3004      	adds	r0, #4
 800d27e:	e7d8      	b.n	800d232 <__kernel_rem_pio2f+0x5e>
 800d280:	a908      	add	r1, sp, #32
 800d282:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d286:	9104      	str	r1, [sp, #16]
 800d288:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d28a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d4c8 <__kernel_rem_pio2f+0x2f4>
 800d28e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d4c4 <__kernel_rem_pio2f+0x2f0>
 800d292:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d296:	9203      	str	r2, [sp, #12]
 800d298:	4654      	mov	r4, sl
 800d29a:	00a2      	lsls	r2, r4, #2
 800d29c:	9205      	str	r2, [sp, #20]
 800d29e:	aa58      	add	r2, sp, #352	@ 0x160
 800d2a0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d2a4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d2a8:	a944      	add	r1, sp, #272	@ 0x110
 800d2aa:	aa08      	add	r2, sp, #32
 800d2ac:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d2b0:	4694      	mov	ip, r2
 800d2b2:	4626      	mov	r6, r4
 800d2b4:	2e00      	cmp	r6, #0
 800d2b6:	dc4c      	bgt.n	800d352 <__kernel_rem_pio2f+0x17e>
 800d2b8:	4628      	mov	r0, r5
 800d2ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2be:	f000 f9f1 	bl	800d6a4 <scalbnf>
 800d2c2:	eeb0 8a40 	vmov.f32	s16, s0
 800d2c6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d2ca:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d2ce:	f000 fa4d 	bl	800d76c <floorf>
 800d2d2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d2d6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d2da:	2d00      	cmp	r5, #0
 800d2dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2e0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d2e4:	ee17 9a90 	vmov	r9, s15
 800d2e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2ec:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d2f0:	dd41      	ble.n	800d376 <__kernel_rem_pio2f+0x1a2>
 800d2f2:	f104 3cff 	add.w	ip, r4, #4294967295
 800d2f6:	a908      	add	r1, sp, #32
 800d2f8:	f1c5 0e08 	rsb	lr, r5, #8
 800d2fc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d300:	fa46 f00e 	asr.w	r0, r6, lr
 800d304:	4481      	add	r9, r0
 800d306:	fa00 f00e 	lsl.w	r0, r0, lr
 800d30a:	1a36      	subs	r6, r6, r0
 800d30c:	f1c5 0007 	rsb	r0, r5, #7
 800d310:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d314:	4106      	asrs	r6, r0
 800d316:	2e00      	cmp	r6, #0
 800d318:	dd3c      	ble.n	800d394 <__kernel_rem_pio2f+0x1c0>
 800d31a:	f04f 0e00 	mov.w	lr, #0
 800d31e:	f109 0901 	add.w	r9, r9, #1
 800d322:	4670      	mov	r0, lr
 800d324:	4574      	cmp	r4, lr
 800d326:	dc68      	bgt.n	800d3fa <__kernel_rem_pio2f+0x226>
 800d328:	2d00      	cmp	r5, #0
 800d32a:	dd03      	ble.n	800d334 <__kernel_rem_pio2f+0x160>
 800d32c:	2d01      	cmp	r5, #1
 800d32e:	d074      	beq.n	800d41a <__kernel_rem_pio2f+0x246>
 800d330:	2d02      	cmp	r5, #2
 800d332:	d07d      	beq.n	800d430 <__kernel_rem_pio2f+0x25c>
 800d334:	2e02      	cmp	r6, #2
 800d336:	d12d      	bne.n	800d394 <__kernel_rem_pio2f+0x1c0>
 800d338:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d33c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d340:	b340      	cbz	r0, 800d394 <__kernel_rem_pio2f+0x1c0>
 800d342:	4628      	mov	r0, r5
 800d344:	9306      	str	r3, [sp, #24]
 800d346:	f000 f9ad 	bl	800d6a4 <scalbnf>
 800d34a:	9b06      	ldr	r3, [sp, #24]
 800d34c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d350:	e020      	b.n	800d394 <__kernel_rem_pio2f+0x1c0>
 800d352:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d356:	3e01      	subs	r6, #1
 800d358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d35c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d360:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d364:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d368:	ecac 0a01 	vstmia	ip!, {s0}
 800d36c:	ed30 0a01 	vldmdb	r0!, {s0}
 800d370:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d374:	e79e      	b.n	800d2b4 <__kernel_rem_pio2f+0xe0>
 800d376:	d105      	bne.n	800d384 <__kernel_rem_pio2f+0x1b0>
 800d378:	1e60      	subs	r0, r4, #1
 800d37a:	a908      	add	r1, sp, #32
 800d37c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d380:	11f6      	asrs	r6, r6, #7
 800d382:	e7c8      	b.n	800d316 <__kernel_rem_pio2f+0x142>
 800d384:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d388:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d390:	da31      	bge.n	800d3f6 <__kernel_rem_pio2f+0x222>
 800d392:	2600      	movs	r6, #0
 800d394:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39c:	f040 8098 	bne.w	800d4d0 <__kernel_rem_pio2f+0x2fc>
 800d3a0:	1e60      	subs	r0, r4, #1
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	4550      	cmp	r0, sl
 800d3a6:	da4b      	bge.n	800d440 <__kernel_rem_pio2f+0x26c>
 800d3a8:	2a00      	cmp	r2, #0
 800d3aa:	d065      	beq.n	800d478 <__kernel_rem_pio2f+0x2a4>
 800d3ac:	3c01      	subs	r4, #1
 800d3ae:	ab08      	add	r3, sp, #32
 800d3b0:	3d08      	subs	r5, #8
 800d3b2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d0f8      	beq.n	800d3ac <__kernel_rem_pio2f+0x1d8>
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d3c0:	f000 f970 	bl	800d6a4 <scalbnf>
 800d3c4:	1c63      	adds	r3, r4, #1
 800d3c6:	aa44      	add	r2, sp, #272	@ 0x110
 800d3c8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d4c8 <__kernel_rem_pio2f+0x2f4>
 800d3cc:	0099      	lsls	r1, r3, #2
 800d3ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d3d2:	4623      	mov	r3, r4
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f280 80a9 	bge.w	800d52c <__kernel_rem_pio2f+0x358>
 800d3da:	4623      	mov	r3, r4
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f2c0 80c7 	blt.w	800d570 <__kernel_rem_pio2f+0x39c>
 800d3e2:	aa44      	add	r2, sp, #272	@ 0x110
 800d3e4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d3e8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d4c0 <__kernel_rem_pio2f+0x2ec>
 800d3ec:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d4cc <__kernel_rem_pio2f+0x2f8>
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	1ae2      	subs	r2, r4, r3
 800d3f4:	e0b1      	b.n	800d55a <__kernel_rem_pio2f+0x386>
 800d3f6:	2602      	movs	r6, #2
 800d3f8:	e78f      	b.n	800d31a <__kernel_rem_pio2f+0x146>
 800d3fa:	f852 1b04 	ldr.w	r1, [r2], #4
 800d3fe:	b948      	cbnz	r0, 800d414 <__kernel_rem_pio2f+0x240>
 800d400:	b121      	cbz	r1, 800d40c <__kernel_rem_pio2f+0x238>
 800d402:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d406:	f842 1c04 	str.w	r1, [r2, #-4]
 800d40a:	2101      	movs	r1, #1
 800d40c:	f10e 0e01 	add.w	lr, lr, #1
 800d410:	4608      	mov	r0, r1
 800d412:	e787      	b.n	800d324 <__kernel_rem_pio2f+0x150>
 800d414:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d418:	e7f5      	b.n	800d406 <__kernel_rem_pio2f+0x232>
 800d41a:	f104 3cff 	add.w	ip, r4, #4294967295
 800d41e:	aa08      	add	r2, sp, #32
 800d420:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d424:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d428:	a908      	add	r1, sp, #32
 800d42a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d42e:	e781      	b.n	800d334 <__kernel_rem_pio2f+0x160>
 800d430:	f104 3cff 	add.w	ip, r4, #4294967295
 800d434:	aa08      	add	r2, sp, #32
 800d436:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d43a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d43e:	e7f3      	b.n	800d428 <__kernel_rem_pio2f+0x254>
 800d440:	a908      	add	r1, sp, #32
 800d442:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d446:	3801      	subs	r0, #1
 800d448:	430a      	orrs	r2, r1
 800d44a:	e7ab      	b.n	800d3a4 <__kernel_rem_pio2f+0x1d0>
 800d44c:	3201      	adds	r2, #1
 800d44e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d452:	2e00      	cmp	r6, #0
 800d454:	d0fa      	beq.n	800d44c <__kernel_rem_pio2f+0x278>
 800d456:	9905      	ldr	r1, [sp, #20]
 800d458:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d45c:	eb0d 0001 	add.w	r0, sp, r1
 800d460:	18e6      	adds	r6, r4, r3
 800d462:	a91c      	add	r1, sp, #112	@ 0x70
 800d464:	f104 0c01 	add.w	ip, r4, #1
 800d468:	384c      	subs	r0, #76	@ 0x4c
 800d46a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d46e:	4422      	add	r2, r4
 800d470:	4562      	cmp	r2, ip
 800d472:	da04      	bge.n	800d47e <__kernel_rem_pio2f+0x2aa>
 800d474:	4614      	mov	r4, r2
 800d476:	e710      	b.n	800d29a <__kernel_rem_pio2f+0xc6>
 800d478:	9804      	ldr	r0, [sp, #16]
 800d47a:	2201      	movs	r2, #1
 800d47c:	e7e7      	b.n	800d44e <__kernel_rem_pio2f+0x27a>
 800d47e:	9903      	ldr	r1, [sp, #12]
 800d480:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d484:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d488:	9105      	str	r1, [sp, #20]
 800d48a:	ee07 1a90 	vmov	s15, r1
 800d48e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d492:	2400      	movs	r4, #0
 800d494:	ece6 7a01 	vstmia	r6!, {s15}
 800d498:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d4cc <__kernel_rem_pio2f+0x2f8>
 800d49c:	46b1      	mov	r9, r6
 800d49e:	455c      	cmp	r4, fp
 800d4a0:	dd04      	ble.n	800d4ac <__kernel_rem_pio2f+0x2d8>
 800d4a2:	ece0 7a01 	vstmia	r0!, {s15}
 800d4a6:	f10c 0c01 	add.w	ip, ip, #1
 800d4aa:	e7e1      	b.n	800d470 <__kernel_rem_pio2f+0x29c>
 800d4ac:	ecfe 6a01 	vldmia	lr!, {s13}
 800d4b0:	ed39 7a01 	vldmdb	r9!, {s14}
 800d4b4:	3401      	adds	r4, #1
 800d4b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d4ba:	e7f0      	b.n	800d49e <__kernel_rem_pio2f+0x2ca>
 800d4bc:	0800e0ec 	.word	0x0800e0ec
 800d4c0:	0800e0c0 	.word	0x0800e0c0
 800d4c4:	43800000 	.word	0x43800000
 800d4c8:	3b800000 	.word	0x3b800000
 800d4cc:	00000000 	.word	0x00000000
 800d4d0:	9b02      	ldr	r3, [sp, #8]
 800d4d2:	eeb0 0a48 	vmov.f32	s0, s16
 800d4d6:	eba3 0008 	sub.w	r0, r3, r8
 800d4da:	f000 f8e3 	bl	800d6a4 <scalbnf>
 800d4de:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d4c4 <__kernel_rem_pio2f+0x2f0>
 800d4e2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ea:	db19      	blt.n	800d520 <__kernel_rem_pio2f+0x34c>
 800d4ec:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d4c8 <__kernel_rem_pio2f+0x2f4>
 800d4f0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d4f4:	aa08      	add	r2, sp, #32
 800d4f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d4fa:	3508      	adds	r5, #8
 800d4fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d500:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d504:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d508:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d50c:	ee10 3a10 	vmov	r3, s0
 800d510:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d514:	ee17 3a90 	vmov	r3, s15
 800d518:	3401      	adds	r4, #1
 800d51a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d51e:	e74c      	b.n	800d3ba <__kernel_rem_pio2f+0x1e6>
 800d520:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d524:	aa08      	add	r2, sp, #32
 800d526:	ee10 3a10 	vmov	r3, s0
 800d52a:	e7f6      	b.n	800d51a <__kernel_rem_pio2f+0x346>
 800d52c:	a808      	add	r0, sp, #32
 800d52e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d532:	9001      	str	r0, [sp, #4]
 800d534:	ee07 0a90 	vmov	s15, r0
 800d538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d53c:	3b01      	subs	r3, #1
 800d53e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d542:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d546:	ed62 7a01 	vstmdb	r2!, {s15}
 800d54a:	e743      	b.n	800d3d4 <__kernel_rem_pio2f+0x200>
 800d54c:	ecfc 6a01 	vldmia	ip!, {s13}
 800d550:	ecb5 7a01 	vldmia	r5!, {s14}
 800d554:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d558:	3001      	adds	r0, #1
 800d55a:	4550      	cmp	r0, sl
 800d55c:	dc01      	bgt.n	800d562 <__kernel_rem_pio2f+0x38e>
 800d55e:	4290      	cmp	r0, r2
 800d560:	ddf4      	ble.n	800d54c <__kernel_rem_pio2f+0x378>
 800d562:	a858      	add	r0, sp, #352	@ 0x160
 800d564:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d568:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d56c:	3b01      	subs	r3, #1
 800d56e:	e735      	b.n	800d3dc <__kernel_rem_pio2f+0x208>
 800d570:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d572:	2b02      	cmp	r3, #2
 800d574:	dc09      	bgt.n	800d58a <__kernel_rem_pio2f+0x3b6>
 800d576:	2b00      	cmp	r3, #0
 800d578:	dc27      	bgt.n	800d5ca <__kernel_rem_pio2f+0x3f6>
 800d57a:	d040      	beq.n	800d5fe <__kernel_rem_pio2f+0x42a>
 800d57c:	f009 0007 	and.w	r0, r9, #7
 800d580:	b059      	add	sp, #356	@ 0x164
 800d582:	ecbd 8b04 	vpop	{d8-d9}
 800d586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d58a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d58c:	2b03      	cmp	r3, #3
 800d58e:	d1f5      	bne.n	800d57c <__kernel_rem_pio2f+0x3a8>
 800d590:	aa30      	add	r2, sp, #192	@ 0xc0
 800d592:	1f0b      	subs	r3, r1, #4
 800d594:	4413      	add	r3, r2
 800d596:	461a      	mov	r2, r3
 800d598:	4620      	mov	r0, r4
 800d59a:	2800      	cmp	r0, #0
 800d59c:	dc50      	bgt.n	800d640 <__kernel_rem_pio2f+0x46c>
 800d59e:	4622      	mov	r2, r4
 800d5a0:	2a01      	cmp	r2, #1
 800d5a2:	dc5d      	bgt.n	800d660 <__kernel_rem_pio2f+0x48c>
 800d5a4:	ab30      	add	r3, sp, #192	@ 0xc0
 800d5a6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d4cc <__kernel_rem_pio2f+0x2f8>
 800d5aa:	440b      	add	r3, r1
 800d5ac:	2c01      	cmp	r4, #1
 800d5ae:	dc67      	bgt.n	800d680 <__kernel_rem_pio2f+0x4ac>
 800d5b0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d5b4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d5b8:	2e00      	cmp	r6, #0
 800d5ba:	d167      	bne.n	800d68c <__kernel_rem_pio2f+0x4b8>
 800d5bc:	edc7 6a00 	vstr	s13, [r7]
 800d5c0:	ed87 7a01 	vstr	s14, [r7, #4]
 800d5c4:	edc7 7a02 	vstr	s15, [r7, #8]
 800d5c8:	e7d8      	b.n	800d57c <__kernel_rem_pio2f+0x3a8>
 800d5ca:	ab30      	add	r3, sp, #192	@ 0xc0
 800d5cc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d4cc <__kernel_rem_pio2f+0x2f8>
 800d5d0:	440b      	add	r3, r1
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	2a00      	cmp	r2, #0
 800d5d6:	da24      	bge.n	800d622 <__kernel_rem_pio2f+0x44e>
 800d5d8:	b34e      	cbz	r6, 800d62e <__kernel_rem_pio2f+0x45a>
 800d5da:	eef1 7a47 	vneg.f32	s15, s14
 800d5de:	edc7 7a00 	vstr	s15, [r7]
 800d5e2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d5e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5ea:	aa31      	add	r2, sp, #196	@ 0xc4
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	429c      	cmp	r4, r3
 800d5f0:	da20      	bge.n	800d634 <__kernel_rem_pio2f+0x460>
 800d5f2:	b10e      	cbz	r6, 800d5f8 <__kernel_rem_pio2f+0x424>
 800d5f4:	eef1 7a67 	vneg.f32	s15, s15
 800d5f8:	edc7 7a01 	vstr	s15, [r7, #4]
 800d5fc:	e7be      	b.n	800d57c <__kernel_rem_pio2f+0x3a8>
 800d5fe:	ab30      	add	r3, sp, #192	@ 0xc0
 800d600:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d4cc <__kernel_rem_pio2f+0x2f8>
 800d604:	440b      	add	r3, r1
 800d606:	2c00      	cmp	r4, #0
 800d608:	da05      	bge.n	800d616 <__kernel_rem_pio2f+0x442>
 800d60a:	b10e      	cbz	r6, 800d610 <__kernel_rem_pio2f+0x43c>
 800d60c:	eef1 7a67 	vneg.f32	s15, s15
 800d610:	edc7 7a00 	vstr	s15, [r7]
 800d614:	e7b2      	b.n	800d57c <__kernel_rem_pio2f+0x3a8>
 800d616:	ed33 7a01 	vldmdb	r3!, {s14}
 800d61a:	3c01      	subs	r4, #1
 800d61c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d620:	e7f1      	b.n	800d606 <__kernel_rem_pio2f+0x432>
 800d622:	ed73 7a01 	vldmdb	r3!, {s15}
 800d626:	3a01      	subs	r2, #1
 800d628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d62c:	e7d2      	b.n	800d5d4 <__kernel_rem_pio2f+0x400>
 800d62e:	eef0 7a47 	vmov.f32	s15, s14
 800d632:	e7d4      	b.n	800d5de <__kernel_rem_pio2f+0x40a>
 800d634:	ecb2 7a01 	vldmia	r2!, {s14}
 800d638:	3301      	adds	r3, #1
 800d63a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d63e:	e7d6      	b.n	800d5ee <__kernel_rem_pio2f+0x41a>
 800d640:	ed72 7a01 	vldmdb	r2!, {s15}
 800d644:	edd2 6a01 	vldr	s13, [r2, #4]
 800d648:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d64c:	3801      	subs	r0, #1
 800d64e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d652:	ed82 7a00 	vstr	s14, [r2]
 800d656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d65a:	edc2 7a01 	vstr	s15, [r2, #4]
 800d65e:	e79c      	b.n	800d59a <__kernel_rem_pio2f+0x3c6>
 800d660:	ed73 7a01 	vldmdb	r3!, {s15}
 800d664:	edd3 6a01 	vldr	s13, [r3, #4]
 800d668:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d66c:	3a01      	subs	r2, #1
 800d66e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d672:	ed83 7a00 	vstr	s14, [r3]
 800d676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d67a:	edc3 7a01 	vstr	s15, [r3, #4]
 800d67e:	e78f      	b.n	800d5a0 <__kernel_rem_pio2f+0x3cc>
 800d680:	ed33 7a01 	vldmdb	r3!, {s14}
 800d684:	3c01      	subs	r4, #1
 800d686:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d68a:	e78f      	b.n	800d5ac <__kernel_rem_pio2f+0x3d8>
 800d68c:	eef1 6a66 	vneg.f32	s13, s13
 800d690:	eeb1 7a47 	vneg.f32	s14, s14
 800d694:	edc7 6a00 	vstr	s13, [r7]
 800d698:	ed87 7a01 	vstr	s14, [r7, #4]
 800d69c:	eef1 7a67 	vneg.f32	s15, s15
 800d6a0:	e790      	b.n	800d5c4 <__kernel_rem_pio2f+0x3f0>
 800d6a2:	bf00      	nop

0800d6a4 <scalbnf>:
 800d6a4:	ee10 3a10 	vmov	r3, s0
 800d6a8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d6ac:	d02a      	beq.n	800d704 <scalbnf+0x60>
 800d6ae:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d6b2:	d302      	bcc.n	800d6ba <scalbnf+0x16>
 800d6b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d6b8:	4770      	bx	lr
 800d6ba:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d6be:	d122      	bne.n	800d706 <scalbnf+0x62>
 800d6c0:	4b23      	ldr	r3, [pc, #140]	@ (800d750 <scalbnf+0xac>)
 800d6c2:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800d754 <scalbnf+0xb0>
 800d6c6:	4298      	cmp	r0, r3
 800d6c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d6cc:	db16      	blt.n	800d6fc <scalbnf+0x58>
 800d6ce:	ee10 3a10 	vmov	r3, s0
 800d6d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d6d6:	3a19      	subs	r2, #25
 800d6d8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d6dc:	4288      	cmp	r0, r1
 800d6de:	dd14      	ble.n	800d70a <scalbnf+0x66>
 800d6e0:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800d758 <scalbnf+0xb4>
 800d6e4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800d75c <scalbnf+0xb8>
 800d6e8:	ee10 3a10 	vmov	r3, s0
 800d6ec:	eeb0 7a67 	vmov.f32	s14, s15
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800d6f6:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d6fa:	4770      	bx	lr
 800d6fc:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800d760 <scalbnf+0xbc>
 800d700:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d704:	4770      	bx	lr
 800d706:	0dd2      	lsrs	r2, r2, #23
 800d708:	e7e6      	b.n	800d6d8 <scalbnf+0x34>
 800d70a:	4410      	add	r0, r2
 800d70c:	28fe      	cmp	r0, #254	@ 0xfe
 800d70e:	dce7      	bgt.n	800d6e0 <scalbnf+0x3c>
 800d710:	2800      	cmp	r0, #0
 800d712:	dd06      	ble.n	800d722 <scalbnf+0x7e>
 800d714:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d718:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d71c:	ee00 3a10 	vmov	s0, r3
 800d720:	4770      	bx	lr
 800d722:	f110 0f16 	cmn.w	r0, #22
 800d726:	da09      	bge.n	800d73c <scalbnf+0x98>
 800d728:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d760 <scalbnf+0xbc>
 800d72c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800d764 <scalbnf+0xc0>
 800d730:	ee10 3a10 	vmov	r3, s0
 800d734:	eeb0 7a67 	vmov.f32	s14, s15
 800d738:	2b00      	cmp	r3, #0
 800d73a:	e7da      	b.n	800d6f2 <scalbnf+0x4e>
 800d73c:	3019      	adds	r0, #25
 800d73e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d742:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d746:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d768 <scalbnf+0xc4>
 800d74a:	ee07 3a90 	vmov	s15, r3
 800d74e:	e7d7      	b.n	800d700 <scalbnf+0x5c>
 800d750:	ffff3cb0 	.word	0xffff3cb0
 800d754:	4c000000 	.word	0x4c000000
 800d758:	7149f2ca 	.word	0x7149f2ca
 800d75c:	f149f2ca 	.word	0xf149f2ca
 800d760:	0da24260 	.word	0x0da24260
 800d764:	8da24260 	.word	0x8da24260
 800d768:	33000000 	.word	0x33000000

0800d76c <floorf>:
 800d76c:	ee10 3a10 	vmov	r3, s0
 800d770:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d774:	3a7f      	subs	r2, #127	@ 0x7f
 800d776:	2a16      	cmp	r2, #22
 800d778:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d77c:	dc2b      	bgt.n	800d7d6 <floorf+0x6a>
 800d77e:	2a00      	cmp	r2, #0
 800d780:	da12      	bge.n	800d7a8 <floorf+0x3c>
 800d782:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d7e8 <floorf+0x7c>
 800d786:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d78a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d792:	dd06      	ble.n	800d7a2 <floorf+0x36>
 800d794:	2b00      	cmp	r3, #0
 800d796:	da24      	bge.n	800d7e2 <floorf+0x76>
 800d798:	2900      	cmp	r1, #0
 800d79a:	4b14      	ldr	r3, [pc, #80]	@ (800d7ec <floorf+0x80>)
 800d79c:	bf08      	it	eq
 800d79e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d7a2:	ee00 3a10 	vmov	s0, r3
 800d7a6:	4770      	bx	lr
 800d7a8:	4911      	ldr	r1, [pc, #68]	@ (800d7f0 <floorf+0x84>)
 800d7aa:	4111      	asrs	r1, r2
 800d7ac:	420b      	tst	r3, r1
 800d7ae:	d0fa      	beq.n	800d7a6 <floorf+0x3a>
 800d7b0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d7e8 <floorf+0x7c>
 800d7b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d7b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c0:	ddef      	ble.n	800d7a2 <floorf+0x36>
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bfbe      	ittt	lt
 800d7c6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d7ca:	fa40 f202 	asrlt.w	r2, r0, r2
 800d7ce:	189b      	addlt	r3, r3, r2
 800d7d0:	ea23 0301 	bic.w	r3, r3, r1
 800d7d4:	e7e5      	b.n	800d7a2 <floorf+0x36>
 800d7d6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d7da:	d3e4      	bcc.n	800d7a6 <floorf+0x3a>
 800d7dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d7e0:	4770      	bx	lr
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	e7dd      	b.n	800d7a2 <floorf+0x36>
 800d7e6:	bf00      	nop
 800d7e8:	7149f2ca 	.word	0x7149f2ca
 800d7ec:	bf800000 	.word	0xbf800000
 800d7f0:	007fffff 	.word	0x007fffff

0800d7f4 <_init>:
 800d7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f6:	bf00      	nop
 800d7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7fa:	bc08      	pop	{r3}
 800d7fc:	469e      	mov	lr, r3
 800d7fe:	4770      	bx	lr

0800d800 <_fini>:
 800d800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d802:	bf00      	nop
 800d804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d806:	bc08      	pop	{r3}
 800d808:	469e      	mov	lr, r3
 800d80a:	4770      	bx	lr
