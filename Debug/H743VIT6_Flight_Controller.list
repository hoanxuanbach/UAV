
H743VIT6_Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e394  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e8  0800e638  0800e638  0000f638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ef20  0800ef20  0000ff20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ef28  0800ef28  0000ff28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ef2c  0800ef2c  0000ff2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  0800ef30  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000a90  240001e0  0800f110  000101e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000c70  0800f110  00010c70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015390  00000000  00000000  0001020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003012  00000000  00000000  0002559e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011c0  00000000  00000000  000285b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d87  00000000  00000000  00029770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038ff8  00000000  00000000  0002a4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018fd3  00000000  00000000  000634ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001639ca  00000000  00000000  0007c4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001dfe8c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005aec  00000000  00000000  001dfed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001e59bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e61c 	.word	0x0800e61c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800e61c 	.word	0x0800e61c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070e:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000714:	4a27      	ldr	r2, [pc, #156]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_DMA_Init+0xac>)
 800072e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000732:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_DMA_Init+0xac>)
 800073e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	200b      	movs	r0, #11
 8000750:	f002 fb83 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000754:	200b      	movs	r0, #11
 8000756:	f002 fb9a 	bl	8002e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	200c      	movs	r0, #12
 8000760:	f002 fb7b 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000764:	200c      	movs	r0, #12
 8000766:	f002 fb92 	bl	8002e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200d      	movs	r0, #13
 8000770:	f002 fb73 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000774:	200d      	movs	r0, #13
 8000776:	f002 fb8a 	bl	8002e8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200e      	movs	r0, #14
 8000780:	f002 fb6b 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000784:	200e      	movs	r0, #14
 8000786:	f002 fb82 	bl	8002e8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2039      	movs	r0, #57	@ 0x39
 8000790:	f002 fb63 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000794:	2039      	movs	r0, #57	@ 0x39
 8000796:	f002 fb7a 	bl	8002e8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	203b      	movs	r0, #59	@ 0x3b
 80007a0:	f002 fb5b 	bl	8002e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007a4:	203b      	movs	r0, #59	@ 0x3b
 80007a6:	f002 fb72 	bl	8002e8e <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58024400 	.word	0x58024400

080007b8 <Dshot_CalculateCRCandTelemtryBit>:
#include "dshot.h"



uint16_t Dshot_CalculateCRCandTelemtryBit(uint16_t value) {
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
    value = value << 1;
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	80fb      	strh	r3, [r7, #6]
    return ((value ^ (value >> 4) ^ (value >> 8))) & 0x0F;
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	091b      	lsrs	r3, r3, #4
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	4053      	eors	r3, r2
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	b29b      	uxth	r3, r3
 80007da:	4053      	eors	r3, r2
 80007dc:	b29b      	uxth	r3, r3
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	b29b      	uxth	r3, r3
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <Dshot_GetDshotFrame>:

uint16_t Dshot_GetDshotFrame(uint16_t value) {
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	80fb      	strh	r3, [r7, #6]
    return ((value << 5) | Dshot_CalculateCRCandTelemtryBit(value));
 80007fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007fe:	015b      	lsls	r3, r3, #5
 8000800:	b21c      	sxth	r4, r3
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ffd7 	bl	80007b8 <Dshot_CalculateCRCandTelemtryBit>
 800080a:	4603      	mov	r3, r0
 800080c:	b21b      	sxth	r3, r3
 800080e:	4323      	orrs	r3, r4
 8000810:	b21b      	sxth	r3, r3
 8000812:	b29b      	uxth	r3, r3
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}

0800081c <Dshot_DMABuffer_init>:

void Dshot_DMABuffer_init(uint32_t *MemoryBuffer){
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MEM_BUFFER_LENGTH ; i++){
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	e008      	b.n	800083c <Dshot_DMABuffer_init+0x20>
		MemoryBuffer[i] = BIT_0_CCR_REG_VALUE;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	2278      	movs	r2, #120	@ 0x78
 8000834:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MEM_BUFFER_LENGTH ; i++){
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3301      	adds	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	ddf3      	ble.n	800082a <Dshot_DMABuffer_init+0xe>
	}

}
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <Dshot_MemoryBuffer_init>:
void Dshot_MemoryBuffer_init(uint32_t *dmaBuffer){
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	for (int i = MEM_BUFFER_LENGTH; i < DMA_BUFFER_LENGTH; i++){
 8000858:	2310      	movs	r3, #16
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	e008      	b.n	8000870 <Dshot_MemoryBuffer_init+0x20>
		dmaBuffer[i] = 0;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
	for (int i = MEM_BUFFER_LENGTH; i < DMA_BUFFER_LENGTH; i++){
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3301      	adds	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b1f      	cmp	r3, #31
 8000874:	ddf3      	ble.n	800085e <Dshot_MemoryBuffer_init+0xe>
	}

}
 8000876:	bf00      	nop
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <Dshot_Calibrate>:
            (DshotFrame & 0x01) ? BIT_1_CCR_REG_VALUE : BIT_0_CCR_REG_VALUE;
        DshotFrame >>= 1;
    }
}

void Dshot_Calibrate(uint32_t *mem_buffer) {
 8000884:	b480      	push	{r7}
 8000886:	b085      	sub	sp, #20
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e008      	b.n	80008a4 <Dshot_Calibrate+0x20>
        mem_buffer[i] = BIT_0_CCR_REG_VALUE;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	2278      	movs	r2, #120	@ 0x78
 800089c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3301      	adds	r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b0f      	cmp	r3, #15
 80008a8:	ddf3      	ble.n	8000892 <Dshot_Calibrate+0xe>
    }
}
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <Dshot_PrepareFrame>:

void Dshot_PrepareFrame(uint16_t throttleValue, uint32_t *mem_buffer) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	80fb      	strh	r3, [r7, #6]
    uint16_t frame = Dshot_GetDshotFrame(throttleValue);
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff92 	bl	80007f0 <Dshot_GetDshotFrame>
 80008cc:	4603      	mov	r3, r0
 80008ce:	81fb      	strh	r3, [r7, #14]

    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	e014      	b.n	8000900 <Dshot_PrepareFrame+0x48>
        mem_buffer[MEM_BUFFER_LENGTH - 1 - i] =
            (frame & 0x01) ? BIT_1_CCR_REG_VALUE : BIT_0_CCR_REG_VALUE;
 80008d6:	89fb      	ldrh	r3, [r7, #14]
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <Dshot_PrepareFrame+0x2c>
 80008e0:	22f0      	movs	r2, #240	@ 0xf0
 80008e2:	e000      	b.n	80008e6 <Dshot_PrepareFrame+0x2e>
 80008e4:	2278      	movs	r2, #120	@ 0x78
        mem_buffer[MEM_BUFFER_LENGTH - 1 - i] =
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	f1c3 030f 	rsb	r3, r3, #15
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	6839      	ldr	r1, [r7, #0]
 80008f0:	440b      	add	r3, r1
 80008f2:	601a      	str	r2, [r3, #0]
        frame >>= 1;
 80008f4:	89fb      	ldrh	r3, [r7, #14]
 80008f6:	085b      	lsrs	r3, r3, #1
 80008f8:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < MEM_BUFFER_LENGTH; i++) {
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2b0f      	cmp	r3, #15
 8000904:	dde7      	ble.n	80008d6 <Dshot_PrepareFrame+0x1e>
    }
}
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <IIR_Filter_1D_Init>:
#include "filter.h"
void IIR_Filter_1D_Init(IIR_Filter_1D *f, float alpha, float beta){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	ed87 0a02 	vstr	s0, [r7, #8]
 800091c:	edc7 0a01 	vstr	s1, [r7, #4]
    f->alpha = alpha;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	68ba      	ldr	r2, [r7, #8]
 8000924:	601a      	str	r2, [r3, #0]
    f->beta = beta;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	605a      	str	r2, [r3, #4]
    f->prev_input = 0.0f;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f04f 0200 	mov.w	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
    f->prev_output = 0.0f;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <IIR_Filter_1D_Update>:
float IIR_Filter_1D_Update(IIR_Filter_1D *f, float input){
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	ed87 0a00 	vstr	s0, [r7]
    float output = f->alpha * f->prev_output + f->beta * input + f->beta * f->prev_input;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	ed93 7a00 	vldr	s14, [r3]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	edd3 6a01 	vldr	s13, [r3, #4]
 800096a:	edd7 7a00 	vldr	s15, [r7]
 800096e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000972:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	edd3 6a01 	vldr	s13, [r3, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800098a:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev_input = input;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	683a      	ldr	r2, [r7, #0]
 8000992:	60da      	str	r2, [r3, #12]
    f->prev_output = output;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	609a      	str	r2, [r3, #8]
    return output;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	ee07 3a90 	vmov	s15, r3
}
 80009a0:	eeb0 0a67 	vmov.f32	s0, s15
 80009a4:	3714      	adds	r7, #20
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <IIR_Filter_3D_Init>:
void IIR_Filter_3D_Init(IIR_Filter_3D *f, float alpha, float beta){
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	60f8      	str	r0, [r7, #12]
 80009b6:	ed87 0a02 	vstr	s0, [r7, #8]
 80009ba:	edc7 0a01 	vstr	s1, [r7, #4]
	IIR_Filter_1D_Init(&f->x, alpha, beta);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	edd7 0a01 	vldr	s1, [r7, #4]
 80009c4:	ed97 0a02 	vldr	s0, [r7, #8]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ffa1 	bl	8000910 <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->y, alpha, beta);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3310      	adds	r3, #16
 80009d2:	edd7 0a01 	vldr	s1, [r7, #4]
 80009d6:	ed97 0a02 	vldr	s0, [r7, #8]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff98 	bl	8000910 <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->z, alpha, beta);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3320      	adds	r3, #32
 80009e4:	edd7 0a01 	vldr	s1, [r7, #4]
 80009e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff8f 	bl	8000910 <IIR_Filter_1D_Init>
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <IIR_Filter_3D_Update>:
void IIR_Filter_3D_Update(IIR_Filter_3D *f, float x_in, float y_in, float z_in, float *x_out, float *y_out, float *z_out){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b088      	sub	sp, #32
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	61f8      	str	r0, [r7, #28]
 8000a02:	ed87 0a06 	vstr	s0, [r7, #24]
 8000a06:	edc7 0a05 	vstr	s1, [r7, #20]
 8000a0a:	ed87 1a04 	vstr	s2, [r7, #16]
 8000a0e:	60f9      	str	r1, [r7, #12]
 8000a10:	60ba      	str	r2, [r7, #8]
 8000a12:	607b      	str	r3, [r7, #4]
    *x_out = IIR_Filter_1D_Update(&f->x, x_in);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	ed97 0a06 	vldr	s0, [r7, #24]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ff94 	bl	8000948 <IIR_Filter_1D_Update>
 8000a20:	eef0 7a40 	vmov.f32	s15, s0
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	edc3 7a00 	vstr	s15, [r3]
    *y_out = IIR_Filter_1D_Update(&f->y, y_in);
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3310      	adds	r3, #16
 8000a2e:	ed97 0a05 	vldr	s0, [r7, #20]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff88 	bl	8000948 <IIR_Filter_1D_Update>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	edc3 7a00 	vstr	s15, [r3]
    *z_out = IIR_Filter_1D_Update(&f->z, z_in);
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3320      	adds	r3, #32
 8000a46:	ed97 0a04 	vldr	s0, [r7, #16]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff7c 	bl	8000948 <IIR_Filter_1D_Update>
 8000a50:	eef0 7a40 	vmov.f32	s15, s0
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	edc3 7a00 	vstr	s15, [r3]
}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7a:	4b35      	ldr	r3, [pc, #212]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a80:	4a33      	ldr	r2, [pc, #204]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000a82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8a:	4b31      	ldr	r3, [pc, #196]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa8:	4b29      	ldr	r3, [pc, #164]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab6:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	4a24      	ldr	r2, [pc, #144]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac6:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	f003 0310 	and.w	r3, r3, #16
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000adc:	f043 0308 	orr.w	r3, r3, #8
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <MX_GPIO_Init+0xec>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000af8:	4816      	ldr	r0, [pc, #88]	@ (8000b54 <MX_GPIO_Init+0xf0>)
 8000afa:	f005 f9db 	bl	8005eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8000b04:	4814      	ldr	r0, [pc, #80]	@ (8000b58 <MX_GPIO_Init+0xf4>)
 8000b06:	f005 f9d5 	bl	8005eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <MX_GPIO_Init+0xf0>)
 8000b24:	f005 f816 	bl	8005b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000b28:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <MX_GPIO_Init+0xf4>)
 8000b42:	f005 f807 	bl	8005b54 <HAL_GPIO_Init>

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	@ 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58021000 	.word	0x58021000
 8000b58:	58020c00 	.word	0x58020c00

08000b5c <HAL_SPI_TxCpltCallback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI4) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a06      	ldr	r2, [pc, #24]	@ (8000b84 <HAL_SPI_TxCpltCallback+0x28>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d103      	bne.n	8000b76 <HAL_SPI_TxCpltCallback+0x1a>

        mpu.spi_transfer_done=true;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_SPI_TxCpltCallback+0x2c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    }
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40013400 	.word	0x40013400
 8000b88:	24000358 	.word	0x24000358

08000b8c <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI4) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_SPI_TxRxCpltCallback+0x30>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d107      	bne.n	8000bae <HAL_SPI_TxRxCpltCallback+0x22>
    	mpu.state = 2;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
        mpu.spi_transfer_done=true;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_SPI_TxRxCpltCallback+0x34>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    }
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40013400 	.word	0x40013400
 8000bc0:	24000358 	.word	0x24000358

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bd4:	d10c      	bne.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
        if (!mpu.state)
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bd8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d106      	bne.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x2c>
        {
        	mpu.state = 1;
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            MPU6000_Start_DMA(&mpu);
 8000bea:	4803      	ldr	r0, [pc, #12]	@ (8000bf8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000bec:	f000 fdc0 	bl	8001770 <MPU6000_Start_DMA>
        }
    }
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	24000358 	.word	0x24000358

08000bfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8000bfc:	b4b0      	push	{r4, r5, r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM5)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a29      	ldr	r2, [pc, #164]	@ (8000cb0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb4>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d14a      	bne.n	8000ca4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	7f1b      	ldrb	r3, [r3, #28]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d10e      	bne.n	8000c34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x38>
        {
            memcpy(DShot_DMABufferMotor1, DShot_MemoryBufferMotor1,
 8000c16:	4a27      	ldr	r2, [pc, #156]	@ (8000cb4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xb8>)
 8000c18:	4b27      	ldr	r3, [pc, #156]	@ (8000cb8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xbc>)
 8000c1a:	4614      	mov	r4, r2
 8000c1c:	461d      	mov	r5, r3
 8000c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {
            memcpy(DShot_DMABufferMotor4, DShot_MemoryBufferMotor4,
                   MEM_BUFFER_LENGTH * sizeof(DShot_DMABufferMotor4[0]));
        }
    }
}
 8000c32:	e037      	b.n	8000ca4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7f1b      	ldrb	r3, [r3, #28]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d10e      	bne.n	8000c5a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x5e>
            memcpy(DShot_DMABufferMotor2, DShot_MemoryBufferMotor2,
 8000c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000cbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc0>)
 8000c3e:	4b20      	ldr	r3, [pc, #128]	@ (8000cc0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc4>)
 8000c40:	4614      	mov	r4, r2
 8000c42:	461d      	mov	r5, r3
 8000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000c58:	e024      	b.n	8000ca4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7f1b      	ldrb	r3, [r3, #28]
 8000c5e:	2b04      	cmp	r3, #4
 8000c60:	d10e      	bne.n	8000c80 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0x84>
            memcpy(DShot_DMABufferMotor3, DShot_MemoryBufferMotor3,
 8000c62:	4a18      	ldr	r2, [pc, #96]	@ (8000cc4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xc8>)
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xcc>)
 8000c66:	4614      	mov	r4, r2
 8000c68:	461d      	mov	r5, r3
 8000c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000c7e:	e011      	b.n	8000ca4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7f1b      	ldrb	r3, [r3, #28]
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d10d      	bne.n	8000ca4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xa8>
            memcpy(DShot_DMABufferMotor4, DShot_MemoryBufferMotor4,
 8000c88:	4a10      	ldr	r2, [pc, #64]	@ (8000ccc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd0>)
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback+0xd4>)
 8000c8c:	4614      	mov	r4, r2
 8000c8e:	461d      	mov	r5, r3
 8000c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bcb0      	pop	{r4, r5, r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40000c00 	.word	0x40000c00
 8000cb4:	2400045c 	.word	0x2400045c
 8000cb8:	2400041c 	.word	0x2400041c
 8000cbc:	2400051c 	.word	0x2400051c
 8000cc0:	240004dc 	.word	0x240004dc
 8000cc4:	240005dc 	.word	0x240005dc
 8000cc8:	2400059c 	.word	0x2400059c
 8000ccc:	2400069c 	.word	0x2400069c
 8000cd0:	2400065c 	.word	0x2400065c

08000cd4 <init_PIDs>:
float get_roll(float Ax, float Az) {
    return atan2f(-Ax, Az) * 180.0f / M_PI;
}

void init_PIDs(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
//    PID_Init(&pid_roll,  1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
//    PID_Init(&pid_pitch, 1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
//    PID_Init(&pid_yaw,   2.0f, 0.0f, 0.10f, 400.0f, 100.0f);
	PID_Init(&PID_Controller_Pitch.inner_loop, PID_KP_PITCH_INNER, PID_KI_PITCH_INNER, PID_KD_PITCH_INNER, 400.0f, 100.0f);
 8000cd8:	ed9f 2a27 	vldr	s4, [pc, #156]	@ 8000d78 <init_PIDs+0xa4>
 8000cdc:	eddf 1a27 	vldr	s3, [pc, #156]	@ 8000d7c <init_PIDs+0xa8>
 8000ce0:	ed9f 1a27 	vldr	s2, [pc, #156]	@ 8000d80 <init_PIDs+0xac>
 8000ce4:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8000d80 <init_PIDs+0xac>
 8000ce8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000cec:	4825      	ldr	r0, [pc, #148]	@ (8000d84 <init_PIDs+0xb0>)
 8000cee:	f000 ff34 	bl	8001b5a <PID_Init>
	PID_Init(&PID_Controller_Roll.inner_loop, PID_KP_ROLL_INNER, PID_KI_ROLL_INNER, PID_KD_ROLL_INNER, 400.0f, 100.0f);
 8000cf2:	ed9f 2a21 	vldr	s4, [pc, #132]	@ 8000d78 <init_PIDs+0xa4>
 8000cf6:	eddf 1a21 	vldr	s3, [pc, #132]	@ 8000d7c <init_PIDs+0xa8>
 8000cfa:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8000d80 <init_PIDs+0xac>
 8000cfe:	eddf 0a20 	vldr	s1, [pc, #128]	@ 8000d80 <init_PIDs+0xac>
 8000d02:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000d06:	4820      	ldr	r0, [pc, #128]	@ (8000d88 <init_PIDs+0xb4>)
 8000d08:	f000 ff27 	bl	8001b5a <PID_Init>
	PID_Init(&PID_Controller_Yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW, 400.0f, 100.0f);
 8000d0c:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8000d78 <init_PIDs+0xa4>
 8000d10:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8000d7c <init_PIDs+0xa8>
 8000d14:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8000d80 <init_PIDs+0xac>
 8000d18:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000d80 <init_PIDs+0xac>
 8000d1c:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000d20:	481a      	ldr	r0, [pc, #104]	@ (8000d8c <init_PIDs+0xb8>)
 8000d22:	f000 ff1a 	bl	8001b5a <PID_Init>

	PID_Init(&PID_Controller_Pitch.outer_loop, PID_KP_PITCH_OUTER, PID_KI_PITCH_OUTER, PID_KD_PITCH_OUTER, 400.0f, 100.0f);
 8000d26:	ed9f 2a14 	vldr	s4, [pc, #80]	@ 8000d78 <init_PIDs+0xa4>
 8000d2a:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8000d7c <init_PIDs+0xa8>
 8000d2e:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8000d80 <init_PIDs+0xac>
 8000d32:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8000d80 <init_PIDs+0xac>
 8000d36:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000d3a:	4815      	ldr	r0, [pc, #84]	@ (8000d90 <init_PIDs+0xbc>)
 8000d3c:	f000 ff0d 	bl	8001b5a <PID_Init>
	PID_Init(&PID_Controller_Roll.outer_loop, PID_KP_ROLL_OUTER, PID_KI_ROLL_OUTER, PID_KD_ROLL_OUTER, 400.0f, 100.0f);
 8000d40:	ed9f 2a0d 	vldr	s4, [pc, #52]	@ 8000d78 <init_PIDs+0xa4>
 8000d44:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8000d7c <init_PIDs+0xa8>
 8000d48:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 8000d80 <init_PIDs+0xac>
 8000d4c:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8000d80 <init_PIDs+0xac>
 8000d50:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000d54:	480f      	ldr	r0, [pc, #60]	@ (8000d94 <init_PIDs+0xc0>)
 8000d56:	f000 ff00 	bl	8001b5a <PID_Init>
	PID_Init(&PID_Controller_Yaw_Rate, PID_KP_YAW_RATE, PID_KI_YAW_RATE, PID_KD_YAW_RATE, 400.0f, 100.0f);
 8000d5a:	ed9f 2a07 	vldr	s4, [pc, #28]	@ 8000d78 <init_PIDs+0xa4>
 8000d5e:	eddf 1a07 	vldr	s3, [pc, #28]	@ 8000d7c <init_PIDs+0xa8>
 8000d62:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8000d80 <init_PIDs+0xac>
 8000d66:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000d80 <init_PIDs+0xac>
 8000d6a:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000d6e:	480a      	ldr	r0, [pc, #40]	@ (8000d98 <init_PIDs+0xc4>)
 8000d70:	f000 fef3 	bl	8001b5a <PID_Init>

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	42c80000 	.word	0x42c80000
 8000d7c:	43c80000 	.word	0x43c80000
 8000d80:	00000000 	.word	0x00000000
 8000d84:	240002c8 	.word	0x240002c8
 8000d88:	24000268 	.word	0x24000268
 8000d8c:	240002f8 	.word	0x240002f8
 8000d90:	24000298 	.word	0x24000298
 8000d94:	24000238 	.word	0x24000238
 8000d98:	24000328 	.word	0x24000328
 8000d9c:	00000000 	.word	0x00000000

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	ed2d 8b04 	vpush	{d8-d9}
 8000da6:	b08c      	sub	sp, #48	@ 0x30
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000daa:	f001 feb9 	bl	8002b20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dae:	f000 fb97 	bl	80014e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f7ff fe57 	bl	8000a64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000db6:	f7ff fca7 	bl	8000708 <MX_DMA_Init>
  MX_SPI4_Init();
 8000dba:	f001 f8b9 	bl	8001f30 <MX_SPI4_Init>
  MX_TIM2_Init();
 8000dbe:	f001 fc2d 	bl	800261c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000dc2:	f001 fc79 	bl	80026b8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  IIR_Filter_3D_Init(&acc_filtered, IIR_ACC_ALPHA, IIR_ACC_BETA);
 8000dc6:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8000df8 <main+0x58>
 8000dca:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000dfc <main+0x5c>
 8000dce:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <main+0x60>)
 8000dd0:	f7ff fded 	bl	80009ae <IIR_Filter_3D_Init>
  IIR_Filter_3D_Init(&gyro_filtered, IIR_GYR_ALPHA, IIR_GYR_BETA);
 8000dd4:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8000e04 <main+0x64>
 8000dd8:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000e08 <main+0x68>
 8000ddc:	480b      	ldr	r0, [pc, #44]	@ (8000e0c <main+0x6c>)
 8000dde:	f7ff fde6 	bl	80009ae <IIR_Filter_3D_Init>
  MPU6000_Init(&mpu, &hspi4);
 8000de2:	490b      	ldr	r1, [pc, #44]	@ (8000e10 <main+0x70>)
 8000de4:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <main+0x74>)
 8000de6:	f000 fc6f 	bl	80016c8 <MPU6000_Init>

  mpu.state=0;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <main+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
  for(int i=0;i<=14;i++) mpu.tx_buffer[i]=0xFF;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000df6:	e018      	b.n	8000e2a <main+0x8a>
 8000df8:	3cf9db23 	.word	0x3cf9db23
 8000dfc:	3f7068dc 	.word	0x3f7068dc
 8000e00:	240003bc 	.word	0x240003bc
 8000e04:	3d727bb3 	.word	0x3d727bb3
 8000e08:	3f61b08a 	.word	0x3f61b08a
 8000e0c:	240003ec 	.word	0x240003ec
 8000e10:	2400072c 	.word	0x2400072c
 8000e14:	24000358 	.word	0x24000358
 8000e18:	4ad5      	ldr	r2, [pc, #852]	@ (8001170 <main+0x3d0>)
 8000e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3338      	adds	r3, #56	@ 0x38
 8000e20:	22ff      	movs	r2, #255	@ 0xff
 8000e22:	701a      	strb	r2, [r3, #0]
 8000e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e26:	3301      	adds	r3, #1
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e2c:	2b0e      	cmp	r3, #14
 8000e2e:	ddf3      	ble.n	8000e18 <main+0x78>
  init_PIDs();
 8000e30:	f7ff ff50 	bl	8000cd4 <init_PIDs>
  MPU6000_Calibrate(&mpu);
 8000e34:	48ce      	ldr	r0, [pc, #824]	@ (8001170 <main+0x3d0>)
 8000e36:	f000 fddb 	bl	80019f0 <MPU6000_Calibrate>
  MPU6000_Start_DMA(&mpu);
 8000e3a:	48cd      	ldr	r0, [pc, #820]	@ (8001170 <main+0x3d0>)
 8000e3c:	f000 fc98 	bl	8001770 <MPU6000_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim2);
 8000e40:	48cc      	ldr	r0, [pc, #816]	@ (8001174 <main+0x3d4>)
 8000e42:	f008 fb53 	bl	80094ec <HAL_TIM_Base_Start_IT>

  Dshot_DMABuffer_init(DShot_DMABufferMotor1);
 8000e46:	48cc      	ldr	r0, [pc, #816]	@ (8001178 <main+0x3d8>)
 8000e48:	f7ff fce8 	bl	800081c <Dshot_DMABuffer_init>
  Dshot_DMABuffer_init(DShot_DMABufferMotor2);
 8000e4c:	48cb      	ldr	r0, [pc, #812]	@ (800117c <main+0x3dc>)
 8000e4e:	f7ff fce5 	bl	800081c <Dshot_DMABuffer_init>
  Dshot_DMABuffer_init(DShot_DMABufferMotor3);
 8000e52:	48cb      	ldr	r0, [pc, #812]	@ (8001180 <main+0x3e0>)
 8000e54:	f7ff fce2 	bl	800081c <Dshot_DMABuffer_init>
  Dshot_DMABuffer_init(DShot_DMABufferMotor4);
 8000e58:	48ca      	ldr	r0, [pc, #808]	@ (8001184 <main+0x3e4>)
 8000e5a:	f7ff fcdf 	bl	800081c <Dshot_DMABuffer_init>


  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor1);
 8000e5e:	48ca      	ldr	r0, [pc, #808]	@ (8001188 <main+0x3e8>)
 8000e60:	f7ff fcf6 	bl	8000850 <Dshot_MemoryBuffer_init>
  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor2);
 8000e64:	48c9      	ldr	r0, [pc, #804]	@ (800118c <main+0x3ec>)
 8000e66:	f7ff fcf3 	bl	8000850 <Dshot_MemoryBuffer_init>
  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor3);
 8000e6a:	48c9      	ldr	r0, [pc, #804]	@ (8001190 <main+0x3f0>)
 8000e6c:	f7ff fcf0 	bl	8000850 <Dshot_MemoryBuffer_init>
  Dshot_MemoryBuffer_init(DShot_MemoryBufferMotor4);
 8000e70:	48c8      	ldr	r0, [pc, #800]	@ (8001194 <main+0x3f4>)
 8000e72:	f7ff fced 	bl	8000850 <Dshot_MemoryBuffer_init>

  Dshot_Calibrate(DShot_DMABufferMotor1);
 8000e76:	48c0      	ldr	r0, [pc, #768]	@ (8001178 <main+0x3d8>)
 8000e78:	f7ff fd04 	bl	8000884 <Dshot_Calibrate>
  Dshot_Calibrate(DShot_DMABufferMotor2);
 8000e7c:	48bf      	ldr	r0, [pc, #764]	@ (800117c <main+0x3dc>)
 8000e7e:	f7ff fd01 	bl	8000884 <Dshot_Calibrate>
  Dshot_Calibrate(DShot_DMABufferMotor3);
 8000e82:	48bf      	ldr	r0, [pc, #764]	@ (8001180 <main+0x3e0>)
 8000e84:	f7ff fcfe 	bl	8000884 <Dshot_Calibrate>
  Dshot_Calibrate(DShot_DMABufferMotor4);
 8000e88:	48be      	ldr	r0, [pc, #760]	@ (8001184 <main+0x3e4>)
 8000e8a:	f7ff fcfb 	bl	8000884 <Dshot_Calibrate>

  HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_1, DShot_DMABufferMotor1, DMA_BUFFER_LENGTH);
 8000e8e:	2320      	movs	r3, #32
 8000e90:	4ab9      	ldr	r2, [pc, #740]	@ (8001178 <main+0x3d8>)
 8000e92:	2100      	movs	r1, #0
 8000e94:	48c0      	ldr	r0, [pc, #768]	@ (8001198 <main+0x3f8>)
 8000e96:	f008 fc03 	bl	80096a0 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_2, DShot_DMABufferMotor2, DMA_BUFFER_LENGTH);
 8000e9a:	2320      	movs	r3, #32
 8000e9c:	4ab7      	ldr	r2, [pc, #732]	@ (800117c <main+0x3dc>)
 8000e9e:	2104      	movs	r1, #4
 8000ea0:	48bd      	ldr	r0, [pc, #756]	@ (8001198 <main+0x3f8>)
 8000ea2:	f008 fbfd 	bl	80096a0 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_3, DShot_DMABufferMotor3, DMA_BUFFER_LENGTH);
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	4ab5      	ldr	r2, [pc, #724]	@ (8001180 <main+0x3e0>)
 8000eaa:	2108      	movs	r1, #8
 8000eac:	48ba      	ldr	r0, [pc, #744]	@ (8001198 <main+0x3f8>)
 8000eae:	f008 fbf7 	bl	80096a0 <HAL_TIM_PWM_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, DShot_DMABufferMotor4, DMA_BUFFER_LENGTH);
 8000eb2:	2320      	movs	r3, #32
 8000eb4:	4ab3      	ldr	r2, [pc, #716]	@ (8001184 <main+0x3e4>)
 8000eb6:	210c      	movs	r1, #12
 8000eb8:	48b7      	ldr	r0, [pc, #732]	@ (8001198 <main+0x3f8>)
 8000eba:	f008 fbf1 	bl	80096a0 <HAL_TIM_PWM_Start_DMA>

  HAL_Delay(2000);
 8000ebe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ec2:	f001 febf 	bl	8002c44 <HAL_Delay>
  uint32_t start_time = HAL_GetTick();
 8000ec6:	f001 feb1 	bl	8002c2c <HAL_GetTick>
 8000eca:	62b8      	str	r0, [r7, #40]	@ 0x28
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (mpu.state==2){
 8000ecc:	4ba8      	ldr	r3, [pc, #672]	@ (8001170 <main+0x3d0>)
 8000ece:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d1f9      	bne.n	8000ecc <main+0x12c>
		  MPU6000_Process_DMA(&mpu);
 8000ed8:	48a5      	ldr	r0, [pc, #660]	@ (8001170 <main+0x3d0>)
 8000eda:	f000 fc7f 	bl	80017dc <MPU6000_Process_DMA>
		  mpu.state = 0;
 8000ede:	4ba4      	ldr	r3, [pc, #656]	@ (8001170 <main+0x3d0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59


		  /*low-pass filter*/
		  IIR_Filter_3D_Update(&acc_filtered, mpu.acc[0], mpu.acc[1], mpu.acc[2], &acc_x, &acc_y, &acc_z);
 8000ee6:	4ba2      	ldr	r3, [pc, #648]	@ (8001170 <main+0x3d0>)
 8000ee8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000eec:	4ba0      	ldr	r3, [pc, #640]	@ (8001170 <main+0x3d0>)
 8000eee:	ed93 7a02 	vldr	s14, [r3, #8]
 8000ef2:	4b9f      	ldr	r3, [pc, #636]	@ (8001170 <main+0x3d0>)
 8000ef4:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ef8:	4ba8      	ldr	r3, [pc, #672]	@ (800119c <main+0x3fc>)
 8000efa:	4aa9      	ldr	r2, [pc, #676]	@ (80011a0 <main+0x400>)
 8000efc:	49a9      	ldr	r1, [pc, #676]	@ (80011a4 <main+0x404>)
 8000efe:	eeb0 1a66 	vmov.f32	s2, s13
 8000f02:	eef0 0a47 	vmov.f32	s1, s14
 8000f06:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0a:	48a7      	ldr	r0, [pc, #668]	@ (80011a8 <main+0x408>)
 8000f0c:	f7ff fd75 	bl	80009fa <IIR_Filter_3D_Update>
		  IIR_Filter_3D_Update(&gyro_filtered, mpu.gyro[0], mpu.gyro[1], mpu.gyro[2], &gyro_p, &gyro_q, &gyro_r);
 8000f10:	4b97      	ldr	r3, [pc, #604]	@ (8001170 <main+0x3d0>)
 8000f12:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f16:	4b96      	ldr	r3, [pc, #600]	@ (8001170 <main+0x3d0>)
 8000f18:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f1c:	4b94      	ldr	r3, [pc, #592]	@ (8001170 <main+0x3d0>)
 8000f1e:	edd3 6a06 	vldr	s13, [r3, #24]
 8000f22:	4ba2      	ldr	r3, [pc, #648]	@ (80011ac <main+0x40c>)
 8000f24:	4aa2      	ldr	r2, [pc, #648]	@ (80011b0 <main+0x410>)
 8000f26:	49a3      	ldr	r1, [pc, #652]	@ (80011b4 <main+0x414>)
 8000f28:	eeb0 1a66 	vmov.f32	s2, s13
 8000f2c:	eef0 0a47 	vmov.f32	s1, s14
 8000f30:	eeb0 0a67 	vmov.f32	s0, s15
 8000f34:	48a0      	ldr	r0, [pc, #640]	@ (80011b8 <main+0x418>)
 8000f36:	f7ff fd60 	bl	80009fa <IIR_Filter_3D_Update>

		  /*Estimate pitch and roll*/
		  rollHat_acc_rad = atan2f(acc_y, acc_z);
 8000f3a:	4b99      	ldr	r3, [pc, #612]	@ (80011a0 <main+0x400>)
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	4b96      	ldr	r3, [pc, #600]	@ (800119c <main+0x3fc>)
 8000f42:	ed93 7a00 	vldr	s14, [r3]
 8000f46:	eef0 0a47 	vmov.f32	s1, s14
 8000f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4e:	f00c facf 	bl	800d4f0 <atan2f>
 8000f52:	eef0 7a40 	vmov.f32	s15, s0
 8000f56:	4b99      	ldr	r3, [pc, #612]	@ (80011bc <main+0x41c>)
 8000f58:	edc3 7a00 	vstr	s15, [r3]
		  pitchHat_acc_rad = atan2f(-acc_x, sqrtf(acc_y * acc_y + acc_z * acc_z));
 8000f5c:	4b91      	ldr	r3, [pc, #580]	@ (80011a4 <main+0x404>)
 8000f5e:	edd3 7a00 	vldr	s15, [r3]
 8000f62:	eeb1 8a67 	vneg.f32	s16, s15
 8000f66:	4b8e      	ldr	r3, [pc, #568]	@ (80011a0 <main+0x400>)
 8000f68:	ed93 7a00 	vldr	s14, [r3]
 8000f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80011a0 <main+0x400>)
 8000f6e:	edd3 7a00 	vldr	s15, [r3]
 8000f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f76:	4b89      	ldr	r3, [pc, #548]	@ (800119c <main+0x3fc>)
 8000f78:	edd3 6a00 	vldr	s13, [r3]
 8000f7c:	4b87      	ldr	r3, [pc, #540]	@ (800119c <main+0x3fc>)
 8000f7e:	edd3 7a00 	vldr	s15, [r3]
 8000f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8e:	f00c fab1 	bl	800d4f4 <sqrtf>
 8000f92:	eef0 7a40 	vmov.f32	s15, s0
 8000f96:	eef0 0a67 	vmov.f32	s1, s15
 8000f9a:	eeb0 0a48 	vmov.f32	s0, s16
 8000f9e:	f00c faa7 	bl	800d4f0 <atan2f>
 8000fa2:	eef0 7a40 	vmov.f32	s15, s0
 8000fa6:	4b86      	ldr	r3, [pc, #536]	@ (80011c0 <main+0x420>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]

		  float yawDot_rad = gyro_r * (M_PI / 180.0f);
 8000fac:	4b7f      	ldr	r3, [pc, #508]	@ (80011ac <main+0x40c>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb6:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8001158 <main+0x3b8>
 8000fba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  float rollDot_rad = (gyro_p * (M_PI / 180.0f) + tanf(pitchHat_acc_rad) * sinf(rollHat_acc_rad) * gyro_q * (M_PI / 180.0f) + tanf(pitchHat_acc_rad) * cosf(rollHat_acc_rad) * gyro_r * (M_PI / 180.0f));
 8000fc6:	4b7b      	ldr	r3, [pc, #492]	@ (80011b4 <main+0x414>)
 8000fc8:	edd3 7a00 	vldr	s15, [r3]
 8000fcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fd0:	ed9f 6b61 	vldr	d6, [pc, #388]	@ 8001158 <main+0x3b8>
 8000fd4:	ee27 8b06 	vmul.f64	d8, d7, d6
 8000fd8:	4b79      	ldr	r3, [pc, #484]	@ (80011c0 <main+0x420>)
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe2:	f00c faa5 	bl	800d530 <tanf>
 8000fe6:	eeb0 9a40 	vmov.f32	s18, s0
 8000fea:	4b74      	ldr	r3, [pc, #464]	@ (80011bc <main+0x41c>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	f00c faf4 	bl	800d5e0 <sinf>
 8000ff8:	eef0 7a40 	vmov.f32	s15, s0
 8000ffc:	ee29 7a27 	vmul.f32	s14, s18, s15
 8001000:	4b6b      	ldr	r3, [pc, #428]	@ (80011b0 <main+0x410>)
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800100e:	ed9f 6b52 	vldr	d6, [pc, #328]	@ 8001158 <main+0x3b8>
 8001012:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001016:	ee38 8b07 	vadd.f64	d8, d8, d7
 800101a:	4b69      	ldr	r3, [pc, #420]	@ (80011c0 <main+0x420>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	f00c fa84 	bl	800d530 <tanf>
 8001028:	eeb0 9a40 	vmov.f32	s18, s0
 800102c:	4b63      	ldr	r3, [pc, #396]	@ (80011bc <main+0x41c>)
 800102e:	edd3 7a00 	vldr	s15, [r3]
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	f00c fb97 	bl	800d768 <cosf>
 800103a:	eef0 7a40 	vmov.f32	s15, s0
 800103e:	ee29 7a27 	vmul.f32	s14, s18, s15
 8001042:	4b5a      	ldr	r3, [pc, #360]	@ (80011ac <main+0x40c>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001050:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001158 <main+0x3b8>
 8001054:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001058:	ee38 7b07 	vadd.f64	d7, d8, d7
 800105c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001060:	edc7 7a08 	vstr	s15, [r7, #32]
		  float pitchDot_rad = (cosf(rollHat_acc_rad) * gyro_q * (M_PI / 180.0f) - sinf(rollHat_acc_rad) * gyro_r * (M_PI / 180.0f));
 8001064:	4b55      	ldr	r3, [pc, #340]	@ (80011bc <main+0x41c>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	eeb0 0a67 	vmov.f32	s0, s15
 800106e:	f00c fb7b 	bl	800d768 <cosf>
 8001072:	eeb0 7a40 	vmov.f32	s14, s0
 8001076:	4b4e      	ldr	r3, [pc, #312]	@ (80011b0 <main+0x410>)
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001080:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001084:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 8001158 <main+0x3b8>
 8001088:	ee27 8b06 	vmul.f64	d8, d7, d6
 800108c:	4b4b      	ldr	r3, [pc, #300]	@ (80011bc <main+0x41c>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	f00c faa3 	bl	800d5e0 <sinf>
 800109a:	eeb0 7a40 	vmov.f32	s14, s0
 800109e:	4b43      	ldr	r3, [pc, #268]	@ (80011ac <main+0x40c>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ac:	ed9f 6b2a 	vldr	d6, [pc, #168]	@ 8001158 <main+0x3b8>
 80010b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b4:	ee38 7b47 	vsub.f64	d7, d8, d7
 80010b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010bc:	edc7 7a07 	vstr	s15, [r7, #28]

		  //Complementary filter
		  roll_rad = (1.0f - COMP_ALPHA) * rollHat_acc_rad + COMP_ALPHA * (roll_rad + rollDot_rad * dt );
 80010c0:	4b3e      	ldr	r3, [pc, #248]	@ (80011bc <main+0x41c>)
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ca:	ed9f 6b25 	vldr	d6, [pc, #148]	@ 8001160 <main+0x3c0>
 80010ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010d2:	4b3c      	ldr	r3, [pc, #240]	@ (80011c4 <main+0x424>)
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80010dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e0:	4b39      	ldr	r3, [pc, #228]	@ (80011c8 <main+0x428>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001168 <main+0x3c8>
 80010f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010fe:	4b32      	ldr	r3, [pc, #200]	@ (80011c8 <main+0x428>)
 8001100:	edc3 7a00 	vstr	s15, [r3]
		  pitch_rad = (1.0f - COMP_ALPHA) * pitchHat_acc_rad + COMP_ALPHA * (pitch_rad + pitchDot_rad * dt );
 8001104:	4b2e      	ldr	r3, [pc, #184]	@ (80011c0 <main+0x420>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800110e:	ed9f 6b14 	vldr	d6, [pc, #80]	@ 8001160 <main+0x3c0>
 8001112:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001116:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <main+0x424>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001124:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <main+0x42c>)
 8001126:	edd3 7a00 	vldr	s15, [r3]
 800112a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001132:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 8001168 <main+0x3c8>
 8001136:	ee27 7b05 	vmul.f64	d7, d7, d5
 800113a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800113e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001142:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <main+0x42c>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
		  yaw_rad = yaw_rad + yawDot_rad*dt;
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <main+0x424>)
 800114a:	ed93 7a00 	vldr	s14, [r3]
 800114e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001152:	e03d      	b.n	80011d0 <main+0x430>
 8001154:	f3af 8000 	nop.w
 8001158:	a2529d39 	.word	0xa2529d39
 800115c:	3f91df46 	.word	0x3f91df46
 8001160:	999999a0 	.word	0x999999a0
 8001164:	3fa99999 	.word	0x3fa99999
 8001168:	66666666 	.word	0x66666666
 800116c:	3fee6666 	.word	0x3fee6666
 8001170:	24000358 	.word	0x24000358
 8001174:	240008a8 	.word	0x240008a8
 8001178:	2400045c 	.word	0x2400045c
 800117c:	2400051c 	.word	0x2400051c
 8001180:	240005dc 	.word	0x240005dc
 8001184:	2400069c 	.word	0x2400069c
 8001188:	2400041c 	.word	0x2400041c
 800118c:	240004dc 	.word	0x240004dc
 8001190:	2400059c 	.word	0x2400059c
 8001194:	2400065c 	.word	0x2400065c
 8001198:	240008f4 	.word	0x240008f4
 800119c:	24000204 	.word	0x24000204
 80011a0:	24000200 	.word	0x24000200
 80011a4:	240001fc 	.word	0x240001fc
 80011a8:	240003bc 	.word	0x240003bc
 80011ac:	24000210 	.word	0x24000210
 80011b0:	2400020c 	.word	0x2400020c
 80011b4:	24000208 	.word	0x24000208
 80011b8:	240003ec 	.word	0x240003ec
 80011bc:	240003b4 	.word	0x240003b4
 80011c0:	240003b8 	.word	0x240003b8
 80011c4:	24000000 	.word	0x24000000
 80011c8:	2400022c 	.word	0x2400022c
 80011cc:	24000230 	.word	0x24000230
 80011d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d4:	4bac      	ldr	r3, [pc, #688]	@ (8001488 <main+0x6e8>)
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011de:	4baa      	ldr	r3, [pc, #680]	@ (8001488 <main+0x6e8>)
 80011e0:	edc3 7a00 	vstr	s15, [r3]

		  while (yaw_rad >= 2.0f * M_PI) yaw_rad -= 2.0f * M_PI;
 80011e4:	e00d      	b.n	8001202 <main+0x462>
 80011e6:	4ba8      	ldr	r3, [pc, #672]	@ (8001488 <main+0x6e8>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f0:	ed9f 6ba1 	vldr	d6, [pc, #644]	@ 8001478 <main+0x6d8>
 80011f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80011f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011fc:	4ba2      	ldr	r3, [pc, #648]	@ (8001488 <main+0x6e8>)
 80011fe:	edc3 7a00 	vstr	s15, [r3]
 8001202:	4ba1      	ldr	r3, [pc, #644]	@ (8001488 <main+0x6e8>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800120c:	ed9f 6b9a 	vldr	d6, [pc, #616]	@ 8001478 <main+0x6d8>
 8001210:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	dae5      	bge.n	80011e6 <main+0x446>
		  while (yaw_rad < 0.0f)         yaw_rad += 2.0f * M_PI;
 800121a:	e00d      	b.n	8001238 <main+0x498>
 800121c:	4b9a      	ldr	r3, [pc, #616]	@ (8001488 <main+0x6e8>)
 800121e:	edd3 7a00 	vldr	s15, [r3]
 8001222:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001226:	ed9f 6b94 	vldr	d6, [pc, #592]	@ 8001478 <main+0x6d8>
 800122a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800122e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001232:	4b95      	ldr	r3, [pc, #596]	@ (8001488 <main+0x6e8>)
 8001234:	edc3 7a00 	vstr	s15, [r3]
 8001238:	4b93      	ldr	r3, [pc, #588]	@ (8001488 <main+0x6e8>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001246:	d4e9      	bmi.n	800121c <main+0x47c>

		  float yawDot = yawDot_rad * (180.0f / M_PI);
 8001248:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800124c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001250:	ed9f 6b8b 	vldr	d6, [pc, #556]	@ 8001480 <main+0x6e0>
 8001254:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001258:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800125c:	edc7 7a06 	vstr	s15, [r7, #24]
		  float rollDot = rollDot_rad * (180.0f / M_PI);
 8001260:	edd7 7a08 	vldr	s15, [r7, #32]
 8001264:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001268:	ed9f 6b85 	vldr	d6, [pc, #532]	@ 8001480 <main+0x6e0>
 800126c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001270:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001274:	edc7 7a05 	vstr	s15, [r7, #20]
		  float pitchDot = pitchDot_rad * (180.0f / M_PI);
 8001278:	edd7 7a07 	vldr	s15, [r7, #28]
 800127c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001280:	ed9f 6b7f 	vldr	d6, [pc, #508]	@ 8001480 <main+0x6e0>
 8001284:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001288:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800128c:	edc7 7a04 	vstr	s15, [r7, #16]

		  roll = roll_rad * (180.0f / M_PI);
 8001290:	4b7e      	ldr	r3, [pc, #504]	@ (800148c <main+0x6ec>)
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800129a:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 8001480 <main+0x6e0>
 800129e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001490 <main+0x6f0>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]
		  pitch = pitch_rad * (180.0f / M_PI);
 80012ac:	4b79      	ldr	r3, [pc, #484]	@ (8001494 <main+0x6f4>)
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012b6:	ed9f 6b72 	vldr	d6, [pc, #456]	@ 8001480 <main+0x6e0>
 80012ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012c2:	4b75      	ldr	r3, [pc, #468]	@ (8001498 <main+0x6f8>)
 80012c4:	edc3 7a00 	vstr	s15, [r3]
		  yaw = yaw_rad * (180.0f / M_PI);
 80012c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001488 <main+0x6e8>)
 80012ca:	edd3 7a00 	vldr	s15, [r3]
 80012ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d2:	ed9f 6b6b 	vldr	d6, [pc, #428]	@ 8001480 <main+0x6e0>
 80012d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012de:	4b6f      	ldr	r3, [pc, #444]	@ (800149c <main+0x6fc>)
 80012e0:	edc3 7a00 	vstr	s15, [r3]



		  float roll_out = PID_Double_Calculation(&PID_Controller_Roll, roll_target, roll, rollDot, dt);
 80012e4:	4b6e      	ldr	r3, [pc, #440]	@ (80014a0 <main+0x700>)
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	4b69      	ldr	r3, [pc, #420]	@ (8001490 <main+0x6f0>)
 80012ec:	ed93 7a00 	vldr	s14, [r3]
 80012f0:	4b6c      	ldr	r3, [pc, #432]	@ (80014a4 <main+0x704>)
 80012f2:	edd3 6a00 	vldr	s13, [r3]
 80012f6:	eef0 1a66 	vmov.f32	s3, s13
 80012fa:	ed97 1a05 	vldr	s2, [r7, #20]
 80012fe:	eef0 0a47 	vmov.f32	s1, s14
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	4868      	ldr	r0, [pc, #416]	@ (80014a8 <main+0x708>)
 8001308:	f000 fc66 	bl	8001bd8 <PID_Double_Calculation>
 800130c:	ed87 0a03 	vstr	s0, [r7, #12]
		  float pitch_out = PID_Double_Calculation(&PID_Controller_Pitch, pitch_target, pitch, pitchDot, dt);
 8001310:	4b66      	ldr	r3, [pc, #408]	@ (80014ac <main+0x70c>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	4b60      	ldr	r3, [pc, #384]	@ (8001498 <main+0x6f8>)
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	4b61      	ldr	r3, [pc, #388]	@ (80014a4 <main+0x704>)
 800131e:	edd3 6a00 	vldr	s13, [r3]
 8001322:	eef0 1a66 	vmov.f32	s3, s13
 8001326:	ed97 1a04 	vldr	s2, [r7, #16]
 800132a:	eef0 0a47 	vmov.f32	s1, s14
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	485f      	ldr	r0, [pc, #380]	@ (80014b0 <main+0x710>)
 8001334:	f000 fc50 	bl	8001bd8 <PID_Double_Calculation>
 8001338:	ed87 0a02 	vstr	s0, [r7, #8]
		  float yaw_out = PID_Yaw_Angle_Calculation(&PID_Controller_Yaw, yaw_target, yaw, yawDot, dt);
 800133c:	4b5d      	ldr	r3, [pc, #372]	@ (80014b4 <main+0x714>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	4b56      	ldr	r3, [pc, #344]	@ (800149c <main+0x6fc>)
 8001344:	ed93 7a00 	vldr	s14, [r3]
 8001348:	4b56      	ldr	r3, [pc, #344]	@ (80014a4 <main+0x704>)
 800134a:	edd3 6a00 	vldr	s13, [r3]
 800134e:	eef0 1a66 	vmov.f32	s3, s13
 8001352:	ed97 1a06 	vldr	s2, [r7, #24]
 8001356:	eef0 0a47 	vmov.f32	s1, s14
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	4856      	ldr	r0, [pc, #344]	@ (80014b8 <main+0x718>)
 8001360:	f000 fd5c 	bl	8001e1c <PID_Yaw_Angle_Calculation>
 8001364:	ed87 0a01 	vstr	s0, [r7, #4]


		  m1 = throttle + pitch_out - roll_out + yaw_out;
 8001368:	4b54      	ldr	r3, [pc, #336]	@ (80014bc <main+0x71c>)
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001374:	edd7 7a02 	vldr	s15, [r7, #8]
 8001378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138c:	4b4c      	ldr	r3, [pc, #304]	@ (80014c0 <main+0x720>)
 800138e:	edc3 7a00 	vstr	s15, [r3]
		  m2 = throttle + pitch_out + roll_out - yaw_out;
 8001392:	4b4a      	ldr	r3, [pc, #296]	@ (80014bc <main+0x71c>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139e:	edd7 7a02 	vldr	s15, [r7, #8]
 80013a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	4b43      	ldr	r3, [pc, #268]	@ (80014c4 <main+0x724>)
 80013b8:	edc3 7a00 	vstr	s15, [r3]
		  m3 = throttle - pitch_out + roll_out + yaw_out;
 80013bc:	4b3f      	ldr	r3, [pc, #252]	@ (80014bc <main+0x71c>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e0:	4b39      	ldr	r3, [pc, #228]	@ (80014c8 <main+0x728>)
 80013e2:	edc3 7a00 	vstr	s15, [r3]
		  m4 = throttle - pitch_out - roll_out - yaw_out;
 80013e6:	4b35      	ldr	r3, [pc, #212]	@ (80014bc <main+0x71c>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80013fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001402:	edd7 7a01 	vldr	s15, [r7, #4]
 8001406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800140a:	4b30      	ldr	r3, [pc, #192]	@ (80014cc <main+0x72c>)
 800140c:	edc3 7a00 	vstr	s15, [r3]

		  Dshot_PrepareFrame(m1, DShot_MemoryBufferMotor1);
 8001410:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <main+0x720>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141a:	ee17 3a90 	vmov	r3, s15
 800141e:	b29b      	uxth	r3, r3
 8001420:	492b      	ldr	r1, [pc, #172]	@ (80014d0 <main+0x730>)
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fa48 	bl	80008b8 <Dshot_PrepareFrame>
			  Dshot_PrepareFrame(m2, DShot_MemoryBufferMotor2);
 8001428:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <main+0x724>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001432:	ee17 3a90 	vmov	r3, s15
 8001436:	b29b      	uxth	r3, r3
 8001438:	4926      	ldr	r1, [pc, #152]	@ (80014d4 <main+0x734>)
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fa3c 	bl	80008b8 <Dshot_PrepareFrame>
			  Dshot_PrepareFrame(m3, DShot_MemoryBufferMotor3);
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <main+0x728>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800144a:	ee17 3a90 	vmov	r3, s15
 800144e:	b29b      	uxth	r3, r3
 8001450:	4921      	ldr	r1, [pc, #132]	@ (80014d8 <main+0x738>)
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fa30 	bl	80008b8 <Dshot_PrepareFrame>
			  Dshot_PrepareFrame(m4, DShot_MemoryBufferMotor4);
 8001458:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <main+0x72c>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001462:	ee17 3a90 	vmov	r3, s15
 8001466:	b29b      	uxth	r3, r3
 8001468:	491c      	ldr	r1, [pc, #112]	@ (80014dc <main+0x73c>)
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fa24 	bl	80008b8 <Dshot_PrepareFrame>
	  if (mpu.state==2){
 8001470:	e52c      	b.n	8000ecc <main+0x12c>
 8001472:	bf00      	nop
 8001474:	f3af 8000 	nop.w
 8001478:	54442d18 	.word	0x54442d18
 800147c:	401921fb 	.word	0x401921fb
 8001480:	1a63c1f8 	.word	0x1a63c1f8
 8001484:	404ca5dc 	.word	0x404ca5dc
 8001488:	24000234 	.word	0x24000234
 800148c:	2400022c 	.word	0x2400022c
 8001490:	24000224 	.word	0x24000224
 8001494:	24000230 	.word	0x24000230
 8001498:	24000220 	.word	0x24000220
 800149c:	24000228 	.word	0x24000228
 80014a0:	24000218 	.word	0x24000218
 80014a4:	24000000 	.word	0x24000000
 80014a8:	24000238 	.word	0x24000238
 80014ac:	24000214 	.word	0x24000214
 80014b0:	24000298 	.word	0x24000298
 80014b4:	2400021c 	.word	0x2400021c
 80014b8:	240002f8 	.word	0x240002f8
 80014bc:	24000004 	.word	0x24000004
 80014c0:	2400071c 	.word	0x2400071c
 80014c4:	24000720 	.word	0x24000720
 80014c8:	24000724 	.word	0x24000724
 80014cc:	24000728 	.word	0x24000728
 80014d0:	2400041c 	.word	0x2400041c
 80014d4:	240004dc 	.word	0x240004dc
 80014d8:	2400059c 	.word	0x2400059c
 80014dc:	2400065c 	.word	0x2400065c

080014e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b09c      	sub	sp, #112	@ 0x70
 80014e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ea:	224c      	movs	r2, #76	@ 0x4c
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f00a f947 	bl	800b782 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f00a f941 	bl	800b782 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001500:	2002      	movs	r0, #2
 8001502:	f004 fcf1 	bl	8005ee8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b31      	ldr	r3, [pc, #196]	@ (80015d0 <SystemClock_Config+0xf0>)
 800150c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150e:	4a30      	ldr	r2, [pc, #192]	@ (80015d0 <SystemClock_Config+0xf0>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001516:	4b2e      	ldr	r3, [pc, #184]	@ (80015d0 <SystemClock_Config+0xf0>)
 8001518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	4b2c      	ldr	r3, [pc, #176]	@ (80015d4 <SystemClock_Config+0xf4>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001528:	4a2a      	ldr	r2, [pc, #168]	@ (80015d4 <SystemClock_Config+0xf4>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <SystemClock_Config+0xf4>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800153c:	bf00      	nop
 800153e:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <SystemClock_Config+0xf4>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800154a:	d1f8      	bne.n	800153e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800154c:	2301      	movs	r3, #1
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001556:	2302      	movs	r3, #2
 8001558:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155a:	2302      	movs	r3, #2
 800155c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800155e:	2301      	movs	r3, #1
 8001560:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001562:	2318      	movs	r3, #24
 8001564:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001566:	2302      	movs	r3, #2
 8001568:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800156a:	2303      	movs	r3, #3
 800156c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800156e:	2302      	movs	r3, #2
 8001570:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001572:	230c      	movs	r3, #12
 8001574:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001576:	2300      	movs	r3, #0
 8001578:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001582:	4618      	mov	r0, r3
 8001584:	f004 fcea 	bl	8005f5c <HAL_RCC_OscConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800158e:	f000 f823 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001592:	233f      	movs	r3, #63	@ 0x3f
 8001594:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001596:	2303      	movs	r3, #3
 8001598:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80015a2:	2340      	movs	r3, #64	@ 0x40
 80015a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015a6:	2340      	movs	r3, #64	@ 0x40
 80015a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ae:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80015b0:	2340      	movs	r3, #64	@ 0x40
 80015b2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	2102      	movs	r1, #2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f005 f929 	bl	8006810 <HAL_RCC_ClockConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80015c4:	f000 f808 	bl	80015d8 <Error_Handler>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3770      	adds	r7, #112	@ 0x70
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	58000400 	.word	0x58000400
 80015d4:	58024800 	.word	0x58024800

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <Error_Handler+0x8>

080015e4 <MPU6000_Read>:
#include "mpu6000.h"

uint16_t MPU6000_Read(MPU6000 *dev,uint8_t reg) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
    // Pull CS low to select the device
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015f6:	4817      	ldr	r0, [pc, #92]	@ (8001654 <MPU6000_Read+0x70>)
 80015f8:	f004 fc5c 	bl	8005eb4 <HAL_GPIO_WritePin>

    // Transmit the register address with the read bit set (0x80)
    uint8_t tx[2] = {reg|0x80,0x00};
 80015fc:	78fb      	ldrb	r3, [r7, #3]
 80015fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001602:	b2db      	uxtb	r3, r3
 8001604:	733b      	strb	r3, [r7, #12]
 8001606:	2300      	movs	r3, #0
 8001608:	737b      	strb	r3, [r7, #13]
    uint8_t rx[2] = {0x00,0x00};
 800160a:	2300      	movs	r3, #0
 800160c:	813b      	strh	r3, [r7, #8]
    HAL_SPI_TransmitReceive_DMA(dev->hspi,tx,rx,2);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	f107 0208 	add.w	r2, r7, #8
 8001616:	f107 010c 	add.w	r1, r7, #12
 800161a:	2302      	movs	r3, #2
 800161c:	f007 f9fc 	bl	8008a18 <HAL_SPI_TransmitReceive_DMA>

    while (!dev->spi_transfer_done);
 8001620:	bf00      	nop
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f083 0301 	eor.w	r3, r3, #1
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f6      	bne.n	8001622 <MPU6000_Read+0x3e>
    dev->spi_transfer_done=false;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    // Pull CS high to deselect the device
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001642:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MPU6000_Read+0x70>)
 8001644:	f004 fc36 	bl	8005eb4 <HAL_GPIO_WritePin>

    // Combine the high byte and low byte to form a 16-bit value
    //return (uint16_t)((data[0] << 8) | data[1]);
    return rx[1];
 8001648:	7a7b      	ldrb	r3, [r7, #9]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	58021000 	.word	0x58021000

08001658 <MPU6000_Write>:

void MPU6000_Write(MPU6000 *dev,uint8_t reg,uint8_t data) {
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
 8001664:	4613      	mov	r3, r2
 8001666:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800166e:	4815      	ldr	r0, [pc, #84]	@ (80016c4 <MPU6000_Write+0x6c>)
 8001670:	f004 fc20 	bl	8005eb4 <HAL_GPIO_WritePin>

	// Transmit the register address with the read bit set (0x80)
	dev->tx_buffer[0]=reg;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
	dev->tx_buffer[1]=data;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	78ba      	ldrb	r2, [r7, #2]
 8001680:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	HAL_SPI_Transmit_DMA(dev->hspi, dev->tx_buffer, 2);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3338      	adds	r3, #56	@ 0x38
 800168c:	2202      	movs	r2, #2
 800168e:	4619      	mov	r1, r3
 8001690:	f007 f880 	bl	8008794 <HAL_SPI_Transmit_DMA>

	while (!dev->spi_transfer_done);
 8001694:	bf00      	nop
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f083 0301 	eor.w	r3, r3, #1
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f6      	bne.n	8001696 <MPU6000_Write+0x3e>
	dev->spi_transfer_done=false;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b

	// Pull CS high to deselect the device
	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016b6:	4803      	ldr	r0, [pc, #12]	@ (80016c4 <MPU6000_Write+0x6c>)
 80016b8:	f004 fbfc 	bl	8005eb4 <HAL_GPIO_WritePin>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	58021000 	.word	0x58021000

080016c8 <MPU6000_Init>:


void MPU6000_Init(MPU6000 *dev,SPI_HandleTypeDef *hspi){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
	dev->spi_transfer_done=false;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
	dev->hspi = hspi;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
	dev->acc[2] = 0.0f;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80016f8:	2201      	movs	r2, #1
 80016fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016fe:	481a      	ldr	r0, [pc, #104]	@ (8001768 <MPU6000_Init+0xa0>)
 8001700:	f004 fbd8 	bl	8005eb4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001704:	2064      	movs	r0, #100	@ 0x64
 8001706:	f001 fa9d 	bl	8002c44 <HAL_Delay>

	MPU6000_Write(dev,MPU6000_PWR_MGMT_1,0x80);
 800170a:	2280      	movs	r2, #128	@ 0x80
 800170c:	216b      	movs	r1, #107	@ 0x6b
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff ffa2 	bl	8001658 <MPU6000_Write>
	HAL_Delay(100);
 8001714:	2064      	movs	r0, #100	@ 0x64
 8001716:	f001 fa95 	bl	8002c44 <HAL_Delay>

	MPU6000_Write(dev,MPU6000_PWR_MGMT_1,0x00);
 800171a:	2200      	movs	r2, #0
 800171c:	216b      	movs	r1, #107	@ 0x6b
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff9a 	bl	8001658 <MPU6000_Write>
	HAL_Delay(10);
 8001724:	200a      	movs	r0, #10
 8001726:	f001 fa8d 	bl	8002c44 <HAL_Delay>
	MPU6000_Write(dev,MPU6000_GYRO_CONFIG,0x00);
 800172a:	2200      	movs	r2, #0
 800172c:	211b      	movs	r1, #27
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff92 	bl	8001658 <MPU6000_Write>
	MPU6000_Write(dev,MPU6000_ACCEL_CONFIG,0x00);
 8001734:	2200      	movs	r2, #0
 8001736:	211c      	movs	r1, #28
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff8d 	bl	8001658 <MPU6000_Write>

	uint8_t whoami = MPU6000_Read(dev,MPU6000_WHO_AM_I);
 800173e:	2175      	movs	r1, #117	@ 0x75
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff4f 	bl	80015e4 <MPU6000_Read>
 8001746:	4603      	mov	r3, r0
 8001748:	73fb      	strb	r3, [r7, #15]
	printf("Who am I: %d\n",whoami);
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	4619      	mov	r1, r3
 800174e:	4807      	ldr	r0, [pc, #28]	@ (800176c <MPU6000_Init+0xa4>)
 8001750:	f009 ffc2 	bl	800b6d8 <iprintf>

	// Pull CS low to select the device
	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
 8001756:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800175a:	4803      	ldr	r0, [pc, #12]	@ (8001768 <MPU6000_Init+0xa0>)
 800175c:	f004 fbaa 	bl	8005eb4 <HAL_GPIO_WritePin>
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	58021000 	.word	0x58021000
 800176c:	0800e638 	.word	0x0800e638

08001770 <MPU6000_Start_DMA>:

void MPU6000_Start_DMA(MPU6000 *dev){
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    // Pull CS low to select the device
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800177e:	4816      	ldr	r0, [pc, #88]	@ (80017d8 <MPU6000_Start_DMA+0x68>)
 8001780:	f004 fb98 	bl	8005eb4 <HAL_GPIO_WritePin>

    // Transmit the register address with the read bit set (0x80)
    dev->tx_buffer[0]=0x3B|0x80;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	22bb      	movs	r2, #187	@ 0xbb
 8001788:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    //SCB_CleanDCache_by_Addr((uint32_t*)dev->tx_buffer, 15);

    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(dev->hspi,dev->tx_buffer,dev->dma_buffer,15);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800179c:	230f      	movs	r3, #15
 800179e:	f007 f93b 	bl	8008a18 <HAL_SPI_TransmitReceive_DMA>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]

    while(!dev->spi_transfer_done);
 80017a6:	bf00      	nop
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f083 0301 	eor.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f6      	bne.n	80017a8 <MPU6000_Start_DMA+0x38>
    dev->spi_transfer_done=false;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b

    //SCB_InvalidateDCache_by_Addr((uint32_t*)dev->dma_buffer, 15);

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017c8:	4803      	ldr	r0, [pc, #12]	@ (80017d8 <MPU6000_Start_DMA+0x68>)
 80017ca:	f004 fb73 	bl	8005eb4 <HAL_GPIO_WritePin>
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	58021000 	.word	0x58021000

080017dc <MPU6000_Process_DMA>:

void MPU6000_Process_DMA(MPU6000 *dev) {
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
    int16_t raw_acc_x = (dev->dma_buffer[1] << 8) | dev->dma_buffer[2];
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	021b      	lsls	r3, r3, #8
 80017ee:	b21a      	sxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80017f6:	b21b      	sxth	r3, r3
 80017f8:	4313      	orrs	r3, r2
 80017fa:	82bb      	strh	r3, [r7, #20]
    int16_t raw_acc_y = (dev->dma_buffer[3] << 8) | dev->dma_buffer[4];
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8001802:	b21b      	sxth	r3, r3
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800180e:	b21b      	sxth	r3, r3
 8001810:	4313      	orrs	r3, r2
 8001812:	827b      	strh	r3, [r7, #18]
    int16_t raw_acc_z = (dev->dma_buffer[5] << 8) | dev->dma_buffer[6];
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800181a:	b21b      	sxth	r3, r3
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	b21a      	sxth	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8001826:	b21b      	sxth	r3, r3
 8001828:	4313      	orrs	r3, r2
 800182a:	823b      	strh	r3, [r7, #16]

    int16_t raw_temp  = (dev->dma_buffer[7] << 8) | dev->dma_buffer[8];
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8001832:	b21b      	sxth	r3, r3
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	b21a      	sxth	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800183e:	b21b      	sxth	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	81fb      	strh	r3, [r7, #14]

    int16_t raw_gyro_x = (dev->dma_buffer[9] << 8) | dev->dma_buffer[10];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800184a:	b21b      	sxth	r3, r3
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	b21a      	sxth	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8001856:	b21b      	sxth	r3, r3
 8001858:	4313      	orrs	r3, r2
 800185a:	81bb      	strh	r3, [r7, #12]
    int16_t raw_gyro_y = (dev->dma_buffer[11] << 8) | dev->dma_buffer[12];
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8001862:	b21b      	sxth	r3, r3
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	b21a      	sxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800186e:	b21b      	sxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	817b      	strh	r3, [r7, #10]
    int16_t raw_gyro_z = (dev->dma_buffer[13] << 8) | dev->dma_buffer[14];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800187a:	b21b      	sxth	r3, r3
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b21a      	sxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001886:	b21b      	sxth	r3, r3
 8001888:	4313      	orrs	r3, r2
 800188a:	813b      	strh	r3, [r7, #8]

    dev->acc[0] = (float)raw_acc_x / ACCEL_SCALE;   // ±4g scale
 800188c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001898:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80019e0 <MPU6000_Process_DMA+0x204>
 800189c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	edc3 7a01 	vstr	s15, [r3, #4]
    dev->acc[1] = -(float)raw_acc_y / ACCEL_SCALE;
 80018a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b2:	eeb1 7a67 	vneg.f32	s14, s15
 80018b6:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 80019e0 <MPU6000_Process_DMA+0x204>
 80018ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edc3 7a02 	vstr	s15, [r3, #8]
    dev->acc[2] = -(float)raw_acc_z / ACCEL_SCALE;
 80018c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d0:	eeb1 7a67 	vneg.f32	s14, s15
 80018d4:	eddf 6a42 	vldr	s13, [pc, #264]	@ 80019e0 <MPU6000_Process_DMA+0x204>
 80018d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	edc3 7a03 	vstr	s15, [r3, #12]

    dev->temp = ((float)raw_temp) / 340.0f + 36.53f;
 80018e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018e6:	ee07 3a90 	vmov	s15, r3
 80018ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80019e4 <MPU6000_Process_DMA+0x208>
 80018f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018f6:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80019e8 <MPU6000_Process_DMA+0x20c>
 80018fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    dev->gyro[0] = (float)raw_gyro_x / GYRO_SCALE;   // ±500°/s
 8001904:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001908:	ee07 3a90 	vmov	s15, r3
 800190c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001910:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80019ec <MPU6000_Process_DMA+0x210>
 8001914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edc3 7a04 	vstr	s15, [r3, #16]
    dev->gyro[1] = -(float)raw_gyro_y / GYRO_SCALE;
 800191e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	eeb1 7a67 	vneg.f32	s14, s15
 800192e:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 80019ec <MPU6000_Process_DMA+0x210>
 8001932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	edc3 7a05 	vstr	s15, [r3, #20]
    dev->gyro[2] = -(float)raw_gyro_z / GYRO_SCALE;
 800193c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001948:	eeb1 7a67 	vneg.f32	s14, s15
 800194c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80019ec <MPU6000_Process_DMA+0x210>
 8001950:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	edc3 7a06 	vstr	s15, [r3, #24]

    if (dev->calibrated){
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001960:	2b00      	cmp	r3, #0
 8001962:	d037      	beq.n	80019d4 <MPU6000_Process_DMA+0x1f8>
        for (uint8_t i = 0; i < 3; i++){
 8001964:	2300      	movs	r3, #0
 8001966:	75fb      	strb	r3, [r7, #23]
 8001968:	e031      	b.n	80019ce <MPU6000_Process_DMA+0x1f2>
        	dev->acc[i] -= dev->acc_offset[i];
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	3304      	adds	r3, #4
 8001974:	ed93 7a00 	vldr	s14, [r3]
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	3306      	adds	r3, #6
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3304      	adds	r3, #4
 8001996:	edc3 7a00 	vstr	s15, [r3]
        	dev->gyro[i] -= dev->gyro_offset[i];
 800199a:	7dfb      	ldrb	r3, [r7, #23]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	330a      	adds	r3, #10
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	3304      	adds	r3, #4
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t i = 0; i < 3; i++){
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	3301      	adds	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d9ca      	bls.n	800196a <MPU6000_Process_DMA+0x18e>
        }
    }
}
 80019d4:	bf00      	nop
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	46800000 	.word	0x46800000
 80019e4:	43aa0000 	.word	0x43aa0000
 80019e8:	42121eb8 	.word	0x42121eb8
 80019ec:	43030000 	.word	0x43030000

080019f0 <MPU6000_Calibrate>:

void MPU6000_Calibrate(MPU6000 *dev) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	@ 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    const uint16_t samples = 3000;
 80019f8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80019fc:	847b      	strh	r3, [r7, #34]	@ 0x22

    float acc_sum[3] = {0}, gyro_sum[3] = {0};
 80019fe:	f107 0314 	add.w	r3, r7, #20
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]

    for (uint16_t i = 0; i < samples; i++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001a1a:	e04c      	b.n	8001ab6 <MPU6000_Calibrate+0xc6>
        // Read one set of sensor values
        MPU6000_Start_DMA(dev);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fea7 	bl	8001770 <MPU6000_Start_DMA>
        MPU6000_Process_DMA(dev);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff feda 	bl	80017dc <MPU6000_Process_DMA>

        for (uint8_t axis = 0; axis < 3; axis++) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001a2e:	e038      	b.n	8001aa2 <MPU6000_Calibrate+0xb2>
            acc_sum[axis]  += dev->acc[axis];
 8001a30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	3328      	adds	r3, #40	@ 0x28
 8001a38:	443b      	add	r3, r7
 8001a3a:	3b14      	subs	r3, #20
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	3328      	adds	r3, #40	@ 0x28
 8001a5c:	443b      	add	r3, r7
 8001a5e:	3b14      	subs	r3, #20
 8001a60:	edc3 7a00 	vstr	s15, [r3]
            gyro_sum[axis] += dev->gyro[axis];
 8001a64:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	3328      	adds	r3, #40	@ 0x28
 8001a6c:	443b      	add	r3, r7
 8001a6e:	3b20      	subs	r3, #32
 8001a70:	ed93 7a00 	vldr	s14, [r3]
 8001a74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	3328      	adds	r3, #40	@ 0x28
 8001a90:	443b      	add	r3, r7
 8001a92:	3b20      	subs	r3, #32
 8001a94:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t axis = 0; axis < 3; axis++) {
 8001a98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001aa2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d9c2      	bls.n	8001a30 <MPU6000_Calibrate+0x40>
        }

        HAL_Delay(1); // Adjust delay depending on your sampling rate
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f001 f8ca 	bl	8002c44 <HAL_Delay>
    for (uint16_t i = 0; i < samples; i++) {
 8001ab0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001ab6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001ab8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d3ae      	bcc.n	8001a1c <MPU6000_Calibrate+0x2c>
    }

    // Compute average offsets
    for (uint8_t axis = 0; axis < 3; axis++) {
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001ac4:	e033      	b.n	8001b2e <MPU6000_Calibrate+0x13e>
        dev->acc_offset[axis]  = acc_sum[axis] / samples;
 8001ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	3328      	adds	r3, #40	@ 0x28
 8001ace:	443b      	add	r3, r7
 8001ad0:	3b14      	subs	r3, #20
 8001ad2:	edd3 6a00 	vldr	s13, [r3]
 8001ad6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	3306      	adds	r3, #6
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	3304      	adds	r3, #4
 8001af2:	edc3 7a00 	vstr	s15, [r3]
        dev->gyro_offset[axis] = gyro_sum[axis] / samples;
 8001af6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	3328      	adds	r3, #40	@ 0x28
 8001afe:	443b      	add	r3, r7
 8001b00:	3b20      	subs	r3, #32
 8001b02:	edd3 6a00 	vldr	s13, [r3]
 8001b06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	330a      	adds	r3, #10
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t axis = 0; axis < 3; axis++) {
 8001b24:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001b2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d9c7      	bls.n	8001ac6 <MPU6000_Calibrate+0xd6>
    }

    // For accelerometer Z axis, remove gravity (assuming +Z is upward)
    dev->acc_offset[2] -= 1.0f;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    dev->calibrated = true;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58


}
 8001b52:	bf00      	nop
 8001b54:	3728      	adds	r7, #40	@ 0x28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <PID_Init>:
#include "pid.h"

void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float output_limit, float integral_limit)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b087      	sub	sp, #28
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6178      	str	r0, [r7, #20]
 8001b62:	ed87 0a04 	vstr	s0, [r7, #16]
 8001b66:	edc7 0a03 	vstr	s1, [r7, #12]
 8001b6a:	ed87 1a02 	vstr	s2, [r7, #8]
 8001b6e:	edc7 1a01 	vstr	s3, [r7, #4]
 8001b72:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	609a      	str	r2, [r3, #8]

    pid->target_value = 0.0f;
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
    pid->measured_value = 0.0f;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
    pid->measured_value_prev = 0.0f;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]

    pid->error = 0.0f;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
    pid->error_sum = 0.0f;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
    pid->error_deriv = 0.0f;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	621a      	str	r2, [r3, #32]

    pid->output = 0.0f;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    pid->output_limit = output_limit;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->integral_limit = integral_limit;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bcc:	bf00      	nop
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <PID_Double_Calculation>:
        pid->output = -pid->output_limit;

    return pid->output;
}

float PID_Double_Calculation(Double_PID_Controller *axis, float target_angle, float measured_angle, float measured_rate, float dt){
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6178      	str	r0, [r7, #20]
 8001be0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001be4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001be8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001bec:	edc7 1a01 	vstr	s3, [r7, #4]
	/*Double PID outer loop calculation */
	axis->outer_loop.target_value = target_angle;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	60da      	str	r2, [r3, #12]
	axis->outer_loop.measured_value = measured_angle;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	611a      	str	r2, [r3, #16]

	axis->outer_loop.error = axis->outer_loop.target_value - axis->outer_loop.measured_value;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->outer_loop.error_sum += axis->outer_loop.error * dt;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	edd3 6a06 	vldr	s13, [r3, #24]
 8001c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	edc3 7a07 	vstr	s15, [r3, #28]
	if (axis->outer_loop.error_sum > axis->outer_loop.integral_limit) axis->outer_loop.error_sum = axis->outer_loop.integral_limit;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	dd04      	ble.n	8001c50 <PID_Double_Calculation+0x78>
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	61da      	str	r2, [r3, #28]
 8001c4e:	e014      	b.n	8001c7a <PID_Double_Calculation+0xa2>
	else if (axis->outer_loop.error_sum < -axis->outer_loop.integral_limit) axis->outer_loop.error_sum = -axis->outer_loop.integral_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c5c:	eef1 7a67 	vneg.f32	s15, s15
 8001c60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	d507      	bpl.n	8001c7a <PID_Double_Calculation+0xa2>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001c70:	eef1 7a67 	vneg.f32	s15, s15
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	edc3 7a07 	vstr	s15, [r3, #28]

	axis->outer_loop.error_deriv = -measured_rate;
 8001c7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c7e:	eef1 7a67 	vneg.f32	s15, s15
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	edc3 7a08 	vstr	s15, [r3, #32]

	axis->outer_loop.output = axis->outer_loop.Kd * axis->outer_loop.error +
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c94:	ee27 7a27 	vmul.f32	s14, s14, s15
							  axis->outer_loop.Ki * axis->outer_loop.error_sum +
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	axis->outer_loop.output = axis->outer_loop.Kd * axis->outer_loop.error +
 8001ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
							  axis->outer_loop.Kp * axis->outer_loop.error_deriv;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	edd3 6a00 	vldr	s13, [r3]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
							  axis->outer_loop.Ki * axis->outer_loop.error_sum +
 8001cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
	axis->outer_loop.output = axis->outer_loop.Kd * axis->outer_loop.error +
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	if (axis->outer_loop.output > axis->outer_loop.output_limit) axis->outer_loop.output = axis->outer_loop.output_limit;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cda:	dd04      	ble.n	8001ce6 <PID_Double_Calculation+0x10e>
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ce4:	e014      	b.n	8001d10 <PID_Double_Calculation+0x138>
	else if (axis->outer_loop.output < -axis->outer_loop.output_limit) axis->outer_loop.output = -axis->outer_loop.output_limit;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001cf2:	eef1 7a67 	vneg.f32	s15, s15
 8001cf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfe:	d507      	bpl.n	8001d10 <PID_Double_Calculation+0x138>
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001d06:	eef1 7a67 	vneg.f32	s15, s15
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	/*Double PID inner loop calculation*/
	axis->inner_loop.target_value = axis->outer_loop.output;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	63da      	str	r2, [r3, #60]	@ 0x3c
	axis->inner_loop.measured_value = measured_rate;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	641a      	str	r2, [r3, #64]	@ 0x40

	axis->inner_loop.error = axis->inner_loop.target_value - axis->inner_loop.measured_value;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	axis->inner_loop.error_sum += axis->inner_loop.error * dt;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8001d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	if (axis->inner_loop.error_sum > axis->inner_loop.integral_limit) axis->inner_loop.error_sum = axis->inner_loop.integral_limit;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d66:	dd04      	ble.n	8001d72 <PID_Double_Calculation+0x19a>
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001d70:	e014      	b.n	8001d9c <PID_Double_Calculation+0x1c4>
	else if (axis->inner_loop.error_sum < -axis->inner_loop.integral_limit) axis->inner_loop.error_sum = -axis->inner_loop.integral_limit;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001d7e:	eef1 7a67 	vneg.f32	s15, s15
 8001d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8a:	d507      	bpl.n	8001d9c <PID_Double_Calculation+0x1c4>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001d92:	eef1 7a67 	vneg.f32	s15, s15
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	axis->inner_loop.error_deriv = -(axis->inner_loop.measured_value - axis->inner_loop.measured_value_prev) / dt;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dac:	eef1 6a67 	vneg.f32	s13, s15
 8001db0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	axis->inner_loop.measured_value_prev = axis->inner_loop.measured_value;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	645a      	str	r2, [r3, #68]	@ 0x44

	axis->inner_loop.output = axis->inner_loop.Kd * axis->inner_loop.error +
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
			  	  	  	  	  axis->inner_loop.Ki * axis->inner_loop.error_sum +
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	axis->inner_loop.output = axis->inner_loop.Kd * axis->inner_loop.error +
 8001de6:	ee37 7a27 	vadd.f32	s14, s14, s15
							  axis->inner_loop.Kp * axis->inner_loop.error_deriv;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			  	  	  	  	  axis->inner_loop.Ki * axis->inner_loop.error_sum +
 8001dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
	axis->inner_loop.output = axis->inner_loop.Kd * axis->inner_loop.error +
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

	return axis->inner_loop.output;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e08:	ee07 3a90 	vmov	s15, r3
}
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <PID_Yaw_Angle_Calculation>:

/*
 * Yaw angle duoc dung khi throttle chinh yaw duoc giu nguyen -> giu cho heading khong thay doi
 * Yaw rate duoc dung khi throttle di chuyen -> dung pid dieu chinh toc do
 */
float PID_Yaw_Angle_Calculation(PID_Controller *axis, float target_angle, float measured_angle, float measured_rate, float dt){
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6178      	str	r0, [r7, #20]
 8001e24:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e28:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e2c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e30:	edc7 1a01 	vstr	s3, [r7, #4]
	axis->target_value = target_angle;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	60da      	str	r2, [r3, #12]
	axis->measured_value = measured_angle;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	611a      	str	r2, [r3, #16]

	axis->error = axis->target_value - axis->measured_value;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	edc3 7a06 	vstr	s15, [r3, #24]
	//Deal voi truong hop di tu 10 do quay sang 350 do chang han
	if (axis->error > 180.f) axis->error -= 360.f;
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e5c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001f24 <PID_Yaw_Angle_Calculation+0x108>
 8001e60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	dd0a      	ble.n	8001e80 <PID_Yaw_Angle_Calculation+0x64>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e70:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001f28 <PID_Yaw_Angle_Calculation+0x10c>
 8001e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	edc3 7a06 	vstr	s15, [r3, #24]
 8001e7e:	e013      	b.n	8001ea8 <PID_Yaw_Angle_Calculation+0x8c>
	else if (axis->error < -180.f) axis->error += 360.f;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e86:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001f2c <PID_Yaw_Angle_Calculation+0x110>
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	d509      	bpl.n	8001ea8 <PID_Yaw_Angle_Calculation+0x8c>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e9a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001f28 <PID_Yaw_Angle_Calculation+0x10c>
 8001e9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	edc3 7a06 	vstr	s15, [r3, #24]

	axis->error_sum += axis->error * dt;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	ed93 7a07 	vldr	s14, [r3, #28]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	edd3 6a06 	vldr	s13, [r3, #24]
 8001eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	edc3 7a07 	vstr	s15, [r3, #28]

	axis->error_deriv = -measured_rate;
 8001ec6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eca:	eef1 7a67 	vneg.f32	s15, s15
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	edc3 7a08 	vstr	s15, [r3, #32]

	axis->output = axis->Kd * axis->error +
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
  	  	  	  	   axis->Ki * axis->error_sum +
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
	axis->output = axis->Kd * axis->error +
 8001ef4:	ee37 7a27 	vadd.f32	s14, s14, s15
				   axis->Kp * axis->error_deriv;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	edd3 6a00 	vldr	s13, [r3]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
  	  	  	  	   axis->Ki * axis->error_sum +
 8001f08:	ee77 7a27 	vadd.f32	s15, s14, s15
	axis->output = axis->Kd * axis->error +
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8001f12:	bf00      	nop
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	43340000 	.word	0x43340000
 8001f28:	43b40000 	.word	0x43b40000
 8001f2c:	c3340000 	.word	0xc3340000

08001f30 <MX_SPI4_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f36:	4a2c      	ldr	r2, [pc, #176]	@ (8001fe8 <MX_SPI4_Init+0xb8>)
 8001f38:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f3c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001f40:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001f42:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f48:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f4a:	2207      	movs	r2, #7
 8001f4c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4e:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f54:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001f5a:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f5c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f60:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f62:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f68:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f80:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f86:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f94:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f9a:	4b12      	ldr	r3, [pc, #72]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001fbe:	4809      	ldr	r0, [pc, #36]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001fc0:	f006 fac4 	bl	800854c <HAL_SPI_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001fca:	f7ff fb05 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */
  hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8001fce:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <MX_SPI4_Init+0xbc>)
 8001fd0:	2254      	movs	r2, #84	@ 0x54
 8001fd2:	605a      	str	r2, [r3, #4]
  __HAL_LINKDMA(&hspi4, hdmatx, hdma_spi4_tx);
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001fd6:	4a05      	ldr	r2, [pc, #20]	@ (8001fec <MX_SPI4_Init+0xbc>)
 8001fd8:	679a      	str	r2, [r3, #120]	@ 0x78
 8001fda:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <MX_SPI4_Init+0xbc>)
 8001fdc:	4a01      	ldr	r2, [pc, #4]	@ (8001fe4 <MX_SPI4_Init+0xb4>)
 8001fde:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE END SPI4_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	2400072c 	.word	0x2400072c
 8001fe8:	40013400 	.word	0x40013400
 8001fec:	2400082c 	.word	0x2400082c

08001ff0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	22c0      	movs	r2, #192	@ 0xc0
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f009 fbb6 	bl	800b782 <memset>
  if(spiHandle->Instance==SPI4)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a59      	ldr	r2, [pc, #356]	@ (8002180 <HAL_SPI_MspInit+0x190>)
 800201c:	4293      	cmp	r3, r2
 800201e:	f040 80aa 	bne.w	8002176 <HAL_SPI_MspInit+0x186>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002022:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800202e:	2300      	movs	r3, #0
 8002030:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4618      	mov	r0, r3
 8002038:	f004 ff1a 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002042:	f7ff fac9 	bl	80015d8 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002046:	4b4f      	ldr	r3, [pc, #316]	@ (8002184 <HAL_SPI_MspInit+0x194>)
 8002048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800204c:	4a4d      	ldr	r2, [pc, #308]	@ (8002184 <HAL_SPI_MspInit+0x194>)
 800204e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002052:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002056:	4b4b      	ldr	r3, [pc, #300]	@ (8002184 <HAL_SPI_MspInit+0x194>)
 8002058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800205c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002064:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <HAL_SPI_MspInit+0x194>)
 8002066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206a:	4a46      	ldr	r2, [pc, #280]	@ (8002184 <HAL_SPI_MspInit+0x194>)
 800206c:	f043 0310 	orr.w	r3, r3, #16
 8002070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002074:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <HAL_SPI_MspInit+0x194>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002082:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800209c:	2305      	movs	r3, #5
 800209e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4837      	ldr	r0, [pc, #220]	@ (8002188 <HAL_SPI_MspInit+0x198>)
 80020aa:	f003 fd53 	bl	8005b54 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream3;
 80020ae:	4b37      	ldr	r3, [pc, #220]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020b0:	4a37      	ldr	r2, [pc, #220]	@ (8002190 <HAL_SPI_MspInit+0x1a0>)
 80020b2:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 80020b4:	4b35      	ldr	r3, [pc, #212]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020b6:	2253      	movs	r2, #83	@ 0x53
 80020b8:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020ba:	4b34      	ldr	r3, [pc, #208]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c0:	4b32      	ldr	r3, [pc, #200]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020c6:	4b31      	ldr	r3, [pc, #196]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020cc:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020ce:	4b2f      	ldr	r3, [pc, #188]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d4:	4b2d      	ldr	r3, [pc, #180]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80020da:	4b2c      	ldr	r3, [pc, #176]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020e6:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020e8:	4b28      	ldr	r3, [pc, #160]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 80020ee:	4827      	ldr	r0, [pc, #156]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 80020f0:	f000 fee8 	bl	8002ec4 <HAL_DMA_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80020fa:	f7ff fa6d 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a22      	ldr	r2, [pc, #136]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 8002102:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002104:	4a21      	ldr	r2, [pc, #132]	@ (800218c <HAL_SPI_MspInit+0x19c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800210a:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 800210c:	4a22      	ldr	r2, [pc, #136]	@ (8002198 <HAL_SPI_MspInit+0x1a8>)
 800210e:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002110:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 8002112:	2254      	movs	r2, #84	@ 0x54
 8002114:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002116:	4b1f      	ldr	r3, [pc, #124]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 8002118:	2240      	movs	r2, #64	@ 0x40
 800211a:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800211c:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002122:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 8002124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002128:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800212a:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 800212c:	2200      	movs	r2, #0
 800212e:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002130:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 8002132:	2200      	movs	r2, #0
 8002134:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002136:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 8002138:	2200      	movs	r2, #0
 800213a:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800213c:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 800213e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002142:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002144:	4b13      	ldr	r3, [pc, #76]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800214a:	4812      	ldr	r0, [pc, #72]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 800214c:	f000 feba 	bl	8002ec4 <HAL_DMA_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 8002156:	f7ff fa3f 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 800215e:	679a      	str	r2, [r3, #120]	@ 0x78
 8002160:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <HAL_SPI_MspInit+0x1a4>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	2054      	movs	r0, #84	@ 0x54
 800216c:	f000 fe75 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002170:	2054      	movs	r0, #84	@ 0x54
 8002172:	f000 fe8c 	bl	8002e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002176:	bf00      	nop
 8002178:	37e8      	adds	r7, #232	@ 0xe8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40013400 	.word	0x40013400
 8002184:	58024400 	.word	0x58024400
 8002188:	58021000 	.word	0x58021000
 800218c:	240007b4 	.word	0x240007b4
 8002190:	40020458 	.word	0x40020458
 8002194:	2400082c 	.word	0x2400082c
 8002198:	40020428 	.word	0x40020428

0800219c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <HAL_MspInit+0x30>)
 80021a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021a8:	4a08      	ldr	r2, [pc, #32]	@ (80021cc <HAL_MspInit+0x30>)
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_MspInit+0x30>)
 80021b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	58024400 	.word	0x58024400

080021d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d4:	bf00      	nop
 80021d6:	e7fd      	b.n	80021d4 <NMI_Handler+0x4>

080021d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <MemManage_Handler+0x4>

080021e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <BusFault_Handler+0x4>

080021f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <UsageFault_Handler+0x4>

080021f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002226:	f000 fced 	bl	8002c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <DMA1_Stream0_IRQHandler+0x10>)
 8002236:	f002 f96f 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	24000940 	.word	0x24000940

08002244 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <DMA1_Stream1_IRQHandler+0x10>)
 800224a:	f002 f965 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	240009b8 	.word	0x240009b8

08002258 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch3);
 800225c:	4802      	ldr	r0, [pc, #8]	@ (8002268 <DMA1_Stream2_IRQHandler+0x10>)
 800225e:	f002 f95b 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	24000a30 	.word	0x24000a30

0800226c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <DMA1_Stream3_IRQHandler+0x10>)
 8002272:	f002 f951 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	24000aa8 	.word	0x24000aa8

08002280 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <TIM2_IRQHandler+0x10>)
 8002286:	f007 fc31 	bl	8009aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	240008a8 	.word	0x240008a8

08002294 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <DMA2_Stream1_IRQHandler+0x10>)
 800229a:	f002 f93d 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2400082c 	.word	0x2400082c

080022a8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80022ac:	4802      	ldr	r0, [pc, #8]	@ (80022b8 <DMA2_Stream3_IRQHandler+0x10>)
 80022ae:	f002 f933 	bl	8004518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	240007b4 	.word	0x240007b4

080022bc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80022c0:	4802      	ldr	r0, [pc, #8]	@ (80022cc <SPI4_IRQHandler+0x10>)
 80022c2:	f006 fd61 	bl	8008d88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2400072c 	.word	0x2400072c

080022d0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80022da:	4b0f      	ldr	r3, [pc, #60]	@ (8002318 <ITM_SendChar+0x48>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a0e      	ldr	r2, [pc, #56]	@ (8002318 <ITM_SendChar+0x48>)
 80022e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022e4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80022e6:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <ITM_SendChar+0x4c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a0c      	ldr	r2, [pc, #48]	@ (800231c <ITM_SendChar+0x4c>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80022f2:	bf00      	nop
 80022f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f8      	beq.n	80022f4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002302:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	6013      	str	r3, [r2, #0]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000edfc 	.word	0xe000edfc
 800231c:	e0000e00 	.word	0xe0000e00

08002320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return 1;
 8002324:	2301      	movs	r3, #1
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <_kill>:

int _kill(int pid, int sig)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800233a:	f009 fa75 	bl	800b828 <__errno>
 800233e:	4603      	mov	r3, r0
 8002340:	2216      	movs	r2, #22
 8002342:	601a      	str	r2, [r3, #0]
  return -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <_exit>:

void _exit (int status)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002358:	f04f 31ff 	mov.w	r1, #4294967295
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ffe7 	bl	8002330 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002362:	bf00      	nop
 8002364:	e7fd      	b.n	8002362 <_exit+0x12>

08002366 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e00a      	b.n	800238e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002378:	f3af 8000 	nop.w
 800237c:	4601      	mov	r1, r0
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	60ba      	str	r2, [r7, #8]
 8002384:	b2ca      	uxtb	r2, r1
 8002386:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	429a      	cmp	r2, r3
 8002394:	dbf0      	blt.n	8002378 <_read+0x12>
  }

  return len;
 8002396:	687b      	ldr	r3, [r7, #4]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	e009      	b.n	80023c6 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	60ba      	str	r2, [r7, #8]
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff ff88 	bl	80022d0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	3301      	adds	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	dbf1      	blt.n	80023b2 <_write+0x12>
  }
  return len;
 80023ce:	687b      	ldr	r3, [r7, #4]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <_close>:

int _close(int file)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002400:	605a      	str	r2, [r3, #4]
  return 0;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <_isatty>:

int _isatty(int file)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002418:	2301      	movs	r3, #1
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	60b9      	str	r1, [r7, #8]
 8002430:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002448:	4a14      	ldr	r2, [pc, #80]	@ (800249c <_sbrk+0x5c>)
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <_sbrk+0x60>)
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002454:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800245c:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <_sbrk+0x64>)
 800245e:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <_sbrk+0x68>)
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d207      	bcs.n	8002480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002470:	f009 f9da 	bl	800b828 <__errno>
 8002474:	4603      	mov	r3, r0
 8002476:	220c      	movs	r2, #12
 8002478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	e009      	b.n	8002494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002480:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002486:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	4a05      	ldr	r2, [pc, #20]	@ (80024a4 <_sbrk+0x64>)
 8002490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	24080000 	.word	0x24080000
 80024a0:	00000400 	.word	0x00000400
 80024a4:	240008a4 	.word	0x240008a4
 80024a8:	24000c70 	.word	0x24000c70

080024ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024b0:	4b43      	ldr	r3, [pc, #268]	@ (80025c0 <SystemInit+0x114>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b6:	4a42      	ldr	r2, [pc, #264]	@ (80025c0 <SystemInit+0x114>)
 80024b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024c0:	4b40      	ldr	r3, [pc, #256]	@ (80025c4 <SystemInit+0x118>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	2b06      	cmp	r3, #6
 80024ca:	d807      	bhi.n	80024dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024cc:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <SystemInit+0x118>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 030f 	bic.w	r3, r3, #15
 80024d4:	4a3b      	ldr	r2, [pc, #236]	@ (80025c4 <SystemInit+0x118>)
 80024d6:	f043 0307 	orr.w	r3, r3, #7
 80024da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024dc:	4b3a      	ldr	r3, [pc, #232]	@ (80025c8 <SystemInit+0x11c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a39      	ldr	r2, [pc, #228]	@ (80025c8 <SystemInit+0x11c>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024e8:	4b37      	ldr	r3, [pc, #220]	@ (80025c8 <SystemInit+0x11c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024ee:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <SystemInit+0x11c>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4935      	ldr	r1, [pc, #212]	@ (80025c8 <SystemInit+0x11c>)
 80024f4:	4b35      	ldr	r3, [pc, #212]	@ (80025cc <SystemInit+0x120>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024fa:	4b32      	ldr	r3, [pc, #200]	@ (80025c4 <SystemInit+0x118>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002506:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <SystemInit+0x118>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 030f 	bic.w	r3, r3, #15
 800250e:	4a2d      	ldr	r2, [pc, #180]	@ (80025c4 <SystemInit+0x118>)
 8002510:	f043 0307 	orr.w	r3, r3, #7
 8002514:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002516:	4b2c      	ldr	r3, [pc, #176]	@ (80025c8 <SystemInit+0x11c>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800251c:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <SystemInit+0x11c>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002522:	4b29      	ldr	r3, [pc, #164]	@ (80025c8 <SystemInit+0x11c>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002528:	4b27      	ldr	r3, [pc, #156]	@ (80025c8 <SystemInit+0x11c>)
 800252a:	4a29      	ldr	r2, [pc, #164]	@ (80025d0 <SystemInit+0x124>)
 800252c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800252e:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <SystemInit+0x11c>)
 8002530:	4a28      	ldr	r2, [pc, #160]	@ (80025d4 <SystemInit+0x128>)
 8002532:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002534:	4b24      	ldr	r3, [pc, #144]	@ (80025c8 <SystemInit+0x11c>)
 8002536:	4a28      	ldr	r2, [pc, #160]	@ (80025d8 <SystemInit+0x12c>)
 8002538:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800253a:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <SystemInit+0x11c>)
 800253c:	2200      	movs	r2, #0
 800253e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002540:	4b21      	ldr	r3, [pc, #132]	@ (80025c8 <SystemInit+0x11c>)
 8002542:	4a25      	ldr	r2, [pc, #148]	@ (80025d8 <SystemInit+0x12c>)
 8002544:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002546:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <SystemInit+0x11c>)
 8002548:	2200      	movs	r2, #0
 800254a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800254c:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <SystemInit+0x11c>)
 800254e:	4a22      	ldr	r2, [pc, #136]	@ (80025d8 <SystemInit+0x12c>)
 8002550:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002552:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <SystemInit+0x11c>)
 8002554:	2200      	movs	r2, #0
 8002556:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002558:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <SystemInit+0x11c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1a      	ldr	r2, [pc, #104]	@ (80025c8 <SystemInit+0x11c>)
 800255e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002562:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002564:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <SystemInit+0x11c>)
 8002566:	2200      	movs	r2, #0
 8002568:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800256a:	4b1c      	ldr	r3, [pc, #112]	@ (80025dc <SystemInit+0x130>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <SystemInit+0x134>)
 8002570:	4013      	ands	r3, r2
 8002572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002576:	d202      	bcs.n	800257e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002578:	4b1a      	ldr	r3, [pc, #104]	@ (80025e4 <SystemInit+0x138>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <SystemInit+0x11c>)
 8002580:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d113      	bne.n	80025b4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <SystemInit+0x11c>)
 800258e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002592:	4a0d      	ldr	r2, [pc, #52]	@ (80025c8 <SystemInit+0x11c>)
 8002594:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002598:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800259c:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <SystemInit+0x13c>)
 800259e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80025a2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80025a4:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <SystemInit+0x11c>)
 80025a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025aa:	4a07      	ldr	r2, [pc, #28]	@ (80025c8 <SystemInit+0x11c>)
 80025ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00
 80025c4:	52002000 	.word	0x52002000
 80025c8:	58024400 	.word	0x58024400
 80025cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80025d0:	02020200 	.word	0x02020200
 80025d4:	01ff0000 	.word	0x01ff0000
 80025d8:	01010280 	.word	0x01010280
 80025dc:	5c001000 	.word	0x5c001000
 80025e0:	ffff0000 	.word	0xffff0000
 80025e4:	51008108 	.word	0x51008108
 80025e8:	52004000 	.word	0x52004000

080025ec <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <ExitRun0Mode+0x2c>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a08      	ldr	r2, [pc, #32]	@ (8002618 <ExitRun0Mode+0x2c>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80025fc:	bf00      	nop
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <ExitRun0Mode+0x2c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f9      	beq.n	80025fe <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	58024800 	.word	0x58024800

0800261c <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch3;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	2200      	movs	r2, #0
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	605a      	str	r2, [r3, #4]
 8002638:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800263a:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <MX_TIM2_Init+0x98>)
 800263c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002640:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8002642:	4b1c      	ldr	r3, [pc, #112]	@ (80026b4 <MX_TIM2_Init+0x98>)
 8002644:	22ef      	movs	r2, #239	@ 0xef
 8002646:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002648:	4b1a      	ldr	r3, [pc, #104]	@ (80026b4 <MX_TIM2_Init+0x98>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800264e:	4b19      	ldr	r3, [pc, #100]	@ (80026b4 <MX_TIM2_Init+0x98>)
 8002650:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002654:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002656:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <MX_TIM2_Init+0x98>)
 8002658:	2200      	movs	r2, #0
 800265a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265c:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <MX_TIM2_Init+0x98>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002662:	4814      	ldr	r0, [pc, #80]	@ (80026b4 <MX_TIM2_Init+0x98>)
 8002664:	f006 feeb 	bl	800943e <HAL_TIM_Base_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800266e:	f7fe ffb3 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002676:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	4619      	mov	r1, r3
 800267e:	480d      	ldr	r0, [pc, #52]	@ (80026b4 <MX_TIM2_Init+0x98>)
 8002680:	f007 fc50 	bl	8009f24 <HAL_TIM_ConfigClockSource>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800268a:	f7fe ffa5 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4806      	ldr	r0, [pc, #24]	@ (80026b4 <MX_TIM2_Init+0x98>)
 800269c:	f008 fa78 	bl	800ab90 <HAL_TIMEx_MasterConfigSynchronization>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026a6:	f7fe ff97 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026aa:	bf00      	nop
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	240008a8 	.word	0x240008a8

080026b8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	@ 0x38
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026d8:	463b      	mov	r3, r7
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	605a      	str	r2, [r3, #4]
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	60da      	str	r2, [r3, #12]
 80026e4:	611a      	str	r2, [r3, #16]
 80026e6:	615a      	str	r2, [r3, #20]
 80026e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80026ea:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <MX_TIM5_Init+0x128>)
 80026ec:	4a3d      	ldr	r2, [pc, #244]	@ (80027e4 <MX_TIM5_Init+0x12c>)
 80026ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80026f0:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <MX_TIM5_Init+0x128>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f6:	4b3a      	ldr	r3, [pc, #232]	@ (80027e0 <MX_TIM5_Init+0x128>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 320-1;
 80026fc:	4b38      	ldr	r3, [pc, #224]	@ (80027e0 <MX_TIM5_Init+0x128>)
 80026fe:	f240 123f 	movw	r2, #319	@ 0x13f
 8002702:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002704:	4b36      	ldr	r3, [pc, #216]	@ (80027e0 <MX_TIM5_Init+0x128>)
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270a:	4b35      	ldr	r3, [pc, #212]	@ (80027e0 <MX_TIM5_Init+0x128>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002710:	4833      	ldr	r0, [pc, #204]	@ (80027e0 <MX_TIM5_Init+0x128>)
 8002712:	f006 fe94 	bl	800943e <HAL_TIM_Base_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800271c:	f7fe ff5c 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002724:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002726:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800272a:	4619      	mov	r1, r3
 800272c:	482c      	ldr	r0, [pc, #176]	@ (80027e0 <MX_TIM5_Init+0x128>)
 800272e:	f007 fbf9 	bl	8009f24 <HAL_TIM_ConfigClockSource>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002738:	f7fe ff4e 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800273c:	4828      	ldr	r0, [pc, #160]	@ (80027e0 <MX_TIM5_Init+0x128>)
 800273e:	f006 ff4d 	bl	80095dc <HAL_TIM_PWM_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002748:	f7fe ff46 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	4821      	ldr	r0, [pc, #132]	@ (80027e0 <MX_TIM5_Init+0x128>)
 800275c:	f008 fa18 	bl	800ab90 <HAL_TIMEx_MasterConfigSynchronization>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002766:	f7fe ff37 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276a:	2360      	movs	r3, #96	@ 0x60
 800276c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 120;
 800276e:	2378      	movs	r3, #120	@ 0x78
 8002770:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002776:	2304      	movs	r3, #4
 8002778:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800277a:	463b      	mov	r3, r7
 800277c:	2200      	movs	r2, #0
 800277e:	4619      	mov	r1, r3
 8002780:	4817      	ldr	r0, [pc, #92]	@ (80027e0 <MX_TIM5_Init+0x128>)
 8002782:	f007 fabb 	bl	8009cfc <HAL_TIM_PWM_ConfigChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800278c:	f7fe ff24 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002790:	463b      	mov	r3, r7
 8002792:	2204      	movs	r2, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4812      	ldr	r0, [pc, #72]	@ (80027e0 <MX_TIM5_Init+0x128>)
 8002798:	f007 fab0 	bl	8009cfc <HAL_TIM_PWM_ConfigChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 80027a2:	f7fe ff19 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027a6:	463b      	mov	r3, r7
 80027a8:	2208      	movs	r2, #8
 80027aa:	4619      	mov	r1, r3
 80027ac:	480c      	ldr	r0, [pc, #48]	@ (80027e0 <MX_TIM5_Init+0x128>)
 80027ae:	f007 faa5 	bl	8009cfc <HAL_TIM_PWM_ConfigChannel>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 80027b8:	f7fe ff0e 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027bc:	463b      	mov	r3, r7
 80027be:	220c      	movs	r2, #12
 80027c0:	4619      	mov	r1, r3
 80027c2:	4807      	ldr	r0, [pc, #28]	@ (80027e0 <MX_TIM5_Init+0x128>)
 80027c4:	f007 fa9a 	bl	8009cfc <HAL_TIM_PWM_ConfigChannel>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM5_Init+0x11a>
  {
    Error_Handler();
 80027ce:	f7fe ff03 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80027d2:	4803      	ldr	r0, [pc, #12]	@ (80027e0 <MX_TIM5_Init+0x128>)
 80027d4:	f000 f93e 	bl	8002a54 <HAL_TIM_MspPostInit>

}
 80027d8:	bf00      	nop
 80027da:	3738      	adds	r7, #56	@ 0x38
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	240008f4 	.word	0x240008f4
 80027e4:	40000c00 	.word	0x40000c00

080027e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f8:	d117      	bne.n	800282a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027fa:	4b8c      	ldr	r3, [pc, #560]	@ (8002a2c <HAL_TIM_Base_MspInit+0x244>)
 80027fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002800:	4a8a      	ldr	r2, [pc, #552]	@ (8002a2c <HAL_TIM_Base_MspInit+0x244>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800280a:	4b88      	ldr	r3, [pc, #544]	@ (8002a2c <HAL_TIM_Base_MspInit+0x244>)
 800280c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002818:	2200      	movs	r2, #0
 800281a:	2105      	movs	r1, #5
 800281c:	201c      	movs	r0, #28
 800281e:	f000 fb1c 	bl	8002e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002822:	201c      	movs	r0, #28
 8002824:	f000 fb33 	bl	8002e8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002828:	e0fc      	b.n	8002a24 <HAL_TIM_Base_MspInit+0x23c>
  else if(tim_baseHandle->Instance==TIM5)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a80      	ldr	r2, [pc, #512]	@ (8002a30 <HAL_TIM_Base_MspInit+0x248>)
 8002830:	4293      	cmp	r3, r2
 8002832:	f040 80f7 	bne.w	8002a24 <HAL_TIM_Base_MspInit+0x23c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002836:	4b7d      	ldr	r3, [pc, #500]	@ (8002a2c <HAL_TIM_Base_MspInit+0x244>)
 8002838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800283c:	4a7b      	ldr	r2, [pc, #492]	@ (8002a2c <HAL_TIM_Base_MspInit+0x244>)
 800283e:	f043 0308 	orr.w	r3, r3, #8
 8002842:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002846:	4b79      	ldr	r3, [pc, #484]	@ (8002a2c <HAL_TIM_Base_MspInit+0x244>)
 8002848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch1.Instance = DMA1_Stream0;
 8002854:	4b77      	ldr	r3, [pc, #476]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 8002856:	4a78      	ldr	r2, [pc, #480]	@ (8002a38 <HAL_TIM_Base_MspInit+0x250>)
 8002858:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Request = DMA_REQUEST_TIM5_CH1;
 800285a:	4b76      	ldr	r3, [pc, #472]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 800285c:	2237      	movs	r2, #55	@ 0x37
 800285e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002860:	4b74      	ldr	r3, [pc, #464]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 8002862:	2240      	movs	r2, #64	@ 0x40
 8002864:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002866:	4b73      	ldr	r3, [pc, #460]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 8002868:	2200      	movs	r2, #0
 800286a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800286c:	4b71      	ldr	r3, [pc, #452]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 800286e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002872:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002874:	4b6f      	ldr	r3, [pc, #444]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 8002876:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800287a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800287c:	4b6d      	ldr	r3, [pc, #436]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 800287e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002882:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 8002884:	4b6b      	ldr	r3, [pc, #428]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 8002886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800288a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800288c:	4b69      	ldr	r3, [pc, #420]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 800288e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002892:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002894:	4b67      	ldr	r3, [pc, #412]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 8002896:	2204      	movs	r2, #4
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800289a:	4b66      	ldr	r3, [pc, #408]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 800289c:	2203      	movs	r2, #3
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80028a0:	4b64      	ldr	r3, [pc, #400]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028a6:	4b63      	ldr	r3, [pc, #396]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 80028ac:	4861      	ldr	r0, [pc, #388]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 80028ae:	f000 fb09 	bl	8002ec4 <HAL_DMA_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_TIM_Base_MspInit+0xd4>
      Error_Handler();
 80028b8:	f7fe fe8e 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a5d      	ldr	r2, [pc, #372]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80028c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002a34 <HAL_TIM_Base_MspInit+0x24c>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream1;
 80028c8:	4b5c      	ldr	r3, [pc, #368]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 80028ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002a40 <HAL_TIM_Base_MspInit+0x258>)
 80028cc:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 80028ce:	4b5b      	ldr	r3, [pc, #364]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 80028d0:	2238      	movs	r2, #56	@ 0x38
 80028d2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028d4:	4b59      	ldr	r3, [pc, #356]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80028da:	4b58      	ldr	r3, [pc, #352]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80028e0:	4b56      	ldr	r3, [pc, #344]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 80028e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e6:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028e8:	4b54      	ldr	r3, [pc, #336]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 80028ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028ee:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028f0:	4b52      	ldr	r3, [pc, #328]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 80028f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028f6:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_CIRCULAR;
 80028f8:	4b50      	ldr	r3, [pc, #320]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 80028fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028fe:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002900:	4b4e      	ldr	r3, [pc, #312]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 8002902:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002906:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002908:	4b4c      	ldr	r3, [pc, #304]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 800290a:	2204      	movs	r2, #4
 800290c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800290e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 8002910:	2203      	movs	r2, #3
 8002912:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002914:	4b49      	ldr	r3, [pc, #292]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 8002916:	2200      	movs	r2, #0
 8002918:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800291a:	4b48      	ldr	r3, [pc, #288]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002920:	4846      	ldr	r0, [pc, #280]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 8002922:	f000 facf 	bl	8002ec4 <HAL_DMA_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_TIM_Base_MspInit+0x148>
      Error_Handler();
 800292c:	f7fe fe54 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a42      	ldr	r2, [pc, #264]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 8002934:	629a      	str	r2, [r3, #40]	@ 0x28
 8002936:	4a41      	ldr	r2, [pc, #260]	@ (8002a3c <HAL_TIM_Base_MspInit+0x254>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch3.Instance = DMA1_Stream2;
 800293c:	4b41      	ldr	r3, [pc, #260]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 800293e:	4a42      	ldr	r2, [pc, #264]	@ (8002a48 <HAL_TIM_Base_MspInit+0x260>)
 8002940:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch3.Init.Request = DMA_REQUEST_TIM5_CH3;
 8002942:	4b40      	ldr	r3, [pc, #256]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 8002944:	2239      	movs	r2, #57	@ 0x39
 8002946:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002948:	4b3e      	ldr	r3, [pc, #248]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 800294a:	2240      	movs	r2, #64	@ 0x40
 800294c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800294e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 8002950:	2200      	movs	r2, #0
 8002952:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002954:	4b3b      	ldr	r3, [pc, #236]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 8002956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800295a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800295c:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 800295e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002962:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002964:	4b37      	ldr	r3, [pc, #220]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 8002966:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800296a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch3.Init.Mode = DMA_CIRCULAR;
 800296c:	4b35      	ldr	r3, [pc, #212]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 800296e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002972:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002974:	4b33      	ldr	r3, [pc, #204]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 8002976:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800297a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800297c:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 800297e:	2204      	movs	r2, #4
 8002980:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002982:	4b30      	ldr	r3, [pc, #192]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 8002984:	2203      	movs	r2, #3
 8002986:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8002988:	4b2e      	ldr	r3, [pc, #184]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 800298a:	2200      	movs	r2, #0
 800298c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800298e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch3) != HAL_OK)
 8002994:	482b      	ldr	r0, [pc, #172]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 8002996:	f000 fa95 	bl	8002ec4 <HAL_DMA_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_TIM_Base_MspInit+0x1bc>
      Error_Handler();
 80029a0:	f7fe fe1a 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim5_ch3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a27      	ldr	r2, [pc, #156]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 80029a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029aa:	4a26      	ldr	r2, [pc, #152]	@ (8002a44 <HAL_TIM_Base_MspInit+0x25c>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 80029b0:	4b26      	ldr	r3, [pc, #152]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029b2:	4a27      	ldr	r2, [pc, #156]	@ (8002a50 <HAL_TIM_Base_MspInit+0x268>)
 80029b4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80029b6:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029b8:	223a      	movs	r2, #58	@ 0x3a
 80029ba:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029bc:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029be:	2240      	movs	r2, #64	@ 0x40
 80029c0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80029c2:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80029c8:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ce:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029d0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80029d6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029d8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80029de:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_CIRCULAR;
 80029e0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029e6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029e8:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80029ee:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029f0:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029f2:	2204      	movs	r2, #4
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029f8:	2203      	movs	r2, #3
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 80029fc:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002a02:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002a08:	4810      	ldr	r0, [pc, #64]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 8002a0a:	f000 fa5b 	bl	8002ec4 <HAL_DMA_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_TIM_Base_MspInit+0x230>
      Error_Handler();
 8002a14:	f7fe fde0 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 8002a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a4c <HAL_TIM_Base_MspInit+0x264>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	58024400 	.word	0x58024400
 8002a30:	40000c00 	.word	0x40000c00
 8002a34:	24000940 	.word	0x24000940
 8002a38:	40020010 	.word	0x40020010
 8002a3c:	240009b8 	.word	0x240009b8
 8002a40:	40020028 	.word	0x40020028
 8002a44:	24000a30 	.word	0x24000a30
 8002a48:	40020040 	.word	0x40020040
 8002a4c:	24000aa8 	.word	0x24000aa8
 8002a50:	40020058 	.word	0x40020058

08002a54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a12      	ldr	r2, [pc, #72]	@ (8002abc <HAL_TIM_MspPostInit+0x68>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d11e      	bne.n	8002ab4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a76:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <HAL_TIM_MspPostInit+0x6c>)
 8002a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a7c:	4a10      	ldr	r2, [pc, #64]	@ (8002ac0 <HAL_TIM_MspPostInit+0x6c>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <HAL_TIM_MspPostInit+0x6c>)
 8002a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002a94:	230f      	movs	r3, #15
 8002a96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	4619      	mov	r1, r3
 8002aae:	4805      	ldr	r0, [pc, #20]	@ (8002ac4 <HAL_TIM_MspPostInit+0x70>)
 8002ab0:	f003 f850 	bl	8005b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002ab4:	bf00      	nop
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40000c00 	.word	0x40000c00
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	58020000 	.word	0x58020000

08002ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ac8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002b04 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002acc:	f7ff fd8e 	bl	80025ec <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ad0:	f7ff fcec 	bl	80024ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ad4:	480c      	ldr	r0, [pc, #48]	@ (8002b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ad6:	490d      	ldr	r1, [pc, #52]	@ (8002b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002adc:	e002      	b.n	8002ae4 <LoopCopyDataInit>

08002ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ae2:	3304      	adds	r3, #4

08002ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ae8:	d3f9      	bcc.n	8002ade <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aea:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002aec:	4c0a      	ldr	r4, [pc, #40]	@ (8002b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af0:	e001      	b.n	8002af6 <LoopFillZerobss>

08002af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002af4:	3204      	adds	r2, #4

08002af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002af8:	d3fb      	bcc.n	8002af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002afa:	f008 fe9b 	bl	800b834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002afe:	f7fe f94f 	bl	8000da0 <main>
  bx  lr
 8002b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b0c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002b10:	0800ef30 	.word	0x0800ef30
  ldr r2, =_sbss
 8002b14:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002b18:	24000c70 	.word	0x24000c70

08002b1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b1c:	e7fe      	b.n	8002b1c <ADC3_IRQHandler>
	...

08002b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b26:	2003      	movs	r0, #3
 8002b28:	f000 f98c 	bl	8002e44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b2c:	f004 f826 	bl	8006b7c <HAL_RCC_GetSysClockFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b15      	ldr	r3, [pc, #84]	@ (8002b88 <HAL_Init+0x68>)
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	4913      	ldr	r1, [pc, #76]	@ (8002b8c <HAL_Init+0x6c>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
 8002b48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b88 <HAL_Init+0x68>)
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	4a0e      	ldr	r2, [pc, #56]	@ (8002b8c <HAL_Init+0x6c>)
 8002b54:	5cd3      	ldrb	r3, [r2, r3]
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	4a0b      	ldr	r2, [pc, #44]	@ (8002b90 <HAL_Init+0x70>)
 8002b62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b64:	4a0b      	ldr	r2, [pc, #44]	@ (8002b94 <HAL_Init+0x74>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b6a:	200f      	movs	r0, #15
 8002b6c:	f000 f814 	bl	8002b98 <HAL_InitTick>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e002      	b.n	8002b80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b7a:	f7ff fb0f 	bl	800219c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	58024400 	.word	0x58024400
 8002b8c:	0800e648 	.word	0x0800e648
 8002b90:	2400000c 	.word	0x2400000c
 8002b94:	24000008 	.word	0x24000008

08002b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002ba0:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <HAL_InitTick+0x60>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e021      	b.n	8002bf0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002bac:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <HAL_InitTick+0x64>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <HAL_InitTick+0x60>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f971 	bl	8002eaa <HAL_SYSTICK_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e00e      	b.n	8002bf0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b0f      	cmp	r3, #15
 8002bd6:	d80a      	bhi.n	8002bee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002be0:	f000 f93b 	bl	8002e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be4:	4a06      	ldr	r2, [pc, #24]	@ (8002c00 <HAL_InitTick+0x68>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e000      	b.n	8002bf0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	24000014 	.word	0x24000014
 8002bfc:	24000008 	.word	0x24000008
 8002c00:	24000010 	.word	0x24000010

08002c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c08:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_IncTick+0x20>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <HAL_IncTick+0x24>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	4a04      	ldr	r2, [pc, #16]	@ (8002c28 <HAL_IncTick+0x24>)
 8002c16:	6013      	str	r3, [r2, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	24000014 	.word	0x24000014
 8002c28:	24000b20 	.word	0x24000b20

08002c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c30:	4b03      	ldr	r3, [pc, #12]	@ (8002c40 <HAL_GetTick+0x14>)
 8002c32:	681b      	ldr	r3, [r3, #0]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	24000b20 	.word	0x24000b20

08002c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c4c:	f7ff ffee 	bl	8002c2c <HAL_GetTick>
 8002c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d005      	beq.n	8002c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_Delay+0x44>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4413      	add	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c6a:	bf00      	nop
 8002c6c:	f7ff ffde 	bl	8002c2c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d8f7      	bhi.n	8002c6c <HAL_Delay+0x28>
  {
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	24000014 	.word	0x24000014

08002c8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c90:	4b03      	ldr	r3, [pc, #12]	@ (8002ca0 <HAL_GetREVID+0x14>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	0c1b      	lsrs	r3, r3, #16
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	5c001000 	.word	0x5c001000

08002ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ccc:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd2:	4a04      	ldr	r2, [pc, #16]	@ (8002ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	60d3      	str	r3, [r2, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00
 8002ce8:	05fa0000 	.word	0x05fa0000

08002cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	f003 0307 	and.w	r3, r3, #7
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db0b      	blt.n	8002d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1a:	88fb      	ldrh	r3, [r7, #6]
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	4907      	ldr	r1, [pc, #28]	@ (8002d40 <__NVIC_EnableIRQ+0x38>)
 8002d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2001      	movs	r0, #1
 8002d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000e100 	.word	0xe000e100

08002d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	db0a      	blt.n	8002d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	490c      	ldr	r1, [pc, #48]	@ (8002d90 <__NVIC_SetPriority+0x4c>)
 8002d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d62:	0112      	lsls	r2, r2, #4
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	440b      	add	r3, r1
 8002d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d6c:	e00a      	b.n	8002d84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4908      	ldr	r1, [pc, #32]	@ (8002d94 <__NVIC_SetPriority+0x50>)
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	3b04      	subs	r3, #4
 8002d7c:	0112      	lsls	r2, r2, #4
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	440b      	add	r3, r1
 8002d82:	761a      	strb	r2, [r3, #24]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100
 8002d94:	e000ed00 	.word	0xe000ed00

08002d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b089      	sub	sp, #36	@ 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f1c3 0307 	rsb	r3, r3, #7
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	bf28      	it	cs
 8002db6:	2304      	movcs	r3, #4
 8002db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	2b06      	cmp	r3, #6
 8002dc0:	d902      	bls.n	8002dc8 <NVIC_EncodePriority+0x30>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3b03      	subs	r3, #3
 8002dc6:	e000      	b.n	8002dca <NVIC_EncodePriority+0x32>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43da      	mvns	r2, r3
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	401a      	ands	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de0:	f04f 31ff 	mov.w	r1, #4294967295
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	43d9      	mvns	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	4313      	orrs	r3, r2
         );
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3724      	adds	r7, #36	@ 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
	...

08002e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e10:	d301      	bcc.n	8002e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e12:	2301      	movs	r3, #1
 8002e14:	e00f      	b.n	8002e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e16:	4a0a      	ldr	r2, [pc, #40]	@ (8002e40 <SysTick_Config+0x40>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e1e:	210f      	movs	r1, #15
 8002e20:	f04f 30ff 	mov.w	r0, #4294967295
 8002e24:	f7ff ff8e 	bl	8002d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e28:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <SysTick_Config+0x40>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e2e:	4b04      	ldr	r3, [pc, #16]	@ (8002e40 <SysTick_Config+0x40>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff29 	bl	8002ca4 <__NVIC_SetPriorityGrouping>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e68:	f7ff ff40 	bl	8002cec <__NVIC_GetPriorityGrouping>
 8002e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	6978      	ldr	r0, [r7, #20]
 8002e74:	f7ff ff90 	bl	8002d98 <NVIC_EncodePriority>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff5f 	bl	8002d44 <__NVIC_SetPriority>
}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ff33 	bl	8002d08 <__NVIC_EnableIRQ>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff ffa4 	bl	8002e00 <SysTick_Config>
 8002eb8:	4603      	mov	r3, r0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff feae 	bl	8002c2c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e316      	b.n	800350a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a66      	ldr	r2, [pc, #408]	@ (800307c <HAL_DMA_Init+0x1b8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d04a      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a65      	ldr	r2, [pc, #404]	@ (8003080 <HAL_DMA_Init+0x1bc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d045      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a63      	ldr	r2, [pc, #396]	@ (8003084 <HAL_DMA_Init+0x1c0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d040      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a62      	ldr	r2, [pc, #392]	@ (8003088 <HAL_DMA_Init+0x1c4>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d03b      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a60      	ldr	r2, [pc, #384]	@ (800308c <HAL_DMA_Init+0x1c8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d036      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a5f      	ldr	r2, [pc, #380]	@ (8003090 <HAL_DMA_Init+0x1cc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d031      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a5d      	ldr	r2, [pc, #372]	@ (8003094 <HAL_DMA_Init+0x1d0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02c      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a5c      	ldr	r2, [pc, #368]	@ (8003098 <HAL_DMA_Init+0x1d4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d027      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a5a      	ldr	r2, [pc, #360]	@ (800309c <HAL_DMA_Init+0x1d8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d022      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a59      	ldr	r2, [pc, #356]	@ (80030a0 <HAL_DMA_Init+0x1dc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d01d      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a57      	ldr	r2, [pc, #348]	@ (80030a4 <HAL_DMA_Init+0x1e0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d018      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a56      	ldr	r2, [pc, #344]	@ (80030a8 <HAL_DMA_Init+0x1e4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a54      	ldr	r2, [pc, #336]	@ (80030ac <HAL_DMA_Init+0x1e8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00e      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a53      	ldr	r2, [pc, #332]	@ (80030b0 <HAL_DMA_Init+0x1ec>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a51      	ldr	r2, [pc, #324]	@ (80030b4 <HAL_DMA_Init+0x1f0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_DMA_Init+0xb8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a50      	ldr	r2, [pc, #320]	@ (80030b8 <HAL_DMA_Init+0x1f4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_DMA_Init+0xbc>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <HAL_DMA_Init+0xbe>
 8002f80:	2300      	movs	r3, #0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 813b 	beq.w	80031fe <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a37      	ldr	r2, [pc, #220]	@ (800307c <HAL_DMA_Init+0x1b8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d04a      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a36      	ldr	r2, [pc, #216]	@ (8003080 <HAL_DMA_Init+0x1bc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d045      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a34      	ldr	r2, [pc, #208]	@ (8003084 <HAL_DMA_Init+0x1c0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d040      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a33      	ldr	r2, [pc, #204]	@ (8003088 <HAL_DMA_Init+0x1c4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d03b      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a31      	ldr	r2, [pc, #196]	@ (800308c <HAL_DMA_Init+0x1c8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d036      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a30      	ldr	r2, [pc, #192]	@ (8003090 <HAL_DMA_Init+0x1cc>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d031      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8003094 <HAL_DMA_Init+0x1d0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02c      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2d      	ldr	r2, [pc, #180]	@ (8003098 <HAL_DMA_Init+0x1d4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d027      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2b      	ldr	r2, [pc, #172]	@ (800309c <HAL_DMA_Init+0x1d8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d022      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80030a0 <HAL_DMA_Init+0x1dc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d01d      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a28      	ldr	r2, [pc, #160]	@ (80030a4 <HAL_DMA_Init+0x1e0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d018      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a27      	ldr	r2, [pc, #156]	@ (80030a8 <HAL_DMA_Init+0x1e4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a25      	ldr	r2, [pc, #148]	@ (80030ac <HAL_DMA_Init+0x1e8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d00e      	beq.n	8003038 <HAL_DMA_Init+0x174>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a24      	ldr	r2, [pc, #144]	@ (80030b0 <HAL_DMA_Init+0x1ec>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d009      	beq.n	8003038 <HAL_DMA_Init+0x174>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a22      	ldr	r2, [pc, #136]	@ (80030b4 <HAL_DMA_Init+0x1f0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_DMA_Init+0x174>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a21      	ldr	r2, [pc, #132]	@ (80030b8 <HAL_DMA_Init+0x1f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d108      	bne.n	800304a <HAL_DMA_Init+0x186>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e007      	b.n	800305a <HAL_DMA_Init+0x196>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800305a:	e02f      	b.n	80030bc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800305c:	f7ff fde6 	bl	8002c2c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b05      	cmp	r3, #5
 8003068:	d928      	bls.n	80030bc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2203      	movs	r2, #3
 8003074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e246      	b.n	800350a <HAL_DMA_Init+0x646>
 800307c:	40020010 	.word	0x40020010
 8003080:	40020028 	.word	0x40020028
 8003084:	40020040 	.word	0x40020040
 8003088:	40020058 	.word	0x40020058
 800308c:	40020070 	.word	0x40020070
 8003090:	40020088 	.word	0x40020088
 8003094:	400200a0 	.word	0x400200a0
 8003098:	400200b8 	.word	0x400200b8
 800309c:	40020410 	.word	0x40020410
 80030a0:	40020428 	.word	0x40020428
 80030a4:	40020440 	.word	0x40020440
 80030a8:	40020458 	.word	0x40020458
 80030ac:	40020470 	.word	0x40020470
 80030b0:	40020488 	.word	0x40020488
 80030b4:	400204a0 	.word	0x400204a0
 80030b8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1c8      	bne.n	800305c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	4b83      	ldr	r3, [pc, #524]	@ (80032e4 <HAL_DMA_Init+0x420>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80030e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310c:	2b04      	cmp	r3, #4
 800310e:	d107      	bne.n	8003120 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	4313      	orrs	r3, r2
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003120:	4b71      	ldr	r3, [pc, #452]	@ (80032e8 <HAL_DMA_Init+0x424>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4b71      	ldr	r3, [pc, #452]	@ (80032ec <HAL_DMA_Init+0x428>)
 8003126:	4013      	ands	r3, r2
 8003128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800312c:	d328      	bcc.n	8003180 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b28      	cmp	r3, #40	@ 0x28
 8003134:	d903      	bls.n	800313e <HAL_DMA_Init+0x27a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b2e      	cmp	r3, #46	@ 0x2e
 800313c:	d917      	bls.n	800316e <HAL_DMA_Init+0x2aa>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b3e      	cmp	r3, #62	@ 0x3e
 8003144:	d903      	bls.n	800314e <HAL_DMA_Init+0x28a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b42      	cmp	r3, #66	@ 0x42
 800314c:	d90f      	bls.n	800316e <HAL_DMA_Init+0x2aa>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b46      	cmp	r3, #70	@ 0x46
 8003154:	d903      	bls.n	800315e <HAL_DMA_Init+0x29a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b48      	cmp	r3, #72	@ 0x48
 800315c:	d907      	bls.n	800316e <HAL_DMA_Init+0x2aa>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b4e      	cmp	r3, #78	@ 0x4e
 8003164:	d905      	bls.n	8003172 <HAL_DMA_Init+0x2ae>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b52      	cmp	r3, #82	@ 0x52
 800316c:	d801      	bhi.n	8003172 <HAL_DMA_Init+0x2ae>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_DMA_Init+0x2b0>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800317e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0307 	bic.w	r3, r3, #7
 8003196:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d117      	bne.n	80031da <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f002 fb3f 	bl	8005840 <DMA_CheckFifoParam>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2240      	movs	r2, #64	@ 0x40
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e197      	b.n	800350a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f002 fa7a 	bl	80056dc <DMA_CalcBaseAndBitshift>
 80031e8:	4603      	mov	r3, r0
 80031ea:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	223f      	movs	r2, #63	@ 0x3f
 80031f6:	409a      	lsls	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e0cd      	b.n	800339a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a3b      	ldr	r2, [pc, #236]	@ (80032f0 <HAL_DMA_Init+0x42c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_Init+0x38a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a39      	ldr	r2, [pc, #228]	@ (80032f4 <HAL_DMA_Init+0x430>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_Init+0x38a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a38      	ldr	r2, [pc, #224]	@ (80032f8 <HAL_DMA_Init+0x434>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_Init+0x38a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a36      	ldr	r2, [pc, #216]	@ (80032fc <HAL_DMA_Init+0x438>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_Init+0x38a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a35      	ldr	r2, [pc, #212]	@ (8003300 <HAL_DMA_Init+0x43c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_Init+0x38a>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a33      	ldr	r2, [pc, #204]	@ (8003304 <HAL_DMA_Init+0x440>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_Init+0x38a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a32      	ldr	r2, [pc, #200]	@ (8003308 <HAL_DMA_Init+0x444>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_Init+0x38a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a30      	ldr	r2, [pc, #192]	@ (800330c <HAL_DMA_Init+0x448>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_DMA_Init+0x38e>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_DMA_Init+0x390>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8097 	beq.w	8003388 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a24      	ldr	r2, [pc, #144]	@ (80032f0 <HAL_DMA_Init+0x42c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d021      	beq.n	80032a8 <HAL_DMA_Init+0x3e4>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a22      	ldr	r2, [pc, #136]	@ (80032f4 <HAL_DMA_Init+0x430>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01c      	beq.n	80032a8 <HAL_DMA_Init+0x3e4>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a21      	ldr	r2, [pc, #132]	@ (80032f8 <HAL_DMA_Init+0x434>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d017      	beq.n	80032a8 <HAL_DMA_Init+0x3e4>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1f      	ldr	r2, [pc, #124]	@ (80032fc <HAL_DMA_Init+0x438>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d012      	beq.n	80032a8 <HAL_DMA_Init+0x3e4>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1e      	ldr	r2, [pc, #120]	@ (8003300 <HAL_DMA_Init+0x43c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d00d      	beq.n	80032a8 <HAL_DMA_Init+0x3e4>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <HAL_DMA_Init+0x440>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d008      	beq.n	80032a8 <HAL_DMA_Init+0x3e4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1b      	ldr	r2, [pc, #108]	@ (8003308 <HAL_DMA_Init+0x444>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <HAL_DMA_Init+0x3e4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a19      	ldr	r2, [pc, #100]	@ (800330c <HAL_DMA_Init+0x448>)
 80032a6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4b13      	ldr	r3, [pc, #76]	@ (8003310 <HAL_DMA_Init+0x44c>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b40      	cmp	r3, #64	@ 0x40
 80032ce:	d021      	beq.n	8003314 <HAL_DMA_Init+0x450>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b80      	cmp	r3, #128	@ 0x80
 80032d6:	d102      	bne.n	80032de <HAL_DMA_Init+0x41a>
 80032d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032dc:	e01b      	b.n	8003316 <HAL_DMA_Init+0x452>
 80032de:	2300      	movs	r3, #0
 80032e0:	e019      	b.n	8003316 <HAL_DMA_Init+0x452>
 80032e2:	bf00      	nop
 80032e4:	fe10803f 	.word	0xfe10803f
 80032e8:	5c001000 	.word	0x5c001000
 80032ec:	ffff0000 	.word	0xffff0000
 80032f0:	58025408 	.word	0x58025408
 80032f4:	5802541c 	.word	0x5802541c
 80032f8:	58025430 	.word	0x58025430
 80032fc:	58025444 	.word	0x58025444
 8003300:	58025458 	.word	0x58025458
 8003304:	5802546c 	.word	0x5802546c
 8003308:	58025480 	.word	0x58025480
 800330c:	58025494 	.word	0x58025494
 8003310:	fffe000f 	.word	0xfffe000f
 8003314:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68d2      	ldr	r2, [r2, #12]
 800331a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800331c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003324:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800332c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003334:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800333c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003344:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b6e      	ldr	r3, [pc, #440]	@ (8003514 <HAL_DMA_Init+0x650>)
 800335c:	4413      	add	r3, r2
 800335e:	4a6e      	ldr	r2, [pc, #440]	@ (8003518 <HAL_DMA_Init+0x654>)
 8003360:	fba2 2303 	umull	r2, r3, r2, r3
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	009a      	lsls	r2, r3, #2
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f002 f9b5 	bl	80056dc <DMA_CalcBaseAndBitshift>
 8003372:	4603      	mov	r3, r0
 8003374:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2201      	movs	r2, #1
 8003380:	409a      	lsls	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	e008      	b.n	800339a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2240      	movs	r2, #64	@ 0x40
 800338c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2203      	movs	r2, #3
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0b7      	b.n	800350a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a5f      	ldr	r2, [pc, #380]	@ (800351c <HAL_DMA_Init+0x658>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d072      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003520 <HAL_DMA_Init+0x65c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d06d      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003524 <HAL_DMA_Init+0x660>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d068      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003528 <HAL_DMA_Init+0x664>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d063      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a59      	ldr	r2, [pc, #356]	@ (800352c <HAL_DMA_Init+0x668>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d05e      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a57      	ldr	r2, [pc, #348]	@ (8003530 <HAL_DMA_Init+0x66c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d059      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a56      	ldr	r2, [pc, #344]	@ (8003534 <HAL_DMA_Init+0x670>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d054      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a54      	ldr	r2, [pc, #336]	@ (8003538 <HAL_DMA_Init+0x674>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d04f      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a53      	ldr	r2, [pc, #332]	@ (800353c <HAL_DMA_Init+0x678>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d04a      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a51      	ldr	r2, [pc, #324]	@ (8003540 <HAL_DMA_Init+0x67c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d045      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a50      	ldr	r2, [pc, #320]	@ (8003544 <HAL_DMA_Init+0x680>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d040      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a4e      	ldr	r2, [pc, #312]	@ (8003548 <HAL_DMA_Init+0x684>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d03b      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a4d      	ldr	r2, [pc, #308]	@ (800354c <HAL_DMA_Init+0x688>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d036      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a4b      	ldr	r2, [pc, #300]	@ (8003550 <HAL_DMA_Init+0x68c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d031      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a4a      	ldr	r2, [pc, #296]	@ (8003554 <HAL_DMA_Init+0x690>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d02c      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a48      	ldr	r2, [pc, #288]	@ (8003558 <HAL_DMA_Init+0x694>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d027      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a47      	ldr	r2, [pc, #284]	@ (800355c <HAL_DMA_Init+0x698>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d022      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a45      	ldr	r2, [pc, #276]	@ (8003560 <HAL_DMA_Init+0x69c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d01d      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a44      	ldr	r2, [pc, #272]	@ (8003564 <HAL_DMA_Init+0x6a0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a42      	ldr	r2, [pc, #264]	@ (8003568 <HAL_DMA_Init+0x6a4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d013      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a41      	ldr	r2, [pc, #260]	@ (800356c <HAL_DMA_Init+0x6a8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00e      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3f      	ldr	r2, [pc, #252]	@ (8003570 <HAL_DMA_Init+0x6ac>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d009      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a3e      	ldr	r2, [pc, #248]	@ (8003574 <HAL_DMA_Init+0x6b0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_DMA_Init+0x5c6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a3c      	ldr	r2, [pc, #240]	@ (8003578 <HAL_DMA_Init+0x6b4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_DMA_Init+0x5ca>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <HAL_DMA_Init+0x5cc>
 800348e:	2300      	movs	r3, #0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d032      	beq.n	80034fa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f002 fa4f 	bl	8005938 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b80      	cmp	r3, #128	@ 0x80
 80034a0:	d102      	bne.n	80034a8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034bc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_DMA_Init+0x624>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d80c      	bhi.n	80034e8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f002 facc 	bl	8005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	e008      	b.n	80034fa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	a7fdabf8 	.word	0xa7fdabf8
 8003518:	cccccccd 	.word	0xcccccccd
 800351c:	40020010 	.word	0x40020010
 8003520:	40020028 	.word	0x40020028
 8003524:	40020040 	.word	0x40020040
 8003528:	40020058 	.word	0x40020058
 800352c:	40020070 	.word	0x40020070
 8003530:	40020088 	.word	0x40020088
 8003534:	400200a0 	.word	0x400200a0
 8003538:	400200b8 	.word	0x400200b8
 800353c:	40020410 	.word	0x40020410
 8003540:	40020428 	.word	0x40020428
 8003544:	40020440 	.word	0x40020440
 8003548:	40020458 	.word	0x40020458
 800354c:	40020470 	.word	0x40020470
 8003550:	40020488 	.word	0x40020488
 8003554:	400204a0 	.word	0x400204a0
 8003558:	400204b8 	.word	0x400204b8
 800355c:	58025408 	.word	0x58025408
 8003560:	5802541c 	.word	0x5802541c
 8003564:	58025430 	.word	0x58025430
 8003568:	58025444 	.word	0x58025444
 800356c:	58025458 	.word	0x58025458
 8003570:	5802546c 	.word	0x5802546c
 8003574:	58025480 	.word	0x58025480
 8003578:	58025494 	.word	0x58025494

0800357c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e226      	b.n	80039e6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_DMA_Start_IT+0x2a>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e21f      	b.n	80039e6 <HAL_DMA_Start_IT+0x46a>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	f040 820a 	bne.w	80039d0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a68      	ldr	r2, [pc, #416]	@ (8003770 <HAL_DMA_Start_IT+0x1f4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04a      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a66      	ldr	r2, [pc, #408]	@ (8003774 <HAL_DMA_Start_IT+0x1f8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d045      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a65      	ldr	r2, [pc, #404]	@ (8003778 <HAL_DMA_Start_IT+0x1fc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a63      	ldr	r2, [pc, #396]	@ (800377c <HAL_DMA_Start_IT+0x200>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d03b      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a62      	ldr	r2, [pc, #392]	@ (8003780 <HAL_DMA_Start_IT+0x204>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d036      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a60      	ldr	r2, [pc, #384]	@ (8003784 <HAL_DMA_Start_IT+0x208>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a5f      	ldr	r2, [pc, #380]	@ (8003788 <HAL_DMA_Start_IT+0x20c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02c      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a5d      	ldr	r2, [pc, #372]	@ (800378c <HAL_DMA_Start_IT+0x210>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d027      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a5c      	ldr	r2, [pc, #368]	@ (8003790 <HAL_DMA_Start_IT+0x214>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a5a      	ldr	r2, [pc, #360]	@ (8003794 <HAL_DMA_Start_IT+0x218>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01d      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a59      	ldr	r2, [pc, #356]	@ (8003798 <HAL_DMA_Start_IT+0x21c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a57      	ldr	r2, [pc, #348]	@ (800379c <HAL_DMA_Start_IT+0x220>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a56      	ldr	r2, [pc, #344]	@ (80037a0 <HAL_DMA_Start_IT+0x224>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a54      	ldr	r2, [pc, #336]	@ (80037a4 <HAL_DMA_Start_IT+0x228>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a53      	ldr	r2, [pc, #332]	@ (80037a8 <HAL_DMA_Start_IT+0x22c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_DMA_Start_IT+0xee>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a51      	ldr	r2, [pc, #324]	@ (80037ac <HAL_DMA_Start_IT+0x230>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d108      	bne.n	800367c <HAL_DMA_Start_IT+0x100>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e007      	b.n	800368c <HAL_DMA_Start_IT+0x110>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f001 fe76 	bl	8005384 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a34      	ldr	r2, [pc, #208]	@ (8003770 <HAL_DMA_Start_IT+0x1f4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d04a      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a33      	ldr	r2, [pc, #204]	@ (8003774 <HAL_DMA_Start_IT+0x1f8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d045      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a31      	ldr	r2, [pc, #196]	@ (8003778 <HAL_DMA_Start_IT+0x1fc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d040      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a30      	ldr	r2, [pc, #192]	@ (800377c <HAL_DMA_Start_IT+0x200>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d03b      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003780 <HAL_DMA_Start_IT+0x204>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d036      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003784 <HAL_DMA_Start_IT+0x208>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d031      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003788 <HAL_DMA_Start_IT+0x20c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02c      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a2a      	ldr	r2, [pc, #168]	@ (800378c <HAL_DMA_Start_IT+0x210>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d027      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a28      	ldr	r2, [pc, #160]	@ (8003790 <HAL_DMA_Start_IT+0x214>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d022      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a27      	ldr	r2, [pc, #156]	@ (8003794 <HAL_DMA_Start_IT+0x218>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d01d      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a25      	ldr	r2, [pc, #148]	@ (8003798 <HAL_DMA_Start_IT+0x21c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d018      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a24      	ldr	r2, [pc, #144]	@ (800379c <HAL_DMA_Start_IT+0x220>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d013      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a22      	ldr	r2, [pc, #136]	@ (80037a0 <HAL_DMA_Start_IT+0x224>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00e      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a21      	ldr	r2, [pc, #132]	@ (80037a4 <HAL_DMA_Start_IT+0x228>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d009      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1f      	ldr	r2, [pc, #124]	@ (80037a8 <HAL_DMA_Start_IT+0x22c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d004      	beq.n	8003738 <HAL_DMA_Start_IT+0x1bc>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1e      	ldr	r2, [pc, #120]	@ (80037ac <HAL_DMA_Start_IT+0x230>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d101      	bne.n	800373c <HAL_DMA_Start_IT+0x1c0>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_DMA_Start_IT+0x1c2>
 800373c:	2300      	movs	r3, #0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d036      	beq.n	80037b0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f023 021e 	bic.w	r2, r3, #30
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0216 	orr.w	r2, r2, #22
 8003754:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d03e      	beq.n	80037dc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0208 	orr.w	r2, r2, #8
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	e035      	b.n	80037dc <HAL_DMA_Start_IT+0x260>
 8003770:	40020010 	.word	0x40020010
 8003774:	40020028 	.word	0x40020028
 8003778:	40020040 	.word	0x40020040
 800377c:	40020058 	.word	0x40020058
 8003780:	40020070 	.word	0x40020070
 8003784:	40020088 	.word	0x40020088
 8003788:	400200a0 	.word	0x400200a0
 800378c:	400200b8 	.word	0x400200b8
 8003790:	40020410 	.word	0x40020410
 8003794:	40020428 	.word	0x40020428
 8003798:	40020440 	.word	0x40020440
 800379c:	40020458 	.word	0x40020458
 80037a0:	40020470 	.word	0x40020470
 80037a4:	40020488 	.word	0x40020488
 80037a8:	400204a0 	.word	0x400204a0
 80037ac:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 020e 	bic.w	r2, r3, #14
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 020a 	orr.w	r2, r2, #10
 80037c2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0204 	orr.w	r2, r2, #4
 80037da:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a83      	ldr	r2, [pc, #524]	@ (80039f0 <HAL_DMA_Start_IT+0x474>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d072      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a82      	ldr	r2, [pc, #520]	@ (80039f4 <HAL_DMA_Start_IT+0x478>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d06d      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a80      	ldr	r2, [pc, #512]	@ (80039f8 <HAL_DMA_Start_IT+0x47c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d068      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a7f      	ldr	r2, [pc, #508]	@ (80039fc <HAL_DMA_Start_IT+0x480>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d063      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7d      	ldr	r2, [pc, #500]	@ (8003a00 <HAL_DMA_Start_IT+0x484>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d05e      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a7c      	ldr	r2, [pc, #496]	@ (8003a04 <HAL_DMA_Start_IT+0x488>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d059      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a08 <HAL_DMA_Start_IT+0x48c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d054      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a79      	ldr	r2, [pc, #484]	@ (8003a0c <HAL_DMA_Start_IT+0x490>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d04f      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a77      	ldr	r2, [pc, #476]	@ (8003a10 <HAL_DMA_Start_IT+0x494>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d04a      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a76      	ldr	r2, [pc, #472]	@ (8003a14 <HAL_DMA_Start_IT+0x498>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d045      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a74      	ldr	r2, [pc, #464]	@ (8003a18 <HAL_DMA_Start_IT+0x49c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d040      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a73      	ldr	r2, [pc, #460]	@ (8003a1c <HAL_DMA_Start_IT+0x4a0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d03b      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a71      	ldr	r2, [pc, #452]	@ (8003a20 <HAL_DMA_Start_IT+0x4a4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d036      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a70      	ldr	r2, [pc, #448]	@ (8003a24 <HAL_DMA_Start_IT+0x4a8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d031      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a6e      	ldr	r2, [pc, #440]	@ (8003a28 <HAL_DMA_Start_IT+0x4ac>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d02c      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6d      	ldr	r2, [pc, #436]	@ (8003a2c <HAL_DMA_Start_IT+0x4b0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d027      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6b      	ldr	r2, [pc, #428]	@ (8003a30 <HAL_DMA_Start_IT+0x4b4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d022      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6a      	ldr	r2, [pc, #424]	@ (8003a34 <HAL_DMA_Start_IT+0x4b8>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d01d      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a68      	ldr	r2, [pc, #416]	@ (8003a38 <HAL_DMA_Start_IT+0x4bc>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d018      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a67      	ldr	r2, [pc, #412]	@ (8003a3c <HAL_DMA_Start_IT+0x4c0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d013      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a65      	ldr	r2, [pc, #404]	@ (8003a40 <HAL_DMA_Start_IT+0x4c4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00e      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a64      	ldr	r2, [pc, #400]	@ (8003a44 <HAL_DMA_Start_IT+0x4c8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a62      	ldr	r2, [pc, #392]	@ (8003a48 <HAL_DMA_Start_IT+0x4cc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_DMA_Start_IT+0x350>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a61      	ldr	r2, [pc, #388]	@ (8003a4c <HAL_DMA_Start_IT+0x4d0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d101      	bne.n	80038d0 <HAL_DMA_Start_IT+0x354>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_DMA_Start_IT+0x356>
 80038d0:	2300      	movs	r3, #0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d01a      	beq.n	800390c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038f2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003906:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800390a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a37      	ldr	r2, [pc, #220]	@ (80039f0 <HAL_DMA_Start_IT+0x474>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d04a      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a36      	ldr	r2, [pc, #216]	@ (80039f4 <HAL_DMA_Start_IT+0x478>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d045      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a34      	ldr	r2, [pc, #208]	@ (80039f8 <HAL_DMA_Start_IT+0x47c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d040      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a33      	ldr	r2, [pc, #204]	@ (80039fc <HAL_DMA_Start_IT+0x480>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d03b      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a31      	ldr	r2, [pc, #196]	@ (8003a00 <HAL_DMA_Start_IT+0x484>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d036      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a30      	ldr	r2, [pc, #192]	@ (8003a04 <HAL_DMA_Start_IT+0x488>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d031      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a08 <HAL_DMA_Start_IT+0x48c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02c      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2d      	ldr	r2, [pc, #180]	@ (8003a0c <HAL_DMA_Start_IT+0x490>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d027      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a2b      	ldr	r2, [pc, #172]	@ (8003a10 <HAL_DMA_Start_IT+0x494>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a14 <HAL_DMA_Start_IT+0x498>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01d      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a28      	ldr	r2, [pc, #160]	@ (8003a18 <HAL_DMA_Start_IT+0x49c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a27      	ldr	r2, [pc, #156]	@ (8003a1c <HAL_DMA_Start_IT+0x4a0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a25      	ldr	r2, [pc, #148]	@ (8003a20 <HAL_DMA_Start_IT+0x4a4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a24      	ldr	r2, [pc, #144]	@ (8003a24 <HAL_DMA_Start_IT+0x4a8>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a22      	ldr	r2, [pc, #136]	@ (8003a28 <HAL_DMA_Start_IT+0x4ac>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_DMA_Start_IT+0x430>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a21      	ldr	r2, [pc, #132]	@ (8003a2c <HAL_DMA_Start_IT+0x4b0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d108      	bne.n	80039be <HAL_DMA_Start_IT+0x442>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	e012      	b.n	80039e4 <HAL_DMA_Start_IT+0x468>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0201 	orr.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e009      	b.n	80039e4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80039d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40020010 	.word	0x40020010
 80039f4:	40020028 	.word	0x40020028
 80039f8:	40020040 	.word	0x40020040
 80039fc:	40020058 	.word	0x40020058
 8003a00:	40020070 	.word	0x40020070
 8003a04:	40020088 	.word	0x40020088
 8003a08:	400200a0 	.word	0x400200a0
 8003a0c:	400200b8 	.word	0x400200b8
 8003a10:	40020410 	.word	0x40020410
 8003a14:	40020428 	.word	0x40020428
 8003a18:	40020440 	.word	0x40020440
 8003a1c:	40020458 	.word	0x40020458
 8003a20:	40020470 	.word	0x40020470
 8003a24:	40020488 	.word	0x40020488
 8003a28:	400204a0 	.word	0x400204a0
 8003a2c:	400204b8 	.word	0x400204b8
 8003a30:	58025408 	.word	0x58025408
 8003a34:	5802541c 	.word	0x5802541c
 8003a38:	58025430 	.word	0x58025430
 8003a3c:	58025444 	.word	0x58025444
 8003a40:	58025458 	.word	0x58025458
 8003a44:	5802546c 	.word	0x5802546c
 8003a48:	58025480 	.word	0x58025480
 8003a4c:	58025494 	.word	0x58025494

08003a50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff f8e8 	bl	8002c2c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e2dc      	b.n	8004022 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d008      	beq.n	8003a86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2280      	movs	r2, #128	@ 0x80
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e2cd      	b.n	8004022 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a76      	ldr	r2, [pc, #472]	@ (8003c64 <HAL_DMA_Abort+0x214>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d04a      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a74      	ldr	r2, [pc, #464]	@ (8003c68 <HAL_DMA_Abort+0x218>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d045      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a73      	ldr	r2, [pc, #460]	@ (8003c6c <HAL_DMA_Abort+0x21c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d040      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a71      	ldr	r2, [pc, #452]	@ (8003c70 <HAL_DMA_Abort+0x220>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d03b      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a70      	ldr	r2, [pc, #448]	@ (8003c74 <HAL_DMA_Abort+0x224>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d036      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a6e      	ldr	r2, [pc, #440]	@ (8003c78 <HAL_DMA_Abort+0x228>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d031      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6d      	ldr	r2, [pc, #436]	@ (8003c7c <HAL_DMA_Abort+0x22c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d02c      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a6b      	ldr	r2, [pc, #428]	@ (8003c80 <HAL_DMA_Abort+0x230>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d027      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a6a      	ldr	r2, [pc, #424]	@ (8003c84 <HAL_DMA_Abort+0x234>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d022      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a68      	ldr	r2, [pc, #416]	@ (8003c88 <HAL_DMA_Abort+0x238>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01d      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a67      	ldr	r2, [pc, #412]	@ (8003c8c <HAL_DMA_Abort+0x23c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d018      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a65      	ldr	r2, [pc, #404]	@ (8003c90 <HAL_DMA_Abort+0x240>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a64      	ldr	r2, [pc, #400]	@ (8003c94 <HAL_DMA_Abort+0x244>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00e      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a62      	ldr	r2, [pc, #392]	@ (8003c98 <HAL_DMA_Abort+0x248>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a61      	ldr	r2, [pc, #388]	@ (8003c9c <HAL_DMA_Abort+0x24c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d004      	beq.n	8003b26 <HAL_DMA_Abort+0xd6>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5f      	ldr	r2, [pc, #380]	@ (8003ca0 <HAL_DMA_Abort+0x250>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <HAL_DMA_Abort+0xda>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_DMA_Abort+0xdc>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 021e 	bic.w	r2, r2, #30
 8003b3e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695a      	ldr	r2, [r3, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b4e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e00a      	b.n	8003b6e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 020e 	bic.w	r2, r2, #14
 8003b66:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a3c      	ldr	r2, [pc, #240]	@ (8003c64 <HAL_DMA_Abort+0x214>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d072      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c68 <HAL_DMA_Abort+0x218>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d06d      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a39      	ldr	r2, [pc, #228]	@ (8003c6c <HAL_DMA_Abort+0x21c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d068      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a37      	ldr	r2, [pc, #220]	@ (8003c70 <HAL_DMA_Abort+0x220>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d063      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a36      	ldr	r2, [pc, #216]	@ (8003c74 <HAL_DMA_Abort+0x224>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d05e      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a34      	ldr	r2, [pc, #208]	@ (8003c78 <HAL_DMA_Abort+0x228>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d059      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a33      	ldr	r2, [pc, #204]	@ (8003c7c <HAL_DMA_Abort+0x22c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d054      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a31      	ldr	r2, [pc, #196]	@ (8003c80 <HAL_DMA_Abort+0x230>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d04f      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a30      	ldr	r2, [pc, #192]	@ (8003c84 <HAL_DMA_Abort+0x234>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d04a      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8003c88 <HAL_DMA_Abort+0x238>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d045      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c8c <HAL_DMA_Abort+0x23c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d040      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c90 <HAL_DMA_Abort+0x240>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d03b      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2a      	ldr	r2, [pc, #168]	@ (8003c94 <HAL_DMA_Abort+0x244>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d036      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a28      	ldr	r2, [pc, #160]	@ (8003c98 <HAL_DMA_Abort+0x248>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d031      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a27      	ldr	r2, [pc, #156]	@ (8003c9c <HAL_DMA_Abort+0x24c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d02c      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a25      	ldr	r2, [pc, #148]	@ (8003ca0 <HAL_DMA_Abort+0x250>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d027      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a24      	ldr	r2, [pc, #144]	@ (8003ca4 <HAL_DMA_Abort+0x254>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d022      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a22      	ldr	r2, [pc, #136]	@ (8003ca8 <HAL_DMA_Abort+0x258>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01d      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a21      	ldr	r2, [pc, #132]	@ (8003cac <HAL_DMA_Abort+0x25c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d018      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb0 <HAL_DMA_Abort+0x260>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <HAL_DMA_Abort+0x264>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00e      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb8 <HAL_DMA_Abort+0x268>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d009      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <HAL_DMA_Abort+0x26c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d004      	beq.n	8003c5e <HAL_DMA_Abort+0x20e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a19      	ldr	r2, [pc, #100]	@ (8003cc0 <HAL_DMA_Abort+0x270>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d132      	bne.n	8003cc4 <HAL_DMA_Abort+0x274>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e031      	b.n	8003cc6 <HAL_DMA_Abort+0x276>
 8003c62:	bf00      	nop
 8003c64:	40020010 	.word	0x40020010
 8003c68:	40020028 	.word	0x40020028
 8003c6c:	40020040 	.word	0x40020040
 8003c70:	40020058 	.word	0x40020058
 8003c74:	40020070 	.word	0x40020070
 8003c78:	40020088 	.word	0x40020088
 8003c7c:	400200a0 	.word	0x400200a0
 8003c80:	400200b8 	.word	0x400200b8
 8003c84:	40020410 	.word	0x40020410
 8003c88:	40020428 	.word	0x40020428
 8003c8c:	40020440 	.word	0x40020440
 8003c90:	40020458 	.word	0x40020458
 8003c94:	40020470 	.word	0x40020470
 8003c98:	40020488 	.word	0x40020488
 8003c9c:	400204a0 	.word	0x400204a0
 8003ca0:	400204b8 	.word	0x400204b8
 8003ca4:	58025408 	.word	0x58025408
 8003ca8:	5802541c 	.word	0x5802541c
 8003cac:	58025430 	.word	0x58025430
 8003cb0:	58025444 	.word	0x58025444
 8003cb4:	58025458 	.word	0x58025458
 8003cb8:	5802546c 	.word	0x5802546c
 8003cbc:	58025480 	.word	0x58025480
 8003cc0:	58025494 	.word	0x58025494
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003cd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a6d      	ldr	r2, [pc, #436]	@ (8003e94 <HAL_DMA_Abort+0x444>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d04a      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6b      	ldr	r2, [pc, #428]	@ (8003e98 <HAL_DMA_Abort+0x448>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d045      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6a      	ldr	r2, [pc, #424]	@ (8003e9c <HAL_DMA_Abort+0x44c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d040      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a68      	ldr	r2, [pc, #416]	@ (8003ea0 <HAL_DMA_Abort+0x450>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d03b      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a67      	ldr	r2, [pc, #412]	@ (8003ea4 <HAL_DMA_Abort+0x454>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d036      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a65      	ldr	r2, [pc, #404]	@ (8003ea8 <HAL_DMA_Abort+0x458>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d031      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a64      	ldr	r2, [pc, #400]	@ (8003eac <HAL_DMA_Abort+0x45c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d02c      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a62      	ldr	r2, [pc, #392]	@ (8003eb0 <HAL_DMA_Abort+0x460>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d027      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a61      	ldr	r2, [pc, #388]	@ (8003eb4 <HAL_DMA_Abort+0x464>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5f      	ldr	r2, [pc, #380]	@ (8003eb8 <HAL_DMA_Abort+0x468>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01d      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5e      	ldr	r2, [pc, #376]	@ (8003ebc <HAL_DMA_Abort+0x46c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d018      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a5c      	ldr	r2, [pc, #368]	@ (8003ec0 <HAL_DMA_Abort+0x470>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5b      	ldr	r2, [pc, #364]	@ (8003ec4 <HAL_DMA_Abort+0x474>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00e      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a59      	ldr	r2, [pc, #356]	@ (8003ec8 <HAL_DMA_Abort+0x478>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a58      	ldr	r2, [pc, #352]	@ (8003ecc <HAL_DMA_Abort+0x47c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_DMA_Abort+0x32a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a56      	ldr	r2, [pc, #344]	@ (8003ed0 <HAL_DMA_Abort+0x480>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d108      	bne.n	8003d8c <HAL_DMA_Abort+0x33c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e007      	b.n	8003d9c <HAL_DMA_Abort+0x34c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d9c:	e013      	b.n	8003dc6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d9e:	f7fe ff45 	bl	8002c2c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d90c      	bls.n	8003dc6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2203      	movs	r2, #3
 8003db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e12d      	b.n	8004022 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e5      	bne.n	8003d9e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	@ (8003e94 <HAL_DMA_Abort+0x444>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d04a      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e98 <HAL_DMA_Abort+0x448>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d045      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2c      	ldr	r2, [pc, #176]	@ (8003e9c <HAL_DMA_Abort+0x44c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d040      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <HAL_DMA_Abort+0x450>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d03b      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a29      	ldr	r2, [pc, #164]	@ (8003ea4 <HAL_DMA_Abort+0x454>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d036      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <HAL_DMA_Abort+0x458>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d031      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a26      	ldr	r2, [pc, #152]	@ (8003eac <HAL_DMA_Abort+0x45c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d02c      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a24      	ldr	r2, [pc, #144]	@ (8003eb0 <HAL_DMA_Abort+0x460>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d027      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a23      	ldr	r2, [pc, #140]	@ (8003eb4 <HAL_DMA_Abort+0x464>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a21      	ldr	r2, [pc, #132]	@ (8003eb8 <HAL_DMA_Abort+0x468>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01d      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a20      	ldr	r2, [pc, #128]	@ (8003ebc <HAL_DMA_Abort+0x46c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec0 <HAL_DMA_Abort+0x470>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec4 <HAL_DMA_Abort+0x474>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a1b      	ldr	r2, [pc, #108]	@ (8003ec8 <HAL_DMA_Abort+0x478>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a1a      	ldr	r2, [pc, #104]	@ (8003ecc <HAL_DMA_Abort+0x47c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_DMA_Abort+0x422>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a18      	ldr	r2, [pc, #96]	@ (8003ed0 <HAL_DMA_Abort+0x480>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_DMA_Abort+0x426>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_DMA_Abort+0x428>
 8003e76:	2300      	movs	r3, #0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d02b      	beq.n	8003ed4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e80:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	223f      	movs	r2, #63	@ 0x3f
 8003e8c:	409a      	lsls	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	609a      	str	r2, [r3, #8]
 8003e92:	e02a      	b.n	8003eea <HAL_DMA_Abort+0x49a>
 8003e94:	40020010 	.word	0x40020010
 8003e98:	40020028 	.word	0x40020028
 8003e9c:	40020040 	.word	0x40020040
 8003ea0:	40020058 	.word	0x40020058
 8003ea4:	40020070 	.word	0x40020070
 8003ea8:	40020088 	.word	0x40020088
 8003eac:	400200a0 	.word	0x400200a0
 8003eb0:	400200b8 	.word	0x400200b8
 8003eb4:	40020410 	.word	0x40020410
 8003eb8:	40020428 	.word	0x40020428
 8003ebc:	40020440 	.word	0x40020440
 8003ec0:	40020458 	.word	0x40020458
 8003ec4:	40020470 	.word	0x40020470
 8003ec8:	40020488 	.word	0x40020488
 8003ecc:	400204a0 	.word	0x400204a0
 8003ed0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a4f      	ldr	r2, [pc, #316]	@ (800402c <HAL_DMA_Abort+0x5dc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d072      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a4d      	ldr	r2, [pc, #308]	@ (8004030 <HAL_DMA_Abort+0x5e0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d06d      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a4c      	ldr	r2, [pc, #304]	@ (8004034 <HAL_DMA_Abort+0x5e4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d068      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a4a      	ldr	r2, [pc, #296]	@ (8004038 <HAL_DMA_Abort+0x5e8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d063      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a49      	ldr	r2, [pc, #292]	@ (800403c <HAL_DMA_Abort+0x5ec>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d05e      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a47      	ldr	r2, [pc, #284]	@ (8004040 <HAL_DMA_Abort+0x5f0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d059      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a46      	ldr	r2, [pc, #280]	@ (8004044 <HAL_DMA_Abort+0x5f4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d054      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a44      	ldr	r2, [pc, #272]	@ (8004048 <HAL_DMA_Abort+0x5f8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d04f      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a43      	ldr	r2, [pc, #268]	@ (800404c <HAL_DMA_Abort+0x5fc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d04a      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a41      	ldr	r2, [pc, #260]	@ (8004050 <HAL_DMA_Abort+0x600>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d045      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a40      	ldr	r2, [pc, #256]	@ (8004054 <HAL_DMA_Abort+0x604>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d040      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a3e      	ldr	r2, [pc, #248]	@ (8004058 <HAL_DMA_Abort+0x608>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d03b      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a3d      	ldr	r2, [pc, #244]	@ (800405c <HAL_DMA_Abort+0x60c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d036      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a3b      	ldr	r2, [pc, #236]	@ (8004060 <HAL_DMA_Abort+0x610>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d031      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a3a      	ldr	r2, [pc, #232]	@ (8004064 <HAL_DMA_Abort+0x614>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d02c      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a38      	ldr	r2, [pc, #224]	@ (8004068 <HAL_DMA_Abort+0x618>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d027      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a37      	ldr	r2, [pc, #220]	@ (800406c <HAL_DMA_Abort+0x61c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d022      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a35      	ldr	r2, [pc, #212]	@ (8004070 <HAL_DMA_Abort+0x620>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d01d      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a34      	ldr	r2, [pc, #208]	@ (8004074 <HAL_DMA_Abort+0x624>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d018      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a32      	ldr	r2, [pc, #200]	@ (8004078 <HAL_DMA_Abort+0x628>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d013      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a31      	ldr	r2, [pc, #196]	@ (800407c <HAL_DMA_Abort+0x62c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8004080 <HAL_DMA_Abort+0x630>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d009      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2e      	ldr	r2, [pc, #184]	@ (8004084 <HAL_DMA_Abort+0x634>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_DMA_Abort+0x58a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8004088 <HAL_DMA_Abort+0x638>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d101      	bne.n	8003fde <HAL_DMA_Abort+0x58e>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <HAL_DMA_Abort+0x590>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d015      	beq.n	8004010 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003fec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00c      	beq.n	8004010 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004000:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004004:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800400e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3718      	adds	r7, #24
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40020010 	.word	0x40020010
 8004030:	40020028 	.word	0x40020028
 8004034:	40020040 	.word	0x40020040
 8004038:	40020058 	.word	0x40020058
 800403c:	40020070 	.word	0x40020070
 8004040:	40020088 	.word	0x40020088
 8004044:	400200a0 	.word	0x400200a0
 8004048:	400200b8 	.word	0x400200b8
 800404c:	40020410 	.word	0x40020410
 8004050:	40020428 	.word	0x40020428
 8004054:	40020440 	.word	0x40020440
 8004058:	40020458 	.word	0x40020458
 800405c:	40020470 	.word	0x40020470
 8004060:	40020488 	.word	0x40020488
 8004064:	400204a0 	.word	0x400204a0
 8004068:	400204b8 	.word	0x400204b8
 800406c:	58025408 	.word	0x58025408
 8004070:	5802541c 	.word	0x5802541c
 8004074:	58025430 	.word	0x58025430
 8004078:	58025444 	.word	0x58025444
 800407c:	58025458 	.word	0x58025458
 8004080:	5802546c 	.word	0x5802546c
 8004084:	58025480 	.word	0x58025480
 8004088:	58025494 	.word	0x58025494

0800408c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e237      	b.n	800450e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d004      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2280      	movs	r2, #128	@ 0x80
 80040ae:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e22c      	b.n	800450e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a5c      	ldr	r2, [pc, #368]	@ (800422c <HAL_DMA_Abort_IT+0x1a0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d04a      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004230 <HAL_DMA_Abort_IT+0x1a4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d045      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a59      	ldr	r2, [pc, #356]	@ (8004234 <HAL_DMA_Abort_IT+0x1a8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d040      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a58      	ldr	r2, [pc, #352]	@ (8004238 <HAL_DMA_Abort_IT+0x1ac>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d03b      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a56      	ldr	r2, [pc, #344]	@ (800423c <HAL_DMA_Abort_IT+0x1b0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d036      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a55      	ldr	r2, [pc, #340]	@ (8004240 <HAL_DMA_Abort_IT+0x1b4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d031      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a53      	ldr	r2, [pc, #332]	@ (8004244 <HAL_DMA_Abort_IT+0x1b8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02c      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a52      	ldr	r2, [pc, #328]	@ (8004248 <HAL_DMA_Abort_IT+0x1bc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d027      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a50      	ldr	r2, [pc, #320]	@ (800424c <HAL_DMA_Abort_IT+0x1c0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d022      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a4f      	ldr	r2, [pc, #316]	@ (8004250 <HAL_DMA_Abort_IT+0x1c4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d01d      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a4d      	ldr	r2, [pc, #308]	@ (8004254 <HAL_DMA_Abort_IT+0x1c8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d018      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a4c      	ldr	r2, [pc, #304]	@ (8004258 <HAL_DMA_Abort_IT+0x1cc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d013      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a4a      	ldr	r2, [pc, #296]	@ (800425c <HAL_DMA_Abort_IT+0x1d0>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d00e      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a49      	ldr	r2, [pc, #292]	@ (8004260 <HAL_DMA_Abort_IT+0x1d4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d009      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a47      	ldr	r2, [pc, #284]	@ (8004264 <HAL_DMA_Abort_IT+0x1d8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d004      	beq.n	8004154 <HAL_DMA_Abort_IT+0xc8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a46      	ldr	r2, [pc, #280]	@ (8004268 <HAL_DMA_Abort_IT+0x1dc>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <HAL_DMA_Abort_IT+0xcc>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <HAL_DMA_Abort_IT+0xce>
 8004158:	2300      	movs	r3, #0
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8086 	beq.w	800426c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2204      	movs	r2, #4
 8004164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2f      	ldr	r2, [pc, #188]	@ (800422c <HAL_DMA_Abort_IT+0x1a0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d04a      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a2e      	ldr	r2, [pc, #184]	@ (8004230 <HAL_DMA_Abort_IT+0x1a4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d045      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a2c      	ldr	r2, [pc, #176]	@ (8004234 <HAL_DMA_Abort_IT+0x1a8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d040      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a2b      	ldr	r2, [pc, #172]	@ (8004238 <HAL_DMA_Abort_IT+0x1ac>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d03b      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a29      	ldr	r2, [pc, #164]	@ (800423c <HAL_DMA_Abort_IT+0x1b0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d036      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a28      	ldr	r2, [pc, #160]	@ (8004240 <HAL_DMA_Abort_IT+0x1b4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d031      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a26      	ldr	r2, [pc, #152]	@ (8004244 <HAL_DMA_Abort_IT+0x1b8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d02c      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a25      	ldr	r2, [pc, #148]	@ (8004248 <HAL_DMA_Abort_IT+0x1bc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d027      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a23      	ldr	r2, [pc, #140]	@ (800424c <HAL_DMA_Abort_IT+0x1c0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d022      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a22      	ldr	r2, [pc, #136]	@ (8004250 <HAL_DMA_Abort_IT+0x1c4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d01d      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a20      	ldr	r2, [pc, #128]	@ (8004254 <HAL_DMA_Abort_IT+0x1c8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d018      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1f      	ldr	r2, [pc, #124]	@ (8004258 <HAL_DMA_Abort_IT+0x1cc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d013      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	@ (800425c <HAL_DMA_Abort_IT+0x1d0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00e      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004260 <HAL_DMA_Abort_IT+0x1d4>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d009      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004264 <HAL_DMA_Abort_IT+0x1d8>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_DMA_Abort_IT+0x17c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a19      	ldr	r2, [pc, #100]	@ (8004268 <HAL_DMA_Abort_IT+0x1dc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d108      	bne.n	800421a <HAL_DMA_Abort_IT+0x18e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0201 	bic.w	r2, r2, #1
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	e178      	b.n	800450c <HAL_DMA_Abort_IT+0x480>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e16f      	b.n	800450c <HAL_DMA_Abort_IT+0x480>
 800422c:	40020010 	.word	0x40020010
 8004230:	40020028 	.word	0x40020028
 8004234:	40020040 	.word	0x40020040
 8004238:	40020058 	.word	0x40020058
 800423c:	40020070 	.word	0x40020070
 8004240:	40020088 	.word	0x40020088
 8004244:	400200a0 	.word	0x400200a0
 8004248:	400200b8 	.word	0x400200b8
 800424c:	40020410 	.word	0x40020410
 8004250:	40020428 	.word	0x40020428
 8004254:	40020440 	.word	0x40020440
 8004258:	40020458 	.word	0x40020458
 800425c:	40020470 	.word	0x40020470
 8004260:	40020488 	.word	0x40020488
 8004264:	400204a0 	.word	0x400204a0
 8004268:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 020e 	bic.w	r2, r2, #14
 800427a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a6c      	ldr	r2, [pc, #432]	@ (8004434 <HAL_DMA_Abort_IT+0x3a8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d04a      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a6b      	ldr	r2, [pc, #428]	@ (8004438 <HAL_DMA_Abort_IT+0x3ac>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d045      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a69      	ldr	r2, [pc, #420]	@ (800443c <HAL_DMA_Abort_IT+0x3b0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d040      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a68      	ldr	r2, [pc, #416]	@ (8004440 <HAL_DMA_Abort_IT+0x3b4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d03b      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a66      	ldr	r2, [pc, #408]	@ (8004444 <HAL_DMA_Abort_IT+0x3b8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d036      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a65      	ldr	r2, [pc, #404]	@ (8004448 <HAL_DMA_Abort_IT+0x3bc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d031      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a63      	ldr	r2, [pc, #396]	@ (800444c <HAL_DMA_Abort_IT+0x3c0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02c      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a62      	ldr	r2, [pc, #392]	@ (8004450 <HAL_DMA_Abort_IT+0x3c4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d027      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a60      	ldr	r2, [pc, #384]	@ (8004454 <HAL_DMA_Abort_IT+0x3c8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d022      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a5f      	ldr	r2, [pc, #380]	@ (8004458 <HAL_DMA_Abort_IT+0x3cc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01d      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a5d      	ldr	r2, [pc, #372]	@ (800445c <HAL_DMA_Abort_IT+0x3d0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d018      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004460 <HAL_DMA_Abort_IT+0x3d4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004464 <HAL_DMA_Abort_IT+0x3d8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a59      	ldr	r2, [pc, #356]	@ (8004468 <HAL_DMA_Abort_IT+0x3dc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a57      	ldr	r2, [pc, #348]	@ (800446c <HAL_DMA_Abort_IT+0x3e0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_DMA_Abort_IT+0x290>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a56      	ldr	r2, [pc, #344]	@ (8004470 <HAL_DMA_Abort_IT+0x3e4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d108      	bne.n	800432e <HAL_DMA_Abort_IT+0x2a2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e007      	b.n	800433e <HAL_DMA_Abort_IT+0x2b2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a3c      	ldr	r2, [pc, #240]	@ (8004434 <HAL_DMA_Abort_IT+0x3a8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d072      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a3a      	ldr	r2, [pc, #232]	@ (8004438 <HAL_DMA_Abort_IT+0x3ac>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d06d      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a39      	ldr	r2, [pc, #228]	@ (800443c <HAL_DMA_Abort_IT+0x3b0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d068      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a37      	ldr	r2, [pc, #220]	@ (8004440 <HAL_DMA_Abort_IT+0x3b4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d063      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a36      	ldr	r2, [pc, #216]	@ (8004444 <HAL_DMA_Abort_IT+0x3b8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d05e      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a34      	ldr	r2, [pc, #208]	@ (8004448 <HAL_DMA_Abort_IT+0x3bc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d059      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a33      	ldr	r2, [pc, #204]	@ (800444c <HAL_DMA_Abort_IT+0x3c0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d054      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a31      	ldr	r2, [pc, #196]	@ (8004450 <HAL_DMA_Abort_IT+0x3c4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d04f      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a30      	ldr	r2, [pc, #192]	@ (8004454 <HAL_DMA_Abort_IT+0x3c8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d04a      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a2e      	ldr	r2, [pc, #184]	@ (8004458 <HAL_DMA_Abort_IT+0x3cc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d045      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2d      	ldr	r2, [pc, #180]	@ (800445c <HAL_DMA_Abort_IT+0x3d0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d040      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004460 <HAL_DMA_Abort_IT+0x3d4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d03b      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004464 <HAL_DMA_Abort_IT+0x3d8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d036      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a28      	ldr	r2, [pc, #160]	@ (8004468 <HAL_DMA_Abort_IT+0x3dc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d031      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a27      	ldr	r2, [pc, #156]	@ (800446c <HAL_DMA_Abort_IT+0x3e0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d02c      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a25      	ldr	r2, [pc, #148]	@ (8004470 <HAL_DMA_Abort_IT+0x3e4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d027      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a24      	ldr	r2, [pc, #144]	@ (8004474 <HAL_DMA_Abort_IT+0x3e8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a22      	ldr	r2, [pc, #136]	@ (8004478 <HAL_DMA_Abort_IT+0x3ec>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01d      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a21      	ldr	r2, [pc, #132]	@ (800447c <HAL_DMA_Abort_IT+0x3f0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1f      	ldr	r2, [pc, #124]	@ (8004480 <HAL_DMA_Abort_IT+0x3f4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1e      	ldr	r2, [pc, #120]	@ (8004484 <HAL_DMA_Abort_IT+0x3f8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1c      	ldr	r2, [pc, #112]	@ (8004488 <HAL_DMA_Abort_IT+0x3fc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1b      	ldr	r2, [pc, #108]	@ (800448c <HAL_DMA_Abort_IT+0x400>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_DMA_Abort_IT+0x3a2>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a19      	ldr	r2, [pc, #100]	@ (8004490 <HAL_DMA_Abort_IT+0x404>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d132      	bne.n	8004494 <HAL_DMA_Abort_IT+0x408>
 800442e:	2301      	movs	r3, #1
 8004430:	e031      	b.n	8004496 <HAL_DMA_Abort_IT+0x40a>
 8004432:	bf00      	nop
 8004434:	40020010 	.word	0x40020010
 8004438:	40020028 	.word	0x40020028
 800443c:	40020040 	.word	0x40020040
 8004440:	40020058 	.word	0x40020058
 8004444:	40020070 	.word	0x40020070
 8004448:	40020088 	.word	0x40020088
 800444c:	400200a0 	.word	0x400200a0
 8004450:	400200b8 	.word	0x400200b8
 8004454:	40020410 	.word	0x40020410
 8004458:	40020428 	.word	0x40020428
 800445c:	40020440 	.word	0x40020440
 8004460:	40020458 	.word	0x40020458
 8004464:	40020470 	.word	0x40020470
 8004468:	40020488 	.word	0x40020488
 800446c:	400204a0 	.word	0x400204a0
 8004470:	400204b8 	.word	0x400204b8
 8004474:	58025408 	.word	0x58025408
 8004478:	5802541c 	.word	0x5802541c
 800447c:	58025430 	.word	0x58025430
 8004480:	58025444 	.word	0x58025444
 8004484:	58025458 	.word	0x58025458
 8004488:	5802546c 	.word	0x5802546c
 800448c:	58025480 	.word	0x58025480
 8004490:	58025494 	.word	0x58025494
 8004494:	2300      	movs	r3, #0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d028      	beq.n	80044ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	2201      	movs	r2, #1
 80044ba:	409a      	lsls	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80044c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00c      	beq.n	80044ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop

08004518 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	@ 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004524:	4b67      	ldr	r3, [pc, #412]	@ (80046c4 <HAL_DMA_IRQHandler+0x1ac>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a67      	ldr	r2, [pc, #412]	@ (80046c8 <HAL_DMA_IRQHandler+0x1b0>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5f      	ldr	r2, [pc, #380]	@ (80046cc <HAL_DMA_IRQHandler+0x1b4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04a      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a5d      	ldr	r2, [pc, #372]	@ (80046d0 <HAL_DMA_IRQHandler+0x1b8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d045      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5c      	ldr	r2, [pc, #368]	@ (80046d4 <HAL_DMA_IRQHandler+0x1bc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d040      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a5a      	ldr	r2, [pc, #360]	@ (80046d8 <HAL_DMA_IRQHandler+0x1c0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03b      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a59      	ldr	r2, [pc, #356]	@ (80046dc <HAL_DMA_IRQHandler+0x1c4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d036      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a57      	ldr	r2, [pc, #348]	@ (80046e0 <HAL_DMA_IRQHandler+0x1c8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d031      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a56      	ldr	r2, [pc, #344]	@ (80046e4 <HAL_DMA_IRQHandler+0x1cc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02c      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a54      	ldr	r2, [pc, #336]	@ (80046e8 <HAL_DMA_IRQHandler+0x1d0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a53      	ldr	r2, [pc, #332]	@ (80046ec <HAL_DMA_IRQHandler+0x1d4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a51      	ldr	r2, [pc, #324]	@ (80046f0 <HAL_DMA_IRQHandler+0x1d8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01d      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a50      	ldr	r2, [pc, #320]	@ (80046f4 <HAL_DMA_IRQHandler+0x1dc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a4e      	ldr	r2, [pc, #312]	@ (80046f8 <HAL_DMA_IRQHandler+0x1e0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a4d      	ldr	r2, [pc, #308]	@ (80046fc <HAL_DMA_IRQHandler+0x1e4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004700 <HAL_DMA_IRQHandler+0x1e8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a4a      	ldr	r2, [pc, #296]	@ (8004704 <HAL_DMA_IRQHandler+0x1ec>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_DMA_IRQHandler+0xd2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a48      	ldr	r2, [pc, #288]	@ (8004708 <HAL_DMA_IRQHandler+0x1f0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d101      	bne.n	80045ee <HAL_DMA_IRQHandler+0xd6>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_DMA_IRQHandler+0xd8>
 80045ee:	2300      	movs	r3, #0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 842b 	beq.w	8004e4c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fa:	f003 031f 	and.w	r3, r3, #31
 80045fe:	2208      	movs	r2, #8
 8004600:	409a      	lsls	r2, r3
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80a2 	beq.w	8004750 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2e      	ldr	r2, [pc, #184]	@ (80046cc <HAL_DMA_IRQHandler+0x1b4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d04a      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a2d      	ldr	r2, [pc, #180]	@ (80046d0 <HAL_DMA_IRQHandler+0x1b8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d045      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a2b      	ldr	r2, [pc, #172]	@ (80046d4 <HAL_DMA_IRQHandler+0x1bc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d040      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <HAL_DMA_IRQHandler+0x1c0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d03b      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a28      	ldr	r2, [pc, #160]	@ (80046dc <HAL_DMA_IRQHandler+0x1c4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d036      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a27      	ldr	r2, [pc, #156]	@ (80046e0 <HAL_DMA_IRQHandler+0x1c8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d031      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a25      	ldr	r2, [pc, #148]	@ (80046e4 <HAL_DMA_IRQHandler+0x1cc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d02c      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a24      	ldr	r2, [pc, #144]	@ (80046e8 <HAL_DMA_IRQHandler+0x1d0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d027      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a22      	ldr	r2, [pc, #136]	@ (80046ec <HAL_DMA_IRQHandler+0x1d4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d022      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a21      	ldr	r2, [pc, #132]	@ (80046f0 <HAL_DMA_IRQHandler+0x1d8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d01d      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1f      	ldr	r2, [pc, #124]	@ (80046f4 <HAL_DMA_IRQHandler+0x1dc>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d018      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1e      	ldr	r2, [pc, #120]	@ (80046f8 <HAL_DMA_IRQHandler+0x1e0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a1c      	ldr	r2, [pc, #112]	@ (80046fc <HAL_DMA_IRQHandler+0x1e4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1b      	ldr	r2, [pc, #108]	@ (8004700 <HAL_DMA_IRQHandler+0x1e8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a19      	ldr	r2, [pc, #100]	@ (8004704 <HAL_DMA_IRQHandler+0x1ec>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_DMA_IRQHandler+0x194>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <HAL_DMA_IRQHandler+0x1f0>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d12f      	bne.n	800470c <HAL_DMA_IRQHandler+0x1f4>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf14      	ite	ne
 80046ba:	2301      	movne	r3, #1
 80046bc:	2300      	moveq	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	e02e      	b.n	8004720 <HAL_DMA_IRQHandler+0x208>
 80046c2:	bf00      	nop
 80046c4:	24000008 	.word	0x24000008
 80046c8:	1b4e81b5 	.word	0x1b4e81b5
 80046cc:	40020010 	.word	0x40020010
 80046d0:	40020028 	.word	0x40020028
 80046d4:	40020040 	.word	0x40020040
 80046d8:	40020058 	.word	0x40020058
 80046dc:	40020070 	.word	0x40020070
 80046e0:	40020088 	.word	0x40020088
 80046e4:	400200a0 	.word	0x400200a0
 80046e8:	400200b8 	.word	0x400200b8
 80046ec:	40020410 	.word	0x40020410
 80046f0:	40020428 	.word	0x40020428
 80046f4:	40020440 	.word	0x40020440
 80046f8:	40020458 	.word	0x40020458
 80046fc:	40020470 	.word	0x40020470
 8004700:	40020488 	.word	0x40020488
 8004704:	400204a0 	.word	0x400204a0
 8004708:	400204b8 	.word	0x400204b8
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d015      	beq.n	8004750 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0204 	bic.w	r2, r2, #4
 8004732:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	2208      	movs	r2, #8
 800473e:	409a      	lsls	r2, r3
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004748:	f043 0201 	orr.w	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004754:	f003 031f 	and.w	r3, r3, #31
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d06e      	beq.n	8004844 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a69      	ldr	r2, [pc, #420]	@ (8004910 <HAL_DMA_IRQHandler+0x3f8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d04a      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a67      	ldr	r2, [pc, #412]	@ (8004914 <HAL_DMA_IRQHandler+0x3fc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d045      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a66      	ldr	r2, [pc, #408]	@ (8004918 <HAL_DMA_IRQHandler+0x400>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d040      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a64      	ldr	r2, [pc, #400]	@ (800491c <HAL_DMA_IRQHandler+0x404>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d03b      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a63      	ldr	r2, [pc, #396]	@ (8004920 <HAL_DMA_IRQHandler+0x408>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d036      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a61      	ldr	r2, [pc, #388]	@ (8004924 <HAL_DMA_IRQHandler+0x40c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d031      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a60      	ldr	r2, [pc, #384]	@ (8004928 <HAL_DMA_IRQHandler+0x410>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d02c      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a5e      	ldr	r2, [pc, #376]	@ (800492c <HAL_DMA_IRQHandler+0x414>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d027      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004930 <HAL_DMA_IRQHandler+0x418>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d022      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5b      	ldr	r2, [pc, #364]	@ (8004934 <HAL_DMA_IRQHandler+0x41c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01d      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a5a      	ldr	r2, [pc, #360]	@ (8004938 <HAL_DMA_IRQHandler+0x420>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d018      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a58      	ldr	r2, [pc, #352]	@ (800493c <HAL_DMA_IRQHandler+0x424>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a57      	ldr	r2, [pc, #348]	@ (8004940 <HAL_DMA_IRQHandler+0x428>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00e      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a55      	ldr	r2, [pc, #340]	@ (8004944 <HAL_DMA_IRQHandler+0x42c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d009      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a54      	ldr	r2, [pc, #336]	@ (8004948 <HAL_DMA_IRQHandler+0x430>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d004      	beq.n	8004806 <HAL_DMA_IRQHandler+0x2ee>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a52      	ldr	r2, [pc, #328]	@ (800494c <HAL_DMA_IRQHandler+0x434>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d10a      	bne.n	800481c <HAL_DMA_IRQHandler+0x304>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	e003      	b.n	8004824 <HAL_DMA_IRQHandler+0x30c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2300      	movs	r3, #0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00d      	beq.n	8004844 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	2201      	movs	r2, #1
 8004832:	409a      	lsls	r2, r3
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	f043 0202 	orr.w	r2, r3, #2
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	2204      	movs	r2, #4
 800484e:	409a      	lsls	r2, r3
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 808f 	beq.w	8004978 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2c      	ldr	r2, [pc, #176]	@ (8004910 <HAL_DMA_IRQHandler+0x3f8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d04a      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2a      	ldr	r2, [pc, #168]	@ (8004914 <HAL_DMA_IRQHandler+0x3fc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d045      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a29      	ldr	r2, [pc, #164]	@ (8004918 <HAL_DMA_IRQHandler+0x400>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d040      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a27      	ldr	r2, [pc, #156]	@ (800491c <HAL_DMA_IRQHandler+0x404>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d03b      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a26      	ldr	r2, [pc, #152]	@ (8004920 <HAL_DMA_IRQHandler+0x408>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d036      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a24      	ldr	r2, [pc, #144]	@ (8004924 <HAL_DMA_IRQHandler+0x40c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d031      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a23      	ldr	r2, [pc, #140]	@ (8004928 <HAL_DMA_IRQHandler+0x410>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d02c      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a21      	ldr	r2, [pc, #132]	@ (800492c <HAL_DMA_IRQHandler+0x414>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d027      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a20      	ldr	r2, [pc, #128]	@ (8004930 <HAL_DMA_IRQHandler+0x418>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d022      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1e      	ldr	r2, [pc, #120]	@ (8004934 <HAL_DMA_IRQHandler+0x41c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d01d      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	@ (8004938 <HAL_DMA_IRQHandler+0x420>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1b      	ldr	r2, [pc, #108]	@ (800493c <HAL_DMA_IRQHandler+0x424>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004940 <HAL_DMA_IRQHandler+0x428>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a18      	ldr	r2, [pc, #96]	@ (8004944 <HAL_DMA_IRQHandler+0x42c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a17      	ldr	r2, [pc, #92]	@ (8004948 <HAL_DMA_IRQHandler+0x430>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_DMA_IRQHandler+0x3e2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a15      	ldr	r2, [pc, #84]	@ (800494c <HAL_DMA_IRQHandler+0x434>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d12a      	bne.n	8004950 <HAL_DMA_IRQHandler+0x438>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e023      	b.n	8004958 <HAL_DMA_IRQHandler+0x440>
 8004910:	40020010 	.word	0x40020010
 8004914:	40020028 	.word	0x40020028
 8004918:	40020040 	.word	0x40020040
 800491c:	40020058 	.word	0x40020058
 8004920:	40020070 	.word	0x40020070
 8004924:	40020088 	.word	0x40020088
 8004928:	400200a0 	.word	0x400200a0
 800492c:	400200b8 	.word	0x400200b8
 8004930:	40020410 	.word	0x40020410
 8004934:	40020428 	.word	0x40020428
 8004938:	40020440 	.word	0x40020440
 800493c:	40020458 	.word	0x40020458
 8004940:	40020470 	.word	0x40020470
 8004944:	40020488 	.word	0x40020488
 8004948:	400204a0 	.word	0x400204a0
 800494c:	400204b8 	.word	0x400204b8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2300      	movs	r3, #0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00d      	beq.n	8004978 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004960:	f003 031f 	and.w	r3, r3, #31
 8004964:	2204      	movs	r2, #4
 8004966:	409a      	lsls	r2, r3
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004970:	f043 0204 	orr.w	r2, r3, #4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	2210      	movs	r2, #16
 8004982:	409a      	lsls	r2, r3
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 80a6 	beq.w	8004ada <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a85      	ldr	r2, [pc, #532]	@ (8004ba8 <HAL_DMA_IRQHandler+0x690>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d04a      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a83      	ldr	r2, [pc, #524]	@ (8004bac <HAL_DMA_IRQHandler+0x694>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d045      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a82      	ldr	r2, [pc, #520]	@ (8004bb0 <HAL_DMA_IRQHandler+0x698>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d040      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a80      	ldr	r2, [pc, #512]	@ (8004bb4 <HAL_DMA_IRQHandler+0x69c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d03b      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a7f      	ldr	r2, [pc, #508]	@ (8004bb8 <HAL_DMA_IRQHandler+0x6a0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d036      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a7d      	ldr	r2, [pc, #500]	@ (8004bbc <HAL_DMA_IRQHandler+0x6a4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d031      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a7c      	ldr	r2, [pc, #496]	@ (8004bc0 <HAL_DMA_IRQHandler+0x6a8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d02c      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a7a      	ldr	r2, [pc, #488]	@ (8004bc4 <HAL_DMA_IRQHandler+0x6ac>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d027      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a79      	ldr	r2, [pc, #484]	@ (8004bc8 <HAL_DMA_IRQHandler+0x6b0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d022      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a77      	ldr	r2, [pc, #476]	@ (8004bcc <HAL_DMA_IRQHandler+0x6b4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01d      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a76      	ldr	r2, [pc, #472]	@ (8004bd0 <HAL_DMA_IRQHandler+0x6b8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d018      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a74      	ldr	r2, [pc, #464]	@ (8004bd4 <HAL_DMA_IRQHandler+0x6bc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a73      	ldr	r2, [pc, #460]	@ (8004bd8 <HAL_DMA_IRQHandler+0x6c0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a71      	ldr	r2, [pc, #452]	@ (8004bdc <HAL_DMA_IRQHandler+0x6c4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a70      	ldr	r2, [pc, #448]	@ (8004be0 <HAL_DMA_IRQHandler+0x6c8>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x516>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a6e      	ldr	r2, [pc, #440]	@ (8004be4 <HAL_DMA_IRQHandler+0x6cc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d10a      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x52c>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf14      	ite	ne
 8004a3c:	2301      	movne	r3, #1
 8004a3e:	2300      	moveq	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	e009      	b.n	8004a58 <HAL_DMA_IRQHandler+0x540>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0304 	and.w	r3, r3, #4
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d03e      	beq.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2210      	movs	r2, #16
 8004a66:	409a      	lsls	r2, r3
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d018      	beq.n	8004aac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d108      	bne.n	8004a9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d024      	beq.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
 8004a98:	e01f      	b.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d01b      	beq.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	4798      	blx	r3
 8004aaa:	e016      	b.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d107      	bne.n	8004aca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0208 	bic.w	r2, r2, #8
 8004ac8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 8110 	beq.w	8004d10 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba8 <HAL_DMA_IRQHandler+0x690>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d04a      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2b      	ldr	r2, [pc, #172]	@ (8004bac <HAL_DMA_IRQHandler+0x694>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d045      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a29      	ldr	r2, [pc, #164]	@ (8004bb0 <HAL_DMA_IRQHandler+0x698>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d040      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a28      	ldr	r2, [pc, #160]	@ (8004bb4 <HAL_DMA_IRQHandler+0x69c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d03b      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a26      	ldr	r2, [pc, #152]	@ (8004bb8 <HAL_DMA_IRQHandler+0x6a0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d036      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a25      	ldr	r2, [pc, #148]	@ (8004bbc <HAL_DMA_IRQHandler+0x6a4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d031      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a23      	ldr	r2, [pc, #140]	@ (8004bc0 <HAL_DMA_IRQHandler+0x6a8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02c      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a22      	ldr	r2, [pc, #136]	@ (8004bc4 <HAL_DMA_IRQHandler+0x6ac>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d027      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a20      	ldr	r2, [pc, #128]	@ (8004bc8 <HAL_DMA_IRQHandler+0x6b0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d022      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bcc <HAL_DMA_IRQHandler+0x6b4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d01d      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd0 <HAL_DMA_IRQHandler+0x6b8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d018      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd4 <HAL_DMA_IRQHandler+0x6bc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d013      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <HAL_DMA_IRQHandler+0x6c0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00e      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a19      	ldr	r2, [pc, #100]	@ (8004bdc <HAL_DMA_IRQHandler+0x6c4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d009      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a17      	ldr	r2, [pc, #92]	@ (8004be0 <HAL_DMA_IRQHandler+0x6c8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d004      	beq.n	8004b90 <HAL_DMA_IRQHandler+0x678>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a16      	ldr	r2, [pc, #88]	@ (8004be4 <HAL_DMA_IRQHandler+0x6cc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d12b      	bne.n	8004be8 <HAL_DMA_IRQHandler+0x6d0>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bf14      	ite	ne
 8004b9e:	2301      	movne	r3, #1
 8004ba0:	2300      	moveq	r3, #0
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	e02a      	b.n	8004bfc <HAL_DMA_IRQHandler+0x6e4>
 8004ba6:	bf00      	nop
 8004ba8:	40020010 	.word	0x40020010
 8004bac:	40020028 	.word	0x40020028
 8004bb0:	40020040 	.word	0x40020040
 8004bb4:	40020058 	.word	0x40020058
 8004bb8:	40020070 	.word	0x40020070
 8004bbc:	40020088 	.word	0x40020088
 8004bc0:	400200a0 	.word	0x400200a0
 8004bc4:	400200b8 	.word	0x400200b8
 8004bc8:	40020410 	.word	0x40020410
 8004bcc:	40020428 	.word	0x40020428
 8004bd0:	40020440 	.word	0x40020440
 8004bd4:	40020458 	.word	0x40020458
 8004bd8:	40020470 	.word	0x40020470
 8004bdc:	40020488 	.word	0x40020488
 8004be0:	400204a0 	.word	0x400204a0
 8004be4:	400204b8 	.word	0x400204b8
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 8087 	beq.w	8004d10 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c06:	f003 031f 	and.w	r3, r3, #31
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	409a      	lsls	r2, r3
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d139      	bne.n	8004c92 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0216 	bic.w	r2, r2, #22
 8004c2c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c3c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_DMA_IRQHandler+0x736>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0208 	bic.w	r2, r2, #8
 8004c5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c62:	f003 031f 	and.w	r3, r3, #31
 8004c66:	223f      	movs	r2, #63	@ 0x3f
 8004c68:	409a      	lsls	r2, r3
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 834a 	beq.w	800531c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	4798      	blx	r3
          }
          return;
 8004c90:	e344      	b.n	800531c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d018      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d108      	bne.n	8004cc0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02c      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	4798      	blx	r3
 8004cbe:	e027      	b.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d023      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
 8004cd0:	e01e      	b.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10f      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f022 0210 	bic.w	r2, r2, #16
 8004cee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 8306 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8088 	beq.w	8004e38 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2204      	movs	r2, #4
 8004d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a7a      	ldr	r2, [pc, #488]	@ (8004f20 <HAL_DMA_IRQHandler+0xa08>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d04a      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a79      	ldr	r2, [pc, #484]	@ (8004f24 <HAL_DMA_IRQHandler+0xa0c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d045      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a77      	ldr	r2, [pc, #476]	@ (8004f28 <HAL_DMA_IRQHandler+0xa10>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d040      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a76      	ldr	r2, [pc, #472]	@ (8004f2c <HAL_DMA_IRQHandler+0xa14>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d03b      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a74      	ldr	r2, [pc, #464]	@ (8004f30 <HAL_DMA_IRQHandler+0xa18>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d036      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a73      	ldr	r2, [pc, #460]	@ (8004f34 <HAL_DMA_IRQHandler+0xa1c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d031      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a71      	ldr	r2, [pc, #452]	@ (8004f38 <HAL_DMA_IRQHandler+0xa20>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d02c      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a70      	ldr	r2, [pc, #448]	@ (8004f3c <HAL_DMA_IRQHandler+0xa24>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d027      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a6e      	ldr	r2, [pc, #440]	@ (8004f40 <HAL_DMA_IRQHandler+0xa28>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d022      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a6d      	ldr	r2, [pc, #436]	@ (8004f44 <HAL_DMA_IRQHandler+0xa2c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d01d      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a6b      	ldr	r2, [pc, #428]	@ (8004f48 <HAL_DMA_IRQHandler+0xa30>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d018      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a6a      	ldr	r2, [pc, #424]	@ (8004f4c <HAL_DMA_IRQHandler+0xa34>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d013      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a68      	ldr	r2, [pc, #416]	@ (8004f50 <HAL_DMA_IRQHandler+0xa38>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00e      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a67      	ldr	r2, [pc, #412]	@ (8004f54 <HAL_DMA_IRQHandler+0xa3c>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a65      	ldr	r2, [pc, #404]	@ (8004f58 <HAL_DMA_IRQHandler+0xa40>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x8b8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a64      	ldr	r2, [pc, #400]	@ (8004f5c <HAL_DMA_IRQHandler+0xa44>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d108      	bne.n	8004de2 <HAL_DMA_IRQHandler+0x8ca>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e007      	b.n	8004df2 <HAL_DMA_IRQHandler+0x8da>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d307      	bcc.n	8004e0e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f2      	bne.n	8004df2 <HAL_DMA_IRQHandler+0x8da>
 8004e0c:	e000      	b.n	8004e10 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e0e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d004      	beq.n	8004e28 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2203      	movs	r2, #3
 8004e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004e26:	e003      	b.n	8004e30 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8272 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
 8004e4a:	e26c      	b.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a43      	ldr	r2, [pc, #268]	@ (8004f60 <HAL_DMA_IRQHandler+0xa48>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d022      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a42      	ldr	r2, [pc, #264]	@ (8004f64 <HAL_DMA_IRQHandler+0xa4c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d01d      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a40      	ldr	r2, [pc, #256]	@ (8004f68 <HAL_DMA_IRQHandler+0xa50>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d018      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f6c <HAL_DMA_IRQHandler+0xa54>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d013      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3d      	ldr	r2, [pc, #244]	@ (8004f70 <HAL_DMA_IRQHandler+0xa58>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00e      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a3c      	ldr	r2, [pc, #240]	@ (8004f74 <HAL_DMA_IRQHandler+0xa5c>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d009      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f78 <HAL_DMA_IRQHandler+0xa60>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d004      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x984>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a39      	ldr	r2, [pc, #228]	@ (8004f7c <HAL_DMA_IRQHandler+0xa64>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d101      	bne.n	8004ea0 <HAL_DMA_IRQHandler+0x988>
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <HAL_DMA_IRQHandler+0x98a>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 823f 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	2204      	movs	r2, #4
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80cd 	beq.w	8005060 <HAL_DMA_IRQHandler+0xb48>
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80c7 	beq.w	8005060 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2204      	movs	r2, #4
 8004edc:	409a      	lsls	r2, r3
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d049      	beq.n	8004f80 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8210 	beq.w	8005320 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f08:	e20a      	b.n	8005320 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 8206 	beq.w	8005320 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f1c:	e200      	b.n	8005320 <HAL_DMA_IRQHandler+0xe08>
 8004f1e:	bf00      	nop
 8004f20:	40020010 	.word	0x40020010
 8004f24:	40020028 	.word	0x40020028
 8004f28:	40020040 	.word	0x40020040
 8004f2c:	40020058 	.word	0x40020058
 8004f30:	40020070 	.word	0x40020070
 8004f34:	40020088 	.word	0x40020088
 8004f38:	400200a0 	.word	0x400200a0
 8004f3c:	400200b8 	.word	0x400200b8
 8004f40:	40020410 	.word	0x40020410
 8004f44:	40020428 	.word	0x40020428
 8004f48:	40020440 	.word	0x40020440
 8004f4c:	40020458 	.word	0x40020458
 8004f50:	40020470 	.word	0x40020470
 8004f54:	40020488 	.word	0x40020488
 8004f58:	400204a0 	.word	0x400204a0
 8004f5c:	400204b8 	.word	0x400204b8
 8004f60:	58025408 	.word	0x58025408
 8004f64:	5802541c 	.word	0x5802541c
 8004f68:	58025430 	.word	0x58025430
 8004f6c:	58025444 	.word	0x58025444
 8004f70:	58025458 	.word	0x58025458
 8004f74:	5802546c 	.word	0x5802546c
 8004f78:	58025480 	.word	0x58025480
 8004f7c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d160      	bne.n	800504c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a7f      	ldr	r2, [pc, #508]	@ (800518c <HAL_DMA_IRQHandler+0xc74>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d04a      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a7d      	ldr	r2, [pc, #500]	@ (8005190 <HAL_DMA_IRQHandler+0xc78>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d045      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a7c      	ldr	r2, [pc, #496]	@ (8005194 <HAL_DMA_IRQHandler+0xc7c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d040      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7a      	ldr	r2, [pc, #488]	@ (8005198 <HAL_DMA_IRQHandler+0xc80>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d03b      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a79      	ldr	r2, [pc, #484]	@ (800519c <HAL_DMA_IRQHandler+0xc84>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d036      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a77      	ldr	r2, [pc, #476]	@ (80051a0 <HAL_DMA_IRQHandler+0xc88>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d031      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a76      	ldr	r2, [pc, #472]	@ (80051a4 <HAL_DMA_IRQHandler+0xc8c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d02c      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a74      	ldr	r2, [pc, #464]	@ (80051a8 <HAL_DMA_IRQHandler+0xc90>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d027      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a73      	ldr	r2, [pc, #460]	@ (80051ac <HAL_DMA_IRQHandler+0xc94>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d022      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a71      	ldr	r2, [pc, #452]	@ (80051b0 <HAL_DMA_IRQHandler+0xc98>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01d      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a70      	ldr	r2, [pc, #448]	@ (80051b4 <HAL_DMA_IRQHandler+0xc9c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d018      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a6e      	ldr	r2, [pc, #440]	@ (80051b8 <HAL_DMA_IRQHandler+0xca0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a6d      	ldr	r2, [pc, #436]	@ (80051bc <HAL_DMA_IRQHandler+0xca4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00e      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a6b      	ldr	r2, [pc, #428]	@ (80051c0 <HAL_DMA_IRQHandler+0xca8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d009      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6a      	ldr	r2, [pc, #424]	@ (80051c4 <HAL_DMA_IRQHandler+0xcac>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d004      	beq.n	800502a <HAL_DMA_IRQHandler+0xb12>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a68      	ldr	r2, [pc, #416]	@ (80051c8 <HAL_DMA_IRQHandler+0xcb0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d108      	bne.n	800503c <HAL_DMA_IRQHandler+0xb24>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0208 	bic.w	r2, r2, #8
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e007      	b.n	800504c <HAL_DMA_IRQHandler+0xb34>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0204 	bic.w	r2, r2, #4
 800504a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8165 	beq.w	8005320 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800505e:	e15f      	b.n	8005320 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	2202      	movs	r2, #2
 800506a:	409a      	lsls	r2, r3
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 80c5 	beq.w	8005200 <HAL_DMA_IRQHandler+0xce8>
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 80bf 	beq.w	8005200 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	2202      	movs	r2, #2
 800508c:	409a      	lsls	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d018      	beq.n	80050ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d109      	bne.n	80050ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 813a 	beq.w	8005324 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050b8:	e134      	b.n	8005324 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8130 	beq.w	8005324 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050cc:	e12a      	b.n	8005324 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f040 8089 	bne.w	80051ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a2b      	ldr	r2, [pc, #172]	@ (800518c <HAL_DMA_IRQHandler+0xc74>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d04a      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a29      	ldr	r2, [pc, #164]	@ (8005190 <HAL_DMA_IRQHandler+0xc78>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d045      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a28      	ldr	r2, [pc, #160]	@ (8005194 <HAL_DMA_IRQHandler+0xc7c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d040      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a26      	ldr	r2, [pc, #152]	@ (8005198 <HAL_DMA_IRQHandler+0xc80>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d03b      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a25      	ldr	r2, [pc, #148]	@ (800519c <HAL_DMA_IRQHandler+0xc84>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d036      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a23      	ldr	r2, [pc, #140]	@ (80051a0 <HAL_DMA_IRQHandler+0xc88>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d031      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a22      	ldr	r2, [pc, #136]	@ (80051a4 <HAL_DMA_IRQHandler+0xc8c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d02c      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a20      	ldr	r2, [pc, #128]	@ (80051a8 <HAL_DMA_IRQHandler+0xc90>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d027      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1f      	ldr	r2, [pc, #124]	@ (80051ac <HAL_DMA_IRQHandler+0xc94>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d022      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1d      	ldr	r2, [pc, #116]	@ (80051b0 <HAL_DMA_IRQHandler+0xc98>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01d      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1c      	ldr	r2, [pc, #112]	@ (80051b4 <HAL_DMA_IRQHandler+0xc9c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d018      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1a      	ldr	r2, [pc, #104]	@ (80051b8 <HAL_DMA_IRQHandler+0xca0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a19      	ldr	r2, [pc, #100]	@ (80051bc <HAL_DMA_IRQHandler+0xca4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a17      	ldr	r2, [pc, #92]	@ (80051c0 <HAL_DMA_IRQHandler+0xca8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a16      	ldr	r2, [pc, #88]	@ (80051c4 <HAL_DMA_IRQHandler+0xcac>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_DMA_IRQHandler+0xc62>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a14      	ldr	r2, [pc, #80]	@ (80051c8 <HAL_DMA_IRQHandler+0xcb0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d128      	bne.n	80051cc <HAL_DMA_IRQHandler+0xcb4>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0214 	bic.w	r2, r2, #20
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e027      	b.n	80051dc <HAL_DMA_IRQHandler+0xcc4>
 800518c:	40020010 	.word	0x40020010
 8005190:	40020028 	.word	0x40020028
 8005194:	40020040 	.word	0x40020040
 8005198:	40020058 	.word	0x40020058
 800519c:	40020070 	.word	0x40020070
 80051a0:	40020088 	.word	0x40020088
 80051a4:	400200a0 	.word	0x400200a0
 80051a8:	400200b8 	.word	0x400200b8
 80051ac:	40020410 	.word	0x40020410
 80051b0:	40020428 	.word	0x40020428
 80051b4:	40020440 	.word	0x40020440
 80051b8:	40020458 	.word	0x40020458
 80051bc:	40020470 	.word	0x40020470
 80051c0:	40020488 	.word	0x40020488
 80051c4:	400204a0 	.word	0x400204a0
 80051c8:	400204b8 	.word	0x400204b8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 020a 	bic.w	r2, r2, #10
 80051da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f000 8097 	beq.w	8005324 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051fe:	e091      	b.n	8005324 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	2208      	movs	r2, #8
 800520a:	409a      	lsls	r2, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	4013      	ands	r3, r2
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 8088 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8082 	beq.w	8005326 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a41      	ldr	r2, [pc, #260]	@ (800532c <HAL_DMA_IRQHandler+0xe14>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d04a      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a3f      	ldr	r2, [pc, #252]	@ (8005330 <HAL_DMA_IRQHandler+0xe18>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d045      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a3e      	ldr	r2, [pc, #248]	@ (8005334 <HAL_DMA_IRQHandler+0xe1c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d040      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a3c      	ldr	r2, [pc, #240]	@ (8005338 <HAL_DMA_IRQHandler+0xe20>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d03b      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a3b      	ldr	r2, [pc, #236]	@ (800533c <HAL_DMA_IRQHandler+0xe24>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d036      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a39      	ldr	r2, [pc, #228]	@ (8005340 <HAL_DMA_IRQHandler+0xe28>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d031      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a38      	ldr	r2, [pc, #224]	@ (8005344 <HAL_DMA_IRQHandler+0xe2c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d02c      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a36      	ldr	r2, [pc, #216]	@ (8005348 <HAL_DMA_IRQHandler+0xe30>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d027      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a35      	ldr	r2, [pc, #212]	@ (800534c <HAL_DMA_IRQHandler+0xe34>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d022      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a33      	ldr	r2, [pc, #204]	@ (8005350 <HAL_DMA_IRQHandler+0xe38>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01d      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a32      	ldr	r2, [pc, #200]	@ (8005354 <HAL_DMA_IRQHandler+0xe3c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d018      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a30      	ldr	r2, [pc, #192]	@ (8005358 <HAL_DMA_IRQHandler+0xe40>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2f      	ldr	r2, [pc, #188]	@ (800535c <HAL_DMA_IRQHandler+0xe44>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005360 <HAL_DMA_IRQHandler+0xe48>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005364 <HAL_DMA_IRQHandler+0xe4c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_DMA_IRQHandler+0xdaa>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005368 <HAL_DMA_IRQHandler+0xe50>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <HAL_DMA_IRQHandler+0xdbc>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 021c 	bic.w	r2, r2, #28
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e007      	b.n	80052e4 <HAL_DMA_IRQHandler+0xdcc>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 020e 	bic.w	r2, r2, #14
 80052e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2201      	movs	r2, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	4798      	blx	r3
 800531a:	e004      	b.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800531c:	bf00      	nop
 800531e:	e002      	b.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005320:	bf00      	nop
 8005322:	e000      	b.n	8005326 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005324:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005326:	3728      	adds	r7, #40	@ 0x28
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40020010 	.word	0x40020010
 8005330:	40020028 	.word	0x40020028
 8005334:	40020040 	.word	0x40020040
 8005338:	40020058 	.word	0x40020058
 800533c:	40020070 	.word	0x40020070
 8005340:	40020088 	.word	0x40020088
 8005344:	400200a0 	.word	0x400200a0
 8005348:	400200b8 	.word	0x400200b8
 800534c:	40020410 	.word	0x40020410
 8005350:	40020428 	.word	0x40020428
 8005354:	40020440 	.word	0x40020440
 8005358:	40020458 	.word	0x40020458
 800535c:	40020470 	.word	0x40020470
 8005360:	40020488 	.word	0x40020488
 8005364:	400204a0 	.word	0x400204a0
 8005368:	400204b8 	.word	0x400204b8

0800536c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005396:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a7f      	ldr	r2, [pc, #508]	@ (80055a0 <DMA_SetConfig+0x21c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d072      	beq.n	800548e <DMA_SetConfig+0x10a>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a7d      	ldr	r2, [pc, #500]	@ (80055a4 <DMA_SetConfig+0x220>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d06d      	beq.n	800548e <DMA_SetConfig+0x10a>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a7c      	ldr	r2, [pc, #496]	@ (80055a8 <DMA_SetConfig+0x224>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d068      	beq.n	800548e <DMA_SetConfig+0x10a>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a7a      	ldr	r2, [pc, #488]	@ (80055ac <DMA_SetConfig+0x228>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d063      	beq.n	800548e <DMA_SetConfig+0x10a>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a79      	ldr	r2, [pc, #484]	@ (80055b0 <DMA_SetConfig+0x22c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d05e      	beq.n	800548e <DMA_SetConfig+0x10a>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a77      	ldr	r2, [pc, #476]	@ (80055b4 <DMA_SetConfig+0x230>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d059      	beq.n	800548e <DMA_SetConfig+0x10a>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a76      	ldr	r2, [pc, #472]	@ (80055b8 <DMA_SetConfig+0x234>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d054      	beq.n	800548e <DMA_SetConfig+0x10a>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a74      	ldr	r2, [pc, #464]	@ (80055bc <DMA_SetConfig+0x238>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d04f      	beq.n	800548e <DMA_SetConfig+0x10a>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a73      	ldr	r2, [pc, #460]	@ (80055c0 <DMA_SetConfig+0x23c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d04a      	beq.n	800548e <DMA_SetConfig+0x10a>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a71      	ldr	r2, [pc, #452]	@ (80055c4 <DMA_SetConfig+0x240>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d045      	beq.n	800548e <DMA_SetConfig+0x10a>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a70      	ldr	r2, [pc, #448]	@ (80055c8 <DMA_SetConfig+0x244>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d040      	beq.n	800548e <DMA_SetConfig+0x10a>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a6e      	ldr	r2, [pc, #440]	@ (80055cc <DMA_SetConfig+0x248>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d03b      	beq.n	800548e <DMA_SetConfig+0x10a>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a6d      	ldr	r2, [pc, #436]	@ (80055d0 <DMA_SetConfig+0x24c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d036      	beq.n	800548e <DMA_SetConfig+0x10a>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a6b      	ldr	r2, [pc, #428]	@ (80055d4 <DMA_SetConfig+0x250>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d031      	beq.n	800548e <DMA_SetConfig+0x10a>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a6a      	ldr	r2, [pc, #424]	@ (80055d8 <DMA_SetConfig+0x254>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d02c      	beq.n	800548e <DMA_SetConfig+0x10a>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a68      	ldr	r2, [pc, #416]	@ (80055dc <DMA_SetConfig+0x258>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d027      	beq.n	800548e <DMA_SetConfig+0x10a>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a67      	ldr	r2, [pc, #412]	@ (80055e0 <DMA_SetConfig+0x25c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d022      	beq.n	800548e <DMA_SetConfig+0x10a>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a65      	ldr	r2, [pc, #404]	@ (80055e4 <DMA_SetConfig+0x260>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01d      	beq.n	800548e <DMA_SetConfig+0x10a>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a64      	ldr	r2, [pc, #400]	@ (80055e8 <DMA_SetConfig+0x264>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d018      	beq.n	800548e <DMA_SetConfig+0x10a>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a62      	ldr	r2, [pc, #392]	@ (80055ec <DMA_SetConfig+0x268>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d013      	beq.n	800548e <DMA_SetConfig+0x10a>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a61      	ldr	r2, [pc, #388]	@ (80055f0 <DMA_SetConfig+0x26c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00e      	beq.n	800548e <DMA_SetConfig+0x10a>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a5f      	ldr	r2, [pc, #380]	@ (80055f4 <DMA_SetConfig+0x270>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d009      	beq.n	800548e <DMA_SetConfig+0x10a>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a5e      	ldr	r2, [pc, #376]	@ (80055f8 <DMA_SetConfig+0x274>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <DMA_SetConfig+0x10a>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a5c      	ldr	r2, [pc, #368]	@ (80055fc <DMA_SetConfig+0x278>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d101      	bne.n	8005492 <DMA_SetConfig+0x10e>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <DMA_SetConfig+0x110>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00d      	beq.n	80054b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d004      	beq.n	80054b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a39      	ldr	r2, [pc, #228]	@ (80055a0 <DMA_SetConfig+0x21c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d04a      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a38      	ldr	r2, [pc, #224]	@ (80055a4 <DMA_SetConfig+0x220>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d045      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a36      	ldr	r2, [pc, #216]	@ (80055a8 <DMA_SetConfig+0x224>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d040      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a35      	ldr	r2, [pc, #212]	@ (80055ac <DMA_SetConfig+0x228>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d03b      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a33      	ldr	r2, [pc, #204]	@ (80055b0 <DMA_SetConfig+0x22c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d036      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a32      	ldr	r2, [pc, #200]	@ (80055b4 <DMA_SetConfig+0x230>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d031      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a30      	ldr	r2, [pc, #192]	@ (80055b8 <DMA_SetConfig+0x234>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d02c      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a2f      	ldr	r2, [pc, #188]	@ (80055bc <DMA_SetConfig+0x238>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d027      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a2d      	ldr	r2, [pc, #180]	@ (80055c0 <DMA_SetConfig+0x23c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d022      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a2c      	ldr	r2, [pc, #176]	@ (80055c4 <DMA_SetConfig+0x240>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d01d      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a2a      	ldr	r2, [pc, #168]	@ (80055c8 <DMA_SetConfig+0x244>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d018      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a29      	ldr	r2, [pc, #164]	@ (80055cc <DMA_SetConfig+0x248>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a27      	ldr	r2, [pc, #156]	@ (80055d0 <DMA_SetConfig+0x24c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00e      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a26      	ldr	r2, [pc, #152]	@ (80055d4 <DMA_SetConfig+0x250>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d009      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a24      	ldr	r2, [pc, #144]	@ (80055d8 <DMA_SetConfig+0x254>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <DMA_SetConfig+0x1d0>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a23      	ldr	r2, [pc, #140]	@ (80055dc <DMA_SetConfig+0x258>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d101      	bne.n	8005558 <DMA_SetConfig+0x1d4>
 8005554:	2301      	movs	r3, #1
 8005556:	e000      	b.n	800555a <DMA_SetConfig+0x1d6>
 8005558:	2300      	movs	r3, #0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d059      	beq.n	8005612 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	223f      	movs	r2, #63	@ 0x3f
 8005568:	409a      	lsls	r2, r3
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800557c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b40      	cmp	r3, #64	@ 0x40
 800558c:	d138      	bne.n	8005600 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800559e:	e086      	b.n	80056ae <DMA_SetConfig+0x32a>
 80055a0:	40020010 	.word	0x40020010
 80055a4:	40020028 	.word	0x40020028
 80055a8:	40020040 	.word	0x40020040
 80055ac:	40020058 	.word	0x40020058
 80055b0:	40020070 	.word	0x40020070
 80055b4:	40020088 	.word	0x40020088
 80055b8:	400200a0 	.word	0x400200a0
 80055bc:	400200b8 	.word	0x400200b8
 80055c0:	40020410 	.word	0x40020410
 80055c4:	40020428 	.word	0x40020428
 80055c8:	40020440 	.word	0x40020440
 80055cc:	40020458 	.word	0x40020458
 80055d0:	40020470 	.word	0x40020470
 80055d4:	40020488 	.word	0x40020488
 80055d8:	400204a0 	.word	0x400204a0
 80055dc:	400204b8 	.word	0x400204b8
 80055e0:	58025408 	.word	0x58025408
 80055e4:	5802541c 	.word	0x5802541c
 80055e8:	58025430 	.word	0x58025430
 80055ec:	58025444 	.word	0x58025444
 80055f0:	58025458 	.word	0x58025458
 80055f4:	5802546c 	.word	0x5802546c
 80055f8:	58025480 	.word	0x58025480
 80055fc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	60da      	str	r2, [r3, #12]
}
 8005610:	e04d      	b.n	80056ae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a29      	ldr	r2, [pc, #164]	@ (80056bc <DMA_SetConfig+0x338>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d022      	beq.n	8005662 <DMA_SetConfig+0x2de>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a27      	ldr	r2, [pc, #156]	@ (80056c0 <DMA_SetConfig+0x33c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d01d      	beq.n	8005662 <DMA_SetConfig+0x2de>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a26      	ldr	r2, [pc, #152]	@ (80056c4 <DMA_SetConfig+0x340>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d018      	beq.n	8005662 <DMA_SetConfig+0x2de>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a24      	ldr	r2, [pc, #144]	@ (80056c8 <DMA_SetConfig+0x344>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <DMA_SetConfig+0x2de>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a23      	ldr	r2, [pc, #140]	@ (80056cc <DMA_SetConfig+0x348>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <DMA_SetConfig+0x2de>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a21      	ldr	r2, [pc, #132]	@ (80056d0 <DMA_SetConfig+0x34c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <DMA_SetConfig+0x2de>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a20      	ldr	r2, [pc, #128]	@ (80056d4 <DMA_SetConfig+0x350>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <DMA_SetConfig+0x2de>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1e      	ldr	r2, [pc, #120]	@ (80056d8 <DMA_SetConfig+0x354>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d101      	bne.n	8005666 <DMA_SetConfig+0x2e2>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <DMA_SetConfig+0x2e4>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d020      	beq.n	80056ae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	2201      	movs	r2, #1
 8005676:	409a      	lsls	r2, r3
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b40      	cmp	r3, #64	@ 0x40
 800568a:	d108      	bne.n	800569e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	60da      	str	r2, [r3, #12]
}
 800569c:	e007      	b.n	80056ae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	60da      	str	r2, [r3, #12]
}
 80056ae:	bf00      	nop
 80056b0:	371c      	adds	r7, #28
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	58025408 	.word	0x58025408
 80056c0:	5802541c 	.word	0x5802541c
 80056c4:	58025430 	.word	0x58025430
 80056c8:	58025444 	.word	0x58025444
 80056cc:	58025458 	.word	0x58025458
 80056d0:	5802546c 	.word	0x5802546c
 80056d4:	58025480 	.word	0x58025480
 80056d8:	58025494 	.word	0x58025494

080056dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a42      	ldr	r2, [pc, #264]	@ (80057f4 <DMA_CalcBaseAndBitshift+0x118>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d04a      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a41      	ldr	r2, [pc, #260]	@ (80057f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d045      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a3f      	ldr	r2, [pc, #252]	@ (80057fc <DMA_CalcBaseAndBitshift+0x120>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d040      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a3e      	ldr	r2, [pc, #248]	@ (8005800 <DMA_CalcBaseAndBitshift+0x124>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d03b      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a3c      	ldr	r2, [pc, #240]	@ (8005804 <DMA_CalcBaseAndBitshift+0x128>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d036      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a3b      	ldr	r2, [pc, #236]	@ (8005808 <DMA_CalcBaseAndBitshift+0x12c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d031      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a39      	ldr	r2, [pc, #228]	@ (800580c <DMA_CalcBaseAndBitshift+0x130>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d02c      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a38      	ldr	r2, [pc, #224]	@ (8005810 <DMA_CalcBaseAndBitshift+0x134>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d027      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a36      	ldr	r2, [pc, #216]	@ (8005814 <DMA_CalcBaseAndBitshift+0x138>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d022      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a35      	ldr	r2, [pc, #212]	@ (8005818 <DMA_CalcBaseAndBitshift+0x13c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d01d      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a33      	ldr	r2, [pc, #204]	@ (800581c <DMA_CalcBaseAndBitshift+0x140>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d018      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a32      	ldr	r2, [pc, #200]	@ (8005820 <DMA_CalcBaseAndBitshift+0x144>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d013      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a30      	ldr	r2, [pc, #192]	@ (8005824 <DMA_CalcBaseAndBitshift+0x148>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00e      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a2f      	ldr	r2, [pc, #188]	@ (8005828 <DMA_CalcBaseAndBitshift+0x14c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d009      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2d      	ldr	r2, [pc, #180]	@ (800582c <DMA_CalcBaseAndBitshift+0x150>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d004      	beq.n	8005784 <DMA_CalcBaseAndBitshift+0xa8>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2c      	ldr	r2, [pc, #176]	@ (8005830 <DMA_CalcBaseAndBitshift+0x154>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d101      	bne.n	8005788 <DMA_CalcBaseAndBitshift+0xac>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <DMA_CalcBaseAndBitshift+0xae>
 8005788:	2300      	movs	r3, #0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d024      	beq.n	80057d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	3b10      	subs	r3, #16
 8005796:	4a27      	ldr	r2, [pc, #156]	@ (8005834 <DMA_CalcBaseAndBitshift+0x158>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	091b      	lsrs	r3, r3, #4
 800579e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	4a24      	ldr	r2, [pc, #144]	@ (8005838 <DMA_CalcBaseAndBitshift+0x15c>)
 80057a8:	5cd3      	ldrb	r3, [r2, r3]
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d908      	bls.n	80057c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	4b1f      	ldr	r3, [pc, #124]	@ (800583c <DMA_CalcBaseAndBitshift+0x160>)
 80057be:	4013      	ands	r3, r2
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80057c6:	e00d      	b.n	80057e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	4b1b      	ldr	r3, [pc, #108]	@ (800583c <DMA_CalcBaseAndBitshift+0x160>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80057d6:	e005      	b.n	80057e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40020010 	.word	0x40020010
 80057f8:	40020028 	.word	0x40020028
 80057fc:	40020040 	.word	0x40020040
 8005800:	40020058 	.word	0x40020058
 8005804:	40020070 	.word	0x40020070
 8005808:	40020088 	.word	0x40020088
 800580c:	400200a0 	.word	0x400200a0
 8005810:	400200b8 	.word	0x400200b8
 8005814:	40020410 	.word	0x40020410
 8005818:	40020428 	.word	0x40020428
 800581c:	40020440 	.word	0x40020440
 8005820:	40020458 	.word	0x40020458
 8005824:	40020470 	.word	0x40020470
 8005828:	40020488 	.word	0x40020488
 800582c:	400204a0 	.word	0x400204a0
 8005830:	400204b8 	.word	0x400204b8
 8005834:	aaaaaaab 	.word	0xaaaaaaab
 8005838:	0800e658 	.word	0x0800e658
 800583c:	fffffc00 	.word	0xfffffc00

08005840 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d120      	bne.n	8005896 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	2b03      	cmp	r3, #3
 800585a:	d858      	bhi.n	800590e <DMA_CheckFifoParam+0xce>
 800585c:	a201      	add	r2, pc, #4	@ (adr r2, 8005864 <DMA_CheckFifoParam+0x24>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	08005875 	.word	0x08005875
 8005868:	08005887 	.word	0x08005887
 800586c:	08005875 	.word	0x08005875
 8005870:	0800590f 	.word	0x0800590f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d048      	beq.n	8005912 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005884:	e045      	b.n	8005912 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800588e:	d142      	bne.n	8005916 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005894:	e03f      	b.n	8005916 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800589e:	d123      	bne.n	80058e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d838      	bhi.n	800591a <DMA_CheckFifoParam+0xda>
 80058a8:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <DMA_CheckFifoParam+0x70>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	080058c1 	.word	0x080058c1
 80058b4:	080058c7 	.word	0x080058c7
 80058b8:	080058c1 	.word	0x080058c1
 80058bc:	080058d9 	.word	0x080058d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
        break;
 80058c4:	e030      	b.n	8005928 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d025      	beq.n	800591e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058d6:	e022      	b.n	800591e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058e0:	d11f      	bne.n	8005922 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058e6:	e01c      	b.n	8005922 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d902      	bls.n	80058f6 <DMA_CheckFifoParam+0xb6>
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	d003      	beq.n	80058fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80058f4:	e018      	b.n	8005928 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
        break;
 80058fa:	e015      	b.n	8005928 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00e      	beq.n	8005926 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
    break;
 800590c:	e00b      	b.n	8005926 <DMA_CheckFifoParam+0xe6>
        break;
 800590e:	bf00      	nop
 8005910:	e00a      	b.n	8005928 <DMA_CheckFifoParam+0xe8>
        break;
 8005912:	bf00      	nop
 8005914:	e008      	b.n	8005928 <DMA_CheckFifoParam+0xe8>
        break;
 8005916:	bf00      	nop
 8005918:	e006      	b.n	8005928 <DMA_CheckFifoParam+0xe8>
        break;
 800591a:	bf00      	nop
 800591c:	e004      	b.n	8005928 <DMA_CheckFifoParam+0xe8>
        break;
 800591e:	bf00      	nop
 8005920:	e002      	b.n	8005928 <DMA_CheckFifoParam+0xe8>
        break;
 8005922:	bf00      	nop
 8005924:	e000      	b.n	8005928 <DMA_CheckFifoParam+0xe8>
    break;
 8005926:	bf00      	nop
    }
  }

  return status;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3714      	adds	r7, #20
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop

08005938 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a38      	ldr	r2, [pc, #224]	@ (8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a36      	ldr	r2, [pc, #216]	@ (8005a30 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d01d      	beq.n	8005996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a35      	ldr	r2, [pc, #212]	@ (8005a34 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a33      	ldr	r2, [pc, #204]	@ (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a32      	ldr	r2, [pc, #200]	@ (8005a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a30      	ldr	r2, [pc, #192]	@ (8005a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a2f      	ldr	r2, [pc, #188]	@ (8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a2d      	ldr	r2, [pc, #180]	@ (8005a48 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d101      	bne.n	800599a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01a      	beq.n	80059d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	3b08      	subs	r3, #8
 80059a8:	4a28      	ldr	r2, [pc, #160]	@ (8005a4c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80059aa:	fba2 2303 	umull	r2, r3, r2, r3
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4b26      	ldr	r3, [pc, #152]	@ (8005a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	461a      	mov	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a24      	ldr	r2, [pc, #144]	@ (8005a54 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80059c4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	2201      	movs	r2, #1
 80059ce:	409a      	lsls	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059d4:	e024      	b.n	8005a20 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	3b10      	subs	r3, #16
 80059de:	4a1e      	ldr	r2, [pc, #120]	@ (8005a58 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059e0:	fba2 2303 	umull	r2, r3, r2, r3
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4a1c      	ldr	r2, [pc, #112]	@ (8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d806      	bhi.n	80059fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d902      	bls.n	80059fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3308      	adds	r3, #8
 80059fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4b18      	ldr	r3, [pc, #96]	@ (8005a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	461a      	mov	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a16      	ldr	r2, [pc, #88]	@ (8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a10:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f003 031f 	and.w	r3, r3, #31
 8005a18:	2201      	movs	r2, #1
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	58025408 	.word	0x58025408
 8005a30:	5802541c 	.word	0x5802541c
 8005a34:	58025430 	.word	0x58025430
 8005a38:	58025444 	.word	0x58025444
 8005a3c:	58025458 	.word	0x58025458
 8005a40:	5802546c 	.word	0x5802546c
 8005a44:	58025480 	.word	0x58025480
 8005a48:	58025494 	.word	0x58025494
 8005a4c:	cccccccd 	.word	0xcccccccd
 8005a50:	16009600 	.word	0x16009600
 8005a54:	58025880 	.word	0x58025880
 8005a58:	aaaaaaab 	.word	0xaaaaaaab
 8005a5c:	400204b8 	.word	0x400204b8
 8005a60:	4002040f 	.word	0x4002040f
 8005a64:	10008200 	.word	0x10008200
 8005a68:	40020880 	.word	0x40020880

08005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04a      	beq.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d847      	bhi.n	8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	@ (8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d022      	beq.n	8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a24      	ldr	r2, [pc, #144]	@ (8005b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d01d      	beq.n	8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a22      	ldr	r2, [pc, #136]	@ (8005b2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8005b34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1e      	ldr	r2, [pc, #120]	@ (8005b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8005b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8005b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d101      	bne.n	8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4b17      	ldr	r3, [pc, #92]	@ (8005b44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	461a      	mov	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a15      	ldr	r2, [pc, #84]	@ (8005b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005af4:	671a      	str	r2, [r3, #112]	@ 0x70
 8005af6:	e009      	b.n	8005b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4b14      	ldr	r3, [pc, #80]	@ (8005b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	461a      	mov	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a11      	ldr	r2, [pc, #68]	@ (8005b50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b0a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	2201      	movs	r2, #1
 8005b12:	409a      	lsls	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005b18:	bf00      	nop
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	58025408 	.word	0x58025408
 8005b28:	5802541c 	.word	0x5802541c
 8005b2c:	58025430 	.word	0x58025430
 8005b30:	58025444 	.word	0x58025444
 8005b34:	58025458 	.word	0x58025458
 8005b38:	5802546c 	.word	0x5802546c
 8005b3c:	58025480 	.word	0x58025480
 8005b40:	58025494 	.word	0x58025494
 8005b44:	1600963f 	.word	0x1600963f
 8005b48:	58025940 	.word	0x58025940
 8005b4c:	1000823f 	.word	0x1000823f
 8005b50:	40020940 	.word	0x40020940

08005b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b089      	sub	sp, #36	@ 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005b62:	4b89      	ldr	r3, [pc, #548]	@ (8005d88 <HAL_GPIO_Init+0x234>)
 8005b64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b66:	e194      	b.n	8005e92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	fa01 f303 	lsl.w	r3, r1, r3
 8005b74:	4013      	ands	r3, r2
 8005b76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8186 	beq.w	8005e8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d005      	beq.n	8005b98 <HAL_GPIO_Init+0x44>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f003 0303 	and.w	r3, r3, #3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d130      	bne.n	8005bfa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	4013      	ands	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bce:	2201      	movs	r2, #1
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	f003 0201 	and.w	r2, r3, #1
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d017      	beq.n	8005c36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	2203      	movs	r2, #3
 8005c12:	fa02 f303 	lsl.w	r3, r2, r3
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	fa02 f303 	lsl.w	r3, r2, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d123      	bne.n	8005c8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	08da      	lsrs	r2, r3, #3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3208      	adds	r2, #8
 8005c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	220f      	movs	r2, #15
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4013      	ands	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	691a      	ldr	r2, [r3, #16]
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	fa02 f303 	lsl.w	r3, r2, r3
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	08da      	lsrs	r2, r3, #3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3208      	adds	r2, #8
 8005c84:	69b9      	ldr	r1, [r7, #24]
 8005c86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	2203      	movs	r2, #3
 8005c96:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f003 0203 	and.w	r2, r3, #3
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 80e0 	beq.w	8005e8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ccc:	4b2f      	ldr	r3, [pc, #188]	@ (8005d8c <HAL_GPIO_Init+0x238>)
 8005cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8005d8c <HAL_GPIO_Init+0x238>)
 8005cd4:	f043 0302 	orr.w	r3, r3, #2
 8005cd8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8005d8c <HAL_GPIO_Init+0x238>)
 8005cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cea:	4a29      	ldr	r2, [pc, #164]	@ (8005d90 <HAL_GPIO_Init+0x23c>)
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	089b      	lsrs	r3, r3, #2
 8005cf0:	3302      	adds	r3, #2
 8005cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	220f      	movs	r2, #15
 8005d02:	fa02 f303 	lsl.w	r3, r2, r3
 8005d06:	43db      	mvns	r3, r3
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a20      	ldr	r2, [pc, #128]	@ (8005d94 <HAL_GPIO_Init+0x240>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d052      	beq.n	8005dbc <HAL_GPIO_Init+0x268>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a1f      	ldr	r2, [pc, #124]	@ (8005d98 <HAL_GPIO_Init+0x244>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d031      	beq.n	8005d82 <HAL_GPIO_Init+0x22e>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a1e      	ldr	r2, [pc, #120]	@ (8005d9c <HAL_GPIO_Init+0x248>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d02b      	beq.n	8005d7e <HAL_GPIO_Init+0x22a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a1d      	ldr	r2, [pc, #116]	@ (8005da0 <HAL_GPIO_Init+0x24c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d025      	beq.n	8005d7a <HAL_GPIO_Init+0x226>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a1c      	ldr	r2, [pc, #112]	@ (8005da4 <HAL_GPIO_Init+0x250>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01f      	beq.n	8005d76 <HAL_GPIO_Init+0x222>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a1b      	ldr	r2, [pc, #108]	@ (8005da8 <HAL_GPIO_Init+0x254>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d019      	beq.n	8005d72 <HAL_GPIO_Init+0x21e>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a1a      	ldr	r2, [pc, #104]	@ (8005dac <HAL_GPIO_Init+0x258>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_GPIO_Init+0x21a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a19      	ldr	r2, [pc, #100]	@ (8005db0 <HAL_GPIO_Init+0x25c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00d      	beq.n	8005d6a <HAL_GPIO_Init+0x216>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a18      	ldr	r2, [pc, #96]	@ (8005db4 <HAL_GPIO_Init+0x260>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <HAL_GPIO_Init+0x212>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <HAL_GPIO_Init+0x264>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d101      	bne.n	8005d62 <HAL_GPIO_Init+0x20e>
 8005d5e:	2309      	movs	r3, #9
 8005d60:	e02d      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d62:	230a      	movs	r3, #10
 8005d64:	e02b      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d66:	2308      	movs	r3, #8
 8005d68:	e029      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d6a:	2307      	movs	r3, #7
 8005d6c:	e027      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d6e:	2306      	movs	r3, #6
 8005d70:	e025      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d72:	2305      	movs	r3, #5
 8005d74:	e023      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d76:	2304      	movs	r3, #4
 8005d78:	e021      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e01f      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e01d      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e01b      	b.n	8005dbe <HAL_GPIO_Init+0x26a>
 8005d86:	bf00      	nop
 8005d88:	58000080 	.word	0x58000080
 8005d8c:	58024400 	.word	0x58024400
 8005d90:	58000400 	.word	0x58000400
 8005d94:	58020000 	.word	0x58020000
 8005d98:	58020400 	.word	0x58020400
 8005d9c:	58020800 	.word	0x58020800
 8005da0:	58020c00 	.word	0x58020c00
 8005da4:	58021000 	.word	0x58021000
 8005da8:	58021400 	.word	0x58021400
 8005dac:	58021800 	.word	0x58021800
 8005db0:	58021c00 	.word	0x58021c00
 8005db4:	58022000 	.word	0x58022000
 8005db8:	58022400 	.word	0x58022400
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	f002 0203 	and.w	r2, r2, #3
 8005dc4:	0092      	lsls	r2, r2, #2
 8005dc6:	4093      	lsls	r3, r2
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005dce:	4938      	ldr	r1, [pc, #224]	@ (8005eb0 <HAL_GPIO_Init+0x35c>)
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	089b      	lsrs	r3, r3, #2
 8005dd4:	3302      	adds	r3, #2
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	43db      	mvns	r3, r3
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	4013      	ands	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e02:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	43db      	mvns	r3, r3
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f47f ae63 	bne.w	8005b68 <HAL_GPIO_Init+0x14>
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	3724      	adds	r7, #36	@ 0x24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	58000400 	.word	0x58000400

08005eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ec4:	787b      	ldrb	r3, [r7, #1]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005eca:	887a      	ldrh	r2, [r7, #2]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005ed0:	e003      	b.n	8005eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005ed2:	887b      	ldrh	r3, [r7, #2]
 8005ed4:	041a      	lsls	r2, r3, #16
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	619a      	str	r2, [r3, #24]
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ef0:	4b19      	ldr	r3, [pc, #100]	@ (8005f58 <HAL_PWREx_ConfigSupply+0x70>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b04      	cmp	r3, #4
 8005efa:	d00a      	beq.n	8005f12 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005efc:	4b16      	ldr	r3, [pc, #88]	@ (8005f58 <HAL_PWREx_ConfigSupply+0x70>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d001      	beq.n	8005f0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e01f      	b.n	8005f4e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e01d      	b.n	8005f4e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f12:	4b11      	ldr	r3, [pc, #68]	@ (8005f58 <HAL_PWREx_ConfigSupply+0x70>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f023 0207 	bic.w	r2, r3, #7
 8005f1a:	490f      	ldr	r1, [pc, #60]	@ (8005f58 <HAL_PWREx_ConfigSupply+0x70>)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f22:	f7fc fe83 	bl	8002c2c <HAL_GetTick>
 8005f26:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f28:	e009      	b.n	8005f3e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f2a:	f7fc fe7f 	bl	8002c2c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f38:	d901      	bls.n	8005f3e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e007      	b.n	8005f4e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f3e:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <HAL_PWREx_ConfigSupply+0x70>)
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f4a:	d1ee      	bne.n	8005f2a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	58024800 	.word	0x58024800

08005f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	@ 0x30
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d102      	bne.n	8005f70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f000 bc48 	b.w	8006800 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8088 	beq.w	800608e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f7e:	4b99      	ldr	r3, [pc, #612]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f88:	4b96      	ldr	r3, [pc, #600]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d007      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x48>
 8005f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f96:	2b18      	cmp	r3, #24
 8005f98:	d111      	bne.n	8005fbe <HAL_RCC_OscConfig+0x62>
 8005f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d10c      	bne.n	8005fbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d06d      	beq.n	800608c <HAL_RCC_OscConfig+0x130>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d169      	bne.n	800608c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f000 bc21 	b.w	8006800 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fc6:	d106      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x7a>
 8005fc8:	4b86      	ldr	r3, [pc, #536]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a85      	ldr	r2, [pc, #532]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8005fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	e02e      	b.n	8006034 <HAL_RCC_OscConfig+0xd8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10c      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x9c>
 8005fde:	4b81      	ldr	r3, [pc, #516]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a80      	ldr	r2, [pc, #512]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8005fe4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	4b7e      	ldr	r3, [pc, #504]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a7d      	ldr	r2, [pc, #500]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8005ff0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	e01d      	b.n	8006034 <HAL_RCC_OscConfig+0xd8>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006000:	d10c      	bne.n	800601c <HAL_RCC_OscConfig+0xc0>
 8006002:	4b78      	ldr	r3, [pc, #480]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a77      	ldr	r2, [pc, #476]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	4b75      	ldr	r3, [pc, #468]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a74      	ldr	r2, [pc, #464]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	e00b      	b.n	8006034 <HAL_RCC_OscConfig+0xd8>
 800601c:	4b71      	ldr	r3, [pc, #452]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a70      	ldr	r2, [pc, #448]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006026:	6013      	str	r3, [r2, #0]
 8006028:	4b6e      	ldr	r3, [pc, #440]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a6d      	ldr	r2, [pc, #436]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 800602e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d013      	beq.n	8006064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603c:	f7fc fdf6 	bl	8002c2c <HAL_GetTick>
 8006040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006042:	e008      	b.n	8006056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006044:	f7fc fdf2 	bl	8002c2c <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	2b64      	cmp	r3, #100	@ 0x64
 8006050:	d901      	bls.n	8006056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e3d4      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006056:	4b63      	ldr	r3, [pc, #396]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f0      	beq.n	8006044 <HAL_RCC_OscConfig+0xe8>
 8006062:	e014      	b.n	800608e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006064:	f7fc fde2 	bl	8002c2c <HAL_GetTick>
 8006068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800606a:	e008      	b.n	800607e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800606c:	f7fc fdde 	bl	8002c2c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b64      	cmp	r3, #100	@ 0x64
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e3c0      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800607e:	4b59      	ldr	r3, [pc, #356]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1f0      	bne.n	800606c <HAL_RCC_OscConfig+0x110>
 800608a:	e000      	b.n	800608e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800608c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 80ca 	beq.w	8006230 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800609c:	4b51      	ldr	r3, [pc, #324]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060a6:	4b4f      	ldr	r3, [pc, #316]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 80060a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <HAL_RCC_OscConfig+0x166>
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	2b18      	cmp	r3, #24
 80060b6:	d156      	bne.n	8006166 <HAL_RCC_OscConfig+0x20a>
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f003 0303 	and.w	r3, r3, #3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d151      	bne.n	8006166 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060c2:	4b48      	ldr	r3, [pc, #288]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_RCC_OscConfig+0x17e>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e392      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060da:	4b42      	ldr	r3, [pc, #264]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f023 0219 	bic.w	r2, r3, #25
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	493f      	ldr	r1, [pc, #252]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fc fd9e 	bl	8002c2c <HAL_GetTick>
 80060f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f4:	f7fc fd9a 	bl	8002c2c <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e37c      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006106:	4b37      	ldr	r3, [pc, #220]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0304 	and.w	r3, r3, #4
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006112:	f7fc fdbb 	bl	8002c8c <HAL_GetREVID>
 8006116:	4603      	mov	r3, r0
 8006118:	f241 0203 	movw	r2, #4099	@ 0x1003
 800611c:	4293      	cmp	r3, r2
 800611e:	d817      	bhi.n	8006150 <HAL_RCC_OscConfig+0x1f4>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	2b40      	cmp	r3, #64	@ 0x40
 8006126:	d108      	bne.n	800613a <HAL_RCC_OscConfig+0x1de>
 8006128:	4b2e      	ldr	r3, [pc, #184]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006130:	4a2c      	ldr	r2, [pc, #176]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006136:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006138:	e07a      	b.n	8006230 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613a:	4b2a      	ldr	r3, [pc, #168]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	031b      	lsls	r3, r3, #12
 8006148:	4926      	ldr	r1, [pc, #152]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 800614a:	4313      	orrs	r3, r2
 800614c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800614e:	e06f      	b.n	8006230 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006150:	4b24      	ldr	r3, [pc, #144]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	061b      	lsls	r3, r3, #24
 800615e:	4921      	ldr	r1, [pc, #132]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006160:	4313      	orrs	r3, r2
 8006162:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006164:	e064      	b.n	8006230 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d047      	beq.n	80061fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800616e:	4b1d      	ldr	r3, [pc, #116]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f023 0219 	bic.w	r2, r3, #25
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	491a      	ldr	r1, [pc, #104]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 800617c:	4313      	orrs	r3, r2
 800617e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fc fd54 	bl	8002c2c <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006188:	f7fc fd50 	bl	8002c2c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e332      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800619a:	4b12      	ldr	r3, [pc, #72]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a6:	f7fc fd71 	bl	8002c8c <HAL_GetREVID>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d819      	bhi.n	80061e8 <HAL_RCC_OscConfig+0x28c>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b40      	cmp	r3, #64	@ 0x40
 80061ba:	d108      	bne.n	80061ce <HAL_RCC_OscConfig+0x272>
 80061bc:	4b09      	ldr	r3, [pc, #36]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80061c4:	4a07      	ldr	r2, [pc, #28]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 80061c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061ca:	6053      	str	r3, [r2, #4]
 80061cc:	e030      	b.n	8006230 <HAL_RCC_OscConfig+0x2d4>
 80061ce:	4b05      	ldr	r3, [pc, #20]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	031b      	lsls	r3, r3, #12
 80061dc:	4901      	ldr	r1, [pc, #4]	@ (80061e4 <HAL_RCC_OscConfig+0x288>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	604b      	str	r3, [r1, #4]
 80061e2:	e025      	b.n	8006230 <HAL_RCC_OscConfig+0x2d4>
 80061e4:	58024400 	.word	0x58024400
 80061e8:	4b9a      	ldr	r3, [pc, #616]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	061b      	lsls	r3, r3, #24
 80061f6:	4997      	ldr	r1, [pc, #604]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	604b      	str	r3, [r1, #4]
 80061fc:	e018      	b.n	8006230 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061fe:	4b95      	ldr	r3, [pc, #596]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a94      	ldr	r2, [pc, #592]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006204:	f023 0301 	bic.w	r3, r3, #1
 8006208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800620a:	f7fc fd0f 	bl	8002c2c <HAL_GetTick>
 800620e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006210:	e008      	b.n	8006224 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006212:	f7fc fd0b 	bl	8002c2c <HAL_GetTick>
 8006216:	4602      	mov	r2, r0
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	2b02      	cmp	r3, #2
 800621e:	d901      	bls.n	8006224 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006220:	2303      	movs	r3, #3
 8006222:	e2ed      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006224:	4b8b      	ldr	r3, [pc, #556]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1f0      	bne.n	8006212 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80a9 	beq.w	8006390 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800623e:	4b85      	ldr	r3, [pc, #532]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006246:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006248:	4b82      	ldr	r3, [pc, #520]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 800624a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d007      	beq.n	8006264 <HAL_RCC_OscConfig+0x308>
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b18      	cmp	r3, #24
 8006258:	d13a      	bne.n	80062d0 <HAL_RCC_OscConfig+0x374>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d135      	bne.n	80062d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006264:	4b7b      	ldr	r3, [pc, #492]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <HAL_RCC_OscConfig+0x320>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	2b80      	cmp	r3, #128	@ 0x80
 8006276:	d001      	beq.n	800627c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e2c1      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800627c:	f7fc fd06 	bl	8002c8c <HAL_GetREVID>
 8006280:	4603      	mov	r3, r0
 8006282:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006286:	4293      	cmp	r3, r2
 8006288:	d817      	bhi.n	80062ba <HAL_RCC_OscConfig+0x35e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	2b20      	cmp	r3, #32
 8006290:	d108      	bne.n	80062a4 <HAL_RCC_OscConfig+0x348>
 8006292:	4b70      	ldr	r3, [pc, #448]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800629a:	4a6e      	ldr	r2, [pc, #440]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 800629c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062a2:	e075      	b.n	8006390 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062a4:	4b6b      	ldr	r3, [pc, #428]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	069b      	lsls	r3, r3, #26
 80062b2:	4968      	ldr	r1, [pc, #416]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062b8:	e06a      	b.n	8006390 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062ba:	4b66      	ldr	r3, [pc, #408]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	061b      	lsls	r3, r3, #24
 80062c8:	4962      	ldr	r1, [pc, #392]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062ce:	e05f      	b.n	8006390 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d042      	beq.n	800635e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80062d8:	4b5e      	ldr	r3, [pc, #376]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a5d      	ldr	r2, [pc, #372]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80062de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e4:	f7fc fca2 	bl	8002c2c <HAL_GetTick>
 80062e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062ec:	f7fc fc9e 	bl	8002c2c <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e280      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80062fe:	4b55      	ldr	r3, [pc, #340]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0f0      	beq.n	80062ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800630a:	f7fc fcbf 	bl	8002c8c <HAL_GetREVID>
 800630e:	4603      	mov	r3, r0
 8006310:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006314:	4293      	cmp	r3, r2
 8006316:	d817      	bhi.n	8006348 <HAL_RCC_OscConfig+0x3ec>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	2b20      	cmp	r3, #32
 800631e:	d108      	bne.n	8006332 <HAL_RCC_OscConfig+0x3d6>
 8006320:	4b4c      	ldr	r3, [pc, #304]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006328:	4a4a      	ldr	r2, [pc, #296]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 800632a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800632e:	6053      	str	r3, [r2, #4]
 8006330:	e02e      	b.n	8006390 <HAL_RCC_OscConfig+0x434>
 8006332:	4b48      	ldr	r3, [pc, #288]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	069b      	lsls	r3, r3, #26
 8006340:	4944      	ldr	r1, [pc, #272]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]
 8006346:	e023      	b.n	8006390 <HAL_RCC_OscConfig+0x434>
 8006348:	4b42      	ldr	r3, [pc, #264]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	493f      	ldr	r1, [pc, #252]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006358:	4313      	orrs	r3, r2
 800635a:	60cb      	str	r3, [r1, #12]
 800635c:	e018      	b.n	8006390 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800635e:	4b3d      	ldr	r3, [pc, #244]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a3c      	ldr	r2, [pc, #240]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006368:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636a:	f7fc fc5f 	bl	8002c2c <HAL_GetTick>
 800636e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006370:	e008      	b.n	8006384 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006372:	f7fc fc5b 	bl	8002c2c <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b02      	cmp	r3, #2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e23d      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006384:	4b33      	ldr	r3, [pc, #204]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1f0      	bne.n	8006372 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d036      	beq.n	800640a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d019      	beq.n	80063d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80063a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80063aa:	f043 0301 	orr.w	r3, r3, #1
 80063ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b0:	f7fc fc3c 	bl	8002c2c <HAL_GetTick>
 80063b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063b8:	f7fc fc38 	bl	8002c2c <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e21a      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063ca:	4b22      	ldr	r3, [pc, #136]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80063cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f0      	beq.n	80063b8 <HAL_RCC_OscConfig+0x45c>
 80063d6:	e018      	b.n	800640a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063d8:	4b1e      	ldr	r3, [pc, #120]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80063da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 80063de:	f023 0301 	bic.w	r3, r3, #1
 80063e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e4:	f7fc fc22 	bl	8002c2c <HAL_GetTick>
 80063e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ec:	f7fc fc1e 	bl	8002c2c <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e200      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063fe:	4b15      	ldr	r3, [pc, #84]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d039      	beq.n	800648a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01c      	beq.n	8006458 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800641e:	4b0d      	ldr	r3, [pc, #52]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a0c      	ldr	r2, [pc, #48]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006428:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800642a:	f7fc fbff 	bl	8002c2c <HAL_GetTick>
 800642e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006432:	f7fc fbfb 	bl	8002c2c <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e1dd      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006444:	4b03      	ldr	r3, [pc, #12]	@ (8006454 <HAL_RCC_OscConfig+0x4f8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x4d6>
 8006450:	e01b      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
 8006452:	bf00      	nop
 8006454:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006458:	4b9b      	ldr	r3, [pc, #620]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a9a      	ldr	r2, [pc, #616]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800645e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006462:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006464:	f7fc fbe2 	bl	8002c2c <HAL_GetTick>
 8006468:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800646c:	f7fc fbde 	bl	8002c2c <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e1c0      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800647e:	4b92      	ldr	r3, [pc, #584]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f0      	bne.n	800646c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8081 	beq.w	800659a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006498:	4b8c      	ldr	r3, [pc, #560]	@ (80066cc <HAL_RCC_OscConfig+0x770>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a8b      	ldr	r2, [pc, #556]	@ (80066cc <HAL_RCC_OscConfig+0x770>)
 800649e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064a4:	f7fc fbc2 	bl	8002c2c <HAL_GetTick>
 80064a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ac:	f7fc fbbe 	bl	8002c2c <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b64      	cmp	r3, #100	@ 0x64
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e1a0      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064be:	4b83      	ldr	r3, [pc, #524]	@ (80066cc <HAL_RCC_OscConfig+0x770>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d106      	bne.n	80064e0 <HAL_RCC_OscConfig+0x584>
 80064d2:	4b7d      	ldr	r3, [pc, #500]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d6:	4a7c      	ldr	r2, [pc, #496]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80064d8:	f043 0301 	orr.w	r3, r3, #1
 80064dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064de:	e02d      	b.n	800653c <HAL_RCC_OscConfig+0x5e0>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10c      	bne.n	8006502 <HAL_RCC_OscConfig+0x5a6>
 80064e8:	4b77      	ldr	r3, [pc, #476]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ec:	4a76      	ldr	r2, [pc, #472]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80064ee:	f023 0301 	bic.w	r3, r3, #1
 80064f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80064f4:	4b74      	ldr	r3, [pc, #464]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f8:	4a73      	ldr	r2, [pc, #460]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80064fa:	f023 0304 	bic.w	r3, r3, #4
 80064fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006500:	e01c      	b.n	800653c <HAL_RCC_OscConfig+0x5e0>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	2b05      	cmp	r3, #5
 8006508:	d10c      	bne.n	8006524 <HAL_RCC_OscConfig+0x5c8>
 800650a:	4b6f      	ldr	r3, [pc, #444]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800650c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650e:	4a6e      	ldr	r2, [pc, #440]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006510:	f043 0304 	orr.w	r3, r3, #4
 8006514:	6713      	str	r3, [r2, #112]	@ 0x70
 8006516:	4b6c      	ldr	r3, [pc, #432]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651a:	4a6b      	ldr	r2, [pc, #428]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800651c:	f043 0301 	orr.w	r3, r3, #1
 8006520:	6713      	str	r3, [r2, #112]	@ 0x70
 8006522:	e00b      	b.n	800653c <HAL_RCC_OscConfig+0x5e0>
 8006524:	4b68      	ldr	r3, [pc, #416]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006528:	4a67      	ldr	r2, [pc, #412]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800652a:	f023 0301 	bic.w	r3, r3, #1
 800652e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006530:	4b65      	ldr	r3, [pc, #404]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006534:	4a64      	ldr	r2, [pc, #400]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006536:	f023 0304 	bic.w	r3, r3, #4
 800653a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d015      	beq.n	8006570 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006544:	f7fc fb72 	bl	8002c2c <HAL_GetTick>
 8006548:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800654a:	e00a      	b.n	8006562 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654c:	f7fc fb6e 	bl	8002c2c <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655a:	4293      	cmp	r3, r2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e14e      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006562:	4b59      	ldr	r3, [pc, #356]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0ee      	beq.n	800654c <HAL_RCC_OscConfig+0x5f0>
 800656e:	e014      	b.n	800659a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006570:	f7fc fb5c 	bl	8002c2c <HAL_GetTick>
 8006574:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006576:	e00a      	b.n	800658e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006578:	f7fc fb58 	bl	8002c2c <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006586:	4293      	cmp	r3, r2
 8006588:	d901      	bls.n	800658e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e138      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800658e:	4b4e      	ldr	r3, [pc, #312]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1ee      	bne.n	8006578 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 812d 	beq.w	80067fe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065a4:	4b48      	ldr	r3, [pc, #288]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065ac:	2b18      	cmp	r3, #24
 80065ae:	f000 80bd 	beq.w	800672c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	f040 809e 	bne.w	80066f8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065bc:	4b42      	ldr	r3, [pc, #264]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a41      	ldr	r2, [pc, #260]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80065c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065c8:	f7fc fb30 	bl	8002c2c <HAL_GetTick>
 80065cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065d0:	f7fc fb2c 	bl	8002c2c <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e10e      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80065e2:	4b39      	ldr	r3, [pc, #228]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065ee:	4b36      	ldr	r3, [pc, #216]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80065f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065f2:	4b37      	ldr	r3, [pc, #220]	@ (80066d0 <HAL_RCC_OscConfig+0x774>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065fe:	0112      	lsls	r2, r2, #4
 8006600:	430a      	orrs	r2, r1
 8006602:	4931      	ldr	r1, [pc, #196]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006604:	4313      	orrs	r3, r2
 8006606:	628b      	str	r3, [r1, #40]	@ 0x28
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660c:	3b01      	subs	r3, #1
 800660e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006616:	3b01      	subs	r3, #1
 8006618:	025b      	lsls	r3, r3, #9
 800661a:	b29b      	uxth	r3, r3
 800661c:	431a      	orrs	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006622:	3b01      	subs	r3, #1
 8006624:	041b      	lsls	r3, r3, #16
 8006626:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800662a:	431a      	orrs	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006630:	3b01      	subs	r3, #1
 8006632:	061b      	lsls	r3, r3, #24
 8006634:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006638:	4923      	ldr	r1, [pc, #140]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800663a:	4313      	orrs	r3, r2
 800663c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800663e:	4b22      	ldr	r3, [pc, #136]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006642:	4a21      	ldr	r2, [pc, #132]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006644:	f023 0301 	bic.w	r3, r3, #1
 8006648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800664a:	4b1f      	ldr	r3, [pc, #124]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800664c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800664e:	4b21      	ldr	r3, [pc, #132]	@ (80066d4 <HAL_RCC_OscConfig+0x778>)
 8006650:	4013      	ands	r3, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006656:	00d2      	lsls	r2, r2, #3
 8006658:	491b      	ldr	r1, [pc, #108]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800665a:	4313      	orrs	r3, r2
 800665c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800665e:	4b1a      	ldr	r3, [pc, #104]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006662:	f023 020c 	bic.w	r2, r3, #12
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666a:	4917      	ldr	r1, [pc, #92]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800666c:	4313      	orrs	r3, r2
 800666e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006670:	4b15      	ldr	r3, [pc, #84]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006674:	f023 0202 	bic.w	r2, r3, #2
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667c:	4912      	ldr	r1, [pc, #72]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800667e:	4313      	orrs	r3, r2
 8006680:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006682:	4b11      	ldr	r3, [pc, #68]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	4a10      	ldr	r2, [pc, #64]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800668c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800668e:	4b0e      	ldr	r3, [pc, #56]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	4a0d      	ldr	r2, [pc, #52]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 8006694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006698:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800669a:	4b0b      	ldr	r3, [pc, #44]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 800669c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669e:	4a0a      	ldr	r2, [pc, #40]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80066a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80066a6:	4b08      	ldr	r3, [pc, #32]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066aa:	4a07      	ldr	r2, [pc, #28]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80066ac:	f043 0301 	orr.w	r3, r3, #1
 80066b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066b2:	4b05      	ldr	r3, [pc, #20]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a04      	ldr	r2, [pc, #16]	@ (80066c8 <HAL_RCC_OscConfig+0x76c>)
 80066b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fc fab5 	bl	8002c2c <HAL_GetTick>
 80066c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066c4:	e011      	b.n	80066ea <HAL_RCC_OscConfig+0x78e>
 80066c6:	bf00      	nop
 80066c8:	58024400 	.word	0x58024400
 80066cc:	58024800 	.word	0x58024800
 80066d0:	fffffc0c 	.word	0xfffffc0c
 80066d4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d8:	f7fc faa8 	bl	8002c2c <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e08a      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066ea:	4b47      	ldr	r3, [pc, #284]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0f0      	beq.n	80066d8 <HAL_RCC_OscConfig+0x77c>
 80066f6:	e082      	b.n	80067fe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f8:	4b43      	ldr	r3, [pc, #268]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a42      	ldr	r2, [pc, #264]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80066fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006704:	f7fc fa92 	bl	8002c2c <HAL_GetTick>
 8006708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800670a:	e008      	b.n	800671e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800670c:	f7fc fa8e 	bl	8002c2c <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b02      	cmp	r3, #2
 8006718:	d901      	bls.n	800671e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e070      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800671e:	4b3a      	ldr	r3, [pc, #232]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1f0      	bne.n	800670c <HAL_RCC_OscConfig+0x7b0>
 800672a:	e068      	b.n	80067fe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800672c:	4b36      	ldr	r3, [pc, #216]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 800672e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006730:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006732:	4b35      	ldr	r3, [pc, #212]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006736:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	2b01      	cmp	r3, #1
 800673e:	d031      	beq.n	80067a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	f003 0203 	and.w	r2, r3, #3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800674a:	429a      	cmp	r2, r3
 800674c:	d12a      	bne.n	80067a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	091b      	lsrs	r3, r3, #4
 8006752:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800675a:	429a      	cmp	r2, r3
 800675c:	d122      	bne.n	80067a4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006768:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800676a:	429a      	cmp	r2, r3
 800676c:	d11a      	bne.n	80067a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	0a5b      	lsrs	r3, r3, #9
 8006772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800677a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800677c:	429a      	cmp	r2, r3
 800677e:	d111      	bne.n	80067a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	0c1b      	lsrs	r3, r3, #16
 8006784:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800678e:	429a      	cmp	r2, r3
 8006790:	d108      	bne.n	80067a4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	0e1b      	lsrs	r3, r3, #24
 8006796:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800679e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d001      	beq.n	80067a8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e02b      	b.n	8006800 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80067a8:	4b17      	ldr	r3, [pc, #92]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80067aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ac:	08db      	lsrs	r3, r3, #3
 80067ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067b2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d01f      	beq.n	80067fe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80067be:	4b12      	ldr	r3, [pc, #72]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80067c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c2:	4a11      	ldr	r2, [pc, #68]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067ca:	f7fc fa2f 	bl	8002c2c <HAL_GetTick>
 80067ce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80067d0:	bf00      	nop
 80067d2:	f7fc fa2b 	bl	8002c2c <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	4293      	cmp	r3, r2
 80067dc:	d0f9      	beq.n	80067d2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067de:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80067e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e2:	4b0a      	ldr	r3, [pc, #40]	@ (800680c <HAL_RCC_OscConfig+0x8b0>)
 80067e4:	4013      	ands	r3, r2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067ea:	00d2      	lsls	r2, r2, #3
 80067ec:	4906      	ldr	r1, [pc, #24]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80067f2:	4b05      	ldr	r3, [pc, #20]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80067f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f6:	4a04      	ldr	r2, [pc, #16]	@ (8006808 <HAL_RCC_OscConfig+0x8ac>)
 80067f8:	f043 0301 	orr.w	r3, r3, #1
 80067fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3730      	adds	r7, #48	@ 0x30
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	58024400 	.word	0x58024400
 800680c:	ffff0007 	.word	0xffff0007

08006810 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e19c      	b.n	8006b5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006824:	4b8a      	ldr	r3, [pc, #552]	@ (8006a50 <HAL_RCC_ClockConfig+0x240>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d910      	bls.n	8006854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006832:	4b87      	ldr	r3, [pc, #540]	@ (8006a50 <HAL_RCC_ClockConfig+0x240>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 020f 	bic.w	r2, r3, #15
 800683a:	4985      	ldr	r1, [pc, #532]	@ (8006a50 <HAL_RCC_ClockConfig+0x240>)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	4313      	orrs	r3, r2
 8006840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006842:	4b83      	ldr	r3, [pc, #524]	@ (8006a50 <HAL_RCC_ClockConfig+0x240>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d001      	beq.n	8006854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e184      	b.n	8006b5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d010      	beq.n	8006882 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	4b7b      	ldr	r3, [pc, #492]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800686c:	429a      	cmp	r2, r3
 800686e:	d908      	bls.n	8006882 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006870:	4b78      	ldr	r3, [pc, #480]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	4975      	ldr	r1, [pc, #468]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 800687e:	4313      	orrs	r3, r2
 8006880:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0308 	and.w	r3, r3, #8
 800688a:	2b00      	cmp	r3, #0
 800688c:	d010      	beq.n	80068b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	695a      	ldr	r2, [r3, #20]
 8006892:	4b70      	ldr	r3, [pc, #448]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800689a:	429a      	cmp	r2, r3
 800689c:	d908      	bls.n	80068b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800689e:	4b6d      	ldr	r3, [pc, #436]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	496a      	ldr	r1, [pc, #424]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d010      	beq.n	80068de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	4b64      	ldr	r3, [pc, #400]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d908      	bls.n	80068de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068cc:	4b61      	ldr	r3, [pc, #388]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	495e      	ldr	r1, [pc, #376]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d010      	beq.n	800690c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69da      	ldr	r2, [r3, #28]
 80068ee:	4b59      	ldr	r3, [pc, #356]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d908      	bls.n	800690c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068fa:	4b56      	ldr	r3, [pc, #344]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	4953      	ldr	r1, [pc, #332]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006908:	4313      	orrs	r3, r2
 800690a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d010      	beq.n	800693a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	4b4d      	ldr	r3, [pc, #308]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	429a      	cmp	r2, r3
 8006926:	d908      	bls.n	800693a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006928:	4b4a      	ldr	r3, [pc, #296]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f023 020f 	bic.w	r2, r3, #15
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4947      	ldr	r1, [pc, #284]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006936:	4313      	orrs	r3, r2
 8006938:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d055      	beq.n	80069f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006946:	4b43      	ldr	r3, [pc, #268]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	4940      	ldr	r1, [pc, #256]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006954:	4313      	orrs	r3, r2
 8006956:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d107      	bne.n	8006970 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006960:	4b3c      	ldr	r3, [pc, #240]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d121      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0f6      	b.n	8006b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b03      	cmp	r3, #3
 8006976:	d107      	bne.n	8006988 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006978:	4b36      	ldr	r3, [pc, #216]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d115      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e0ea      	b.n	8006b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d107      	bne.n	80069a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006990:	4b30      	ldr	r3, [pc, #192]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e0de      	b.n	8006b5e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0d6      	b.n	8006b5e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80069b0:	4b28      	ldr	r3, [pc, #160]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f023 0207 	bic.w	r2, r3, #7
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4925      	ldr	r1, [pc, #148]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c2:	f7fc f933 	bl	8002c2c <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c8:	e00a      	b.n	80069e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ca:	f7fc f92f 	bl	8002c2c <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e0be      	b.n	8006b5e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d1eb      	bne.n	80069ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d010      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	4b14      	ldr	r3, [pc, #80]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d208      	bcs.n	8006a20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a0e:	4b11      	ldr	r3, [pc, #68]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f023 020f 	bic.w	r2, r3, #15
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	490e      	ldr	r1, [pc, #56]	@ (8006a54 <HAL_RCC_ClockConfig+0x244>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a20:	4b0b      	ldr	r3, [pc, #44]	@ (8006a50 <HAL_RCC_ClockConfig+0x240>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 030f 	and.w	r3, r3, #15
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d214      	bcs.n	8006a58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a2e:	4b08      	ldr	r3, [pc, #32]	@ (8006a50 <HAL_RCC_ClockConfig+0x240>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f023 020f 	bic.w	r2, r3, #15
 8006a36:	4906      	ldr	r1, [pc, #24]	@ (8006a50 <HAL_RCC_ClockConfig+0x240>)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a3e:	4b04      	ldr	r3, [pc, #16]	@ (8006a50 <HAL_RCC_ClockConfig+0x240>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d005      	beq.n	8006a58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e086      	b.n	8006b5e <HAL_RCC_ClockConfig+0x34e>
 8006a50:	52002000 	.word	0x52002000
 8006a54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d010      	beq.n	8006a86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	4b3f      	ldr	r3, [pc, #252]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d208      	bcs.n	8006a86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a74:	4b3c      	ldr	r3, [pc, #240]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	4939      	ldr	r1, [pc, #228]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006a82:	4313      	orrs	r3, r2
 8006a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0308 	and.w	r3, r3, #8
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d010      	beq.n	8006ab4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	4b34      	ldr	r3, [pc, #208]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d208      	bcs.n	8006ab4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006aa2:	4b31      	ldr	r3, [pc, #196]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	492e      	ldr	r1, [pc, #184]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d010      	beq.n	8006ae2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699a      	ldr	r2, [r3, #24]
 8006ac4:	4b28      	ldr	r3, [pc, #160]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d208      	bcs.n	8006ae2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ad0:	4b25      	ldr	r3, [pc, #148]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	4922      	ldr	r1, [pc, #136]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d010      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	69da      	ldr	r2, [r3, #28]
 8006af2:	4b1d      	ldr	r3, [pc, #116]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d208      	bcs.n	8006b10 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006afe:	4b1a      	ldr	r3, [pc, #104]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69db      	ldr	r3, [r3, #28]
 8006b0a:	4917      	ldr	r1, [pc, #92]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b10:	f000 f834 	bl	8006b7c <HAL_RCC_GetSysClockFreq>
 8006b14:	4602      	mov	r2, r0
 8006b16:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	0a1b      	lsrs	r3, r3, #8
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	4912      	ldr	r1, [pc, #72]	@ (8006b6c <HAL_RCC_ClockConfig+0x35c>)
 8006b22:	5ccb      	ldrb	r3, [r1, r3]
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <HAL_RCC_ClockConfig+0x358>)
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	4a0d      	ldr	r2, [pc, #52]	@ (8006b6c <HAL_RCC_ClockConfig+0x35c>)
 8006b38:	5cd3      	ldrb	r3, [r2, r3]
 8006b3a:	f003 031f 	and.w	r3, r3, #31
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	fa22 f303 	lsr.w	r3, r2, r3
 8006b44:	4a0a      	ldr	r2, [pc, #40]	@ (8006b70 <HAL_RCC_ClockConfig+0x360>)
 8006b46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b48:	4a0a      	ldr	r2, [pc, #40]	@ (8006b74 <HAL_RCC_ClockConfig+0x364>)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <HAL_RCC_ClockConfig+0x368>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fc f820 	bl	8002b98 <HAL_InitTick>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	58024400 	.word	0x58024400
 8006b6c:	0800e648 	.word	0x0800e648
 8006b70:	2400000c 	.word	0x2400000c
 8006b74:	24000008 	.word	0x24000008
 8006b78:	24000010 	.word	0x24000010

08006b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b089      	sub	sp, #36	@ 0x24
 8006b80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b82:	4bb3      	ldr	r3, [pc, #716]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b8a:	2b18      	cmp	r3, #24
 8006b8c:	f200 8155 	bhi.w	8006e3a <HAL_RCC_GetSysClockFreq+0x2be>
 8006b90:	a201      	add	r2, pc, #4	@ (adr r2, 8006b98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b96:	bf00      	nop
 8006b98:	08006bfd 	.word	0x08006bfd
 8006b9c:	08006e3b 	.word	0x08006e3b
 8006ba0:	08006e3b 	.word	0x08006e3b
 8006ba4:	08006e3b 	.word	0x08006e3b
 8006ba8:	08006e3b 	.word	0x08006e3b
 8006bac:	08006e3b 	.word	0x08006e3b
 8006bb0:	08006e3b 	.word	0x08006e3b
 8006bb4:	08006e3b 	.word	0x08006e3b
 8006bb8:	08006c23 	.word	0x08006c23
 8006bbc:	08006e3b 	.word	0x08006e3b
 8006bc0:	08006e3b 	.word	0x08006e3b
 8006bc4:	08006e3b 	.word	0x08006e3b
 8006bc8:	08006e3b 	.word	0x08006e3b
 8006bcc:	08006e3b 	.word	0x08006e3b
 8006bd0:	08006e3b 	.word	0x08006e3b
 8006bd4:	08006e3b 	.word	0x08006e3b
 8006bd8:	08006c29 	.word	0x08006c29
 8006bdc:	08006e3b 	.word	0x08006e3b
 8006be0:	08006e3b 	.word	0x08006e3b
 8006be4:	08006e3b 	.word	0x08006e3b
 8006be8:	08006e3b 	.word	0x08006e3b
 8006bec:	08006e3b 	.word	0x08006e3b
 8006bf0:	08006e3b 	.word	0x08006e3b
 8006bf4:	08006e3b 	.word	0x08006e3b
 8006bf8:	08006c2f 	.word	0x08006c2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bfc:	4b94      	ldr	r3, [pc, #592]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d009      	beq.n	8006c1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c08:	4b91      	ldr	r3, [pc, #580]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	08db      	lsrs	r3, r3, #3
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	4a90      	ldr	r2, [pc, #576]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c14:	fa22 f303 	lsr.w	r3, r2, r3
 8006c18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006c1a:	e111      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c1c:	4b8d      	ldr	r3, [pc, #564]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006c1e:	61bb      	str	r3, [r7, #24]
      break;
 8006c20:	e10e      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006c22:	4b8d      	ldr	r3, [pc, #564]	@ (8006e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c24:	61bb      	str	r3, [r7, #24]
      break;
 8006c26:	e10b      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006c28:	4b8c      	ldr	r3, [pc, #560]	@ (8006e5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006c2a:	61bb      	str	r3, [r7, #24]
      break;
 8006c2c:	e108      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c2e:	4b88      	ldr	r3, [pc, #544]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006c38:	4b85      	ldr	r3, [pc, #532]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006c44:	4b82      	ldr	r3, [pc, #520]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006c4e:	4b80      	ldr	r3, [pc, #512]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c52:	08db      	lsrs	r3, r3, #3
 8006c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 80e1 	beq.w	8006e34 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	f000 8083 	beq.w	8006d80 <HAL_RCC_GetSysClockFreq+0x204>
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	f200 80a1 	bhi.w	8006dc4 <HAL_RCC_GetSysClockFreq+0x248>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_RCC_GetSysClockFreq+0x114>
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d056      	beq.n	8006d3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006c8e:	e099      	b.n	8006dc4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c90:	4b6f      	ldr	r3, [pc, #444]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d02d      	beq.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c9c:	4b6c      	ldr	r3, [pc, #432]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	08db      	lsrs	r3, r3, #3
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	4a6b      	ldr	r2, [pc, #428]	@ (8006e54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	ee07 3a90 	vmov	s15, r3
 8006cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc6:	4b62      	ldr	r3, [pc, #392]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006cf6:	e087      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006e64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0a:	4b51      	ldr	r3, [pc, #324]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d12:	ee07 3a90 	vmov	s15, r3
 8006d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d3a:	e065      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d4e:	4b40      	ldr	r3, [pc, #256]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d7e:	e043      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006e6c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d92:	4b2f      	ldr	r3, [pc, #188]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006da6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006dc2:	e021      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006e68 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dde:	ee07 3a90 	vmov	s15, r3
 8006de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006e60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e06:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006e08:	4b11      	ldr	r3, [pc, #68]	@ (8006e50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0c:	0a5b      	lsrs	r3, r3, #9
 8006e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e12:	3301      	adds	r3, #1
 8006e14:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	ee07 3a90 	vmov	s15, r3
 8006e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e2c:	ee17 3a90 	vmov	r3, s15
 8006e30:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006e32:	e005      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	61bb      	str	r3, [r7, #24]
      break;
 8006e38:	e002      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006e3a:	4b07      	ldr	r3, [pc, #28]	@ (8006e58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e3c:	61bb      	str	r3, [r7, #24]
      break;
 8006e3e:	bf00      	nop
  }

  return sysclockfreq;
 8006e40:	69bb      	ldr	r3, [r7, #24]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3724      	adds	r7, #36	@ 0x24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	58024400 	.word	0x58024400
 8006e54:	03d09000 	.word	0x03d09000
 8006e58:	003d0900 	.word	0x003d0900
 8006e5c:	007a1200 	.word	0x007a1200
 8006e60:	46000000 	.word	0x46000000
 8006e64:	4c742400 	.word	0x4c742400
 8006e68:	4a742400 	.word	0x4a742400
 8006e6c:	4af42400 	.word	0x4af42400

08006e70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e74:	b0ca      	sub	sp, #296	@ 0x128
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e82:	2300      	movs	r3, #0
 8006e84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e94:	2500      	movs	r5, #0
 8006e96:	ea54 0305 	orrs.w	r3, r4, r5
 8006e9a:	d049      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ea2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ea6:	d02f      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006ea8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006eac:	d828      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006eae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eb2:	d01a      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006eb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eb8:	d822      	bhi.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006ebe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ec2:	d007      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006ec4:	e01c      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec6:	4bb8      	ldr	r3, [pc, #736]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	4ab7      	ldr	r2, [pc, #732]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ecc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ed2:	e01a      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed8:	3308      	adds	r3, #8
 8006eda:	2102      	movs	r1, #2
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 f9d1 	bl	8008284 <RCCEx_PLL2_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ee8:	e00f      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eee:	3328      	adds	r3, #40	@ 0x28
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f001 fa78 	bl	80083e8 <RCCEx_PLL3_Config>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006efe:	e004      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f06:	e000      	b.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f12:	4ba5      	ldr	r3, [pc, #660]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f20:	4aa1      	ldr	r2, [pc, #644]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f22:	430b      	orrs	r3, r1
 8006f24:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f26:	e003      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f3c:	f04f 0900 	mov.w	r9, #0
 8006f40:	ea58 0309 	orrs.w	r3, r8, r9
 8006f44:	d047      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d82a      	bhi.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f50:	a201      	add	r2, pc, #4	@ (adr r2, 8006f58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f56:	bf00      	nop
 8006f58:	08006f6d 	.word	0x08006f6d
 8006f5c:	08006f7b 	.word	0x08006f7b
 8006f60:	08006f91 	.word	0x08006f91
 8006f64:	08006faf 	.word	0x08006faf
 8006f68:	08006faf 	.word	0x08006faf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6c:	4b8e      	ldr	r3, [pc, #568]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	4a8d      	ldr	r2, [pc, #564]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f78:	e01a      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f7e:	3308      	adds	r3, #8
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 f97e 	bl	8008284 <RCCEx_PLL2_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f8e:	e00f      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f94:	3328      	adds	r3, #40	@ 0x28
 8006f96:	2100      	movs	r1, #0
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 fa25 	bl	80083e8 <RCCEx_PLL3_Config>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fa4:	e004      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fac:	e000      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006fae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d10a      	bne.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fb8:	4b7b      	ldr	r3, [pc, #492]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fbc:	f023 0107 	bic.w	r1, r3, #7
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc6:	4a78      	ldr	r2, [pc, #480]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fcc:	e003      	b.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006fe2:	f04f 0b00 	mov.w	fp, #0
 8006fe6:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fea:	d04c      	beq.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff6:	d030      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ffc:	d829      	bhi.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ffe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007000:	d02d      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007002:	2bc0      	cmp	r3, #192	@ 0xc0
 8007004:	d825      	bhi.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007006:	2b80      	cmp	r3, #128	@ 0x80
 8007008:	d018      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800700a:	2b80      	cmp	r3, #128	@ 0x80
 800700c:	d821      	bhi.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d002      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007012:	2b40      	cmp	r3, #64	@ 0x40
 8007014:	d007      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007016:	e01c      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007018:	4b63      	ldr	r3, [pc, #396]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800701a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701c:	4a62      	ldr	r2, [pc, #392]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800701e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007024:	e01c      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702a:	3308      	adds	r3, #8
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f001 f928 	bl	8008284 <RCCEx_PLL2_Config>
 8007034:	4603      	mov	r3, r0
 8007036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800703a:	e011      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007040:	3328      	adds	r3, #40	@ 0x28
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f001 f9cf 	bl	80083e8 <RCCEx_PLL3_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007050:	e006      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007058:	e002      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800705a:	bf00      	nop
 800705c:	e000      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800705e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007060:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007068:	4b4f      	ldr	r3, [pc, #316]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800706a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800706c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007076:	4a4c      	ldr	r2, [pc, #304]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007078:	430b      	orrs	r3, r1
 800707a:	6513      	str	r3, [r2, #80]	@ 0x50
 800707c:	e003      	b.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007092:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007096:	2300      	movs	r3, #0
 8007098:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800709c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80070a0:	460b      	mov	r3, r1
 80070a2:	4313      	orrs	r3, r2
 80070a4:	d053      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80070a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070b2:	d035      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80070b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070b8:	d82e      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80070ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070be:	d031      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80070c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070c4:	d828      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80070c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070ca:	d01a      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80070cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070d0:	d822      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80070d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070da:	d007      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80070dc:	e01c      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070de:	4b32      	ldr	r3, [pc, #200]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e2:	4a31      	ldr	r2, [pc, #196]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070ea:	e01c      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f0:	3308      	adds	r3, #8
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 f8c5 	bl	8008284 <RCCEx_PLL2_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007100:	e011      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007106:	3328      	adds	r3, #40	@ 0x28
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f001 f96c 	bl	80083e8 <RCCEx_PLL3_Config>
 8007110:	4603      	mov	r3, r0
 8007112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007116:	e006      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800711e:	e002      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10b      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800712e:	4b1e      	ldr	r3, [pc, #120]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007132:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800713a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800713e:	4a1a      	ldr	r2, [pc, #104]	@ (80071a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007140:	430b      	orrs	r3, r1
 8007142:	6593      	str	r3, [r2, #88]	@ 0x58
 8007144:	e003      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800714a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800714e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007156:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800715a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800715e:	2300      	movs	r3, #0
 8007160:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007164:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007168:	460b      	mov	r3, r1
 800716a:	4313      	orrs	r3, r2
 800716c:	d056      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007172:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007176:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800717a:	d038      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800717c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007180:	d831      	bhi.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007182:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007186:	d034      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007188:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800718c:	d82b      	bhi.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800718e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007192:	d01d      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007194:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007198:	d825      	bhi.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d006      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800719e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071a2:	d00a      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80071a4:	e01f      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80071a6:	bf00      	nop
 80071a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ac:	4ba2      	ldr	r3, [pc, #648]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b0:	4aa1      	ldr	r2, [pc, #644]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071b8:	e01c      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071be:	3308      	adds	r3, #8
 80071c0:	2100      	movs	r1, #0
 80071c2:	4618      	mov	r0, r3
 80071c4:	f001 f85e 	bl	8008284 <RCCEx_PLL2_Config>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071ce:	e011      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d4:	3328      	adds	r3, #40	@ 0x28
 80071d6:	2100      	movs	r1, #0
 80071d8:	4618      	mov	r0, r3
 80071da:	f001 f905 	bl	80083e8 <RCCEx_PLL3_Config>
 80071de:	4603      	mov	r3, r0
 80071e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071e4:	e006      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071ec:	e002      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80071ee:	bf00      	nop
 80071f0:	e000      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80071f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10b      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071fc:	4b8e      	ldr	r3, [pc, #568]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007200:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007208:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800720c:	4a8a      	ldr	r2, [pc, #552]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800720e:	430b      	orrs	r3, r1
 8007210:	6593      	str	r3, [r2, #88]	@ 0x58
 8007212:	e003      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007228:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007232:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	d03a      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800723c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007242:	2b30      	cmp	r3, #48	@ 0x30
 8007244:	d01f      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007246:	2b30      	cmp	r3, #48	@ 0x30
 8007248:	d819      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800724a:	2b20      	cmp	r3, #32
 800724c:	d00c      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800724e:	2b20      	cmp	r3, #32
 8007250:	d815      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d019      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007256:	2b10      	cmp	r3, #16
 8007258:	d111      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800725a:	4b77      	ldr	r3, [pc, #476]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800725c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800725e:	4a76      	ldr	r2, [pc, #472]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007266:	e011      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726c:	3308      	adds	r3, #8
 800726e:	2102      	movs	r1, #2
 8007270:	4618      	mov	r0, r3
 8007272:	f001 f807 	bl	8008284 <RCCEx_PLL2_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800727c:	e006      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007284:	e002      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800728a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007294:	4b68      	ldr	r3, [pc, #416]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007298:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800729c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a2:	4a65      	ldr	r2, [pc, #404]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072a4:	430b      	orrs	r3, r1
 80072a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072a8:	e003      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80072be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072c2:	2300      	movs	r3, #0
 80072c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80072c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80072cc:	460b      	mov	r3, r1
 80072ce:	4313      	orrs	r3, r2
 80072d0:	d051      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072dc:	d035      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80072de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072e2:	d82e      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80072e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072e8:	d031      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80072ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072ee:	d828      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80072f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f4:	d01a      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80072f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072fa:	d822      	bhi.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007304:	d007      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007306:	e01c      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007308:	4b4b      	ldr	r3, [pc, #300]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800730a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730c:	4a4a      	ldr	r2, [pc, #296]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800730e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007314:	e01c      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731a:	3308      	adds	r3, #8
 800731c:	2100      	movs	r1, #0
 800731e:	4618      	mov	r0, r3
 8007320:	f000 ffb0 	bl	8008284 <RCCEx_PLL2_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800732a:	e011      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800732c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007330:	3328      	adds	r3, #40	@ 0x28
 8007332:	2100      	movs	r1, #0
 8007334:	4618      	mov	r0, r3
 8007336:	f001 f857 	bl	80083e8 <RCCEx_PLL3_Config>
 800733a:	4603      	mov	r3, r0
 800733c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007340:	e006      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007348:	e002      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800734a:	bf00      	nop
 800734c:	e000      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800734e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10a      	bne.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007358:	4b37      	ldr	r3, [pc, #220]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800735a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800735c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007366:	4a34      	ldr	r2, [pc, #208]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007368:	430b      	orrs	r3, r1
 800736a:	6513      	str	r3, [r2, #80]	@ 0x50
 800736c:	e003      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800736e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007372:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007382:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007386:	2300      	movs	r3, #0
 8007388:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800738c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007390:	460b      	mov	r3, r1
 8007392:	4313      	orrs	r3, r2
 8007394:	d056      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800739c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073a0:	d033      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80073a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073a6:	d82c      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073ac:	d02f      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80073ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073b2:	d826      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073b8:	d02b      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80073ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073be:	d820      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073c4:	d012      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80073c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073ca:	d81a      	bhi.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d022      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80073d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d4:	d115      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073da:	3308      	adds	r3, #8
 80073dc:	2101      	movs	r1, #1
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 ff50 	bl	8008284 <RCCEx_PLL2_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80073ea:	e015      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f0:	3328      	adds	r3, #40	@ 0x28
 80073f2:	2101      	movs	r1, #1
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fff7 	bl	80083e8 <RCCEx_PLL3_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007400:	e00a      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007408:	e006      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800740a:	bf00      	nop
 800740c:	e004      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800740e:	bf00      	nop
 8007410:	e002      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007412:	bf00      	nop
 8007414:	e000      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007416:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10d      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007420:	4b05      	ldr	r3, [pc, #20]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007424:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800742e:	4a02      	ldr	r2, [pc, #8]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007430:	430b      	orrs	r3, r1
 8007432:	6513      	str	r3, [r2, #80]	@ 0x50
 8007434:	e006      	b.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007436:	bf00      	nop
 8007438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007440:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007450:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007454:	2300      	movs	r3, #0
 8007456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800745a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800745e:	460b      	mov	r3, r1
 8007460:	4313      	orrs	r3, r2
 8007462:	d055      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007468:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800746c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007470:	d033      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007476:	d82c      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800747c:	d02f      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800747e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007482:	d826      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007484:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007488:	d02b      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800748a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800748e:	d820      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007494:	d012      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007496:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800749a:	d81a      	bhi.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800749c:	2b00      	cmp	r3, #0
 800749e:	d022      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80074a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074a4:	d115      	bne.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074aa:	3308      	adds	r3, #8
 80074ac:	2101      	movs	r1, #1
 80074ae:	4618      	mov	r0, r3
 80074b0:	f000 fee8 	bl	8008284 <RCCEx_PLL2_Config>
 80074b4:	4603      	mov	r3, r0
 80074b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074ba:	e015      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c0:	3328      	adds	r3, #40	@ 0x28
 80074c2:	2101      	movs	r1, #1
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 ff8f 	bl	80083e8 <RCCEx_PLL3_Config>
 80074ca:	4603      	mov	r3, r0
 80074cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074d0:	e00a      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074d8:	e006      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074da:	bf00      	nop
 80074dc:	e004      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074de:	bf00      	nop
 80074e0:	e002      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074e2:	bf00      	nop
 80074e4:	e000      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10b      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80074f0:	4ba3      	ldr	r3, [pc, #652]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80074f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007500:	4a9f      	ldr	r2, [pc, #636]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007502:	430b      	orrs	r3, r1
 8007504:	6593      	str	r3, [r2, #88]	@ 0x58
 8007506:	e003      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800750c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800751c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007520:	2300      	movs	r3, #0
 8007522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800752a:	460b      	mov	r3, r1
 800752c:	4313      	orrs	r3, r2
 800752e:	d037      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800753a:	d00e      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800753c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007540:	d816      	bhi.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007542:	2b00      	cmp	r3, #0
 8007544:	d018      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007546:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800754a:	d111      	bne.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800754c:	4b8c      	ldr	r3, [pc, #560]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800754e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007550:	4a8b      	ldr	r2, [pc, #556]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007558:	e00f      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755e:	3308      	adds	r3, #8
 8007560:	2101      	movs	r1, #1
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fe8e 	bl	8008284 <RCCEx_PLL2_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800756e:	e004      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007576:	e000      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800757a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007582:	4b7f      	ldr	r3, [pc, #508]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007586:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007590:	4a7b      	ldr	r2, [pc, #492]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007592:	430b      	orrs	r3, r1
 8007594:	6513      	str	r3, [r2, #80]	@ 0x50
 8007596:	e003      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80075a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80075ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075b0:	2300      	movs	r3, #0
 80075b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80075b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4313      	orrs	r3, r2
 80075be:	d039      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d81c      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80075ca:	a201      	add	r2, pc, #4	@ (adr r2, 80075d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80075cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d0:	0800760d 	.word	0x0800760d
 80075d4:	080075e1 	.word	0x080075e1
 80075d8:	080075ef 	.word	0x080075ef
 80075dc:	0800760d 	.word	0x0800760d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e0:	4b67      	ldr	r3, [pc, #412]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e4:	4a66      	ldr	r2, [pc, #408]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075ec:	e00f      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f2:	3308      	adds	r3, #8
 80075f4:	2102      	movs	r1, #2
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fe44 	bl	8008284 <RCCEx_PLL2_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007602:	e004      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800760a:	e000      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800760c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800760e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10a      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007616:	4b5a      	ldr	r3, [pc, #360]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800761a:	f023 0103 	bic.w	r1, r3, #3
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007624:	4a56      	ldr	r2, [pc, #344]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007626:	430b      	orrs	r3, r1
 8007628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800762a:	e003      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007644:	2300      	movs	r3, #0
 8007646:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800764a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800764e:	460b      	mov	r3, r1
 8007650:	4313      	orrs	r3, r2
 8007652:	f000 809f 	beq.w	8007794 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007656:	4b4b      	ldr	r3, [pc, #300]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a4a      	ldr	r2, [pc, #296]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800765c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007660:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007662:	f7fb fae3 	bl	8002c2c <HAL_GetTick>
 8007666:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800766a:	e00b      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800766c:	f7fb fade 	bl	8002c2c <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b64      	cmp	r3, #100	@ 0x64
 800767a:	d903      	bls.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007682:	e005      	b.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007684:	4b3f      	ldr	r3, [pc, #252]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800768c:	2b00      	cmp	r3, #0
 800768e:	d0ed      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007694:	2b00      	cmp	r3, #0
 8007696:	d179      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007698:	4b39      	ldr	r3, [pc, #228]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800769a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800769c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076a4:	4053      	eors	r3, r2
 80076a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d015      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076ae:	4b34      	ldr	r3, [pc, #208]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076ba:	4b31      	ldr	r3, [pc, #196]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076be:	4a30      	ldr	r2, [pc, #192]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076c6:	4b2e      	ldr	r3, [pc, #184]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ca:	4a2d      	ldr	r2, [pc, #180]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80076d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80076d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80076da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076e6:	d118      	bne.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e8:	f7fb faa0 	bl	8002c2c <HAL_GetTick>
 80076ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076f0:	e00d      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076f2:	f7fb fa9b 	bl	8002c2c <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80076fc:	1ad2      	subs	r2, r2, r3
 80076fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007702:	429a      	cmp	r2, r3
 8007704:	d903      	bls.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800770c:	e005      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800770e:	4b1c      	ldr	r3, [pc, #112]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0eb      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800771a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800771e:	2b00      	cmp	r3, #0
 8007720:	d129      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007726:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800772a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800772e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007732:	d10e      	bne.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007734:	4b12      	ldr	r3, [pc, #72]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800773c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007740:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007744:	091a      	lsrs	r2, r3, #4
 8007746:	4b10      	ldr	r3, [pc, #64]	@ (8007788 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007748:	4013      	ands	r3, r2
 800774a:	4a0d      	ldr	r2, [pc, #52]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774c:	430b      	orrs	r3, r1
 800774e:	6113      	str	r3, [r2, #16]
 8007750:	e005      	b.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007752:	4b0b      	ldr	r3, [pc, #44]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	4a0a      	ldr	r2, [pc, #40]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007758:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800775c:	6113      	str	r3, [r2, #16]
 800775e:	4b08      	ldr	r3, [pc, #32]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007760:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007766:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800776a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800776e:	4a04      	ldr	r2, [pc, #16]	@ (8007780 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007770:	430b      	orrs	r3, r1
 8007772:	6713      	str	r3, [r2, #112]	@ 0x70
 8007774:	e00e      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007776:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800777a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800777e:	e009      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007780:	58024400 	.word	0x58024400
 8007784:	58024800 	.word	0x58024800
 8007788:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f002 0301 	and.w	r3, r2, #1
 80077a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4313      	orrs	r3, r2
 80077b2:	f000 8089 	beq.w	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077bc:	2b28      	cmp	r3, #40	@ 0x28
 80077be:	d86b      	bhi.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80077c0:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080078a1 	.word	0x080078a1
 80077cc:	08007899 	.word	0x08007899
 80077d0:	08007899 	.word	0x08007899
 80077d4:	08007899 	.word	0x08007899
 80077d8:	08007899 	.word	0x08007899
 80077dc:	08007899 	.word	0x08007899
 80077e0:	08007899 	.word	0x08007899
 80077e4:	08007899 	.word	0x08007899
 80077e8:	0800786d 	.word	0x0800786d
 80077ec:	08007899 	.word	0x08007899
 80077f0:	08007899 	.word	0x08007899
 80077f4:	08007899 	.word	0x08007899
 80077f8:	08007899 	.word	0x08007899
 80077fc:	08007899 	.word	0x08007899
 8007800:	08007899 	.word	0x08007899
 8007804:	08007899 	.word	0x08007899
 8007808:	08007883 	.word	0x08007883
 800780c:	08007899 	.word	0x08007899
 8007810:	08007899 	.word	0x08007899
 8007814:	08007899 	.word	0x08007899
 8007818:	08007899 	.word	0x08007899
 800781c:	08007899 	.word	0x08007899
 8007820:	08007899 	.word	0x08007899
 8007824:	08007899 	.word	0x08007899
 8007828:	080078a1 	.word	0x080078a1
 800782c:	08007899 	.word	0x08007899
 8007830:	08007899 	.word	0x08007899
 8007834:	08007899 	.word	0x08007899
 8007838:	08007899 	.word	0x08007899
 800783c:	08007899 	.word	0x08007899
 8007840:	08007899 	.word	0x08007899
 8007844:	08007899 	.word	0x08007899
 8007848:	080078a1 	.word	0x080078a1
 800784c:	08007899 	.word	0x08007899
 8007850:	08007899 	.word	0x08007899
 8007854:	08007899 	.word	0x08007899
 8007858:	08007899 	.word	0x08007899
 800785c:	08007899 	.word	0x08007899
 8007860:	08007899 	.word	0x08007899
 8007864:	08007899 	.word	0x08007899
 8007868:	080078a1 	.word	0x080078a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800786c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007870:	3308      	adds	r3, #8
 8007872:	2101      	movs	r1, #1
 8007874:	4618      	mov	r0, r3
 8007876:	f000 fd05 	bl	8008284 <RCCEx_PLL2_Config>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007880:	e00f      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007886:	3328      	adds	r3, #40	@ 0x28
 8007888:	2101      	movs	r1, #1
 800788a:	4618      	mov	r0, r3
 800788c:	f000 fdac 	bl	80083e8 <RCCEx_PLL3_Config>
 8007890:	4603      	mov	r3, r0
 8007892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007896:	e004      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800789e:	e000      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80078a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80078aa:	4bbf      	ldr	r3, [pc, #764]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078b8:	4abb      	ldr	r2, [pc, #748]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80078be:	e003      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d0:	f002 0302 	and.w	r3, r2, #2
 80078d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078d8:	2300      	movs	r3, #0
 80078da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80078e2:	460b      	mov	r3, r1
 80078e4:	4313      	orrs	r3, r2
 80078e6:	d041      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078ee:	2b05      	cmp	r3, #5
 80078f0:	d824      	bhi.n	800793c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80078f2:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007945 	.word	0x08007945
 80078fc:	08007911 	.word	0x08007911
 8007900:	08007927 	.word	0x08007927
 8007904:	08007945 	.word	0x08007945
 8007908:	08007945 	.word	0x08007945
 800790c:	08007945 	.word	0x08007945
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007914:	3308      	adds	r3, #8
 8007916:	2101      	movs	r1, #1
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fcb3 	bl	8008284 <RCCEx_PLL2_Config>
 800791e:	4603      	mov	r3, r0
 8007920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007924:	e00f      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792a:	3328      	adds	r3, #40	@ 0x28
 800792c:	2101      	movs	r1, #1
 800792e:	4618      	mov	r0, r3
 8007930:	f000 fd5a 	bl	80083e8 <RCCEx_PLL3_Config>
 8007934:	4603      	mov	r3, r0
 8007936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800793a:	e004      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007942:	e000      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10a      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800794e:	4b96      	ldr	r3, [pc, #600]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007952:	f023 0107 	bic.w	r1, r3, #7
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800795c:	4a92      	ldr	r2, [pc, #584]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800795e:	430b      	orrs	r3, r1
 8007960:	6553      	str	r3, [r2, #84]	@ 0x54
 8007962:	e003      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007964:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007968:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f002 0304 	and.w	r3, r2, #4
 8007978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800797c:	2300      	movs	r3, #0
 800797e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007982:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007986:	460b      	mov	r3, r1
 8007988:	4313      	orrs	r3, r2
 800798a:	d044      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800798c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007990:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007994:	2b05      	cmp	r3, #5
 8007996:	d825      	bhi.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007998:	a201      	add	r2, pc, #4	@ (adr r2, 80079a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079ed 	.word	0x080079ed
 80079a4:	080079b9 	.word	0x080079b9
 80079a8:	080079cf 	.word	0x080079cf
 80079ac:	080079ed 	.word	0x080079ed
 80079b0:	080079ed 	.word	0x080079ed
 80079b4:	080079ed 	.word	0x080079ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079bc:	3308      	adds	r3, #8
 80079be:	2101      	movs	r1, #1
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fc5f 	bl	8008284 <RCCEx_PLL2_Config>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80079cc:	e00f      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d2:	3328      	adds	r3, #40	@ 0x28
 80079d4:	2101      	movs	r1, #1
 80079d6:	4618      	mov	r0, r3
 80079d8:	f000 fd06 	bl	80083e8 <RCCEx_PLL3_Config>
 80079dc:	4603      	mov	r3, r0
 80079de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80079e2:	e004      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ea:	e000      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80079ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10b      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079f6:	4b6c      	ldr	r3, [pc, #432]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079fa:	f023 0107 	bic.w	r1, r3, #7
 80079fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007a06:	4a68      	ldr	r2, [pc, #416]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a0c:	e003      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f002 0320 	and.w	r3, r2, #32
 8007a22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a26:	2300      	movs	r3, #0
 8007a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a30:	460b      	mov	r3, r1
 8007a32:	4313      	orrs	r3, r2
 8007a34:	d055      	beq.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a42:	d033      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007a44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a48:	d82c      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a4e:	d02f      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a54:	d826      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a5a:	d02b      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007a5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a60:	d820      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a66:	d012      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007a68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a6c:	d81a      	bhi.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d022      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007a72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a76:	d115      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	2100      	movs	r1, #0
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fbff 	bl	8008284 <RCCEx_PLL2_Config>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a8c:	e015      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a92:	3328      	adds	r3, #40	@ 0x28
 8007a94:	2102      	movs	r1, #2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fca6 	bl	80083e8 <RCCEx_PLL3_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007aa2:	e00a      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aaa:	e006      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007aac:	bf00      	nop
 8007aae:	e004      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ab0:	bf00      	nop
 8007ab2:	e002      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ab4:	bf00      	nop
 8007ab6:	e000      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10b      	bne.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ac2:	4b39      	ldr	r3, [pc, #228]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ad2:	4a35      	ldr	r2, [pc, #212]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ad4:	430b      	orrs	r3, r1
 8007ad6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ad8:	e003      	b.n	8007ae2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ada:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ade:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007aee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007af2:	2300      	movs	r3, #0
 8007af4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007af8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4313      	orrs	r3, r2
 8007b00:	d058      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b0e:	d033      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007b10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b14:	d82c      	bhi.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b1a:	d02f      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b20:	d826      	bhi.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b26:	d02b      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007b28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b2c:	d820      	bhi.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b32:	d012      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007b34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b38:	d81a      	bhi.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d022      	beq.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b42:	d115      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b48:	3308      	adds	r3, #8
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fb99 	bl	8008284 <RCCEx_PLL2_Config>
 8007b52:	4603      	mov	r3, r0
 8007b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b58:	e015      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5e:	3328      	adds	r3, #40	@ 0x28
 8007b60:	2102      	movs	r1, #2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fc40 	bl	80083e8 <RCCEx_PLL3_Config>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b6e:	e00a      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b76:	e006      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b78:	bf00      	nop
 8007b7a:	e004      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b7c:	bf00      	nop
 8007b7e:	e002      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b80:	bf00      	nop
 8007b82:	e000      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10e      	bne.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b9e:	4a02      	ldr	r2, [pc, #8]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ba4:	e006      	b.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007ba6:	bf00      	nop
 8007ba8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	d055      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bdc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007be0:	d033      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007be2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007be6:	d82c      	bhi.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bec:	d02f      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007bee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bf2:	d826      	bhi.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007bf4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007bf8:	d02b      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007bfa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007bfe:	d820      	bhi.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c04:	d012      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007c06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007c0a:	d81a      	bhi.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d022      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c14:	d115      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	3308      	adds	r3, #8
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 fb30 	bl	8008284 <RCCEx_PLL2_Config>
 8007c24:	4603      	mov	r3, r0
 8007c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c2a:	e015      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c30:	3328      	adds	r3, #40	@ 0x28
 8007c32:	2102      	movs	r1, #2
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fbd7 	bl	80083e8 <RCCEx_PLL3_Config>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c40:	e00a      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c48:	e006      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c4a:	bf00      	nop
 8007c4c:	e004      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c4e:	bf00      	nop
 8007c50:	e002      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c52:	bf00      	nop
 8007c54:	e000      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10b      	bne.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c60:	4ba1      	ldr	r3, [pc, #644]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c70:	4a9d      	ldr	r2, [pc, #628]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c72:	430b      	orrs	r3, r1
 8007c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c76:	e003      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c88:	f002 0308 	and.w	r3, r2, #8
 8007c8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c90:	2300      	movs	r3, #0
 8007c92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	d01e      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cac:	d10c      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	3328      	adds	r3, #40	@ 0x28
 8007cb4:	2102      	movs	r1, #2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 fb96 	bl	80083e8 <RCCEx_PLL3_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d002      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007cc8:	4b87      	ldr	r3, [pc, #540]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ccc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cd8:	4a83      	ldr	r2, [pc, #524]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f002 0310 	and.w	r3, r2, #16
 8007cea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007cf4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	d01e      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d0a:	d10c      	bne.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d10:	3328      	adds	r3, #40	@ 0x28
 8007d12:	2102      	movs	r1, #2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fb67 	bl	80083e8 <RCCEx_PLL3_Config>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d26:	4b70      	ldr	r3, [pc, #448]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d36:	4a6c      	ldr	r2, [pc, #432]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007d48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007d56:	460b      	mov	r3, r1
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	d03e      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d68:	d022      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007d6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d6e:	d81b      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d78:	d00b      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007d7a:	e015      	b.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d80:	3308      	adds	r3, #8
 8007d82:	2100      	movs	r1, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 fa7d 	bl	8008284 <RCCEx_PLL2_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d90:	e00f      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d96:	3328      	adds	r3, #40	@ 0x28
 8007d98:	2102      	movs	r1, #2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fb24 	bl	80083e8 <RCCEx_PLL3_Config>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007da6:	e004      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dae:	e000      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10b      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dba:	4b4b      	ldr	r3, [pc, #300]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dca:	4a47      	ldr	r2, [pc, #284]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dd0:	e003      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007de6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007de8:	2300      	movs	r3, #0
 8007dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007dec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007df0:	460b      	mov	r3, r1
 8007df2:	4313      	orrs	r3, r2
 8007df4:	d03b      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e02:	d01f      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007e04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e08:	d818      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007e0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e0e:	d003      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007e10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e14:	d007      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007e16:	e011      	b.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e18:	4b33      	ldr	r3, [pc, #204]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1c:	4a32      	ldr	r2, [pc, #200]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e24:	e00f      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2a:	3328      	adds	r3, #40	@ 0x28
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fada 	bl	80083e8 <RCCEx_PLL3_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e3a:	e004      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e42:	e000      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10b      	bne.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e4e:	4b26      	ldr	r3, [pc, #152]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e5e:	4a22      	ldr	r2, [pc, #136]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e60:	430b      	orrs	r3, r1
 8007e62:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e64:	e003      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007e7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007e84:	460b      	mov	r3, r1
 8007e86:	4313      	orrs	r3, r2
 8007e88:	d034      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d003      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e98:	d007      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007e9a:	e011      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9c:	4b12      	ldr	r3, [pc, #72]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea0:	4a11      	ldr	r2, [pc, #68]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ea8:	e00e      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eae:	3308      	adds	r3, #8
 8007eb0:	2102      	movs	r1, #2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f9e6 	bl	8008284 <RCCEx_PLL2_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ebe:	e003      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ec6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10d      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ed0:	4b05      	ldr	r3, [pc, #20]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ed4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ede:	4a02      	ldr	r2, [pc, #8]	@ (8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ee4:	e006      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007ee6:	bf00      	nop
 8007ee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ef0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f02:	2300      	movs	r3, #0
 8007f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	d00c      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f14:	3328      	adds	r3, #40	@ 0x28
 8007f16:	2102      	movs	r1, #2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 fa65 	bl	80083e8 <RCCEx_PLL3_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007f36:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f38:	2300      	movs	r3, #0
 8007f3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007f40:	460b      	mov	r3, r1
 8007f42:	4313      	orrs	r3, r2
 8007f44:	d038      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f52:	d018      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007f54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f58:	d811      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007f5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f5e:	d014      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f64:	d80b      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d011      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f6e:	d106      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f70:	4bc3      	ldr	r3, [pc, #780]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f74:	4ac2      	ldr	r2, [pc, #776]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007f7c:	e008      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f84:	e004      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f86:	bf00      	nop
 8007f88:	e002      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f8a:	bf00      	nop
 8007f8c:	e000      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10b      	bne.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f98:	4bb9      	ldr	r3, [pc, #740]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa8:	4ab5      	ldr	r2, [pc, #724]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007faa:	430b      	orrs	r3, r1
 8007fac:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fae:	e003      	b.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	d009      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fd4:	4baa      	ldr	r3, [pc, #680]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fe2:	4aa7      	ldr	r2, [pc, #668]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007ff4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ffa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ffe:	460b      	mov	r3, r1
 8008000:	4313      	orrs	r3, r2
 8008002:	d00a      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008004:	4b9e      	ldr	r3, [pc, #632]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800800c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008010:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008014:	4a9a      	ldr	r2, [pc, #616]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008016:	430b      	orrs	r3, r1
 8008018:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008026:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008028:	2300      	movs	r3, #0
 800802a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800802c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008030:	460b      	mov	r3, r1
 8008032:	4313      	orrs	r3, r2
 8008034:	d009      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008036:	4b92      	ldr	r3, [pc, #584]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800803a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008044:	4a8e      	ldr	r2, [pc, #568]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008046:	430b      	orrs	r3, r1
 8008048:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800804a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008056:	643b      	str	r3, [r7, #64]	@ 0x40
 8008058:	2300      	movs	r3, #0
 800805a:	647b      	str	r3, [r7, #68]	@ 0x44
 800805c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008060:	460b      	mov	r3, r1
 8008062:	4313      	orrs	r3, r2
 8008064:	d00e      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008066:	4b86      	ldr	r3, [pc, #536]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	4a85      	ldr	r2, [pc, #532]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800806c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008070:	6113      	str	r3, [r2, #16]
 8008072:	4b83      	ldr	r3, [pc, #524]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008074:	6919      	ldr	r1, [r3, #16]
 8008076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800807e:	4a80      	ldr	r2, [pc, #512]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008080:	430b      	orrs	r3, r1
 8008082:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008090:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008092:	2300      	movs	r3, #0
 8008094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008096:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800809a:	460b      	mov	r3, r1
 800809c:	4313      	orrs	r3, r2
 800809e:	d009      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80080a0:	4b77      	ldr	r3, [pc, #476]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ae:	4a74      	ldr	r2, [pc, #464]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080b0:	430b      	orrs	r3, r1
 80080b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80080b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80080c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80080c2:	2300      	movs	r3, #0
 80080c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80080ca:	460b      	mov	r3, r1
 80080cc:	4313      	orrs	r3, r2
 80080ce:	d00a      	beq.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80080d0:	4b6b      	ldr	r3, [pc, #428]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80080d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080e0:	4a67      	ldr	r2, [pc, #412]	@ (8008280 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080e2:	430b      	orrs	r3, r1
 80080e4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80080e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ee:	2100      	movs	r1, #0
 80080f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80080fc:	460b      	mov	r3, r1
 80080fe:	4313      	orrs	r3, r2
 8008100:	d011      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008106:	3308      	adds	r3, #8
 8008108:	2100      	movs	r1, #0
 800810a:	4618      	mov	r0, r3
 800810c:	f000 f8ba 	bl	8008284 <RCCEx_PLL2_Config>
 8008110:	4603      	mov	r3, r0
 8008112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	2100      	movs	r1, #0
 8008130:	6239      	str	r1, [r7, #32]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24
 8008138:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800813c:	460b      	mov	r3, r1
 800813e:	4313      	orrs	r3, r2
 8008140:	d011      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008146:	3308      	adds	r3, #8
 8008148:	2101      	movs	r1, #1
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f89a 	bl	8008284 <RCCEx_PLL2_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800815a:	2b00      	cmp	r3, #0
 800815c:	d003      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800815e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	2100      	movs	r1, #0
 8008170:	61b9      	str	r1, [r7, #24]
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800817c:	460b      	mov	r3, r1
 800817e:	4313      	orrs	r3, r2
 8008180:	d011      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008186:	3308      	adds	r3, #8
 8008188:	2102      	movs	r1, #2
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f87a 	bl	8008284 <RCCEx_PLL2_Config>
 8008190:	4603      	mov	r3, r0
 8008192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80081a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ae:	2100      	movs	r1, #0
 80081b0:	6139      	str	r1, [r7, #16]
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80081bc:	460b      	mov	r3, r1
 80081be:	4313      	orrs	r3, r2
 80081c0:	d011      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c6:	3328      	adds	r3, #40	@ 0x28
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 f90c 	bl	80083e8 <RCCEx_PLL3_Config>
 80081d0:	4603      	mov	r3, r0
 80081d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80081d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80081e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	2100      	movs	r1, #0
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80081fc:	460b      	mov	r3, r1
 80081fe:	4313      	orrs	r3, r2
 8008200:	d011      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008206:	3328      	adds	r3, #40	@ 0x28
 8008208:	2101      	movs	r1, #1
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f8ec 	bl	80083e8 <RCCEx_PLL3_Config>
 8008210:	4603      	mov	r3, r0
 8008212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821a:	2b00      	cmp	r3, #0
 800821c:	d003      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	2100      	movs	r1, #0
 8008230:	6039      	str	r1, [r7, #0]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	607b      	str	r3, [r7, #4]
 8008238:	e9d7 1200 	ldrd	r1, r2, [r7]
 800823c:	460b      	mov	r3, r1
 800823e:	4313      	orrs	r3, r2
 8008240:	d011      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008246:	3328      	adds	r3, #40	@ 0x28
 8008248:	2102      	movs	r1, #2
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f8cc 	bl	80083e8 <RCCEx_PLL3_Config>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008266:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	e000      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
}
 8008274:	4618      	mov	r0, r3
 8008276:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800827a:	46bd      	mov	sp, r7
 800827c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008280:	58024400 	.word	0x58024400

08008284 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008292:	4b53      	ldr	r3, [pc, #332]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008296:	f003 0303 	and.w	r3, r3, #3
 800829a:	2b03      	cmp	r3, #3
 800829c:	d101      	bne.n	80082a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e099      	b.n	80083d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082a2:	4b4f      	ldr	r3, [pc, #316]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a4e      	ldr	r2, [pc, #312]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 80082a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ae:	f7fa fcbd 	bl	8002c2c <HAL_GetTick>
 80082b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082b4:	e008      	b.n	80082c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082b6:	f7fa fcb9 	bl	8002c2c <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e086      	b.n	80083d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082c8:	4b45      	ldr	r3, [pc, #276]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1f0      	bne.n	80082b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80082d4:	4b42      	ldr	r3, [pc, #264]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 80082d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	031b      	lsls	r3, r3, #12
 80082e2:	493f      	ldr	r1, [pc, #252]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 80082e4:	4313      	orrs	r3, r2
 80082e6:	628b      	str	r3, [r1, #40]	@ 0x28
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	025b      	lsls	r3, r3, #9
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	3b01      	subs	r3, #1
 8008304:	041b      	lsls	r3, r3, #16
 8008306:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800830a:	431a      	orrs	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	3b01      	subs	r3, #1
 8008312:	061b      	lsls	r3, r3, #24
 8008314:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008318:	4931      	ldr	r1, [pc, #196]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 800831a:	4313      	orrs	r3, r2
 800831c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800831e:	4b30      	ldr	r3, [pc, #192]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008322:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	492d      	ldr	r1, [pc, #180]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 800832c:	4313      	orrs	r3, r2
 800832e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008330:	4b2b      	ldr	r3, [pc, #172]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008334:	f023 0220 	bic.w	r2, r3, #32
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	4928      	ldr	r1, [pc, #160]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 800833e:	4313      	orrs	r3, r2
 8008340:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008342:	4b27      	ldr	r3, [pc, #156]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008346:	4a26      	ldr	r2, [pc, #152]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008348:	f023 0310 	bic.w	r3, r3, #16
 800834c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800834e:	4b24      	ldr	r3, [pc, #144]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008352:	4b24      	ldr	r3, [pc, #144]	@ (80083e4 <RCCEx_PLL2_Config+0x160>)
 8008354:	4013      	ands	r3, r2
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	69d2      	ldr	r2, [r2, #28]
 800835a:	00d2      	lsls	r2, r2, #3
 800835c:	4920      	ldr	r1, [pc, #128]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 800835e:	4313      	orrs	r3, r2
 8008360:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008362:	4b1f      	ldr	r3, [pc, #124]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008366:	4a1e      	ldr	r2, [pc, #120]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008368:	f043 0310 	orr.w	r3, r3, #16
 800836c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d106      	bne.n	8008382 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008374:	4b1a      	ldr	r3, [pc, #104]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008378:	4a19      	ldr	r2, [pc, #100]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 800837a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800837e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008380:	e00f      	b.n	80083a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d106      	bne.n	8008396 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008388:	4b15      	ldr	r3, [pc, #84]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 800838a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838c:	4a14      	ldr	r2, [pc, #80]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 800838e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008392:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008394:	e005      	b.n	80083a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008396:	4b12      	ldr	r3, [pc, #72]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 8008398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839a:	4a11      	ldr	r2, [pc, #68]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 800839c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80083a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083a2:	4b0f      	ldr	r3, [pc, #60]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a0e      	ldr	r2, [pc, #56]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 80083a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ae:	f7fa fc3d 	bl	8002c2c <HAL_GetTick>
 80083b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083b4:	e008      	b.n	80083c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083b6:	f7fa fc39 	bl	8002c2c <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d901      	bls.n	80083c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e006      	b.n	80083d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083c8:	4b05      	ldr	r3, [pc, #20]	@ (80083e0 <RCCEx_PLL2_Config+0x15c>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0f0      	beq.n	80083b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	58024400 	.word	0x58024400
 80083e4:	ffff0007 	.word	0xffff0007

080083e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083f6:	4b53      	ldr	r3, [pc, #332]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80083f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d101      	bne.n	8008406 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e099      	b.n	800853a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008406:	4b4f      	ldr	r3, [pc, #316]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a4e      	ldr	r2, [pc, #312]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 800840c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008412:	f7fa fc0b 	bl	8002c2c <HAL_GetTick>
 8008416:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008418:	e008      	b.n	800842c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800841a:	f7fa fc07 	bl	8002c2c <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b02      	cmp	r3, #2
 8008426:	d901      	bls.n	800842c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e086      	b.n	800853a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800842c:	4b45      	ldr	r3, [pc, #276]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1f0      	bne.n	800841a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008438:	4b42      	ldr	r3, [pc, #264]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	051b      	lsls	r3, r3, #20
 8008446:	493f      	ldr	r1, [pc, #252]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 8008448:	4313      	orrs	r3, r2
 800844a:	628b      	str	r3, [r1, #40]	@ 0x28
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	3b01      	subs	r3, #1
 8008452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	3b01      	subs	r3, #1
 800845c:	025b      	lsls	r3, r3, #9
 800845e:	b29b      	uxth	r3, r3
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	3b01      	subs	r3, #1
 8008468:	041b      	lsls	r3, r3, #16
 800846a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800846e:	431a      	orrs	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	3b01      	subs	r3, #1
 8008476:	061b      	lsls	r3, r3, #24
 8008478:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800847c:	4931      	ldr	r1, [pc, #196]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 800847e:	4313      	orrs	r3, r2
 8008480:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008482:	4b30      	ldr	r3, [pc, #192]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 8008484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008486:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	492d      	ldr	r1, [pc, #180]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 8008490:	4313      	orrs	r3, r2
 8008492:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008494:	4b2b      	ldr	r3, [pc, #172]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 8008496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008498:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	4928      	ldr	r1, [pc, #160]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084a6:	4b27      	ldr	r3, [pc, #156]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084aa:	4a26      	ldr	r2, [pc, #152]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80084b2:	4b24      	ldr	r3, [pc, #144]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084b6:	4b24      	ldr	r3, [pc, #144]	@ (8008548 <RCCEx_PLL3_Config+0x160>)
 80084b8:	4013      	ands	r3, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	69d2      	ldr	r2, [r2, #28]
 80084be:	00d2      	lsls	r2, r2, #3
 80084c0:	4920      	ldr	r1, [pc, #128]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80084c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d106      	bne.n	80084e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80084d8:	4b1a      	ldr	r3, [pc, #104]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084dc:	4a19      	ldr	r2, [pc, #100]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80084e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084e4:	e00f      	b.n	8008506 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d106      	bne.n	80084fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80084ec:	4b15      	ldr	r3, [pc, #84]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f0:	4a14      	ldr	r2, [pc, #80]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80084f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084f8:	e005      	b.n	8008506 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80084fa:	4b12      	ldr	r3, [pc, #72]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 80084fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fe:	4a11      	ldr	r2, [pc, #68]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 8008500:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008504:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008506:	4b0f      	ldr	r3, [pc, #60]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a0e      	ldr	r2, [pc, #56]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 800850c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008512:	f7fa fb8b 	bl	8002c2c <HAL_GetTick>
 8008516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008518:	e008      	b.n	800852c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800851a:	f7fa fb87 	bl	8002c2c <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d901      	bls.n	800852c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008528:	2303      	movs	r3, #3
 800852a:	e006      	b.n	800853a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800852c:	4b05      	ldr	r3, [pc, #20]	@ (8008544 <RCCEx_PLL3_Config+0x15c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0f0      	beq.n	800851a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	58024400 	.word	0x58024400
 8008548:	ffff0007 	.word	0xffff0007

0800854c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e10f      	b.n	800877e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a87      	ldr	r2, [pc, #540]	@ (8008788 <HAL_SPI_Init+0x23c>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d00f      	beq.n	800858e <HAL_SPI_Init+0x42>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a86      	ldr	r2, [pc, #536]	@ (800878c <HAL_SPI_Init+0x240>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00a      	beq.n	800858e <HAL_SPI_Init+0x42>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a84      	ldr	r2, [pc, #528]	@ (8008790 <HAL_SPI_Init+0x244>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d005      	beq.n	800858e <HAL_SPI_Init+0x42>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	2b0f      	cmp	r3, #15
 8008588:	d901      	bls.n	800858e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e0f7      	b.n	800877e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 ff3a 	bl	8009408 <SPI_GetPacketSize>
 8008594:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a7b      	ldr	r2, [pc, #492]	@ (8008788 <HAL_SPI_Init+0x23c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00c      	beq.n	80085ba <HAL_SPI_Init+0x6e>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a79      	ldr	r2, [pc, #484]	@ (800878c <HAL_SPI_Init+0x240>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d007      	beq.n	80085ba <HAL_SPI_Init+0x6e>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a78      	ldr	r2, [pc, #480]	@ (8008790 <HAL_SPI_Init+0x244>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d002      	beq.n	80085ba <HAL_SPI_Init+0x6e>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d811      	bhi.n	80085de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80085be:	4a72      	ldr	r2, [pc, #456]	@ (8008788 <HAL_SPI_Init+0x23c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d009      	beq.n	80085d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a70      	ldr	r2, [pc, #448]	@ (800878c <HAL_SPI_Init+0x240>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_SPI_Init+0x8c>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a6f      	ldr	r2, [pc, #444]	@ (8008790 <HAL_SPI_Init+0x244>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d104      	bne.n	80085e2 <HAL_SPI_Init+0x96>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b10      	cmp	r3, #16
 80085dc:	d901      	bls.n	80085e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e0cd      	b.n	800877e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d106      	bne.n	80085fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7f9 fcfa 	bl	8001ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f022 0201 	bic.w	r2, r2, #1
 8008612:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800861e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008628:	d119      	bne.n	800865e <HAL_SPI_Init+0x112>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008632:	d103      	bne.n	800863c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008638:	2b00      	cmp	r3, #0
 800863a:	d008      	beq.n	800864e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10c      	bne.n	800865e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008648:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800864c:	d107      	bne.n	800865e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800865c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00f      	beq.n	800868a <HAL_SPI_Init+0x13e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	2b06      	cmp	r3, #6
 8008670:	d90b      	bls.n	800868a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	e007      	b.n	800869a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008698:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69da      	ldr	r2, [r3, #28]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a2:	431a      	orrs	r2, r3
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	431a      	orrs	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ac:	ea42 0103 	orr.w	r1, r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68da      	ldr	r2, [r3, #12]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	430a      	orrs	r2, r1
 80086ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c4:	431a      	orrs	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	431a      	orrs	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	431a      	orrs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	431a      	orrs	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	431a      	orrs	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086fa:	ea42 0103 	orr.w	r1, r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d113      	bne.n	800873a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008724:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008738:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0201 	bic.w	r2, r2, #1
 8008748:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	40013000 	.word	0x40013000
 800878c:	40003800 	.word	0x40003800
 8008790:	40003c00 	.word	0x40003c00

08008794 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d001      	beq.n	80087b2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80087ae:	2302      	movs	r3, #2
 80087b0:	e126      	b.n	8008a00 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <HAL_SPI_Transmit_DMA+0x2a>
 80087b8:	88fb      	ldrh	r3, [r7, #6]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e11e      	b.n	8008a00 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_SPI_Transmit_DMA+0x3c>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e117      	b.n	8008a00 <HAL_SPI_Transmit_DMA+0x26c>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2203      	movs	r2, #3
 80087dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	88fa      	ldrh	r2, [r7, #6]
 80087f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	88fa      	ldrh	r2, [r7, #6]
 80087fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2200      	movs	r2, #0
 8008808:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008828:	d108      	bne.n	800883c <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	e009      	b.n	8008850 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800884e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	2b0f      	cmp	r3, #15
 8008856:	d905      	bls.n	8008864 <HAL_SPI_Transmit_DMA+0xd0>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008862:	d10f      	bne.n	8008884 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008868:	2b07      	cmp	r3, #7
 800886a:	d911      	bls.n	8008890 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008876:	d00b      	beq.n	8008890 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800887c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800887e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008882:	d005      	beq.n	8008890 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e0b7      	b.n	8008a00 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2b07      	cmp	r3, #7
 8008896:	d820      	bhi.n	80088da <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088a2:	d109      	bne.n	80088b8 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3301      	adds	r3, #1
 80088ae:	105b      	asrs	r3, r3, #1
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088c2:	d11e      	bne.n	8008902 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	3303      	adds	r3, #3
 80088ce:	109b      	asrs	r3, r3, #2
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80088d8:	e013      	b.n	8008902 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	2b0f      	cmp	r3, #15
 80088e0:	d80f      	bhi.n	8008902 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088ec:	d109      	bne.n	8008902 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	3301      	adds	r3, #1
 80088f8:	105b      	asrs	r3, r3, #1
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008906:	4a40      	ldr	r2, [pc, #256]	@ (8008a08 <HAL_SPI_Transmit_DMA+0x274>)
 8008908:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800890e:	4a3f      	ldr	r2, [pc, #252]	@ (8008a0c <HAL_SPI_Transmit_DMA+0x278>)
 8008910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008916:	4a3e      	ldr	r2, [pc, #248]	@ (8008a10 <HAL_SPI_Transmit_DMA+0x27c>)
 8008918:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800891e:	2200      	movs	r2, #0
 8008920:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008930:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800893a:	4619      	mov	r1, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3320      	adds	r3, #32
 8008942:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800894a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800894c:	f7fa fe16 	bl	800357c <HAL_DMA_Start_IT>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d011      	beq.n	800897a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800895c:	f043 0210 	orr.w	r2, r3, #16
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e042      	b.n	8008a00 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008984:	d108      	bne.n	8008998 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6859      	ldr	r1, [r3, #4]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	4b20      	ldr	r3, [pc, #128]	@ (8008a14 <HAL_SPI_Transmit_DMA+0x280>)
 8008992:	400b      	ands	r3, r1
 8008994:	6053      	str	r3, [r2, #4]
 8008996:	e009      	b.n	80089ac <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	4b1d      	ldr	r3, [pc, #116]	@ (8008a14 <HAL_SPI_Transmit_DMA+0x280>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	88f9      	ldrh	r1, [r7, #6]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	6812      	ldr	r2, [r2, #0]
 80089a8:	430b      	orrs	r3, r1
 80089aa:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089ba:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 80089ca:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f042 0201 	orr.w	r2, r2, #1
 80089da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089e4:	d107      	bne.n	80089f6 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089f4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	08009215 	.word	0x08009215
 8008a0c:	08009189 	.word	0x08009189
 8008a10:	0800924d 	.word	0x0800924d
 8008a14:	ffff0000 	.word	0xffff0000

08008a18 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d001      	beq.n	8008a36 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008a32:	2302      	movs	r3, #2
 8008a34:	e19c      	b.n	8008d70 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <HAL_SPI_TransmitReceive_DMA+0x30>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <HAL_SPI_TransmitReceive_DMA+0x30>
 8008a42:	887b      	ldrh	r3, [r7, #2]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d101      	bne.n	8008a4c <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e191      	b.n	8008d70 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_SPI_TransmitReceive_DMA+0x42>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e18a      	b.n	8008d70 <HAL_SPI_TransmitReceive_DMA+0x358>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2205      	movs	r2, #5
 8008a66:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	887a      	ldrh	r2, [r7, #2]
 8008a7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	887a      	ldrh	r2, [r7, #2]
 8008a84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	887a      	ldrh	r2, [r7, #2]
 8008a92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	887a      	ldrh	r2, [r7, #2]
 8008a9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008ab8:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008ac8:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	2b0f      	cmp	r3, #15
 8008ad0:	d90b      	bls.n	8008aea <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ad6:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8008ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008adc:	d121      	bne.n	8008b22 <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ae2:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8008ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ae8:	d11b      	bne.n	8008b22 <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8008aee:	2b07      	cmp	r3, #7
 8008af0:	d91d      	bls.n	8008b2e <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008af6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8008af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008afc:	d005      	beq.n	8008b0a <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b02:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008b04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b08:	d10b      	bne.n	8008b22 <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b0e:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8008b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b14:	d00b      	beq.n	8008b2e <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b1a:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b20:	d005      	beq.n	8008b2e <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	e120      	b.n	8008d70 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	2b07      	cmp	r3, #7
 8008b34:	d840      	bhi.n	8008bb8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b3a:	699b      	ldr	r3, [r3, #24]
 8008b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b40:	d109      	bne.n	8008b56 <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	105b      	asrs	r3, r3, #1
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b60:	d109      	bne.n	8008b76 <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	3303      	adds	r3, #3
 8008b6c:	109b      	asrs	r3, r3, #2
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b80:	d109      	bne.n	8008b96 <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	105b      	asrs	r3, r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ba0:	d12e      	bne.n	8008c00 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	3303      	adds	r3, #3
 8008bac:	109b      	asrs	r3, r3, #2
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008bb6:	e023      	b.n	8008c00 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	2b0f      	cmp	r3, #15
 8008bbe:	d81f      	bhi.n	8008c00 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bca:	d109      	bne.n	8008be0 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	105b      	asrs	r3, r3, #1
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bea:	d109      	bne.n	8008c00 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	105b      	asrs	r3, r3, #1
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c04:	4a5c      	ldr	r2, [pc, #368]	@ (8008d78 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8008c06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c0c:	4a5b      	ldr	r2, [pc, #364]	@ (8008d7c <HAL_SPI_TransmitReceive_DMA+0x364>)
 8008c0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c14:	4a5a      	ldr	r2, [pc, #360]	@ (8008d80 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8008c16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3330      	adds	r3, #48	@ 0x30
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c30:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008c38:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8008c3a:	f7fa fc9f 	bl	800357c <HAL_DMA_Start_IT>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d011      	beq.n	8008c68 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c4a:	f043 0210 	orr.w	r2, r3, #16
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e083      	b.n	8008d70 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689a      	ldr	r2, [r3, #8]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c76:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c84:	2200      	movs	r2, #0
 8008c86:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008c94:	4a3a      	ldr	r2, [pc, #232]	@ (8008d80 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8008c96:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3320      	adds	r3, #32
 8008ca8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008cb0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008cb2:	f7fa fc63 	bl	800357c <HAL_DMA_Start_IT>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d016      	beq.n	8008cea <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fa fec5 	bl	8003a50 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ccc:	f043 0210 	orr.w	r2, r3, #16
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e042      	b.n	8008d70 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cf4:	d108      	bne.n	8008d08 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	6859      	ldr	r1, [r3, #4]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	4b20      	ldr	r3, [pc, #128]	@ (8008d84 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8008d02:	400b      	ands	r3, r1
 8008d04:	6053      	str	r3, [r2, #4]
 8008d06:	e009      	b.n	8008d1c <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8008d84 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8008d10:	4013      	ands	r3, r2
 8008d12:	8879      	ldrh	r1, [r7, #2]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	6812      	ldr	r2, [r2, #0]
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	689a      	ldr	r2, [r3, #8]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d2a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691a      	ldr	r2, [r3, #16]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 8008d3a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0201 	orr.w	r2, r2, #1
 8008d4a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d54:	d107      	bne.n	8008d66 <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008d64:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	08009231 	.word	0x08009231
 8008d7c:	080091cf 	.word	0x080091cf
 8008d80:	0800924d 	.word	0x0800924d
 8008d84:	ffff0000 	.word	0xffff0000

08008d88 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08a      	sub	sp, #40	@ 0x28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008da0:	6a3a      	ldr	r2, [r7, #32]
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4013      	ands	r3, r2
 8008da6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008db0:	2300      	movs	r3, #0
 8008db2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008dba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3330      	adds	r3, #48	@ 0x30
 8008dc2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d010      	beq.n	8008df0 <HAL_SPI_IRQHandler+0x68>
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	f003 0308 	and.w	r3, r3, #8
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00b      	beq.n	8008df0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699a      	ldr	r2, [r3, #24]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008de6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f9c3 	bl	8009174 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008dee:	e192      	b.n	8009116 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008df0:	69bb      	ldr	r3, [r7, #24]
 8008df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d113      	bne.n	8008e22 <HAL_SPI_IRQHandler+0x9a>
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10e      	bne.n	8008e22 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	4798      	blx	r3
    handled = 1UL;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10f      	bne.n	8008e4c <HAL_SPI_IRQHandler+0xc4>
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d105      	bne.n	8008e4c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	4798      	blx	r3
    handled = 1UL;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10f      	bne.n	8008e76 <HAL_SPI_IRQHandler+0xee>
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	f003 0302 	and.w	r3, r3, #2
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00a      	beq.n	8008e76 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	4798      	blx	r3
    handled = 1UL;
 8008e72:	2301      	movs	r3, #1
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f040 8147 	bne.w	800910c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 808b 	beq.w	8008fa0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	699a      	ldr	r2, [r3, #24]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f042 0208 	orr.w	r2, r2, #8
 8008e98:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	699a      	ldr	r2, [r3, #24]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0210 	orr.w	r2, r2, #16
 8008ea8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	699a      	ldr	r2, [r3, #24]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008eb8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	691a      	ldr	r2, [r3, #16]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0208 	bic.w	r2, r2, #8
 8008ec8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d13d      	bne.n	8008f54 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008ed8:	e036      	b.n	8008f48 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	2b0f      	cmp	r3, #15
 8008ee0:	d90b      	bls.n	8008efa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008eea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008eec:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ef2:	1d1a      	adds	r2, r3, #4
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	665a      	str	r2, [r3, #100]	@ 0x64
 8008ef8:	e01d      	b.n	8008f36 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	2b07      	cmp	r3, #7
 8008f00:	d90b      	bls.n	8008f1a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	8812      	ldrh	r2, [r2, #0]
 8008f0a:	b292      	uxth	r2, r2
 8008f0c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f12:	1c9a      	adds	r2, r3, #2
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	665a      	str	r2, [r3, #100]	@ 0x64
 8008f18:	e00d      	b.n	8008f36 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f26:	7812      	ldrb	r2, [r2, #0]
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f30:	1c5a      	adds	r2, r3, #1
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d1c2      	bne.n	8008eda <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f9b7 	bl	80092c8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f8f7 	bl	8009160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008f72:	e0d0      	b.n	8009116 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008f74:	7cfb      	ldrb	r3, [r7, #19]
 8008f76:	2b05      	cmp	r3, #5
 8008f78:	d103      	bne.n	8008f82 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7f7 fe06 	bl	8000b8c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008f80:	e0c6      	b.n	8009110 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008f82:	7cfb      	ldrb	r3, [r7, #19]
 8008f84:	2b04      	cmp	r3, #4
 8008f86:	d103      	bne.n	8008f90 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 f8cb 	bl	8009124 <HAL_SPI_RxCpltCallback>
    return;
 8008f8e:	e0bf      	b.n	8009110 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008f90:	7cfb      	ldrb	r3, [r7, #19]
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	f040 80bc 	bne.w	8009110 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7f7 fddf 	bl	8000b5c <HAL_SPI_TxCpltCallback>
    return;
 8008f9e:	e0b7      	b.n	8009110 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 80b5 	beq.w	8009116 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00f      	beq.n	8008fd6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fbc:	f043 0204 	orr.w	r2, r3, #4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	699a      	ldr	r2, [r3, #24]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fd4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00f      	beq.n	8009000 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fe6:	f043 0201 	orr.w	r2, r3, #1
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699a      	ldr	r2, [r3, #24]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ffe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00f      	beq.n	800902a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009010:	f043 0208 	orr.w	r2, r3, #8
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	699a      	ldr	r2, [r3, #24]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009028:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	f003 0320 	and.w	r3, r3, #32
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00f      	beq.n	8009054 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800903a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699a      	ldr	r2, [r3, #24]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0220 	orr.w	r2, r2, #32
 8009052:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800905a:	2b00      	cmp	r3, #0
 800905c:	d05a      	beq.n	8009114 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f022 0201 	bic.w	r2, r2, #1
 800906c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	6919      	ldr	r1, [r3, #16]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	4b28      	ldr	r3, [pc, #160]	@ (800911c <HAL_SPI_IRQHandler+0x394>)
 800907a:	400b      	ands	r3, r1
 800907c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009084:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009088:	d138      	bne.n	80090fc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009098:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d013      	beq.n	80090ca <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009120 <HAL_SPI_IRQHandler+0x398>)
 80090a8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fa ffec 	bl	800408c <HAL_DMA_Abort_IT>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d020      	beq.n	8009114 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090d6:	4a12      	ldr	r2, [pc, #72]	@ (8009120 <HAL_SPI_IRQHandler+0x398>)
 80090d8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fa ffd4 	bl	800408c <HAL_DMA_Abort_IT>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d014      	beq.n	8009114 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80090fa:	e00b      	b.n	8009114 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f82b 	bl	8009160 <HAL_SPI_ErrorCallback>
    return;
 800910a:	e003      	b.n	8009114 <HAL_SPI_IRQHandler+0x38c>
    return;
 800910c:	bf00      	nop
 800910e:	e002      	b.n	8009116 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009110:	bf00      	nop
 8009112:	e000      	b.n	8009116 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009114:	bf00      	nop
  }
}
 8009116:	3728      	adds	r7, #40	@ 0x28
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	fffffc94 	.word	0xfffffc94
 8009120:	08009293 	.word	0x08009293

08009124 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009194:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b07      	cmp	r3, #7
 80091a0:	d011      	beq.n	80091c6 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091ac:	d103      	bne.n	80091b6 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7f7 fcd4 	bl	8000b5c <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80091b4:	e007      	b.n	80091c6 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 0208 	orr.w	r2, r2, #8
 80091c4:	611a      	str	r2, [r3, #16]
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091da:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	2b07      	cmp	r3, #7
 80091e6:	d011      	beq.n	800920c <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091f2:	d103      	bne.n	80091fc <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f7f7 fcc9 	bl	8000b8c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80091fa:	e007      	b.n	800920c <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	691a      	ldr	r2, [r3, #16]
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f042 0208 	orr.w	r2, r2, #8
 800920a:	611a      	str	r2, [r3, #16]
}
 800920c:	bf00      	nop
 800920e:	3710      	adds	r7, #16
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009220:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7ff ff88 	bl	8009138 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923c:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff ff84 	bl	800914c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009244:	bf00      	nop
 8009246:	3710      	adds	r7, #16
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009258:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7fc f886 	bl	800536c <HAL_DMA_GetError>
 8009260:	4603      	mov	r3, r0
 8009262:	2b02      	cmp	r3, #2
 8009264:	d011      	beq.n	800928a <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 f82e 	bl	80092c8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009272:	f043 0210 	orr.w	r2, r3, #16
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2201      	movs	r2, #1
 8009280:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f7ff ff6b 	bl	8009160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800928a:	bf00      	nop
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff ff51 	bl	8009160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f042 0208 	orr.w	r2, r2, #8
 80092e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0210 	orr.w	r2, r2, #16
 80092f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f022 0201 	bic.w	r2, r2, #1
 8009306:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6919      	ldr	r1, [r3, #16]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	4b3c      	ldr	r3, [pc, #240]	@ (8009404 <SPI_CloseTransfer+0x13c>)
 8009314:	400b      	ands	r3, r1
 8009316:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	689a      	ldr	r2, [r3, #8]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009326:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b04      	cmp	r3, #4
 8009332:	d014      	beq.n	800935e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00f      	beq.n	800935e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009344:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f042 0220 	orr.w	r2, r2, #32
 800935c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b03      	cmp	r3, #3
 8009368:	d014      	beq.n	8009394 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00f      	beq.n	8009394 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800937a:	f043 0204 	orr.w	r2, r3, #4
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	699a      	ldr	r2, [r3, #24]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009392:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00f      	beq.n	80093be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093a4:	f043 0201 	orr.w	r2, r3, #1
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699a      	ldr	r2, [r3, #24]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00f      	beq.n	80093e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093ce:	f043 0208 	orr.w	r2, r3, #8
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80093e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80093f8:	bf00      	nop
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr
 8009404:	fffffc90 	.word	0xfffffc90

08009408 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009414:	095b      	lsrs	r3, r3, #5
 8009416:	3301      	adds	r3, #1
 8009418:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	3301      	adds	r3, #1
 8009420:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	3307      	adds	r3, #7
 8009426:	08db      	lsrs	r3, r3, #3
 8009428:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e049      	b.n	80094e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b00      	cmp	r3, #0
 800945a:	d106      	bne.n	800946a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f7f9 f9bf 	bl	80027e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2202      	movs	r2, #2
 800946e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3304      	adds	r3, #4
 800947a:	4619      	mov	r1, r3
 800947c:	4610      	mov	r0, r2
 800947e:	f000 ff4d 	bl	800a31c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d001      	beq.n	8009504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e054      	b.n	80095ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2202      	movs	r2, #2
 8009508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68da      	ldr	r2, [r3, #12]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0201 	orr.w	r2, r2, #1
 800951a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a26      	ldr	r2, [pc, #152]	@ (80095bc <HAL_TIM_Base_Start_IT+0xd0>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d022      	beq.n	800956c <HAL_TIM_Base_Start_IT+0x80>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800952e:	d01d      	beq.n	800956c <HAL_TIM_Base_Start_IT+0x80>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a22      	ldr	r2, [pc, #136]	@ (80095c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d018      	beq.n	800956c <HAL_TIM_Base_Start_IT+0x80>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a21      	ldr	r2, [pc, #132]	@ (80095c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d013      	beq.n	800956c <HAL_TIM_Base_Start_IT+0x80>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a1f      	ldr	r2, [pc, #124]	@ (80095c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d00e      	beq.n	800956c <HAL_TIM_Base_Start_IT+0x80>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a1e      	ldr	r2, [pc, #120]	@ (80095cc <HAL_TIM_Base_Start_IT+0xe0>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d009      	beq.n	800956c <HAL_TIM_Base_Start_IT+0x80>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a1c      	ldr	r2, [pc, #112]	@ (80095d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d004      	beq.n	800956c <HAL_TIM_Base_Start_IT+0x80>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a1b      	ldr	r2, [pc, #108]	@ (80095d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d115      	bne.n	8009598 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689a      	ldr	r2, [r3, #8]
 8009572:	4b19      	ldr	r3, [pc, #100]	@ (80095d8 <HAL_TIM_Base_Start_IT+0xec>)
 8009574:	4013      	ands	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b06      	cmp	r3, #6
 800957c:	d015      	beq.n	80095aa <HAL_TIM_Base_Start_IT+0xbe>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009584:	d011      	beq.n	80095aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f042 0201 	orr.w	r2, r2, #1
 8009594:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009596:	e008      	b.n	80095aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f042 0201 	orr.w	r2, r2, #1
 80095a6:	601a      	str	r2, [r3, #0]
 80095a8:	e000      	b.n	80095ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	40010000 	.word	0x40010000
 80095c0:	40000400 	.word	0x40000400
 80095c4:	40000800 	.word	0x40000800
 80095c8:	40000c00 	.word	0x40000c00
 80095cc:	40010400 	.word	0x40010400
 80095d0:	40001800 	.word	0x40001800
 80095d4:	40014000 	.word	0x40014000
 80095d8:	00010007 	.word	0x00010007

080095dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e049      	b.n	8009682 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d106      	bne.n	8009608 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f841 	bl	800968a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	3304      	adds	r3, #4
 8009618:	4619      	mov	r1, r3
 800961a:	4610      	mov	r0, r2
 800961c:	f000 fe7e 	bl	800a31c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2201      	movs	r2, #1
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3708      	adds	r7, #8
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009692:	bf00      	nop
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
	...

080096a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80096ae:	2300      	movs	r3, #0
 80096b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d109      	bne.n	80096cc <HAL_TIM_PWM_Start_DMA+0x2c>
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	bf0c      	ite	eq
 80096c4:	2301      	moveq	r3, #1
 80096c6:	2300      	movne	r3, #0
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	e03c      	b.n	8009746 <HAL_TIM_PWM_Start_DMA+0xa6>
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b04      	cmp	r3, #4
 80096d0:	d109      	bne.n	80096e6 <HAL_TIM_PWM_Start_DMA+0x46>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b02      	cmp	r3, #2
 80096dc:	bf0c      	ite	eq
 80096de:	2301      	moveq	r3, #1
 80096e0:	2300      	movne	r3, #0
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	e02f      	b.n	8009746 <HAL_TIM_PWM_Start_DMA+0xa6>
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	d109      	bne.n	8009700 <HAL_TIM_PWM_Start_DMA+0x60>
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	bf0c      	ite	eq
 80096f8:	2301      	moveq	r3, #1
 80096fa:	2300      	movne	r3, #0
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	e022      	b.n	8009746 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	2b0c      	cmp	r3, #12
 8009704:	d109      	bne.n	800971a <HAL_TIM_PWM_Start_DMA+0x7a>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800970c:	b2db      	uxtb	r3, r3
 800970e:	2b02      	cmp	r3, #2
 8009710:	bf0c      	ite	eq
 8009712:	2301      	moveq	r3, #1
 8009714:	2300      	movne	r3, #0
 8009716:	b2db      	uxtb	r3, r3
 8009718:	e015      	b.n	8009746 <HAL_TIM_PWM_Start_DMA+0xa6>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b10      	cmp	r3, #16
 800971e:	d109      	bne.n	8009734 <HAL_TIM_PWM_Start_DMA+0x94>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b02      	cmp	r3, #2
 800972a:	bf0c      	ite	eq
 800972c:	2301      	moveq	r3, #1
 800972e:	2300      	movne	r3, #0
 8009730:	b2db      	uxtb	r3, r3
 8009732:	e008      	b.n	8009746 <HAL_TIM_PWM_Start_DMA+0xa6>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	bf0c      	ite	eq
 8009740:	2301      	moveq	r3, #1
 8009742:	2300      	movne	r3, #0
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800974a:	2302      	movs	r3, #2
 800974c:	e1b0      	b.n	8009ab0 <HAL_TIM_PWM_Start_DMA+0x410>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d109      	bne.n	8009768 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b01      	cmp	r3, #1
 800975e:	bf0c      	ite	eq
 8009760:	2301      	moveq	r3, #1
 8009762:	2300      	movne	r3, #0
 8009764:	b2db      	uxtb	r3, r3
 8009766:	e03c      	b.n	80097e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2b04      	cmp	r3, #4
 800976c:	d109      	bne.n	8009782 <HAL_TIM_PWM_Start_DMA+0xe2>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009774:	b2db      	uxtb	r3, r3
 8009776:	2b01      	cmp	r3, #1
 8009778:	bf0c      	ite	eq
 800977a:	2301      	moveq	r3, #1
 800977c:	2300      	movne	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	e02f      	b.n	80097e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	2b08      	cmp	r3, #8
 8009786:	d109      	bne.n	800979c <HAL_TIM_PWM_Start_DMA+0xfc>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b01      	cmp	r3, #1
 8009792:	bf0c      	ite	eq
 8009794:	2301      	moveq	r3, #1
 8009796:	2300      	movne	r3, #0
 8009798:	b2db      	uxtb	r3, r3
 800979a:	e022      	b.n	80097e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	2b0c      	cmp	r3, #12
 80097a0:	d109      	bne.n	80097b6 <HAL_TIM_PWM_Start_DMA+0x116>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	bf0c      	ite	eq
 80097ae:	2301      	moveq	r3, #1
 80097b0:	2300      	movne	r3, #0
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	e015      	b.n	80097e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2b10      	cmp	r3, #16
 80097ba:	d109      	bne.n	80097d0 <HAL_TIM_PWM_Start_DMA+0x130>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	bf0c      	ite	eq
 80097c8:	2301      	moveq	r3, #1
 80097ca:	2300      	movne	r3, #0
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	e008      	b.n	80097e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b01      	cmp	r3, #1
 80097da:	bf0c      	ite	eq
 80097dc:	2301      	moveq	r3, #1
 80097de:	2300      	movne	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d034      	beq.n	8009850 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d002      	beq.n	80097f2 <HAL_TIM_PWM_Start_DMA+0x152>
 80097ec:	887b      	ldrh	r3, [r7, #2]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e15c      	b.n	8009ab0 <HAL_TIM_PWM_Start_DMA+0x410>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <HAL_TIM_PWM_Start_DMA+0x166>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009804:	e026      	b.n	8009854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2b04      	cmp	r3, #4
 800980a:	d104      	bne.n	8009816 <HAL_TIM_PWM_Start_DMA+0x176>
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2202      	movs	r2, #2
 8009810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009814:	e01e      	b.n	8009854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2b08      	cmp	r3, #8
 800981a:	d104      	bne.n	8009826 <HAL_TIM_PWM_Start_DMA+0x186>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2202      	movs	r2, #2
 8009820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009824:	e016      	b.n	8009854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2b0c      	cmp	r3, #12
 800982a:	d104      	bne.n	8009836 <HAL_TIM_PWM_Start_DMA+0x196>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009834:	e00e      	b.n	8009854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2b10      	cmp	r3, #16
 800983a:	d104      	bne.n	8009846 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2202      	movs	r2, #2
 8009840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009844:	e006      	b.n	8009854 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2202      	movs	r2, #2
 800984a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800984e:	e001      	b.n	8009854 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e12d      	b.n	8009ab0 <HAL_TIM_PWM_Start_DMA+0x410>
  }

  switch (Channel)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2b0c      	cmp	r3, #12
 8009858:	f200 80ae 	bhi.w	80099b8 <HAL_TIM_PWM_Start_DMA+0x318>
 800985c:	a201      	add	r2, pc, #4	@ (adr r2, 8009864 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	08009899 	.word	0x08009899
 8009868:	080099b9 	.word	0x080099b9
 800986c:	080099b9 	.word	0x080099b9
 8009870:	080099b9 	.word	0x080099b9
 8009874:	080098e1 	.word	0x080098e1
 8009878:	080099b9 	.word	0x080099b9
 800987c:	080099b9 	.word	0x080099b9
 8009880:	080099b9 	.word	0x080099b9
 8009884:	08009929 	.word	0x08009929
 8009888:	080099b9 	.word	0x080099b9
 800988c:	080099b9 	.word	0x080099b9
 8009890:	080099b9 	.word	0x080099b9
 8009894:	08009971 	.word	0x08009971
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800989c:	4a86      	ldr	r2, [pc, #536]	@ (8009ab8 <HAL_TIM_PWM_Start_DMA+0x418>)
 800989e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098a4:	4a85      	ldr	r2, [pc, #532]	@ (8009abc <HAL_TIM_PWM_Start_DMA+0x41c>)
 80098a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098ac:	4a84      	ldr	r2, [pc, #528]	@ (8009ac0 <HAL_TIM_PWM_Start_DMA+0x420>)
 80098ae:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3334      	adds	r3, #52	@ 0x34
 80098bc:	461a      	mov	r2, r3
 80098be:	887b      	ldrh	r3, [r7, #2]
 80098c0:	f7f9 fe5c 	bl	800357c <HAL_DMA_Start_IT>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d001      	beq.n	80098ce <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e0f0      	b.n	8009ab0 <HAL_TIM_PWM_Start_DMA+0x410>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098dc:	60da      	str	r2, [r3, #12]
      break;
 80098de:	e06e      	b.n	80099be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e4:	4a74      	ldr	r2, [pc, #464]	@ (8009ab8 <HAL_TIM_PWM_Start_DMA+0x418>)
 80098e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ec:	4a73      	ldr	r2, [pc, #460]	@ (8009abc <HAL_TIM_PWM_Start_DMA+0x41c>)
 80098ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f4:	4a72      	ldr	r2, [pc, #456]	@ (8009ac0 <HAL_TIM_PWM_Start_DMA+0x420>)
 80098f6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3338      	adds	r3, #56	@ 0x38
 8009904:	461a      	mov	r2, r3
 8009906:	887b      	ldrh	r3, [r7, #2]
 8009908:	f7f9 fe38 	bl	800357c <HAL_DMA_Start_IT>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e0cc      	b.n	8009ab0 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68da      	ldr	r2, [r3, #12]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009924:	60da      	str	r2, [r3, #12]
      break;
 8009926:	e04a      	b.n	80099be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992c:	4a62      	ldr	r2, [pc, #392]	@ (8009ab8 <HAL_TIM_PWM_Start_DMA+0x418>)
 800992e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009934:	4a61      	ldr	r2, [pc, #388]	@ (8009abc <HAL_TIM_PWM_Start_DMA+0x41c>)
 8009936:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993c:	4a60      	ldr	r2, [pc, #384]	@ (8009ac0 <HAL_TIM_PWM_Start_DMA+0x420>)
 800993e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	333c      	adds	r3, #60	@ 0x3c
 800994c:	461a      	mov	r2, r3
 800994e:	887b      	ldrh	r3, [r7, #2]
 8009950:	f7f9 fe14 	bl	800357c <HAL_DMA_Start_IT>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e0a8      	b.n	8009ab0 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800996c:	60da      	str	r2, [r3, #12]
      break;
 800996e:	e026      	b.n	80099be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009974:	4a50      	ldr	r2, [pc, #320]	@ (8009ab8 <HAL_TIM_PWM_Start_DMA+0x418>)
 8009976:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997c:	4a4f      	ldr	r2, [pc, #316]	@ (8009abc <HAL_TIM_PWM_Start_DMA+0x41c>)
 800997e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009984:	4a4e      	ldr	r2, [pc, #312]	@ (8009ac0 <HAL_TIM_PWM_Start_DMA+0x420>)
 8009986:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800998c:	6879      	ldr	r1, [r7, #4]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3340      	adds	r3, #64	@ 0x40
 8009994:	461a      	mov	r2, r3
 8009996:	887b      	ldrh	r3, [r7, #2]
 8009998:	f7f9 fdf0 	bl	800357c <HAL_DMA_Start_IT>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e084      	b.n	8009ab0 <HAL_TIM_PWM_Start_DMA+0x410>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68da      	ldr	r2, [r3, #12]
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80099b4:	60da      	str	r2, [r3, #12]
      break;
 80099b6:	e002      	b.n	80099be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	75fb      	strb	r3, [r7, #23]
      break;
 80099bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80099be:	7dfb      	ldrb	r3, [r7, #23]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d174      	bne.n	8009aae <HAL_TIM_PWM_Start_DMA+0x40e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2201      	movs	r2, #1
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 f8b9 	bl	800ab44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a3b      	ldr	r2, [pc, #236]	@ (8009ac4 <HAL_TIM_PWM_Start_DMA+0x424>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d013      	beq.n	8009a04 <HAL_TIM_PWM_Start_DMA+0x364>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a39      	ldr	r2, [pc, #228]	@ (8009ac8 <HAL_TIM_PWM_Start_DMA+0x428>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d00e      	beq.n	8009a04 <HAL_TIM_PWM_Start_DMA+0x364>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a38      	ldr	r2, [pc, #224]	@ (8009acc <HAL_TIM_PWM_Start_DMA+0x42c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d009      	beq.n	8009a04 <HAL_TIM_PWM_Start_DMA+0x364>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a36      	ldr	r2, [pc, #216]	@ (8009ad0 <HAL_TIM_PWM_Start_DMA+0x430>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d004      	beq.n	8009a04 <HAL_TIM_PWM_Start_DMA+0x364>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a35      	ldr	r2, [pc, #212]	@ (8009ad4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d101      	bne.n	8009a08 <HAL_TIM_PWM_Start_DMA+0x368>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <HAL_TIM_PWM_Start_DMA+0x36a>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d007      	beq.n	8009a1e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4a28      	ldr	r2, [pc, #160]	@ (8009ac4 <HAL_TIM_PWM_Start_DMA+0x424>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d022      	beq.n	8009a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a30:	d01d      	beq.n	8009a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a28      	ldr	r2, [pc, #160]	@ (8009ad8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d018      	beq.n	8009a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a26      	ldr	r2, [pc, #152]	@ (8009adc <HAL_TIM_PWM_Start_DMA+0x43c>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d013      	beq.n	8009a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a25      	ldr	r2, [pc, #148]	@ (8009ae0 <HAL_TIM_PWM_Start_DMA+0x440>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d00e      	beq.n	8009a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a1c      	ldr	r2, [pc, #112]	@ (8009ac8 <HAL_TIM_PWM_Start_DMA+0x428>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d009      	beq.n	8009a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a21      	ldr	r2, [pc, #132]	@ (8009ae4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d004      	beq.n	8009a6e <HAL_TIM_PWM_Start_DMA+0x3ce>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a18      	ldr	r2, [pc, #96]	@ (8009acc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d115      	bne.n	8009a9a <HAL_TIM_PWM_Start_DMA+0x3fa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	689a      	ldr	r2, [r3, #8]
 8009a74:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae8 <HAL_TIM_PWM_Start_DMA+0x448>)
 8009a76:	4013      	ands	r3, r2
 8009a78:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2b06      	cmp	r3, #6
 8009a7e:	d015      	beq.n	8009aac <HAL_TIM_PWM_Start_DMA+0x40c>
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a86:	d011      	beq.n	8009aac <HAL_TIM_PWM_Start_DMA+0x40c>
      {
        __HAL_TIM_ENABLE(htim);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f042 0201 	orr.w	r2, r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a98:	e008      	b.n	8009aac <HAL_TIM_PWM_Start_DMA+0x40c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f042 0201 	orr.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	e000      	b.n	8009aae <HAL_TIM_PWM_Start_DMA+0x40e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aac:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3718      	adds	r7, #24
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	0800a20b 	.word	0x0800a20b
 8009abc:	0800a2b3 	.word	0x0800a2b3
 8009ac0:	0800a179 	.word	0x0800a179
 8009ac4:	40010000 	.word	0x40010000
 8009ac8:	40010400 	.word	0x40010400
 8009acc:	40014000 	.word	0x40014000
 8009ad0:	40014400 	.word	0x40014400
 8009ad4:	40014800 	.word	0x40014800
 8009ad8:	40000400 	.word	0x40000400
 8009adc:	40000800 	.word	0x40000800
 8009ae0:	40000c00 	.word	0x40000c00
 8009ae4:	40001800 	.word	0x40001800
 8009ae8:	00010007 	.word	0x00010007

08009aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d020      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d01b      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f06f 0202 	mvn.w	r2, #2
 8009b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 faf6 	bl	800a128 <HAL_TIM_IC_CaptureCallback>
 8009b3c:	e005      	b.n	8009b4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fae8 	bl	800a114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 faf9 	bl	800a13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f003 0304 	and.w	r3, r3, #4
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d020      	beq.n	8009b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d01b      	beq.n	8009b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f06f 0204 	mvn.w	r2, #4
 8009b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2202      	movs	r2, #2
 8009b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fad0 	bl	800a128 <HAL_TIM_IC_CaptureCallback>
 8009b88:	e005      	b.n	8009b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fac2 	bl	800a114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fad3 	bl	800a13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f003 0308 	and.w	r3, r3, #8
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d020      	beq.n	8009be8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f003 0308 	and.w	r3, r3, #8
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01b      	beq.n	8009be8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f06f 0208 	mvn.w	r2, #8
 8009bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d003      	beq.n	8009bd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 faaa 	bl	800a128 <HAL_TIM_IC_CaptureCallback>
 8009bd4:	e005      	b.n	8009be2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fa9c 	bl	800a114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 faad 	bl	800a13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f003 0310 	and.w	r3, r3, #16
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d020      	beq.n	8009c34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f003 0310 	and.w	r3, r3, #16
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01b      	beq.n	8009c34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f06f 0210 	mvn.w	r2, #16
 8009c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2208      	movs	r2, #8
 8009c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d003      	beq.n	8009c22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fa84 	bl	800a128 <HAL_TIM_IC_CaptureCallback>
 8009c20:	e005      	b.n	8009c2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f000 fa76 	bl	800a114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fa87 	bl	800a13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00c      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d007      	beq.n	8009c58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f06f 0201 	mvn.w	r2, #1
 8009c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7f6 ffb6 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d104      	bne.n	8009c6c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d00c      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d007      	beq.n	8009c86 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f001 f81d 	bl	800acc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00c      	beq.n	8009caa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f001 f815 	bl	800acd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00c      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d007      	beq.n	8009cce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fa41 	bl	800a150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00c      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f06f 0220 	mvn.w	r2, #32
 8009cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 ffdd 	bl	800acac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cf2:	bf00      	nop
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
	...

08009cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d101      	bne.n	8009d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d16:	2302      	movs	r3, #2
 8009d18:	e0ff      	b.n	8009f1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b14      	cmp	r3, #20
 8009d26:	f200 80f0 	bhi.w	8009f0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d85 	.word	0x08009d85
 8009d34:	08009f0b 	.word	0x08009f0b
 8009d38:	08009f0b 	.word	0x08009f0b
 8009d3c:	08009f0b 	.word	0x08009f0b
 8009d40:	08009dc5 	.word	0x08009dc5
 8009d44:	08009f0b 	.word	0x08009f0b
 8009d48:	08009f0b 	.word	0x08009f0b
 8009d4c:	08009f0b 	.word	0x08009f0b
 8009d50:	08009e07 	.word	0x08009e07
 8009d54:	08009f0b 	.word	0x08009f0b
 8009d58:	08009f0b 	.word	0x08009f0b
 8009d5c:	08009f0b 	.word	0x08009f0b
 8009d60:	08009e47 	.word	0x08009e47
 8009d64:	08009f0b 	.word	0x08009f0b
 8009d68:	08009f0b 	.word	0x08009f0b
 8009d6c:	08009f0b 	.word	0x08009f0b
 8009d70:	08009e89 	.word	0x08009e89
 8009d74:	08009f0b 	.word	0x08009f0b
 8009d78:	08009f0b 	.word	0x08009f0b
 8009d7c:	08009f0b 	.word	0x08009f0b
 8009d80:	08009ec9 	.word	0x08009ec9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68b9      	ldr	r1, [r7, #8]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 fb66 	bl	800a45c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0208 	orr.w	r2, r2, #8
 8009d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699a      	ldr	r2, [r3, #24]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f022 0204 	bic.w	r2, r2, #4
 8009dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6999      	ldr	r1, [r3, #24]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	691a      	ldr	r2, [r3, #16]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	619a      	str	r2, [r3, #24]
      break;
 8009dc2:	e0a5      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 fbd6 	bl	800a57c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	699a      	ldr	r2, [r3, #24]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6999      	ldr	r1, [r3, #24]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	021a      	lsls	r2, r3, #8
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	619a      	str	r2, [r3, #24]
      break;
 8009e04:	e084      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 fc3f 	bl	800a690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69da      	ldr	r2, [r3, #28]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0208 	orr.w	r2, r2, #8
 8009e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69da      	ldr	r2, [r3, #28]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f022 0204 	bic.w	r2, r2, #4
 8009e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69d9      	ldr	r1, [r3, #28]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	61da      	str	r2, [r3, #28]
      break;
 8009e44:	e064      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fca7 	bl	800a7a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69da      	ldr	r2, [r3, #28]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	69da      	ldr	r2, [r3, #28]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69d9      	ldr	r1, [r3, #28]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	021a      	lsls	r2, r3, #8
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	61da      	str	r2, [r3, #28]
      break;
 8009e86:	e043      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fcf0 	bl	800a874 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 0208 	orr.w	r2, r2, #8
 8009ea2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f022 0204 	bic.w	r2, r2, #4
 8009eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	691a      	ldr	r2, [r3, #16]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009ec6:	e023      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	68b9      	ldr	r1, [r7, #8]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 fd34 	bl	800a93c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ee2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ef2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	021a      	lsls	r2, r3, #8
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	430a      	orrs	r2, r1
 8009f06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009f08:	e002      	b.n	8009f10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop

08009f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d101      	bne.n	8009f40 <HAL_TIM_ConfigClockSource+0x1c>
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	e0dc      	b.n	800a0fa <HAL_TIM_ConfigClockSource+0x1d6>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2201      	movs	r2, #1
 8009f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f58:	68ba      	ldr	r2, [r7, #8]
 8009f5a:	4b6a      	ldr	r3, [pc, #424]	@ (800a104 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68ba      	ldr	r2, [r7, #8]
 8009f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a64      	ldr	r2, [pc, #400]	@ (800a108 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	f000 80a9 	beq.w	800a0ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009f7c:	4a62      	ldr	r2, [pc, #392]	@ (800a108 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	f200 80ae 	bhi.w	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f84:	4a61      	ldr	r2, [pc, #388]	@ (800a10c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	f000 80a1 	beq.w	800a0ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009f8c:	4a5f      	ldr	r2, [pc, #380]	@ (800a10c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	f200 80a6 	bhi.w	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009f94:	4a5e      	ldr	r2, [pc, #376]	@ (800a110 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	f000 8099 	beq.w	800a0ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009f9c:	4a5c      	ldr	r2, [pc, #368]	@ (800a110 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	f200 809e 	bhi.w	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fa4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009fa8:	f000 8091 	beq.w	800a0ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009fac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009fb0:	f200 8096 	bhi.w	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fb8:	f000 8089 	beq.w	800a0ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fc0:	f200 808e 	bhi.w	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fc8:	d03e      	beq.n	800a048 <HAL_TIM_ConfigClockSource+0x124>
 8009fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fce:	f200 8087 	bhi.w	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fd6:	f000 8086 	beq.w	800a0e6 <HAL_TIM_ConfigClockSource+0x1c2>
 8009fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fde:	d87f      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fe0:	2b70      	cmp	r3, #112	@ 0x70
 8009fe2:	d01a      	beq.n	800a01a <HAL_TIM_ConfigClockSource+0xf6>
 8009fe4:	2b70      	cmp	r3, #112	@ 0x70
 8009fe6:	d87b      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009fe8:	2b60      	cmp	r3, #96	@ 0x60
 8009fea:	d050      	beq.n	800a08e <HAL_TIM_ConfigClockSource+0x16a>
 8009fec:	2b60      	cmp	r3, #96	@ 0x60
 8009fee:	d877      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ff0:	2b50      	cmp	r3, #80	@ 0x50
 8009ff2:	d03c      	beq.n	800a06e <HAL_TIM_ConfigClockSource+0x14a>
 8009ff4:	2b50      	cmp	r3, #80	@ 0x50
 8009ff6:	d873      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ff8:	2b40      	cmp	r3, #64	@ 0x40
 8009ffa:	d058      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0x18a>
 8009ffc:	2b40      	cmp	r3, #64	@ 0x40
 8009ffe:	d86f      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a000:	2b30      	cmp	r3, #48	@ 0x30
 800a002:	d064      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800a004:	2b30      	cmp	r3, #48	@ 0x30
 800a006:	d86b      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d060      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	d867      	bhi.n	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d05c      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800a014:	2b10      	cmp	r3, #16
 800a016:	d05a      	beq.n	800a0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800a018:	e062      	b.n	800a0e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a02a:	f000 fd6b 	bl	800ab04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a03c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	609a      	str	r2, [r3, #8]
      break;
 800a046:	e04f      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a058:	f000 fd54 	bl	800ab04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689a      	ldr	r2, [r3, #8]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a06a:	609a      	str	r2, [r3, #8]
      break;
 800a06c:	e03c      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a07a:	461a      	mov	r2, r3
 800a07c:	f000 fcc4 	bl	800aa08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2150      	movs	r1, #80	@ 0x50
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fd1e 	bl	800aac8 <TIM_ITRx_SetConfig>
      break;
 800a08c:	e02c      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a09a:	461a      	mov	r2, r3
 800a09c:	f000 fce3 	bl	800aa66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2160      	movs	r1, #96	@ 0x60
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fd0e 	bl	800aac8 <TIM_ITRx_SetConfig>
      break;
 800a0ac:	e01c      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f000 fca4 	bl	800aa08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2140      	movs	r1, #64	@ 0x40
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fcfe 	bl	800aac8 <TIM_ITRx_SetConfig>
      break;
 800a0cc:	e00c      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f000 fcf5 	bl	800aac8 <TIM_ITRx_SetConfig>
      break;
 800a0de:	e003      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0e4:	e000      	b.n	800a0e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a0e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	ffceff88 	.word	0xffceff88
 800a108:	00100040 	.word	0x00100040
 800a10c:	00100030 	.word	0x00100030
 800a110:	00100020 	.word	0x00100020

0800a114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a184:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d107      	bne.n	800a1a0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2201      	movs	r2, #1
 800a194:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a19e:	e02a      	b.n	800a1f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d107      	bne.n	800a1ba <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1b8:	e01d      	b.n	800a1f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d107      	bne.n	800a1d4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2204      	movs	r2, #4
 800a1c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1d2:	e010      	b.n	800a1f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d107      	bne.n	800a1ee <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2208      	movs	r2, #8
 800a1e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1ec:	e003      	b.n	800a1f6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff ffb4 	bl	800a164 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	771a      	strb	r2, [r3, #28]
}
 800a202:	bf00      	nop
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b084      	sub	sp, #16
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a216:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d10b      	bne.n	800a23a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2201      	movs	r2, #1
 800a226:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d136      	bne.n	800a29e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a238:	e031      	b.n	800a29e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	429a      	cmp	r2, r3
 800a242:	d10b      	bne.n	800a25c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2202      	movs	r2, #2
 800a248:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	69db      	ldr	r3, [r3, #28]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d125      	bne.n	800a29e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a25a:	e020      	b.n	800a29e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	429a      	cmp	r2, r3
 800a264:	d10b      	bne.n	800a27e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2204      	movs	r2, #4
 800a26a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d114      	bne.n	800a29e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2201      	movs	r2, #1
 800a278:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a27c:	e00f      	b.n	800a29e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	429a      	cmp	r2, r3
 800a286:	d10a      	bne.n	800a29e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2208      	movs	r2, #8
 800a28c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d103      	bne.n	800a29e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f7ff ff4c 	bl	800a13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	771a      	strb	r2, [r3, #28]
}
 800a2aa:	bf00      	nop
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2be:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d103      	bne.n	800a2d2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	771a      	strb	r2, [r3, #28]
 800a2d0:	e019      	b.n	800a306 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d103      	bne.n	800a2e4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	771a      	strb	r2, [r3, #28]
 800a2e2:	e010      	b.n	800a306 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d103      	bne.n	800a2f6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2204      	movs	r2, #4
 800a2f2:	771a      	strb	r2, [r3, #28]
 800a2f4:	e007      	b.n	800a306 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d102      	bne.n	800a306 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2208      	movs	r2, #8
 800a304:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f7f6 fc78 	bl	8000bfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	771a      	strb	r2, [r3, #28]
}
 800a312:	bf00      	nop
 800a314:	3710      	adds	r7, #16
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a43      	ldr	r2, [pc, #268]	@ (800a43c <TIM_Base_SetConfig+0x120>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d013      	beq.n	800a35c <TIM_Base_SetConfig+0x40>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a33a:	d00f      	beq.n	800a35c <TIM_Base_SetConfig+0x40>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a40      	ldr	r2, [pc, #256]	@ (800a440 <TIM_Base_SetConfig+0x124>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00b      	beq.n	800a35c <TIM_Base_SetConfig+0x40>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a3f      	ldr	r2, [pc, #252]	@ (800a444 <TIM_Base_SetConfig+0x128>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d007      	beq.n	800a35c <TIM_Base_SetConfig+0x40>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a3e      	ldr	r2, [pc, #248]	@ (800a448 <TIM_Base_SetConfig+0x12c>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d003      	beq.n	800a35c <TIM_Base_SetConfig+0x40>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a3d      	ldr	r2, [pc, #244]	@ (800a44c <TIM_Base_SetConfig+0x130>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d108      	bne.n	800a36e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4a32      	ldr	r2, [pc, #200]	@ (800a43c <TIM_Base_SetConfig+0x120>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d01f      	beq.n	800a3b6 <TIM_Base_SetConfig+0x9a>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a37c:	d01b      	beq.n	800a3b6 <TIM_Base_SetConfig+0x9a>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	4a2f      	ldr	r2, [pc, #188]	@ (800a440 <TIM_Base_SetConfig+0x124>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d017      	beq.n	800a3b6 <TIM_Base_SetConfig+0x9a>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4a2e      	ldr	r2, [pc, #184]	@ (800a444 <TIM_Base_SetConfig+0x128>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d013      	beq.n	800a3b6 <TIM_Base_SetConfig+0x9a>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4a2d      	ldr	r2, [pc, #180]	@ (800a448 <TIM_Base_SetConfig+0x12c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d00f      	beq.n	800a3b6 <TIM_Base_SetConfig+0x9a>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4a2c      	ldr	r2, [pc, #176]	@ (800a44c <TIM_Base_SetConfig+0x130>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d00b      	beq.n	800a3b6 <TIM_Base_SetConfig+0x9a>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a2b      	ldr	r2, [pc, #172]	@ (800a450 <TIM_Base_SetConfig+0x134>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d007      	beq.n	800a3b6 <TIM_Base_SetConfig+0x9a>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	4a2a      	ldr	r2, [pc, #168]	@ (800a454 <TIM_Base_SetConfig+0x138>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d003      	beq.n	800a3b6 <TIM_Base_SetConfig+0x9a>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a29      	ldr	r2, [pc, #164]	@ (800a458 <TIM_Base_SetConfig+0x13c>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d108      	bne.n	800a3c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	68fa      	ldr	r2, [r7, #12]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a14      	ldr	r2, [pc, #80]	@ (800a43c <TIM_Base_SetConfig+0x120>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d00f      	beq.n	800a40e <TIM_Base_SetConfig+0xf2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a16      	ldr	r2, [pc, #88]	@ (800a44c <TIM_Base_SetConfig+0x130>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00b      	beq.n	800a40e <TIM_Base_SetConfig+0xf2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a15      	ldr	r2, [pc, #84]	@ (800a450 <TIM_Base_SetConfig+0x134>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d007      	beq.n	800a40e <TIM_Base_SetConfig+0xf2>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a14      	ldr	r2, [pc, #80]	@ (800a454 <TIM_Base_SetConfig+0x138>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d003      	beq.n	800a40e <TIM_Base_SetConfig+0xf2>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a13      	ldr	r2, [pc, #76]	@ (800a458 <TIM_Base_SetConfig+0x13c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d103      	bne.n	800a416 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	691a      	ldr	r2, [r3, #16]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f043 0204 	orr.w	r2, r3, #4
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	601a      	str	r2, [r3, #0]
}
 800a42e:	bf00      	nop
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	40010000 	.word	0x40010000
 800a440:	40000400 	.word	0x40000400
 800a444:	40000800 	.word	0x40000800
 800a448:	40000c00 	.word	0x40000c00
 800a44c:	40010400 	.word	0x40010400
 800a450:	40014000 	.word	0x40014000
 800a454:	40014400 	.word	0x40014400
 800a458:	40014800 	.word	0x40014800

0800a45c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b087      	sub	sp, #28
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a1b      	ldr	r3, [r3, #32]
 800a46a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	f023 0201 	bic.w	r2, r3, #1
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	4b37      	ldr	r3, [pc, #220]	@ (800a564 <TIM_OC1_SetConfig+0x108>)
 800a488:	4013      	ands	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0303 	bic.w	r3, r3, #3
 800a492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f023 0302 	bic.w	r3, r3, #2
 800a4a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a2d      	ldr	r2, [pc, #180]	@ (800a568 <TIM_OC1_SetConfig+0x10c>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d00f      	beq.n	800a4d8 <TIM_OC1_SetConfig+0x7c>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a2c      	ldr	r2, [pc, #176]	@ (800a56c <TIM_OC1_SetConfig+0x110>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00b      	beq.n	800a4d8 <TIM_OC1_SetConfig+0x7c>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a2b      	ldr	r2, [pc, #172]	@ (800a570 <TIM_OC1_SetConfig+0x114>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d007      	beq.n	800a4d8 <TIM_OC1_SetConfig+0x7c>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a574 <TIM_OC1_SetConfig+0x118>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d003      	beq.n	800a4d8 <TIM_OC1_SetConfig+0x7c>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a29      	ldr	r2, [pc, #164]	@ (800a578 <TIM_OC1_SetConfig+0x11c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d10c      	bne.n	800a4f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	f023 0308 	bic.w	r3, r3, #8
 800a4de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f023 0304 	bic.w	r3, r3, #4
 800a4f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a568 <TIM_OC1_SetConfig+0x10c>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d00f      	beq.n	800a51a <TIM_OC1_SetConfig+0xbe>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a56c <TIM_OC1_SetConfig+0x110>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d00b      	beq.n	800a51a <TIM_OC1_SetConfig+0xbe>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a1a      	ldr	r2, [pc, #104]	@ (800a570 <TIM_OC1_SetConfig+0x114>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d007      	beq.n	800a51a <TIM_OC1_SetConfig+0xbe>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a19      	ldr	r2, [pc, #100]	@ (800a574 <TIM_OC1_SetConfig+0x118>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d003      	beq.n	800a51a <TIM_OC1_SetConfig+0xbe>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a18      	ldr	r2, [pc, #96]	@ (800a578 <TIM_OC1_SetConfig+0x11c>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d111      	bne.n	800a53e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	4313      	orrs	r3, r2
 800a532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685a      	ldr	r2, [r3, #4]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	697a      	ldr	r2, [r7, #20]
 800a556:	621a      	str	r2, [r3, #32]
}
 800a558:	bf00      	nop
 800a55a:	371c      	adds	r7, #28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	fffeff8f 	.word	0xfffeff8f
 800a568:	40010000 	.word	0x40010000
 800a56c:	40010400 	.word	0x40010400
 800a570:	40014000 	.word	0x40014000
 800a574:	40014400 	.word	0x40014400
 800a578:	40014800 	.word	0x40014800

0800a57c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a1b      	ldr	r3, [r3, #32]
 800a58a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a1b      	ldr	r3, [r3, #32]
 800a590:	f023 0210 	bic.w	r2, r3, #16
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a5a4:	68fa      	ldr	r2, [r7, #12]
 800a5a6:	4b34      	ldr	r3, [pc, #208]	@ (800a678 <TIM_OC2_SetConfig+0xfc>)
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	021b      	lsls	r3, r3, #8
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f023 0320 	bic.w	r3, r3, #32
 800a5c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	011b      	lsls	r3, r3, #4
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a29      	ldr	r2, [pc, #164]	@ (800a67c <TIM_OC2_SetConfig+0x100>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d003      	beq.n	800a5e4 <TIM_OC2_SetConfig+0x68>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a28      	ldr	r2, [pc, #160]	@ (800a680 <TIM_OC2_SetConfig+0x104>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d10d      	bne.n	800a600 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a5ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	011b      	lsls	r3, r3, #4
 800a5f2:	697a      	ldr	r2, [r7, #20]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a1e      	ldr	r2, [pc, #120]	@ (800a67c <TIM_OC2_SetConfig+0x100>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d00f      	beq.n	800a628 <TIM_OC2_SetConfig+0xac>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a1d      	ldr	r2, [pc, #116]	@ (800a680 <TIM_OC2_SetConfig+0x104>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d00b      	beq.n	800a628 <TIM_OC2_SetConfig+0xac>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a1c      	ldr	r2, [pc, #112]	@ (800a684 <TIM_OC2_SetConfig+0x108>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d007      	beq.n	800a628 <TIM_OC2_SetConfig+0xac>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a1b      	ldr	r2, [pc, #108]	@ (800a688 <TIM_OC2_SetConfig+0x10c>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d003      	beq.n	800a628 <TIM_OC2_SetConfig+0xac>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a1a      	ldr	r2, [pc, #104]	@ (800a68c <TIM_OC2_SetConfig+0x110>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d113      	bne.n	800a650 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a62e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	4313      	orrs	r3, r2
 800a642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	621a      	str	r2, [r3, #32]
}
 800a66a:	bf00      	nop
 800a66c:	371c      	adds	r7, #28
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	feff8fff 	.word	0xfeff8fff
 800a67c:	40010000 	.word	0x40010000
 800a680:	40010400 	.word	0x40010400
 800a684:	40014000 	.word	0x40014000
 800a688:	40014400 	.word	0x40014400
 800a68c:	40014800 	.word	0x40014800

0800a690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a690:	b480      	push	{r7}
 800a692:	b087      	sub	sp, #28
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
 800a698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6a1b      	ldr	r3, [r3, #32]
 800a6a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	69db      	ldr	r3, [r3, #28]
 800a6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	4b33      	ldr	r3, [pc, #204]	@ (800a788 <TIM_OC3_SetConfig+0xf8>)
 800a6bc:	4013      	ands	r3, r2
 800a6be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	f023 0303 	bic.w	r3, r3, #3
 800a6c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	021b      	lsls	r3, r3, #8
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a28      	ldr	r2, [pc, #160]	@ (800a78c <TIM_OC3_SetConfig+0xfc>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d003      	beq.n	800a6f6 <TIM_OC3_SetConfig+0x66>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a27      	ldr	r2, [pc, #156]	@ (800a790 <TIM_OC3_SetConfig+0x100>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d10d      	bne.n	800a712 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a6fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	4313      	orrs	r3, r2
 800a708:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a710:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	4a1d      	ldr	r2, [pc, #116]	@ (800a78c <TIM_OC3_SetConfig+0xfc>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d00f      	beq.n	800a73a <TIM_OC3_SetConfig+0xaa>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4a1c      	ldr	r2, [pc, #112]	@ (800a790 <TIM_OC3_SetConfig+0x100>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d00b      	beq.n	800a73a <TIM_OC3_SetConfig+0xaa>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	4a1b      	ldr	r2, [pc, #108]	@ (800a794 <TIM_OC3_SetConfig+0x104>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d007      	beq.n	800a73a <TIM_OC3_SetConfig+0xaa>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	4a1a      	ldr	r2, [pc, #104]	@ (800a798 <TIM_OC3_SetConfig+0x108>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d003      	beq.n	800a73a <TIM_OC3_SetConfig+0xaa>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4a19      	ldr	r2, [pc, #100]	@ (800a79c <TIM_OC3_SetConfig+0x10c>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d113      	bne.n	800a762 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	695b      	ldr	r3, [r3, #20]
 800a74e:	011b      	lsls	r3, r3, #4
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	4313      	orrs	r3, r2
 800a754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	011b      	lsls	r3, r3, #4
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	4313      	orrs	r3, r2
 800a760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	621a      	str	r2, [r3, #32]
}
 800a77c:	bf00      	nop
 800a77e:	371c      	adds	r7, #28
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	fffeff8f 	.word	0xfffeff8f
 800a78c:	40010000 	.word	0x40010000
 800a790:	40010400 	.word	0x40010400
 800a794:	40014000 	.word	0x40014000
 800a798:	40014400 	.word	0x40014400
 800a79c:	40014800 	.word	0x40014800

0800a7a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4b24      	ldr	r3, [pc, #144]	@ (800a85c <TIM_OC4_SetConfig+0xbc>)
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	021b      	lsls	r3, r3, #8
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a7ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	031b      	lsls	r3, r3, #12
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a19      	ldr	r2, [pc, #100]	@ (800a860 <TIM_OC4_SetConfig+0xc0>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d00f      	beq.n	800a820 <TIM_OC4_SetConfig+0x80>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a18      	ldr	r2, [pc, #96]	@ (800a864 <TIM_OC4_SetConfig+0xc4>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d00b      	beq.n	800a820 <TIM_OC4_SetConfig+0x80>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a17      	ldr	r2, [pc, #92]	@ (800a868 <TIM_OC4_SetConfig+0xc8>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d007      	beq.n	800a820 <TIM_OC4_SetConfig+0x80>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a16      	ldr	r2, [pc, #88]	@ (800a86c <TIM_OC4_SetConfig+0xcc>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d003      	beq.n	800a820 <TIM_OC4_SetConfig+0x80>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a15      	ldr	r2, [pc, #84]	@ (800a870 <TIM_OC4_SetConfig+0xd0>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d109      	bne.n	800a834 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	695b      	ldr	r3, [r3, #20]
 800a82c:	019b      	lsls	r3, r3, #6
 800a82e:	697a      	ldr	r2, [r7, #20]
 800a830:	4313      	orrs	r3, r2
 800a832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	697a      	ldr	r2, [r7, #20]
 800a838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	621a      	str	r2, [r3, #32]
}
 800a84e:	bf00      	nop
 800a850:	371c      	adds	r7, #28
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	feff8fff 	.word	0xfeff8fff
 800a860:	40010000 	.word	0x40010000
 800a864:	40010400 	.word	0x40010400
 800a868:	40014000 	.word	0x40014000
 800a86c:	40014400 	.word	0x40014400
 800a870:	40014800 	.word	0x40014800

0800a874 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a874:	b480      	push	{r7}
 800a876:	b087      	sub	sp, #28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	4b21      	ldr	r3, [pc, #132]	@ (800a924 <TIM_OC5_SetConfig+0xb0>)
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68fa      	ldr	r2, [r7, #12]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a8b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	041b      	lsls	r3, r3, #16
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a18      	ldr	r2, [pc, #96]	@ (800a928 <TIM_OC5_SetConfig+0xb4>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d00f      	beq.n	800a8ea <TIM_OC5_SetConfig+0x76>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a17      	ldr	r2, [pc, #92]	@ (800a92c <TIM_OC5_SetConfig+0xb8>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d00b      	beq.n	800a8ea <TIM_OC5_SetConfig+0x76>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	4a16      	ldr	r2, [pc, #88]	@ (800a930 <TIM_OC5_SetConfig+0xbc>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d007      	beq.n	800a8ea <TIM_OC5_SetConfig+0x76>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a15      	ldr	r2, [pc, #84]	@ (800a934 <TIM_OC5_SetConfig+0xc0>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d003      	beq.n	800a8ea <TIM_OC5_SetConfig+0x76>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a14      	ldr	r2, [pc, #80]	@ (800a938 <TIM_OC5_SetConfig+0xc4>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d109      	bne.n	800a8fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	021b      	lsls	r3, r3, #8
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685a      	ldr	r2, [r3, #4]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	621a      	str	r2, [r3, #32]
}
 800a918:	bf00      	nop
 800a91a:	371c      	adds	r7, #28
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	fffeff8f 	.word	0xfffeff8f
 800a928:	40010000 	.word	0x40010000
 800a92c:	40010400 	.word	0x40010400
 800a930:	40014000 	.word	0x40014000
 800a934:	40014400 	.word	0x40014400
 800a938:	40014800 	.word	0x40014800

0800a93c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a1b      	ldr	r3, [r3, #32]
 800a950:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	4b22      	ldr	r3, [pc, #136]	@ (800a9f0 <TIM_OC6_SetConfig+0xb4>)
 800a968:	4013      	ands	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a97e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	051b      	lsls	r3, r3, #20
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	4313      	orrs	r3, r2
 800a98a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a19      	ldr	r2, [pc, #100]	@ (800a9f4 <TIM_OC6_SetConfig+0xb8>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d00f      	beq.n	800a9b4 <TIM_OC6_SetConfig+0x78>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a18      	ldr	r2, [pc, #96]	@ (800a9f8 <TIM_OC6_SetConfig+0xbc>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d00b      	beq.n	800a9b4 <TIM_OC6_SetConfig+0x78>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a17      	ldr	r2, [pc, #92]	@ (800a9fc <TIM_OC6_SetConfig+0xc0>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d007      	beq.n	800a9b4 <TIM_OC6_SetConfig+0x78>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a16      	ldr	r2, [pc, #88]	@ (800aa00 <TIM_OC6_SetConfig+0xc4>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d003      	beq.n	800a9b4 <TIM_OC6_SetConfig+0x78>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a15      	ldr	r2, [pc, #84]	@ (800aa04 <TIM_OC6_SetConfig+0xc8>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d109      	bne.n	800a9c8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	695b      	ldr	r3, [r3, #20]
 800a9c0:	029b      	lsls	r3, r3, #10
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685a      	ldr	r2, [r3, #4]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	621a      	str	r2, [r3, #32]
}
 800a9e2:	bf00      	nop
 800a9e4:	371c      	adds	r7, #28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	feff8fff 	.word	0xfeff8fff
 800a9f4:	40010000 	.word	0x40010000
 800a9f8:	40010400 	.word	0x40010400
 800a9fc:	40014000 	.word	0x40014000
 800aa00:	40014400 	.word	0x40014400
 800aa04:	40014800 	.word	0x40014800

0800aa08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	f023 0201 	bic.w	r2, r3, #1
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	699b      	ldr	r3, [r3, #24]
 800aa2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	011b      	lsls	r3, r3, #4
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f023 030a 	bic.w	r3, r3, #10
 800aa44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	621a      	str	r2, [r3, #32]
}
 800aa5a:	bf00      	nop
 800aa5c:	371c      	adds	r7, #28
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b087      	sub	sp, #28
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	f023 0210 	bic.w	r2, r3, #16
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aa90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	031b      	lsls	r3, r3, #12
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aaa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	011b      	lsls	r3, r3, #4
 800aaa8:	697a      	ldr	r2, [r7, #20]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	697a      	ldr	r2, [r7, #20]
 800aab8:	621a      	str	r2, [r3, #32]
}
 800aaba:	bf00      	nop
 800aabc:	371c      	adds	r7, #28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac4:	4770      	bx	lr
	...

0800aac8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	4b09      	ldr	r3, [pc, #36]	@ (800ab00 <TIM_ITRx_SetConfig+0x38>)
 800aadc:	4013      	ands	r3, r2
 800aade:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aae0:	683a      	ldr	r2, [r7, #0]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	f043 0307 	orr.w	r3, r3, #7
 800aaea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	609a      	str	r2, [r3, #8]
}
 800aaf2:	bf00      	nop
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	ffcfff8f 	.word	0xffcfff8f

0800ab04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b087      	sub	sp, #28
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ab1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	021a      	lsls	r2, r3, #8
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	431a      	orrs	r2, r3
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	697a      	ldr	r2, [r7, #20]
 800ab36:	609a      	str	r2, [r3, #8]
}
 800ab38:	bf00      	nop
 800ab3a:	371c      	adds	r7, #28
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f003 031f 	and.w	r3, r3, #31
 800ab56:	2201      	movs	r2, #1
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6a1a      	ldr	r2, [r3, #32]
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	43db      	mvns	r3, r3
 800ab66:	401a      	ands	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6a1a      	ldr	r2, [r3, #32]
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	f003 031f 	and.w	r3, r3, #31
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	fa01 f303 	lsl.w	r3, r1, r3
 800ab7c:	431a      	orrs	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	621a      	str	r2, [r3, #32]
}
 800ab82:	bf00      	nop
 800ab84:	371c      	adds	r7, #28
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
	...

0800ab90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d101      	bne.n	800aba8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aba4:	2302      	movs	r3, #2
 800aba6:	e06d      	b.n	800ac84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a30      	ldr	r2, [pc, #192]	@ (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d004      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a2f      	ldr	r2, [pc, #188]	@ (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d108      	bne.n	800abee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800abe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	4313      	orrs	r3, r2
 800abec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a20      	ldr	r2, [pc, #128]	@ (800ac90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d022      	beq.n	800ac58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac1a:	d01d      	beq.n	800ac58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a1d      	ldr	r2, [pc, #116]	@ (800ac98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d018      	beq.n	800ac58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a1c      	ldr	r2, [pc, #112]	@ (800ac9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d013      	beq.n	800ac58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a1a      	ldr	r2, [pc, #104]	@ (800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d00e      	beq.n	800ac58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a15      	ldr	r2, [pc, #84]	@ (800ac94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d009      	beq.n	800ac58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a16      	ldr	r2, [pc, #88]	@ (800aca4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d004      	beq.n	800ac58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a15      	ldr	r2, [pc, #84]	@ (800aca8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d10c      	bne.n	800ac72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	40010000 	.word	0x40010000
 800ac94:	40010400 	.word	0x40010400
 800ac98:	40000400 	.word	0x40000400
 800ac9c:	40000800 	.word	0x40000800
 800aca0:	40000c00 	.word	0x40000c00
 800aca4:	40001800 	.word	0x40001800
 800aca8:	40014000 	.word	0x40014000

0800acac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <__cvt>:
 800ace8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acea:	ed2d 8b02 	vpush	{d8}
 800acee:	eeb0 8b40 	vmov.f64	d8, d0
 800acf2:	b085      	sub	sp, #20
 800acf4:	4617      	mov	r7, r2
 800acf6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800acf8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acfa:	ee18 2a90 	vmov	r2, s17
 800acfe:	f025 0520 	bic.w	r5, r5, #32
 800ad02:	2a00      	cmp	r2, #0
 800ad04:	bfb6      	itet	lt
 800ad06:	222d      	movlt	r2, #45	@ 0x2d
 800ad08:	2200      	movge	r2, #0
 800ad0a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ad0e:	2d46      	cmp	r5, #70	@ 0x46
 800ad10:	460c      	mov	r4, r1
 800ad12:	701a      	strb	r2, [r3, #0]
 800ad14:	d004      	beq.n	800ad20 <__cvt+0x38>
 800ad16:	2d45      	cmp	r5, #69	@ 0x45
 800ad18:	d100      	bne.n	800ad1c <__cvt+0x34>
 800ad1a:	3401      	adds	r4, #1
 800ad1c:	2102      	movs	r1, #2
 800ad1e:	e000      	b.n	800ad22 <__cvt+0x3a>
 800ad20:	2103      	movs	r1, #3
 800ad22:	ab03      	add	r3, sp, #12
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	ab02      	add	r3, sp, #8
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	4622      	mov	r2, r4
 800ad2c:	4633      	mov	r3, r6
 800ad2e:	eeb0 0b48 	vmov.f64	d0, d8
 800ad32:	f000 fe31 	bl	800b998 <_dtoa_r>
 800ad36:	2d47      	cmp	r5, #71	@ 0x47
 800ad38:	d114      	bne.n	800ad64 <__cvt+0x7c>
 800ad3a:	07fb      	lsls	r3, r7, #31
 800ad3c:	d50a      	bpl.n	800ad54 <__cvt+0x6c>
 800ad3e:	1902      	adds	r2, r0, r4
 800ad40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad48:	bf08      	it	eq
 800ad4a:	9203      	streq	r2, [sp, #12]
 800ad4c:	2130      	movs	r1, #48	@ 0x30
 800ad4e:	9b03      	ldr	r3, [sp, #12]
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d319      	bcc.n	800ad88 <__cvt+0xa0>
 800ad54:	9b03      	ldr	r3, [sp, #12]
 800ad56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad58:	1a1b      	subs	r3, r3, r0
 800ad5a:	6013      	str	r3, [r2, #0]
 800ad5c:	b005      	add	sp, #20
 800ad5e:	ecbd 8b02 	vpop	{d8}
 800ad62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad64:	2d46      	cmp	r5, #70	@ 0x46
 800ad66:	eb00 0204 	add.w	r2, r0, r4
 800ad6a:	d1e9      	bne.n	800ad40 <__cvt+0x58>
 800ad6c:	7803      	ldrb	r3, [r0, #0]
 800ad6e:	2b30      	cmp	r3, #48	@ 0x30
 800ad70:	d107      	bne.n	800ad82 <__cvt+0x9a>
 800ad72:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ad76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7a:	bf1c      	itt	ne
 800ad7c:	f1c4 0401 	rsbne	r4, r4, #1
 800ad80:	6034      	strne	r4, [r6, #0]
 800ad82:	6833      	ldr	r3, [r6, #0]
 800ad84:	441a      	add	r2, r3
 800ad86:	e7db      	b.n	800ad40 <__cvt+0x58>
 800ad88:	1c5c      	adds	r4, r3, #1
 800ad8a:	9403      	str	r4, [sp, #12]
 800ad8c:	7019      	strb	r1, [r3, #0]
 800ad8e:	e7de      	b.n	800ad4e <__cvt+0x66>

0800ad90 <__exponent>:
 800ad90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad92:	2900      	cmp	r1, #0
 800ad94:	bfba      	itte	lt
 800ad96:	4249      	neglt	r1, r1
 800ad98:	232d      	movlt	r3, #45	@ 0x2d
 800ad9a:	232b      	movge	r3, #43	@ 0x2b
 800ad9c:	2909      	cmp	r1, #9
 800ad9e:	7002      	strb	r2, [r0, #0]
 800ada0:	7043      	strb	r3, [r0, #1]
 800ada2:	dd29      	ble.n	800adf8 <__exponent+0x68>
 800ada4:	f10d 0307 	add.w	r3, sp, #7
 800ada8:	461d      	mov	r5, r3
 800adaa:	270a      	movs	r7, #10
 800adac:	461a      	mov	r2, r3
 800adae:	fbb1 f6f7 	udiv	r6, r1, r7
 800adb2:	fb07 1416 	mls	r4, r7, r6, r1
 800adb6:	3430      	adds	r4, #48	@ 0x30
 800adb8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800adbc:	460c      	mov	r4, r1
 800adbe:	2c63      	cmp	r4, #99	@ 0x63
 800adc0:	f103 33ff 	add.w	r3, r3, #4294967295
 800adc4:	4631      	mov	r1, r6
 800adc6:	dcf1      	bgt.n	800adac <__exponent+0x1c>
 800adc8:	3130      	adds	r1, #48	@ 0x30
 800adca:	1e94      	subs	r4, r2, #2
 800adcc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800add0:	1c41      	adds	r1, r0, #1
 800add2:	4623      	mov	r3, r4
 800add4:	42ab      	cmp	r3, r5
 800add6:	d30a      	bcc.n	800adee <__exponent+0x5e>
 800add8:	f10d 0309 	add.w	r3, sp, #9
 800addc:	1a9b      	subs	r3, r3, r2
 800adde:	42ac      	cmp	r4, r5
 800ade0:	bf88      	it	hi
 800ade2:	2300      	movhi	r3, #0
 800ade4:	3302      	adds	r3, #2
 800ade6:	4403      	add	r3, r0
 800ade8:	1a18      	subs	r0, r3, r0
 800adea:	b003      	add	sp, #12
 800adec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adee:	f813 6b01 	ldrb.w	r6, [r3], #1
 800adf2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800adf6:	e7ed      	b.n	800add4 <__exponent+0x44>
 800adf8:	2330      	movs	r3, #48	@ 0x30
 800adfa:	3130      	adds	r1, #48	@ 0x30
 800adfc:	7083      	strb	r3, [r0, #2]
 800adfe:	70c1      	strb	r1, [r0, #3]
 800ae00:	1d03      	adds	r3, r0, #4
 800ae02:	e7f1      	b.n	800ade8 <__exponent+0x58>
 800ae04:	0000      	movs	r0, r0
	...

0800ae08 <_printf_float>:
 800ae08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	b08d      	sub	sp, #52	@ 0x34
 800ae0e:	460c      	mov	r4, r1
 800ae10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae14:	4616      	mov	r6, r2
 800ae16:	461f      	mov	r7, r3
 800ae18:	4605      	mov	r5, r0
 800ae1a:	f000 fcbb 	bl	800b794 <_localeconv_r>
 800ae1e:	f8d0 b000 	ldr.w	fp, [r0]
 800ae22:	4658      	mov	r0, fp
 800ae24:	f7f5 faac 	bl	8000380 <strlen>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae30:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ae34:	6822      	ldr	r2, [r4, #0]
 800ae36:	9005      	str	r0, [sp, #20]
 800ae38:	3307      	adds	r3, #7
 800ae3a:	f023 0307 	bic.w	r3, r3, #7
 800ae3e:	f103 0108 	add.w	r1, r3, #8
 800ae42:	f8c8 1000 	str.w	r1, [r8]
 800ae46:	ed93 0b00 	vldr	d0, [r3]
 800ae4a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b0a8 <_printf_float+0x2a0>
 800ae4e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ae52:	eeb4 7b46 	vcmp.f64	d7, d6
 800ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ae5e:	dd24      	ble.n	800aeaa <_printf_float+0xa2>
 800ae60:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ae64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae68:	d502      	bpl.n	800ae70 <_printf_float+0x68>
 800ae6a:	232d      	movs	r3, #45	@ 0x2d
 800ae6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae70:	498f      	ldr	r1, [pc, #572]	@ (800b0b0 <_printf_float+0x2a8>)
 800ae72:	4b90      	ldr	r3, [pc, #576]	@ (800b0b4 <_printf_float+0x2ac>)
 800ae74:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ae78:	bf8c      	ite	hi
 800ae7a:	4688      	movhi	r8, r1
 800ae7c:	4698      	movls	r8, r3
 800ae7e:	f022 0204 	bic.w	r2, r2, #4
 800ae82:	2303      	movs	r3, #3
 800ae84:	6123      	str	r3, [r4, #16]
 800ae86:	6022      	str	r2, [r4, #0]
 800ae88:	f04f 0a00 	mov.w	sl, #0
 800ae8c:	9700      	str	r7, [sp, #0]
 800ae8e:	4633      	mov	r3, r6
 800ae90:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae92:	4621      	mov	r1, r4
 800ae94:	4628      	mov	r0, r5
 800ae96:	f000 f9d1 	bl	800b23c <_printf_common>
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	f040 8089 	bne.w	800afb2 <_printf_float+0x1aa>
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295
 800aea4:	b00d      	add	sp, #52	@ 0x34
 800aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	eeb4 0b40 	vcmp.f64	d0, d0
 800aeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb2:	d709      	bvc.n	800aec8 <_printf_float+0xc0>
 800aeb4:	ee10 3a90 	vmov	r3, s1
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	bfbc      	itt	lt
 800aebc:	232d      	movlt	r3, #45	@ 0x2d
 800aebe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aec2:	497d      	ldr	r1, [pc, #500]	@ (800b0b8 <_printf_float+0x2b0>)
 800aec4:	4b7d      	ldr	r3, [pc, #500]	@ (800b0bc <_printf_float+0x2b4>)
 800aec6:	e7d5      	b.n	800ae74 <_printf_float+0x6c>
 800aec8:	6863      	ldr	r3, [r4, #4]
 800aeca:	1c59      	adds	r1, r3, #1
 800aecc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800aed0:	d139      	bne.n	800af46 <_printf_float+0x13e>
 800aed2:	2306      	movs	r3, #6
 800aed4:	6063      	str	r3, [r4, #4]
 800aed6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aeda:	2300      	movs	r3, #0
 800aedc:	6022      	str	r2, [r4, #0]
 800aede:	9303      	str	r3, [sp, #12]
 800aee0:	ab0a      	add	r3, sp, #40	@ 0x28
 800aee2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800aee6:	ab09      	add	r3, sp, #36	@ 0x24
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	6861      	ldr	r1, [r4, #4]
 800aeec:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aef0:	4628      	mov	r0, r5
 800aef2:	f7ff fef9 	bl	800ace8 <__cvt>
 800aef6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aefa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aefc:	4680      	mov	r8, r0
 800aefe:	d129      	bne.n	800af54 <_printf_float+0x14c>
 800af00:	1cc8      	adds	r0, r1, #3
 800af02:	db02      	blt.n	800af0a <_printf_float+0x102>
 800af04:	6863      	ldr	r3, [r4, #4]
 800af06:	4299      	cmp	r1, r3
 800af08:	dd41      	ble.n	800af8e <_printf_float+0x186>
 800af0a:	f1a9 0902 	sub.w	r9, r9, #2
 800af0e:	fa5f f989 	uxtb.w	r9, r9
 800af12:	3901      	subs	r1, #1
 800af14:	464a      	mov	r2, r9
 800af16:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af1a:	9109      	str	r1, [sp, #36]	@ 0x24
 800af1c:	f7ff ff38 	bl	800ad90 <__exponent>
 800af20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af22:	1813      	adds	r3, r2, r0
 800af24:	2a01      	cmp	r2, #1
 800af26:	4682      	mov	sl, r0
 800af28:	6123      	str	r3, [r4, #16]
 800af2a:	dc02      	bgt.n	800af32 <_printf_float+0x12a>
 800af2c:	6822      	ldr	r2, [r4, #0]
 800af2e:	07d2      	lsls	r2, r2, #31
 800af30:	d501      	bpl.n	800af36 <_printf_float+0x12e>
 800af32:	3301      	adds	r3, #1
 800af34:	6123      	str	r3, [r4, #16]
 800af36:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0a6      	beq.n	800ae8c <_printf_float+0x84>
 800af3e:	232d      	movs	r3, #45	@ 0x2d
 800af40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af44:	e7a2      	b.n	800ae8c <_printf_float+0x84>
 800af46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800af4a:	d1c4      	bne.n	800aed6 <_printf_float+0xce>
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1c2      	bne.n	800aed6 <_printf_float+0xce>
 800af50:	2301      	movs	r3, #1
 800af52:	e7bf      	b.n	800aed4 <_printf_float+0xcc>
 800af54:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800af58:	d9db      	bls.n	800af12 <_printf_float+0x10a>
 800af5a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800af5e:	d118      	bne.n	800af92 <_printf_float+0x18a>
 800af60:	2900      	cmp	r1, #0
 800af62:	6863      	ldr	r3, [r4, #4]
 800af64:	dd0b      	ble.n	800af7e <_printf_float+0x176>
 800af66:	6121      	str	r1, [r4, #16]
 800af68:	b913      	cbnz	r3, 800af70 <_printf_float+0x168>
 800af6a:	6822      	ldr	r2, [r4, #0]
 800af6c:	07d0      	lsls	r0, r2, #31
 800af6e:	d502      	bpl.n	800af76 <_printf_float+0x16e>
 800af70:	3301      	adds	r3, #1
 800af72:	440b      	add	r3, r1
 800af74:	6123      	str	r3, [r4, #16]
 800af76:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af78:	f04f 0a00 	mov.w	sl, #0
 800af7c:	e7db      	b.n	800af36 <_printf_float+0x12e>
 800af7e:	b913      	cbnz	r3, 800af86 <_printf_float+0x17e>
 800af80:	6822      	ldr	r2, [r4, #0]
 800af82:	07d2      	lsls	r2, r2, #31
 800af84:	d501      	bpl.n	800af8a <_printf_float+0x182>
 800af86:	3302      	adds	r3, #2
 800af88:	e7f4      	b.n	800af74 <_printf_float+0x16c>
 800af8a:	2301      	movs	r3, #1
 800af8c:	e7f2      	b.n	800af74 <_printf_float+0x16c>
 800af8e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800af92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af94:	4299      	cmp	r1, r3
 800af96:	db05      	blt.n	800afa4 <_printf_float+0x19c>
 800af98:	6823      	ldr	r3, [r4, #0]
 800af9a:	6121      	str	r1, [r4, #16]
 800af9c:	07d8      	lsls	r0, r3, #31
 800af9e:	d5ea      	bpl.n	800af76 <_printf_float+0x16e>
 800afa0:	1c4b      	adds	r3, r1, #1
 800afa2:	e7e7      	b.n	800af74 <_printf_float+0x16c>
 800afa4:	2900      	cmp	r1, #0
 800afa6:	bfd4      	ite	le
 800afa8:	f1c1 0202 	rsble	r2, r1, #2
 800afac:	2201      	movgt	r2, #1
 800afae:	4413      	add	r3, r2
 800afb0:	e7e0      	b.n	800af74 <_printf_float+0x16c>
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	055a      	lsls	r2, r3, #21
 800afb6:	d407      	bmi.n	800afc8 <_printf_float+0x1c0>
 800afb8:	6923      	ldr	r3, [r4, #16]
 800afba:	4642      	mov	r2, r8
 800afbc:	4631      	mov	r1, r6
 800afbe:	4628      	mov	r0, r5
 800afc0:	47b8      	blx	r7
 800afc2:	3001      	adds	r0, #1
 800afc4:	d12a      	bne.n	800b01c <_printf_float+0x214>
 800afc6:	e76b      	b.n	800aea0 <_printf_float+0x98>
 800afc8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800afcc:	f240 80e0 	bls.w	800b190 <_printf_float+0x388>
 800afd0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800afd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afdc:	d133      	bne.n	800b046 <_printf_float+0x23e>
 800afde:	4a38      	ldr	r2, [pc, #224]	@ (800b0c0 <_printf_float+0x2b8>)
 800afe0:	2301      	movs	r3, #1
 800afe2:	4631      	mov	r1, r6
 800afe4:	4628      	mov	r0, r5
 800afe6:	47b8      	blx	r7
 800afe8:	3001      	adds	r0, #1
 800afea:	f43f af59 	beq.w	800aea0 <_printf_float+0x98>
 800afee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aff2:	4543      	cmp	r3, r8
 800aff4:	db02      	blt.n	800affc <_printf_float+0x1f4>
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	07d8      	lsls	r0, r3, #31
 800affa:	d50f      	bpl.n	800b01c <_printf_float+0x214>
 800affc:	9b05      	ldr	r3, [sp, #20]
 800affe:	465a      	mov	r2, fp
 800b000:	4631      	mov	r1, r6
 800b002:	4628      	mov	r0, r5
 800b004:	47b8      	blx	r7
 800b006:	3001      	adds	r0, #1
 800b008:	f43f af4a 	beq.w	800aea0 <_printf_float+0x98>
 800b00c:	f04f 0900 	mov.w	r9, #0
 800b010:	f108 38ff 	add.w	r8, r8, #4294967295
 800b014:	f104 0a1a 	add.w	sl, r4, #26
 800b018:	45c8      	cmp	r8, r9
 800b01a:	dc09      	bgt.n	800b030 <_printf_float+0x228>
 800b01c:	6823      	ldr	r3, [r4, #0]
 800b01e:	079b      	lsls	r3, r3, #30
 800b020:	f100 8107 	bmi.w	800b232 <_printf_float+0x42a>
 800b024:	68e0      	ldr	r0, [r4, #12]
 800b026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b028:	4298      	cmp	r0, r3
 800b02a:	bfb8      	it	lt
 800b02c:	4618      	movlt	r0, r3
 800b02e:	e739      	b.n	800aea4 <_printf_float+0x9c>
 800b030:	2301      	movs	r3, #1
 800b032:	4652      	mov	r2, sl
 800b034:	4631      	mov	r1, r6
 800b036:	4628      	mov	r0, r5
 800b038:	47b8      	blx	r7
 800b03a:	3001      	adds	r0, #1
 800b03c:	f43f af30 	beq.w	800aea0 <_printf_float+0x98>
 800b040:	f109 0901 	add.w	r9, r9, #1
 800b044:	e7e8      	b.n	800b018 <_printf_float+0x210>
 800b046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b048:	2b00      	cmp	r3, #0
 800b04a:	dc3b      	bgt.n	800b0c4 <_printf_float+0x2bc>
 800b04c:	4a1c      	ldr	r2, [pc, #112]	@ (800b0c0 <_printf_float+0x2b8>)
 800b04e:	2301      	movs	r3, #1
 800b050:	4631      	mov	r1, r6
 800b052:	4628      	mov	r0, r5
 800b054:	47b8      	blx	r7
 800b056:	3001      	adds	r0, #1
 800b058:	f43f af22 	beq.w	800aea0 <_printf_float+0x98>
 800b05c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b060:	ea59 0303 	orrs.w	r3, r9, r3
 800b064:	d102      	bne.n	800b06c <_printf_float+0x264>
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	07d9      	lsls	r1, r3, #31
 800b06a:	d5d7      	bpl.n	800b01c <_printf_float+0x214>
 800b06c:	9b05      	ldr	r3, [sp, #20]
 800b06e:	465a      	mov	r2, fp
 800b070:	4631      	mov	r1, r6
 800b072:	4628      	mov	r0, r5
 800b074:	47b8      	blx	r7
 800b076:	3001      	adds	r0, #1
 800b078:	f43f af12 	beq.w	800aea0 <_printf_float+0x98>
 800b07c:	f04f 0a00 	mov.w	sl, #0
 800b080:	f104 0b1a 	add.w	fp, r4, #26
 800b084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b086:	425b      	negs	r3, r3
 800b088:	4553      	cmp	r3, sl
 800b08a:	dc01      	bgt.n	800b090 <_printf_float+0x288>
 800b08c:	464b      	mov	r3, r9
 800b08e:	e794      	b.n	800afba <_printf_float+0x1b2>
 800b090:	2301      	movs	r3, #1
 800b092:	465a      	mov	r2, fp
 800b094:	4631      	mov	r1, r6
 800b096:	4628      	mov	r0, r5
 800b098:	47b8      	blx	r7
 800b09a:	3001      	adds	r0, #1
 800b09c:	f43f af00 	beq.w	800aea0 <_printf_float+0x98>
 800b0a0:	f10a 0a01 	add.w	sl, sl, #1
 800b0a4:	e7ee      	b.n	800b084 <_printf_float+0x27c>
 800b0a6:	bf00      	nop
 800b0a8:	ffffffff 	.word	0xffffffff
 800b0ac:	7fefffff 	.word	0x7fefffff
 800b0b0:	0800e664 	.word	0x0800e664
 800b0b4:	0800e660 	.word	0x0800e660
 800b0b8:	0800e66c 	.word	0x0800e66c
 800b0bc:	0800e668 	.word	0x0800e668
 800b0c0:	0800e670 	.word	0x0800e670
 800b0c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0ca:	4553      	cmp	r3, sl
 800b0cc:	bfa8      	it	ge
 800b0ce:	4653      	movge	r3, sl
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	4699      	mov	r9, r3
 800b0d4:	dc37      	bgt.n	800b146 <_printf_float+0x33e>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	9307      	str	r3, [sp, #28]
 800b0da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0de:	f104 021a 	add.w	r2, r4, #26
 800b0e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0e4:	9907      	ldr	r1, [sp, #28]
 800b0e6:	9306      	str	r3, [sp, #24]
 800b0e8:	eba3 0309 	sub.w	r3, r3, r9
 800b0ec:	428b      	cmp	r3, r1
 800b0ee:	dc31      	bgt.n	800b154 <_printf_float+0x34c>
 800b0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f2:	459a      	cmp	sl, r3
 800b0f4:	dc3b      	bgt.n	800b16e <_printf_float+0x366>
 800b0f6:	6823      	ldr	r3, [r4, #0]
 800b0f8:	07da      	lsls	r2, r3, #31
 800b0fa:	d438      	bmi.n	800b16e <_printf_float+0x366>
 800b0fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0fe:	ebaa 0903 	sub.w	r9, sl, r3
 800b102:	9b06      	ldr	r3, [sp, #24]
 800b104:	ebaa 0303 	sub.w	r3, sl, r3
 800b108:	4599      	cmp	r9, r3
 800b10a:	bfa8      	it	ge
 800b10c:	4699      	movge	r9, r3
 800b10e:	f1b9 0f00 	cmp.w	r9, #0
 800b112:	dc34      	bgt.n	800b17e <_printf_float+0x376>
 800b114:	f04f 0800 	mov.w	r8, #0
 800b118:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b11c:	f104 0b1a 	add.w	fp, r4, #26
 800b120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b122:	ebaa 0303 	sub.w	r3, sl, r3
 800b126:	eba3 0309 	sub.w	r3, r3, r9
 800b12a:	4543      	cmp	r3, r8
 800b12c:	f77f af76 	ble.w	800b01c <_printf_float+0x214>
 800b130:	2301      	movs	r3, #1
 800b132:	465a      	mov	r2, fp
 800b134:	4631      	mov	r1, r6
 800b136:	4628      	mov	r0, r5
 800b138:	47b8      	blx	r7
 800b13a:	3001      	adds	r0, #1
 800b13c:	f43f aeb0 	beq.w	800aea0 <_printf_float+0x98>
 800b140:	f108 0801 	add.w	r8, r8, #1
 800b144:	e7ec      	b.n	800b120 <_printf_float+0x318>
 800b146:	4642      	mov	r2, r8
 800b148:	4631      	mov	r1, r6
 800b14a:	4628      	mov	r0, r5
 800b14c:	47b8      	blx	r7
 800b14e:	3001      	adds	r0, #1
 800b150:	d1c1      	bne.n	800b0d6 <_printf_float+0x2ce>
 800b152:	e6a5      	b.n	800aea0 <_printf_float+0x98>
 800b154:	2301      	movs	r3, #1
 800b156:	4631      	mov	r1, r6
 800b158:	4628      	mov	r0, r5
 800b15a:	9206      	str	r2, [sp, #24]
 800b15c:	47b8      	blx	r7
 800b15e:	3001      	adds	r0, #1
 800b160:	f43f ae9e 	beq.w	800aea0 <_printf_float+0x98>
 800b164:	9b07      	ldr	r3, [sp, #28]
 800b166:	9a06      	ldr	r2, [sp, #24]
 800b168:	3301      	adds	r3, #1
 800b16a:	9307      	str	r3, [sp, #28]
 800b16c:	e7b9      	b.n	800b0e2 <_printf_float+0x2da>
 800b16e:	9b05      	ldr	r3, [sp, #20]
 800b170:	465a      	mov	r2, fp
 800b172:	4631      	mov	r1, r6
 800b174:	4628      	mov	r0, r5
 800b176:	47b8      	blx	r7
 800b178:	3001      	adds	r0, #1
 800b17a:	d1bf      	bne.n	800b0fc <_printf_float+0x2f4>
 800b17c:	e690      	b.n	800aea0 <_printf_float+0x98>
 800b17e:	9a06      	ldr	r2, [sp, #24]
 800b180:	464b      	mov	r3, r9
 800b182:	4442      	add	r2, r8
 800b184:	4631      	mov	r1, r6
 800b186:	4628      	mov	r0, r5
 800b188:	47b8      	blx	r7
 800b18a:	3001      	adds	r0, #1
 800b18c:	d1c2      	bne.n	800b114 <_printf_float+0x30c>
 800b18e:	e687      	b.n	800aea0 <_printf_float+0x98>
 800b190:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b194:	f1b9 0f01 	cmp.w	r9, #1
 800b198:	dc01      	bgt.n	800b19e <_printf_float+0x396>
 800b19a:	07db      	lsls	r3, r3, #31
 800b19c:	d536      	bpl.n	800b20c <_printf_float+0x404>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	4642      	mov	r2, r8
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	47b8      	blx	r7
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	f43f ae79 	beq.w	800aea0 <_printf_float+0x98>
 800b1ae:	9b05      	ldr	r3, [sp, #20]
 800b1b0:	465a      	mov	r2, fp
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	47b8      	blx	r7
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	f43f ae71 	beq.w	800aea0 <_printf_float+0x98>
 800b1be:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b1c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ca:	f109 39ff 	add.w	r9, r9, #4294967295
 800b1ce:	d018      	beq.n	800b202 <_printf_float+0x3fa>
 800b1d0:	464b      	mov	r3, r9
 800b1d2:	f108 0201 	add.w	r2, r8, #1
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	4628      	mov	r0, r5
 800b1da:	47b8      	blx	r7
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d10c      	bne.n	800b1fa <_printf_float+0x3f2>
 800b1e0:	e65e      	b.n	800aea0 <_printf_float+0x98>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	465a      	mov	r2, fp
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f43f ae57 	beq.w	800aea0 <_printf_float+0x98>
 800b1f2:	f108 0801 	add.w	r8, r8, #1
 800b1f6:	45c8      	cmp	r8, r9
 800b1f8:	dbf3      	blt.n	800b1e2 <_printf_float+0x3da>
 800b1fa:	4653      	mov	r3, sl
 800b1fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b200:	e6dc      	b.n	800afbc <_printf_float+0x1b4>
 800b202:	f04f 0800 	mov.w	r8, #0
 800b206:	f104 0b1a 	add.w	fp, r4, #26
 800b20a:	e7f4      	b.n	800b1f6 <_printf_float+0x3ee>
 800b20c:	2301      	movs	r3, #1
 800b20e:	4642      	mov	r2, r8
 800b210:	e7e1      	b.n	800b1d6 <_printf_float+0x3ce>
 800b212:	2301      	movs	r3, #1
 800b214:	464a      	mov	r2, r9
 800b216:	4631      	mov	r1, r6
 800b218:	4628      	mov	r0, r5
 800b21a:	47b8      	blx	r7
 800b21c:	3001      	adds	r0, #1
 800b21e:	f43f ae3f 	beq.w	800aea0 <_printf_float+0x98>
 800b222:	f108 0801 	add.w	r8, r8, #1
 800b226:	68e3      	ldr	r3, [r4, #12]
 800b228:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b22a:	1a5b      	subs	r3, r3, r1
 800b22c:	4543      	cmp	r3, r8
 800b22e:	dcf0      	bgt.n	800b212 <_printf_float+0x40a>
 800b230:	e6f8      	b.n	800b024 <_printf_float+0x21c>
 800b232:	f04f 0800 	mov.w	r8, #0
 800b236:	f104 0919 	add.w	r9, r4, #25
 800b23a:	e7f4      	b.n	800b226 <_printf_float+0x41e>

0800b23c <_printf_common>:
 800b23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b240:	4616      	mov	r6, r2
 800b242:	4698      	mov	r8, r3
 800b244:	688a      	ldr	r2, [r1, #8]
 800b246:	690b      	ldr	r3, [r1, #16]
 800b248:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b24c:	4293      	cmp	r3, r2
 800b24e:	bfb8      	it	lt
 800b250:	4613      	movlt	r3, r2
 800b252:	6033      	str	r3, [r6, #0]
 800b254:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b258:	4607      	mov	r7, r0
 800b25a:	460c      	mov	r4, r1
 800b25c:	b10a      	cbz	r2, 800b262 <_printf_common+0x26>
 800b25e:	3301      	adds	r3, #1
 800b260:	6033      	str	r3, [r6, #0]
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	0699      	lsls	r1, r3, #26
 800b266:	bf42      	ittt	mi
 800b268:	6833      	ldrmi	r3, [r6, #0]
 800b26a:	3302      	addmi	r3, #2
 800b26c:	6033      	strmi	r3, [r6, #0]
 800b26e:	6825      	ldr	r5, [r4, #0]
 800b270:	f015 0506 	ands.w	r5, r5, #6
 800b274:	d106      	bne.n	800b284 <_printf_common+0x48>
 800b276:	f104 0a19 	add.w	sl, r4, #25
 800b27a:	68e3      	ldr	r3, [r4, #12]
 800b27c:	6832      	ldr	r2, [r6, #0]
 800b27e:	1a9b      	subs	r3, r3, r2
 800b280:	42ab      	cmp	r3, r5
 800b282:	dc26      	bgt.n	800b2d2 <_printf_common+0x96>
 800b284:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b288:	6822      	ldr	r2, [r4, #0]
 800b28a:	3b00      	subs	r3, #0
 800b28c:	bf18      	it	ne
 800b28e:	2301      	movne	r3, #1
 800b290:	0692      	lsls	r2, r2, #26
 800b292:	d42b      	bmi.n	800b2ec <_printf_common+0xb0>
 800b294:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b298:	4641      	mov	r1, r8
 800b29a:	4638      	mov	r0, r7
 800b29c:	47c8      	blx	r9
 800b29e:	3001      	adds	r0, #1
 800b2a0:	d01e      	beq.n	800b2e0 <_printf_common+0xa4>
 800b2a2:	6823      	ldr	r3, [r4, #0]
 800b2a4:	6922      	ldr	r2, [r4, #16]
 800b2a6:	f003 0306 	and.w	r3, r3, #6
 800b2aa:	2b04      	cmp	r3, #4
 800b2ac:	bf02      	ittt	eq
 800b2ae:	68e5      	ldreq	r5, [r4, #12]
 800b2b0:	6833      	ldreq	r3, [r6, #0]
 800b2b2:	1aed      	subeq	r5, r5, r3
 800b2b4:	68a3      	ldr	r3, [r4, #8]
 800b2b6:	bf0c      	ite	eq
 800b2b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2bc:	2500      	movne	r5, #0
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	bfc4      	itt	gt
 800b2c2:	1a9b      	subgt	r3, r3, r2
 800b2c4:	18ed      	addgt	r5, r5, r3
 800b2c6:	2600      	movs	r6, #0
 800b2c8:	341a      	adds	r4, #26
 800b2ca:	42b5      	cmp	r5, r6
 800b2cc:	d11a      	bne.n	800b304 <_printf_common+0xc8>
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	e008      	b.n	800b2e4 <_printf_common+0xa8>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	4652      	mov	r2, sl
 800b2d6:	4641      	mov	r1, r8
 800b2d8:	4638      	mov	r0, r7
 800b2da:	47c8      	blx	r9
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d103      	bne.n	800b2e8 <_printf_common+0xac>
 800b2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e8:	3501      	adds	r5, #1
 800b2ea:	e7c6      	b.n	800b27a <_printf_common+0x3e>
 800b2ec:	18e1      	adds	r1, r4, r3
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	2030      	movs	r0, #48	@ 0x30
 800b2f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2f6:	4422      	add	r2, r4
 800b2f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b300:	3302      	adds	r3, #2
 800b302:	e7c7      	b.n	800b294 <_printf_common+0x58>
 800b304:	2301      	movs	r3, #1
 800b306:	4622      	mov	r2, r4
 800b308:	4641      	mov	r1, r8
 800b30a:	4638      	mov	r0, r7
 800b30c:	47c8      	blx	r9
 800b30e:	3001      	adds	r0, #1
 800b310:	d0e6      	beq.n	800b2e0 <_printf_common+0xa4>
 800b312:	3601      	adds	r6, #1
 800b314:	e7d9      	b.n	800b2ca <_printf_common+0x8e>
	...

0800b318 <_printf_i>:
 800b318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b31c:	7e0f      	ldrb	r7, [r1, #24]
 800b31e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b320:	2f78      	cmp	r7, #120	@ 0x78
 800b322:	4691      	mov	r9, r2
 800b324:	4680      	mov	r8, r0
 800b326:	460c      	mov	r4, r1
 800b328:	469a      	mov	sl, r3
 800b32a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b32e:	d807      	bhi.n	800b340 <_printf_i+0x28>
 800b330:	2f62      	cmp	r7, #98	@ 0x62
 800b332:	d80a      	bhi.n	800b34a <_printf_i+0x32>
 800b334:	2f00      	cmp	r7, #0
 800b336:	f000 80d1 	beq.w	800b4dc <_printf_i+0x1c4>
 800b33a:	2f58      	cmp	r7, #88	@ 0x58
 800b33c:	f000 80b8 	beq.w	800b4b0 <_printf_i+0x198>
 800b340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b344:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b348:	e03a      	b.n	800b3c0 <_printf_i+0xa8>
 800b34a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b34e:	2b15      	cmp	r3, #21
 800b350:	d8f6      	bhi.n	800b340 <_printf_i+0x28>
 800b352:	a101      	add	r1, pc, #4	@ (adr r1, 800b358 <_printf_i+0x40>)
 800b354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b358:	0800b3b1 	.word	0x0800b3b1
 800b35c:	0800b3c5 	.word	0x0800b3c5
 800b360:	0800b341 	.word	0x0800b341
 800b364:	0800b341 	.word	0x0800b341
 800b368:	0800b341 	.word	0x0800b341
 800b36c:	0800b341 	.word	0x0800b341
 800b370:	0800b3c5 	.word	0x0800b3c5
 800b374:	0800b341 	.word	0x0800b341
 800b378:	0800b341 	.word	0x0800b341
 800b37c:	0800b341 	.word	0x0800b341
 800b380:	0800b341 	.word	0x0800b341
 800b384:	0800b4c3 	.word	0x0800b4c3
 800b388:	0800b3ef 	.word	0x0800b3ef
 800b38c:	0800b47d 	.word	0x0800b47d
 800b390:	0800b341 	.word	0x0800b341
 800b394:	0800b341 	.word	0x0800b341
 800b398:	0800b4e5 	.word	0x0800b4e5
 800b39c:	0800b341 	.word	0x0800b341
 800b3a0:	0800b3ef 	.word	0x0800b3ef
 800b3a4:	0800b341 	.word	0x0800b341
 800b3a8:	0800b341 	.word	0x0800b341
 800b3ac:	0800b485 	.word	0x0800b485
 800b3b0:	6833      	ldr	r3, [r6, #0]
 800b3b2:	1d1a      	adds	r2, r3, #4
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6032      	str	r2, [r6, #0]
 800b3b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e09c      	b.n	800b4fe <_printf_i+0x1e6>
 800b3c4:	6833      	ldr	r3, [r6, #0]
 800b3c6:	6820      	ldr	r0, [r4, #0]
 800b3c8:	1d19      	adds	r1, r3, #4
 800b3ca:	6031      	str	r1, [r6, #0]
 800b3cc:	0606      	lsls	r6, r0, #24
 800b3ce:	d501      	bpl.n	800b3d4 <_printf_i+0xbc>
 800b3d0:	681d      	ldr	r5, [r3, #0]
 800b3d2:	e003      	b.n	800b3dc <_printf_i+0xc4>
 800b3d4:	0645      	lsls	r5, r0, #25
 800b3d6:	d5fb      	bpl.n	800b3d0 <_printf_i+0xb8>
 800b3d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3dc:	2d00      	cmp	r5, #0
 800b3de:	da03      	bge.n	800b3e8 <_printf_i+0xd0>
 800b3e0:	232d      	movs	r3, #45	@ 0x2d
 800b3e2:	426d      	negs	r5, r5
 800b3e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3e8:	4858      	ldr	r0, [pc, #352]	@ (800b54c <_printf_i+0x234>)
 800b3ea:	230a      	movs	r3, #10
 800b3ec:	e011      	b.n	800b412 <_printf_i+0xfa>
 800b3ee:	6821      	ldr	r1, [r4, #0]
 800b3f0:	6833      	ldr	r3, [r6, #0]
 800b3f2:	0608      	lsls	r0, r1, #24
 800b3f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3f8:	d402      	bmi.n	800b400 <_printf_i+0xe8>
 800b3fa:	0649      	lsls	r1, r1, #25
 800b3fc:	bf48      	it	mi
 800b3fe:	b2ad      	uxthmi	r5, r5
 800b400:	2f6f      	cmp	r7, #111	@ 0x6f
 800b402:	4852      	ldr	r0, [pc, #328]	@ (800b54c <_printf_i+0x234>)
 800b404:	6033      	str	r3, [r6, #0]
 800b406:	bf14      	ite	ne
 800b408:	230a      	movne	r3, #10
 800b40a:	2308      	moveq	r3, #8
 800b40c:	2100      	movs	r1, #0
 800b40e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b412:	6866      	ldr	r6, [r4, #4]
 800b414:	60a6      	str	r6, [r4, #8]
 800b416:	2e00      	cmp	r6, #0
 800b418:	db05      	blt.n	800b426 <_printf_i+0x10e>
 800b41a:	6821      	ldr	r1, [r4, #0]
 800b41c:	432e      	orrs	r6, r5
 800b41e:	f021 0104 	bic.w	r1, r1, #4
 800b422:	6021      	str	r1, [r4, #0]
 800b424:	d04b      	beq.n	800b4be <_printf_i+0x1a6>
 800b426:	4616      	mov	r6, r2
 800b428:	fbb5 f1f3 	udiv	r1, r5, r3
 800b42c:	fb03 5711 	mls	r7, r3, r1, r5
 800b430:	5dc7      	ldrb	r7, [r0, r7]
 800b432:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b436:	462f      	mov	r7, r5
 800b438:	42bb      	cmp	r3, r7
 800b43a:	460d      	mov	r5, r1
 800b43c:	d9f4      	bls.n	800b428 <_printf_i+0x110>
 800b43e:	2b08      	cmp	r3, #8
 800b440:	d10b      	bne.n	800b45a <_printf_i+0x142>
 800b442:	6823      	ldr	r3, [r4, #0]
 800b444:	07df      	lsls	r7, r3, #31
 800b446:	d508      	bpl.n	800b45a <_printf_i+0x142>
 800b448:	6923      	ldr	r3, [r4, #16]
 800b44a:	6861      	ldr	r1, [r4, #4]
 800b44c:	4299      	cmp	r1, r3
 800b44e:	bfde      	ittt	le
 800b450:	2330      	movle	r3, #48	@ 0x30
 800b452:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b456:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b45a:	1b92      	subs	r2, r2, r6
 800b45c:	6122      	str	r2, [r4, #16]
 800b45e:	f8cd a000 	str.w	sl, [sp]
 800b462:	464b      	mov	r3, r9
 800b464:	aa03      	add	r2, sp, #12
 800b466:	4621      	mov	r1, r4
 800b468:	4640      	mov	r0, r8
 800b46a:	f7ff fee7 	bl	800b23c <_printf_common>
 800b46e:	3001      	adds	r0, #1
 800b470:	d14a      	bne.n	800b508 <_printf_i+0x1f0>
 800b472:	f04f 30ff 	mov.w	r0, #4294967295
 800b476:	b004      	add	sp, #16
 800b478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	f043 0320 	orr.w	r3, r3, #32
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	4832      	ldr	r0, [pc, #200]	@ (800b550 <_printf_i+0x238>)
 800b486:	2778      	movs	r7, #120	@ 0x78
 800b488:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b48c:	6823      	ldr	r3, [r4, #0]
 800b48e:	6831      	ldr	r1, [r6, #0]
 800b490:	061f      	lsls	r7, r3, #24
 800b492:	f851 5b04 	ldr.w	r5, [r1], #4
 800b496:	d402      	bmi.n	800b49e <_printf_i+0x186>
 800b498:	065f      	lsls	r7, r3, #25
 800b49a:	bf48      	it	mi
 800b49c:	b2ad      	uxthmi	r5, r5
 800b49e:	6031      	str	r1, [r6, #0]
 800b4a0:	07d9      	lsls	r1, r3, #31
 800b4a2:	bf44      	itt	mi
 800b4a4:	f043 0320 	orrmi.w	r3, r3, #32
 800b4a8:	6023      	strmi	r3, [r4, #0]
 800b4aa:	b11d      	cbz	r5, 800b4b4 <_printf_i+0x19c>
 800b4ac:	2310      	movs	r3, #16
 800b4ae:	e7ad      	b.n	800b40c <_printf_i+0xf4>
 800b4b0:	4826      	ldr	r0, [pc, #152]	@ (800b54c <_printf_i+0x234>)
 800b4b2:	e7e9      	b.n	800b488 <_printf_i+0x170>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	f023 0320 	bic.w	r3, r3, #32
 800b4ba:	6023      	str	r3, [r4, #0]
 800b4bc:	e7f6      	b.n	800b4ac <_printf_i+0x194>
 800b4be:	4616      	mov	r6, r2
 800b4c0:	e7bd      	b.n	800b43e <_printf_i+0x126>
 800b4c2:	6833      	ldr	r3, [r6, #0]
 800b4c4:	6825      	ldr	r5, [r4, #0]
 800b4c6:	6961      	ldr	r1, [r4, #20]
 800b4c8:	1d18      	adds	r0, r3, #4
 800b4ca:	6030      	str	r0, [r6, #0]
 800b4cc:	062e      	lsls	r6, r5, #24
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	d501      	bpl.n	800b4d6 <_printf_i+0x1be>
 800b4d2:	6019      	str	r1, [r3, #0]
 800b4d4:	e002      	b.n	800b4dc <_printf_i+0x1c4>
 800b4d6:	0668      	lsls	r0, r5, #25
 800b4d8:	d5fb      	bpl.n	800b4d2 <_printf_i+0x1ba>
 800b4da:	8019      	strh	r1, [r3, #0]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	6123      	str	r3, [r4, #16]
 800b4e0:	4616      	mov	r6, r2
 800b4e2:	e7bc      	b.n	800b45e <_printf_i+0x146>
 800b4e4:	6833      	ldr	r3, [r6, #0]
 800b4e6:	1d1a      	adds	r2, r3, #4
 800b4e8:	6032      	str	r2, [r6, #0]
 800b4ea:	681e      	ldr	r6, [r3, #0]
 800b4ec:	6862      	ldr	r2, [r4, #4]
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f7f4 fef5 	bl	80002e0 <memchr>
 800b4f6:	b108      	cbz	r0, 800b4fc <_printf_i+0x1e4>
 800b4f8:	1b80      	subs	r0, r0, r6
 800b4fa:	6060      	str	r0, [r4, #4]
 800b4fc:	6863      	ldr	r3, [r4, #4]
 800b4fe:	6123      	str	r3, [r4, #16]
 800b500:	2300      	movs	r3, #0
 800b502:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b506:	e7aa      	b.n	800b45e <_printf_i+0x146>
 800b508:	6923      	ldr	r3, [r4, #16]
 800b50a:	4632      	mov	r2, r6
 800b50c:	4649      	mov	r1, r9
 800b50e:	4640      	mov	r0, r8
 800b510:	47d0      	blx	sl
 800b512:	3001      	adds	r0, #1
 800b514:	d0ad      	beq.n	800b472 <_printf_i+0x15a>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	079b      	lsls	r3, r3, #30
 800b51a:	d413      	bmi.n	800b544 <_printf_i+0x22c>
 800b51c:	68e0      	ldr	r0, [r4, #12]
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	4298      	cmp	r0, r3
 800b522:	bfb8      	it	lt
 800b524:	4618      	movlt	r0, r3
 800b526:	e7a6      	b.n	800b476 <_printf_i+0x15e>
 800b528:	2301      	movs	r3, #1
 800b52a:	4632      	mov	r2, r6
 800b52c:	4649      	mov	r1, r9
 800b52e:	4640      	mov	r0, r8
 800b530:	47d0      	blx	sl
 800b532:	3001      	adds	r0, #1
 800b534:	d09d      	beq.n	800b472 <_printf_i+0x15a>
 800b536:	3501      	adds	r5, #1
 800b538:	68e3      	ldr	r3, [r4, #12]
 800b53a:	9903      	ldr	r1, [sp, #12]
 800b53c:	1a5b      	subs	r3, r3, r1
 800b53e:	42ab      	cmp	r3, r5
 800b540:	dcf2      	bgt.n	800b528 <_printf_i+0x210>
 800b542:	e7eb      	b.n	800b51c <_printf_i+0x204>
 800b544:	2500      	movs	r5, #0
 800b546:	f104 0619 	add.w	r6, r4, #25
 800b54a:	e7f5      	b.n	800b538 <_printf_i+0x220>
 800b54c:	0800e672 	.word	0x0800e672
 800b550:	0800e683 	.word	0x0800e683

0800b554 <std>:
 800b554:	2300      	movs	r3, #0
 800b556:	b510      	push	{r4, lr}
 800b558:	4604      	mov	r4, r0
 800b55a:	e9c0 3300 	strd	r3, r3, [r0]
 800b55e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b562:	6083      	str	r3, [r0, #8]
 800b564:	8181      	strh	r1, [r0, #12]
 800b566:	6643      	str	r3, [r0, #100]	@ 0x64
 800b568:	81c2      	strh	r2, [r0, #14]
 800b56a:	6183      	str	r3, [r0, #24]
 800b56c:	4619      	mov	r1, r3
 800b56e:	2208      	movs	r2, #8
 800b570:	305c      	adds	r0, #92	@ 0x5c
 800b572:	f000 f906 	bl	800b782 <memset>
 800b576:	4b0d      	ldr	r3, [pc, #52]	@ (800b5ac <std+0x58>)
 800b578:	6263      	str	r3, [r4, #36]	@ 0x24
 800b57a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5b0 <std+0x5c>)
 800b57c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b57e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5b4 <std+0x60>)
 800b580:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b582:	4b0d      	ldr	r3, [pc, #52]	@ (800b5b8 <std+0x64>)
 800b584:	6323      	str	r3, [r4, #48]	@ 0x30
 800b586:	4b0d      	ldr	r3, [pc, #52]	@ (800b5bc <std+0x68>)
 800b588:	6224      	str	r4, [r4, #32]
 800b58a:	429c      	cmp	r4, r3
 800b58c:	d006      	beq.n	800b59c <std+0x48>
 800b58e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b592:	4294      	cmp	r4, r2
 800b594:	d002      	beq.n	800b59c <std+0x48>
 800b596:	33d0      	adds	r3, #208	@ 0xd0
 800b598:	429c      	cmp	r4, r3
 800b59a:	d105      	bne.n	800b5a8 <std+0x54>
 800b59c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a4:	f000 b96a 	b.w	800b87c <__retarget_lock_init_recursive>
 800b5a8:	bd10      	pop	{r4, pc}
 800b5aa:	bf00      	nop
 800b5ac:	0800b6fd 	.word	0x0800b6fd
 800b5b0:	0800b71f 	.word	0x0800b71f
 800b5b4:	0800b757 	.word	0x0800b757
 800b5b8:	0800b77b 	.word	0x0800b77b
 800b5bc:	24000b24 	.word	0x24000b24

0800b5c0 <stdio_exit_handler>:
 800b5c0:	4a02      	ldr	r2, [pc, #8]	@ (800b5cc <stdio_exit_handler+0xc>)
 800b5c2:	4903      	ldr	r1, [pc, #12]	@ (800b5d0 <stdio_exit_handler+0x10>)
 800b5c4:	4803      	ldr	r0, [pc, #12]	@ (800b5d4 <stdio_exit_handler+0x14>)
 800b5c6:	f000 b869 	b.w	800b69c <_fwalk_sglue>
 800b5ca:	bf00      	nop
 800b5cc:	24000018 	.word	0x24000018
 800b5d0:	0800d0d5 	.word	0x0800d0d5
 800b5d4:	24000028 	.word	0x24000028

0800b5d8 <cleanup_stdio>:
 800b5d8:	6841      	ldr	r1, [r0, #4]
 800b5da:	4b0c      	ldr	r3, [pc, #48]	@ (800b60c <cleanup_stdio+0x34>)
 800b5dc:	4299      	cmp	r1, r3
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	d001      	beq.n	800b5e8 <cleanup_stdio+0x10>
 800b5e4:	f001 fd76 	bl	800d0d4 <_fflush_r>
 800b5e8:	68a1      	ldr	r1, [r4, #8]
 800b5ea:	4b09      	ldr	r3, [pc, #36]	@ (800b610 <cleanup_stdio+0x38>)
 800b5ec:	4299      	cmp	r1, r3
 800b5ee:	d002      	beq.n	800b5f6 <cleanup_stdio+0x1e>
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f001 fd6f 	bl	800d0d4 <_fflush_r>
 800b5f6:	68e1      	ldr	r1, [r4, #12]
 800b5f8:	4b06      	ldr	r3, [pc, #24]	@ (800b614 <cleanup_stdio+0x3c>)
 800b5fa:	4299      	cmp	r1, r3
 800b5fc:	d004      	beq.n	800b608 <cleanup_stdio+0x30>
 800b5fe:	4620      	mov	r0, r4
 800b600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b604:	f001 bd66 	b.w	800d0d4 <_fflush_r>
 800b608:	bd10      	pop	{r4, pc}
 800b60a:	bf00      	nop
 800b60c:	24000b24 	.word	0x24000b24
 800b610:	24000b8c 	.word	0x24000b8c
 800b614:	24000bf4 	.word	0x24000bf4

0800b618 <global_stdio_init.part.0>:
 800b618:	b510      	push	{r4, lr}
 800b61a:	4b0b      	ldr	r3, [pc, #44]	@ (800b648 <global_stdio_init.part.0+0x30>)
 800b61c:	4c0b      	ldr	r4, [pc, #44]	@ (800b64c <global_stdio_init.part.0+0x34>)
 800b61e:	4a0c      	ldr	r2, [pc, #48]	@ (800b650 <global_stdio_init.part.0+0x38>)
 800b620:	601a      	str	r2, [r3, #0]
 800b622:	4620      	mov	r0, r4
 800b624:	2200      	movs	r2, #0
 800b626:	2104      	movs	r1, #4
 800b628:	f7ff ff94 	bl	800b554 <std>
 800b62c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b630:	2201      	movs	r2, #1
 800b632:	2109      	movs	r1, #9
 800b634:	f7ff ff8e 	bl	800b554 <std>
 800b638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b63c:	2202      	movs	r2, #2
 800b63e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b642:	2112      	movs	r1, #18
 800b644:	f7ff bf86 	b.w	800b554 <std>
 800b648:	24000c5c 	.word	0x24000c5c
 800b64c:	24000b24 	.word	0x24000b24
 800b650:	0800b5c1 	.word	0x0800b5c1

0800b654 <__sfp_lock_acquire>:
 800b654:	4801      	ldr	r0, [pc, #4]	@ (800b65c <__sfp_lock_acquire+0x8>)
 800b656:	f000 b912 	b.w	800b87e <__retarget_lock_acquire_recursive>
 800b65a:	bf00      	nop
 800b65c:	24000c65 	.word	0x24000c65

0800b660 <__sfp_lock_release>:
 800b660:	4801      	ldr	r0, [pc, #4]	@ (800b668 <__sfp_lock_release+0x8>)
 800b662:	f000 b90d 	b.w	800b880 <__retarget_lock_release_recursive>
 800b666:	bf00      	nop
 800b668:	24000c65 	.word	0x24000c65

0800b66c <__sinit>:
 800b66c:	b510      	push	{r4, lr}
 800b66e:	4604      	mov	r4, r0
 800b670:	f7ff fff0 	bl	800b654 <__sfp_lock_acquire>
 800b674:	6a23      	ldr	r3, [r4, #32]
 800b676:	b11b      	cbz	r3, 800b680 <__sinit+0x14>
 800b678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b67c:	f7ff bff0 	b.w	800b660 <__sfp_lock_release>
 800b680:	4b04      	ldr	r3, [pc, #16]	@ (800b694 <__sinit+0x28>)
 800b682:	6223      	str	r3, [r4, #32]
 800b684:	4b04      	ldr	r3, [pc, #16]	@ (800b698 <__sinit+0x2c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1f5      	bne.n	800b678 <__sinit+0xc>
 800b68c:	f7ff ffc4 	bl	800b618 <global_stdio_init.part.0>
 800b690:	e7f2      	b.n	800b678 <__sinit+0xc>
 800b692:	bf00      	nop
 800b694:	0800b5d9 	.word	0x0800b5d9
 800b698:	24000c5c 	.word	0x24000c5c

0800b69c <_fwalk_sglue>:
 800b69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a0:	4607      	mov	r7, r0
 800b6a2:	4688      	mov	r8, r1
 800b6a4:	4614      	mov	r4, r2
 800b6a6:	2600      	movs	r6, #0
 800b6a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6ac:	f1b9 0901 	subs.w	r9, r9, #1
 800b6b0:	d505      	bpl.n	800b6be <_fwalk_sglue+0x22>
 800b6b2:	6824      	ldr	r4, [r4, #0]
 800b6b4:	2c00      	cmp	r4, #0
 800b6b6:	d1f7      	bne.n	800b6a8 <_fwalk_sglue+0xc>
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6be:	89ab      	ldrh	r3, [r5, #12]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d907      	bls.n	800b6d4 <_fwalk_sglue+0x38>
 800b6c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	d003      	beq.n	800b6d4 <_fwalk_sglue+0x38>
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	47c0      	blx	r8
 800b6d2:	4306      	orrs	r6, r0
 800b6d4:	3568      	adds	r5, #104	@ 0x68
 800b6d6:	e7e9      	b.n	800b6ac <_fwalk_sglue+0x10>

0800b6d8 <iprintf>:
 800b6d8:	b40f      	push	{r0, r1, r2, r3}
 800b6da:	b507      	push	{r0, r1, r2, lr}
 800b6dc:	4906      	ldr	r1, [pc, #24]	@ (800b6f8 <iprintf+0x20>)
 800b6de:	ab04      	add	r3, sp, #16
 800b6e0:	6808      	ldr	r0, [r1, #0]
 800b6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6e6:	6881      	ldr	r1, [r0, #8]
 800b6e8:	9301      	str	r3, [sp, #4]
 800b6ea:	f001 fb57 	bl	800cd9c <_vfiprintf_r>
 800b6ee:	b003      	add	sp, #12
 800b6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6f4:	b004      	add	sp, #16
 800b6f6:	4770      	bx	lr
 800b6f8:	24000024 	.word	0x24000024

0800b6fc <__sread>:
 800b6fc:	b510      	push	{r4, lr}
 800b6fe:	460c      	mov	r4, r1
 800b700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b704:	f000 f86c 	bl	800b7e0 <_read_r>
 800b708:	2800      	cmp	r0, #0
 800b70a:	bfab      	itete	ge
 800b70c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b70e:	89a3      	ldrhlt	r3, [r4, #12]
 800b710:	181b      	addge	r3, r3, r0
 800b712:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b716:	bfac      	ite	ge
 800b718:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b71a:	81a3      	strhlt	r3, [r4, #12]
 800b71c:	bd10      	pop	{r4, pc}

0800b71e <__swrite>:
 800b71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b722:	461f      	mov	r7, r3
 800b724:	898b      	ldrh	r3, [r1, #12]
 800b726:	05db      	lsls	r3, r3, #23
 800b728:	4605      	mov	r5, r0
 800b72a:	460c      	mov	r4, r1
 800b72c:	4616      	mov	r6, r2
 800b72e:	d505      	bpl.n	800b73c <__swrite+0x1e>
 800b730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b734:	2302      	movs	r3, #2
 800b736:	2200      	movs	r2, #0
 800b738:	f000 f840 	bl	800b7bc <_lseek_r>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b742:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b746:	81a3      	strh	r3, [r4, #12]
 800b748:	4632      	mov	r2, r6
 800b74a:	463b      	mov	r3, r7
 800b74c:	4628      	mov	r0, r5
 800b74e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b752:	f000 b857 	b.w	800b804 <_write_r>

0800b756 <__sseek>:
 800b756:	b510      	push	{r4, lr}
 800b758:	460c      	mov	r4, r1
 800b75a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b75e:	f000 f82d 	bl	800b7bc <_lseek_r>
 800b762:	1c43      	adds	r3, r0, #1
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	bf15      	itete	ne
 800b768:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b76a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b76e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b772:	81a3      	strheq	r3, [r4, #12]
 800b774:	bf18      	it	ne
 800b776:	81a3      	strhne	r3, [r4, #12]
 800b778:	bd10      	pop	{r4, pc}

0800b77a <__sclose>:
 800b77a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77e:	f000 b80d 	b.w	800b79c <_close_r>

0800b782 <memset>:
 800b782:	4402      	add	r2, r0
 800b784:	4603      	mov	r3, r0
 800b786:	4293      	cmp	r3, r2
 800b788:	d100      	bne.n	800b78c <memset+0xa>
 800b78a:	4770      	bx	lr
 800b78c:	f803 1b01 	strb.w	r1, [r3], #1
 800b790:	e7f9      	b.n	800b786 <memset+0x4>
	...

0800b794 <_localeconv_r>:
 800b794:	4800      	ldr	r0, [pc, #0]	@ (800b798 <_localeconv_r+0x4>)
 800b796:	4770      	bx	lr
 800b798:	24000164 	.word	0x24000164

0800b79c <_close_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d06      	ldr	r5, [pc, #24]	@ (800b7b8 <_close_r+0x1c>)
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	602b      	str	r3, [r5, #0]
 800b7a8:	f7f6 fe16 	bl	80023d8 <_close>
 800b7ac:	1c43      	adds	r3, r0, #1
 800b7ae:	d102      	bne.n	800b7b6 <_close_r+0x1a>
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	b103      	cbz	r3, 800b7b6 <_close_r+0x1a>
 800b7b4:	6023      	str	r3, [r4, #0]
 800b7b6:	bd38      	pop	{r3, r4, r5, pc}
 800b7b8:	24000c60 	.word	0x24000c60

0800b7bc <_lseek_r>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	4d07      	ldr	r5, [pc, #28]	@ (800b7dc <_lseek_r+0x20>)
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	4608      	mov	r0, r1
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	602a      	str	r2, [r5, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f7f6 fe2b 	bl	8002426 <_lseek>
 800b7d0:	1c43      	adds	r3, r0, #1
 800b7d2:	d102      	bne.n	800b7da <_lseek_r+0x1e>
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	b103      	cbz	r3, 800b7da <_lseek_r+0x1e>
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	bd38      	pop	{r3, r4, r5, pc}
 800b7dc:	24000c60 	.word	0x24000c60

0800b7e0 <_read_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4d07      	ldr	r5, [pc, #28]	@ (800b800 <_read_r+0x20>)
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	4608      	mov	r0, r1
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	602a      	str	r2, [r5, #0]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f7f6 fdb9 	bl	8002366 <_read>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_read_r+0x1e>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_read_r+0x1e>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	24000c60 	.word	0x24000c60

0800b804 <_write_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	4d07      	ldr	r5, [pc, #28]	@ (800b824 <_write_r+0x20>)
 800b808:	4604      	mov	r4, r0
 800b80a:	4608      	mov	r0, r1
 800b80c:	4611      	mov	r1, r2
 800b80e:	2200      	movs	r2, #0
 800b810:	602a      	str	r2, [r5, #0]
 800b812:	461a      	mov	r2, r3
 800b814:	f7f6 fdc4 	bl	80023a0 <_write>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d102      	bne.n	800b822 <_write_r+0x1e>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	b103      	cbz	r3, 800b822 <_write_r+0x1e>
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	bd38      	pop	{r3, r4, r5, pc}
 800b824:	24000c60 	.word	0x24000c60

0800b828 <__errno>:
 800b828:	4b01      	ldr	r3, [pc, #4]	@ (800b830 <__errno+0x8>)
 800b82a:	6818      	ldr	r0, [r3, #0]
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	24000024 	.word	0x24000024

0800b834 <__libc_init_array>:
 800b834:	b570      	push	{r4, r5, r6, lr}
 800b836:	4d0d      	ldr	r5, [pc, #52]	@ (800b86c <__libc_init_array+0x38>)
 800b838:	4c0d      	ldr	r4, [pc, #52]	@ (800b870 <__libc_init_array+0x3c>)
 800b83a:	1b64      	subs	r4, r4, r5
 800b83c:	10a4      	asrs	r4, r4, #2
 800b83e:	2600      	movs	r6, #0
 800b840:	42a6      	cmp	r6, r4
 800b842:	d109      	bne.n	800b858 <__libc_init_array+0x24>
 800b844:	4d0b      	ldr	r5, [pc, #44]	@ (800b874 <__libc_init_array+0x40>)
 800b846:	4c0c      	ldr	r4, [pc, #48]	@ (800b878 <__libc_init_array+0x44>)
 800b848:	f002 fee8 	bl	800e61c <_init>
 800b84c:	1b64      	subs	r4, r4, r5
 800b84e:	10a4      	asrs	r4, r4, #2
 800b850:	2600      	movs	r6, #0
 800b852:	42a6      	cmp	r6, r4
 800b854:	d105      	bne.n	800b862 <__libc_init_array+0x2e>
 800b856:	bd70      	pop	{r4, r5, r6, pc}
 800b858:	f855 3b04 	ldr.w	r3, [r5], #4
 800b85c:	4798      	blx	r3
 800b85e:	3601      	adds	r6, #1
 800b860:	e7ee      	b.n	800b840 <__libc_init_array+0xc>
 800b862:	f855 3b04 	ldr.w	r3, [r5], #4
 800b866:	4798      	blx	r3
 800b868:	3601      	adds	r6, #1
 800b86a:	e7f2      	b.n	800b852 <__libc_init_array+0x1e>
 800b86c:	0800ef28 	.word	0x0800ef28
 800b870:	0800ef28 	.word	0x0800ef28
 800b874:	0800ef28 	.word	0x0800ef28
 800b878:	0800ef2c 	.word	0x0800ef2c

0800b87c <__retarget_lock_init_recursive>:
 800b87c:	4770      	bx	lr

0800b87e <__retarget_lock_acquire_recursive>:
 800b87e:	4770      	bx	lr

0800b880 <__retarget_lock_release_recursive>:
 800b880:	4770      	bx	lr

0800b882 <quorem>:
 800b882:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b886:	6903      	ldr	r3, [r0, #16]
 800b888:	690c      	ldr	r4, [r1, #16]
 800b88a:	42a3      	cmp	r3, r4
 800b88c:	4607      	mov	r7, r0
 800b88e:	db7e      	blt.n	800b98e <quorem+0x10c>
 800b890:	3c01      	subs	r4, #1
 800b892:	f101 0814 	add.w	r8, r1, #20
 800b896:	00a3      	lsls	r3, r4, #2
 800b898:	f100 0514 	add.w	r5, r0, #20
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8b4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8b8:	d32e      	bcc.n	800b918 <quorem+0x96>
 800b8ba:	f04f 0a00 	mov.w	sl, #0
 800b8be:	46c4      	mov	ip, r8
 800b8c0:	46ae      	mov	lr, r5
 800b8c2:	46d3      	mov	fp, sl
 800b8c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b8c8:	b298      	uxth	r0, r3
 800b8ca:	fb06 a000 	mla	r0, r6, r0, sl
 800b8ce:	0c02      	lsrs	r2, r0, #16
 800b8d0:	0c1b      	lsrs	r3, r3, #16
 800b8d2:	fb06 2303 	mla	r3, r6, r3, r2
 800b8d6:	f8de 2000 	ldr.w	r2, [lr]
 800b8da:	b280      	uxth	r0, r0
 800b8dc:	b292      	uxth	r2, r2
 800b8de:	1a12      	subs	r2, r2, r0
 800b8e0:	445a      	add	r2, fp
 800b8e2:	f8de 0000 	ldr.w	r0, [lr]
 800b8e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b8f0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b8f4:	b292      	uxth	r2, r2
 800b8f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b8fa:	45e1      	cmp	r9, ip
 800b8fc:	f84e 2b04 	str.w	r2, [lr], #4
 800b900:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b904:	d2de      	bcs.n	800b8c4 <quorem+0x42>
 800b906:	9b00      	ldr	r3, [sp, #0]
 800b908:	58eb      	ldr	r3, [r5, r3]
 800b90a:	b92b      	cbnz	r3, 800b918 <quorem+0x96>
 800b90c:	9b01      	ldr	r3, [sp, #4]
 800b90e:	3b04      	subs	r3, #4
 800b910:	429d      	cmp	r5, r3
 800b912:	461a      	mov	r2, r3
 800b914:	d32f      	bcc.n	800b976 <quorem+0xf4>
 800b916:	613c      	str	r4, [r7, #16]
 800b918:	4638      	mov	r0, r7
 800b91a:	f001 f90d 	bl	800cb38 <__mcmp>
 800b91e:	2800      	cmp	r0, #0
 800b920:	db25      	blt.n	800b96e <quorem+0xec>
 800b922:	4629      	mov	r1, r5
 800b924:	2000      	movs	r0, #0
 800b926:	f858 2b04 	ldr.w	r2, [r8], #4
 800b92a:	f8d1 c000 	ldr.w	ip, [r1]
 800b92e:	fa1f fe82 	uxth.w	lr, r2
 800b932:	fa1f f38c 	uxth.w	r3, ip
 800b936:	eba3 030e 	sub.w	r3, r3, lr
 800b93a:	4403      	add	r3, r0
 800b93c:	0c12      	lsrs	r2, r2, #16
 800b93e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b942:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b946:	b29b      	uxth	r3, r3
 800b948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b94c:	45c1      	cmp	r9, r8
 800b94e:	f841 3b04 	str.w	r3, [r1], #4
 800b952:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b956:	d2e6      	bcs.n	800b926 <quorem+0xa4>
 800b958:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b95c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b960:	b922      	cbnz	r2, 800b96c <quorem+0xea>
 800b962:	3b04      	subs	r3, #4
 800b964:	429d      	cmp	r5, r3
 800b966:	461a      	mov	r2, r3
 800b968:	d30b      	bcc.n	800b982 <quorem+0x100>
 800b96a:	613c      	str	r4, [r7, #16]
 800b96c:	3601      	adds	r6, #1
 800b96e:	4630      	mov	r0, r6
 800b970:	b003      	add	sp, #12
 800b972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b976:	6812      	ldr	r2, [r2, #0]
 800b978:	3b04      	subs	r3, #4
 800b97a:	2a00      	cmp	r2, #0
 800b97c:	d1cb      	bne.n	800b916 <quorem+0x94>
 800b97e:	3c01      	subs	r4, #1
 800b980:	e7c6      	b.n	800b910 <quorem+0x8e>
 800b982:	6812      	ldr	r2, [r2, #0]
 800b984:	3b04      	subs	r3, #4
 800b986:	2a00      	cmp	r2, #0
 800b988:	d1ef      	bne.n	800b96a <quorem+0xe8>
 800b98a:	3c01      	subs	r4, #1
 800b98c:	e7ea      	b.n	800b964 <quorem+0xe2>
 800b98e:	2000      	movs	r0, #0
 800b990:	e7ee      	b.n	800b970 <quorem+0xee>
 800b992:	0000      	movs	r0, r0
 800b994:	0000      	movs	r0, r0
	...

0800b998 <_dtoa_r>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	ed2d 8b02 	vpush	{d8}
 800b9a0:	69c7      	ldr	r7, [r0, #28]
 800b9a2:	b091      	sub	sp, #68	@ 0x44
 800b9a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b9a8:	ec55 4b10 	vmov	r4, r5, d0
 800b9ac:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b9ae:	9107      	str	r1, [sp, #28]
 800b9b0:	4681      	mov	r9, r0
 800b9b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9b4:	930d      	str	r3, [sp, #52]	@ 0x34
 800b9b6:	b97f      	cbnz	r7, 800b9d8 <_dtoa_r+0x40>
 800b9b8:	2010      	movs	r0, #16
 800b9ba:	f000 fd95 	bl	800c4e8 <malloc>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	f8c9 001c 	str.w	r0, [r9, #28]
 800b9c4:	b920      	cbnz	r0, 800b9d0 <_dtoa_r+0x38>
 800b9c6:	4ba0      	ldr	r3, [pc, #640]	@ (800bc48 <_dtoa_r+0x2b0>)
 800b9c8:	21ef      	movs	r1, #239	@ 0xef
 800b9ca:	48a0      	ldr	r0, [pc, #640]	@ (800bc4c <_dtoa_r+0x2b4>)
 800b9cc:	f001 fc5c 	bl	800d288 <__assert_func>
 800b9d0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b9d4:	6007      	str	r7, [r0, #0]
 800b9d6:	60c7      	str	r7, [r0, #12]
 800b9d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b9dc:	6819      	ldr	r1, [r3, #0]
 800b9de:	b159      	cbz	r1, 800b9f8 <_dtoa_r+0x60>
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	604a      	str	r2, [r1, #4]
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	4093      	lsls	r3, r2
 800b9e8:	608b      	str	r3, [r1, #8]
 800b9ea:	4648      	mov	r0, r9
 800b9ec:	f000 fe72 	bl	800c6d4 <_Bfree>
 800b9f0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	1e2b      	subs	r3, r5, #0
 800b9fa:	bfbb      	ittet	lt
 800b9fc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba00:	9303      	strlt	r3, [sp, #12]
 800ba02:	2300      	movge	r3, #0
 800ba04:	2201      	movlt	r2, #1
 800ba06:	bfac      	ite	ge
 800ba08:	6033      	strge	r3, [r6, #0]
 800ba0a:	6032      	strlt	r2, [r6, #0]
 800ba0c:	4b90      	ldr	r3, [pc, #576]	@ (800bc50 <_dtoa_r+0x2b8>)
 800ba0e:	9e03      	ldr	r6, [sp, #12]
 800ba10:	43b3      	bics	r3, r6
 800ba12:	d110      	bne.n	800ba36 <_dtoa_r+0x9e>
 800ba14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba16:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800ba20:	4323      	orrs	r3, r4
 800ba22:	f000 84e6 	beq.w	800c3f2 <_dtoa_r+0xa5a>
 800ba26:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ba28:	4f8a      	ldr	r7, [pc, #552]	@ (800bc54 <_dtoa_r+0x2bc>)
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f000 84e8 	beq.w	800c400 <_dtoa_r+0xa68>
 800ba30:	1cfb      	adds	r3, r7, #3
 800ba32:	f000 bce3 	b.w	800c3fc <_dtoa_r+0xa64>
 800ba36:	ed9d 8b02 	vldr	d8, [sp, #8]
 800ba3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ba3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba42:	d10a      	bne.n	800ba5a <_dtoa_r+0xc2>
 800ba44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba46:	2301      	movs	r3, #1
 800ba48:	6013      	str	r3, [r2, #0]
 800ba4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ba4c:	b113      	cbz	r3, 800ba54 <_dtoa_r+0xbc>
 800ba4e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ba50:	4b81      	ldr	r3, [pc, #516]	@ (800bc58 <_dtoa_r+0x2c0>)
 800ba52:	6013      	str	r3, [r2, #0]
 800ba54:	4f81      	ldr	r7, [pc, #516]	@ (800bc5c <_dtoa_r+0x2c4>)
 800ba56:	f000 bcd3 	b.w	800c400 <_dtoa_r+0xa68>
 800ba5a:	aa0e      	add	r2, sp, #56	@ 0x38
 800ba5c:	a90f      	add	r1, sp, #60	@ 0x3c
 800ba5e:	4648      	mov	r0, r9
 800ba60:	eeb0 0b48 	vmov.f64	d0, d8
 800ba64:	f001 f918 	bl	800cc98 <__d2b>
 800ba68:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800ba6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba6e:	9001      	str	r0, [sp, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d045      	beq.n	800bb00 <_dtoa_r+0x168>
 800ba74:	eeb0 7b48 	vmov.f64	d7, d8
 800ba78:	ee18 1a90 	vmov	r1, s17
 800ba7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ba80:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800ba84:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800ba88:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ba8c:	2500      	movs	r5, #0
 800ba8e:	ee07 1a90 	vmov	s15, r1
 800ba92:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800ba96:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bc30 <_dtoa_r+0x298>
 800ba9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ba9e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bc38 <_dtoa_r+0x2a0>
 800baa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800baa6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bc40 <_dtoa_r+0x2a8>
 800baaa:	ee07 3a90 	vmov	s15, r3
 800baae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bab2:	eeb0 7b46 	vmov.f64	d7, d6
 800bab6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800baba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800babe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac6:	ee16 8a90 	vmov	r8, s13
 800baca:	d508      	bpl.n	800bade <_dtoa_r+0x146>
 800bacc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bad0:	eeb4 6b47 	vcmp.f64	d6, d7
 800bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad8:	bf18      	it	ne
 800bada:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bade:	f1b8 0f16 	cmp.w	r8, #22
 800bae2:	d82b      	bhi.n	800bb3c <_dtoa_r+0x1a4>
 800bae4:	495e      	ldr	r1, [pc, #376]	@ (800bc60 <_dtoa_r+0x2c8>)
 800bae6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800baea:	ed91 7b00 	vldr	d7, [r1]
 800baee:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800baf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf6:	d501      	bpl.n	800bafc <_dtoa_r+0x164>
 800baf8:	f108 38ff 	add.w	r8, r8, #4294967295
 800bafc:	2100      	movs	r1, #0
 800bafe:	e01e      	b.n	800bb3e <_dtoa_r+0x1a6>
 800bb00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb02:	4413      	add	r3, r2
 800bb04:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bb08:	2920      	cmp	r1, #32
 800bb0a:	bfc1      	itttt	gt
 800bb0c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bb10:	408e      	lslgt	r6, r1
 800bb12:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bb16:	fa24 f101 	lsrgt.w	r1, r4, r1
 800bb1a:	bfd6      	itet	le
 800bb1c:	f1c1 0120 	rsble	r1, r1, #32
 800bb20:	4331      	orrgt	r1, r6
 800bb22:	fa04 f101 	lslle.w	r1, r4, r1
 800bb26:	ee07 1a90 	vmov	s15, r1
 800bb2a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	ee17 1a90 	vmov	r1, s15
 800bb34:	2501      	movs	r5, #1
 800bb36:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800bb3a:	e7a8      	b.n	800ba8e <_dtoa_r+0xf6>
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	1ad2      	subs	r2, r2, r3
 800bb40:	1e53      	subs	r3, r2, #1
 800bb42:	9306      	str	r3, [sp, #24]
 800bb44:	bf45      	ittet	mi
 800bb46:	f1c2 0301 	rsbmi	r3, r2, #1
 800bb4a:	9304      	strmi	r3, [sp, #16]
 800bb4c:	2300      	movpl	r3, #0
 800bb4e:	2300      	movmi	r3, #0
 800bb50:	bf4c      	ite	mi
 800bb52:	9306      	strmi	r3, [sp, #24]
 800bb54:	9304      	strpl	r3, [sp, #16]
 800bb56:	f1b8 0f00 	cmp.w	r8, #0
 800bb5a:	910c      	str	r1, [sp, #48]	@ 0x30
 800bb5c:	db18      	blt.n	800bb90 <_dtoa_r+0x1f8>
 800bb5e:	9b06      	ldr	r3, [sp, #24]
 800bb60:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800bb64:	4443      	add	r3, r8
 800bb66:	9306      	str	r3, [sp, #24]
 800bb68:	2300      	movs	r3, #0
 800bb6a:	9a07      	ldr	r2, [sp, #28]
 800bb6c:	2a09      	cmp	r2, #9
 800bb6e:	d845      	bhi.n	800bbfc <_dtoa_r+0x264>
 800bb70:	2a05      	cmp	r2, #5
 800bb72:	bfc4      	itt	gt
 800bb74:	3a04      	subgt	r2, #4
 800bb76:	9207      	strgt	r2, [sp, #28]
 800bb78:	9a07      	ldr	r2, [sp, #28]
 800bb7a:	f1a2 0202 	sub.w	r2, r2, #2
 800bb7e:	bfcc      	ite	gt
 800bb80:	2400      	movgt	r4, #0
 800bb82:	2401      	movle	r4, #1
 800bb84:	2a03      	cmp	r2, #3
 800bb86:	d844      	bhi.n	800bc12 <_dtoa_r+0x27a>
 800bb88:	e8df f002 	tbb	[pc, r2]
 800bb8c:	0b173634 	.word	0x0b173634
 800bb90:	9b04      	ldr	r3, [sp, #16]
 800bb92:	2200      	movs	r2, #0
 800bb94:	eba3 0308 	sub.w	r3, r3, r8
 800bb98:	9304      	str	r3, [sp, #16]
 800bb9a:	920a      	str	r2, [sp, #40]	@ 0x28
 800bb9c:	f1c8 0300 	rsb	r3, r8, #0
 800bba0:	e7e3      	b.n	800bb6a <_dtoa_r+0x1d2>
 800bba2:	2201      	movs	r2, #1
 800bba4:	9208      	str	r2, [sp, #32]
 800bba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bba8:	eb08 0b02 	add.w	fp, r8, r2
 800bbac:	f10b 0a01 	add.w	sl, fp, #1
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	2a01      	cmp	r2, #1
 800bbb4:	bfb8      	it	lt
 800bbb6:	2201      	movlt	r2, #1
 800bbb8:	e006      	b.n	800bbc8 <_dtoa_r+0x230>
 800bbba:	2201      	movs	r2, #1
 800bbbc:	9208      	str	r2, [sp, #32]
 800bbbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	dd29      	ble.n	800bc18 <_dtoa_r+0x280>
 800bbc4:	4693      	mov	fp, r2
 800bbc6:	4692      	mov	sl, r2
 800bbc8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800bbcc:	2100      	movs	r1, #0
 800bbce:	2004      	movs	r0, #4
 800bbd0:	f100 0614 	add.w	r6, r0, #20
 800bbd4:	4296      	cmp	r6, r2
 800bbd6:	d926      	bls.n	800bc26 <_dtoa_r+0x28e>
 800bbd8:	6079      	str	r1, [r7, #4]
 800bbda:	4648      	mov	r0, r9
 800bbdc:	9305      	str	r3, [sp, #20]
 800bbde:	f000 fd39 	bl	800c654 <_Balloc>
 800bbe2:	9b05      	ldr	r3, [sp, #20]
 800bbe4:	4607      	mov	r7, r0
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d13e      	bne.n	800bc68 <_dtoa_r+0x2d0>
 800bbea:	4b1e      	ldr	r3, [pc, #120]	@ (800bc64 <_dtoa_r+0x2cc>)
 800bbec:	4602      	mov	r2, r0
 800bbee:	f240 11af 	movw	r1, #431	@ 0x1af
 800bbf2:	e6ea      	b.n	800b9ca <_dtoa_r+0x32>
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	e7e1      	b.n	800bbbc <_dtoa_r+0x224>
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	e7d3      	b.n	800bba4 <_dtoa_r+0x20c>
 800bbfc:	2401      	movs	r4, #1
 800bbfe:	2200      	movs	r2, #0
 800bc00:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bc04:	f04f 3bff 	mov.w	fp, #4294967295
 800bc08:	2100      	movs	r1, #0
 800bc0a:	46da      	mov	sl, fp
 800bc0c:	2212      	movs	r2, #18
 800bc0e:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc10:	e7da      	b.n	800bbc8 <_dtoa_r+0x230>
 800bc12:	2201      	movs	r2, #1
 800bc14:	9208      	str	r2, [sp, #32]
 800bc16:	e7f5      	b.n	800bc04 <_dtoa_r+0x26c>
 800bc18:	f04f 0b01 	mov.w	fp, #1
 800bc1c:	46da      	mov	sl, fp
 800bc1e:	465a      	mov	r2, fp
 800bc20:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800bc24:	e7d0      	b.n	800bbc8 <_dtoa_r+0x230>
 800bc26:	3101      	adds	r1, #1
 800bc28:	0040      	lsls	r0, r0, #1
 800bc2a:	e7d1      	b.n	800bbd0 <_dtoa_r+0x238>
 800bc2c:	f3af 8000 	nop.w
 800bc30:	636f4361 	.word	0x636f4361
 800bc34:	3fd287a7 	.word	0x3fd287a7
 800bc38:	8b60c8b3 	.word	0x8b60c8b3
 800bc3c:	3fc68a28 	.word	0x3fc68a28
 800bc40:	509f79fb 	.word	0x509f79fb
 800bc44:	3fd34413 	.word	0x3fd34413
 800bc48:	0800e6a1 	.word	0x0800e6a1
 800bc4c:	0800e6b8 	.word	0x0800e6b8
 800bc50:	7ff00000 	.word	0x7ff00000
 800bc54:	0800e69d 	.word	0x0800e69d
 800bc58:	0800e671 	.word	0x0800e671
 800bc5c:	0800e670 	.word	0x0800e670
 800bc60:	0800e808 	.word	0x0800e808
 800bc64:	0800e710 	.word	0x0800e710
 800bc68:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800bc6c:	f1ba 0f0e 	cmp.w	sl, #14
 800bc70:	6010      	str	r0, [r2, #0]
 800bc72:	d86e      	bhi.n	800bd52 <_dtoa_r+0x3ba>
 800bc74:	2c00      	cmp	r4, #0
 800bc76:	d06c      	beq.n	800bd52 <_dtoa_r+0x3ba>
 800bc78:	f1b8 0f00 	cmp.w	r8, #0
 800bc7c:	f340 80b4 	ble.w	800bde8 <_dtoa_r+0x450>
 800bc80:	4ac8      	ldr	r2, [pc, #800]	@ (800bfa4 <_dtoa_r+0x60c>)
 800bc82:	f008 010f 	and.w	r1, r8, #15
 800bc86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bc8a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800bc8e:	ed92 7b00 	vldr	d7, [r2]
 800bc92:	ea4f 1128 	mov.w	r1, r8, asr #4
 800bc96:	f000 809b 	beq.w	800bdd0 <_dtoa_r+0x438>
 800bc9a:	4ac3      	ldr	r2, [pc, #780]	@ (800bfa8 <_dtoa_r+0x610>)
 800bc9c:	ed92 6b08 	vldr	d6, [r2, #32]
 800bca0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bca4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bca8:	f001 010f 	and.w	r1, r1, #15
 800bcac:	2203      	movs	r2, #3
 800bcae:	48be      	ldr	r0, [pc, #760]	@ (800bfa8 <_dtoa_r+0x610>)
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	f040 808f 	bne.w	800bdd4 <_dtoa_r+0x43c>
 800bcb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bcba:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bcbe:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bcc2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bcc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bcc8:	2900      	cmp	r1, #0
 800bcca:	f000 80b3 	beq.w	800be34 <_dtoa_r+0x49c>
 800bcce:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bcd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcda:	f140 80ab 	bpl.w	800be34 <_dtoa_r+0x49c>
 800bcde:	f1ba 0f00 	cmp.w	sl, #0
 800bce2:	f000 80a7 	beq.w	800be34 <_dtoa_r+0x49c>
 800bce6:	f1bb 0f00 	cmp.w	fp, #0
 800bcea:	dd30      	ble.n	800bd4e <_dtoa_r+0x3b6>
 800bcec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bcf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bcf4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bcf8:	f108 31ff 	add.w	r1, r8, #4294967295
 800bcfc:	9105      	str	r1, [sp, #20]
 800bcfe:	3201      	adds	r2, #1
 800bd00:	465c      	mov	r4, fp
 800bd02:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bd06:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800bd0a:	ee07 2a90 	vmov	s15, r2
 800bd0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bd12:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bd16:	ee15 2a90 	vmov	r2, s11
 800bd1a:	ec51 0b15 	vmov	r0, r1, d5
 800bd1e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800bd22:	2c00      	cmp	r4, #0
 800bd24:	f040 808a 	bne.w	800be3c <_dtoa_r+0x4a4>
 800bd28:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bd2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bd30:	ec41 0b17 	vmov	d7, r0, r1
 800bd34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd3c:	f300 826a 	bgt.w	800c214 <_dtoa_r+0x87c>
 800bd40:	eeb1 7b47 	vneg.f64	d7, d7
 800bd44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd4c:	d423      	bmi.n	800bd96 <_dtoa_r+0x3fe>
 800bd4e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bd52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	f2c0 8129 	blt.w	800bfac <_dtoa_r+0x614>
 800bd5a:	f1b8 0f0e 	cmp.w	r8, #14
 800bd5e:	f300 8125 	bgt.w	800bfac <_dtoa_r+0x614>
 800bd62:	4b90      	ldr	r3, [pc, #576]	@ (800bfa4 <_dtoa_r+0x60c>)
 800bd64:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bd68:	ed93 6b00 	vldr	d6, [r3]
 800bd6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f280 80c8 	bge.w	800bf04 <_dtoa_r+0x56c>
 800bd74:	f1ba 0f00 	cmp.w	sl, #0
 800bd78:	f300 80c4 	bgt.w	800bf04 <_dtoa_r+0x56c>
 800bd7c:	d10b      	bne.n	800bd96 <_dtoa_r+0x3fe>
 800bd7e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bd82:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bd86:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd8a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd92:	f2c0 823c 	blt.w	800c20e <_dtoa_r+0x876>
 800bd96:	2400      	movs	r4, #0
 800bd98:	4625      	mov	r5, r4
 800bd9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd9c:	43db      	mvns	r3, r3
 800bd9e:	9305      	str	r3, [sp, #20]
 800bda0:	463e      	mov	r6, r7
 800bda2:	f04f 0800 	mov.w	r8, #0
 800bda6:	4621      	mov	r1, r4
 800bda8:	4648      	mov	r0, r9
 800bdaa:	f000 fc93 	bl	800c6d4 <_Bfree>
 800bdae:	2d00      	cmp	r5, #0
 800bdb0:	f000 80a2 	beq.w	800bef8 <_dtoa_r+0x560>
 800bdb4:	f1b8 0f00 	cmp.w	r8, #0
 800bdb8:	d005      	beq.n	800bdc6 <_dtoa_r+0x42e>
 800bdba:	45a8      	cmp	r8, r5
 800bdbc:	d003      	beq.n	800bdc6 <_dtoa_r+0x42e>
 800bdbe:	4641      	mov	r1, r8
 800bdc0:	4648      	mov	r0, r9
 800bdc2:	f000 fc87 	bl	800c6d4 <_Bfree>
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	4648      	mov	r0, r9
 800bdca:	f000 fc83 	bl	800c6d4 <_Bfree>
 800bdce:	e093      	b.n	800bef8 <_dtoa_r+0x560>
 800bdd0:	2202      	movs	r2, #2
 800bdd2:	e76c      	b.n	800bcae <_dtoa_r+0x316>
 800bdd4:	07cc      	lsls	r4, r1, #31
 800bdd6:	d504      	bpl.n	800bde2 <_dtoa_r+0x44a>
 800bdd8:	ed90 6b00 	vldr	d6, [r0]
 800bddc:	3201      	adds	r2, #1
 800bdde:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bde2:	1049      	asrs	r1, r1, #1
 800bde4:	3008      	adds	r0, #8
 800bde6:	e763      	b.n	800bcb0 <_dtoa_r+0x318>
 800bde8:	d022      	beq.n	800be30 <_dtoa_r+0x498>
 800bdea:	f1c8 0100 	rsb	r1, r8, #0
 800bdee:	4a6d      	ldr	r2, [pc, #436]	@ (800bfa4 <_dtoa_r+0x60c>)
 800bdf0:	f001 000f 	and.w	r0, r1, #15
 800bdf4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bdf8:	ed92 7b00 	vldr	d7, [r2]
 800bdfc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800be00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be04:	4868      	ldr	r0, [pc, #416]	@ (800bfa8 <_dtoa_r+0x610>)
 800be06:	1109      	asrs	r1, r1, #4
 800be08:	2400      	movs	r4, #0
 800be0a:	2202      	movs	r2, #2
 800be0c:	b929      	cbnz	r1, 800be1a <_dtoa_r+0x482>
 800be0e:	2c00      	cmp	r4, #0
 800be10:	f43f af57 	beq.w	800bcc2 <_dtoa_r+0x32a>
 800be14:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be18:	e753      	b.n	800bcc2 <_dtoa_r+0x32a>
 800be1a:	07ce      	lsls	r6, r1, #31
 800be1c:	d505      	bpl.n	800be2a <_dtoa_r+0x492>
 800be1e:	ed90 6b00 	vldr	d6, [r0]
 800be22:	3201      	adds	r2, #1
 800be24:	2401      	movs	r4, #1
 800be26:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be2a:	1049      	asrs	r1, r1, #1
 800be2c:	3008      	adds	r0, #8
 800be2e:	e7ed      	b.n	800be0c <_dtoa_r+0x474>
 800be30:	2202      	movs	r2, #2
 800be32:	e746      	b.n	800bcc2 <_dtoa_r+0x32a>
 800be34:	f8cd 8014 	str.w	r8, [sp, #20]
 800be38:	4654      	mov	r4, sl
 800be3a:	e762      	b.n	800bd02 <_dtoa_r+0x36a>
 800be3c:	4a59      	ldr	r2, [pc, #356]	@ (800bfa4 <_dtoa_r+0x60c>)
 800be3e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800be42:	ed12 4b02 	vldr	d4, [r2, #-8]
 800be46:	9a08      	ldr	r2, [sp, #32]
 800be48:	ec41 0b17 	vmov	d7, r0, r1
 800be4c:	443c      	add	r4, r7
 800be4e:	b34a      	cbz	r2, 800bea4 <_dtoa_r+0x50c>
 800be50:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800be54:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800be58:	463e      	mov	r6, r7
 800be5a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800be5e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800be62:	ee35 7b47 	vsub.f64	d7, d5, d7
 800be66:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800be6a:	ee14 2a90 	vmov	r2, s9
 800be6e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800be72:	3230      	adds	r2, #48	@ 0x30
 800be74:	ee36 6b45 	vsub.f64	d6, d6, d5
 800be78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be80:	f806 2b01 	strb.w	r2, [r6], #1
 800be84:	d438      	bmi.n	800bef8 <_dtoa_r+0x560>
 800be86:	ee32 5b46 	vsub.f64	d5, d2, d6
 800be8a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800be8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be92:	d46e      	bmi.n	800bf72 <_dtoa_r+0x5da>
 800be94:	42a6      	cmp	r6, r4
 800be96:	f43f af5a 	beq.w	800bd4e <_dtoa_r+0x3b6>
 800be9a:	ee27 7b03 	vmul.f64	d7, d7, d3
 800be9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bea2:	e7e0      	b.n	800be66 <_dtoa_r+0x4ce>
 800bea4:	4621      	mov	r1, r4
 800bea6:	463e      	mov	r6, r7
 800bea8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800beac:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800beb0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800beb4:	ee14 2a90 	vmov	r2, s9
 800beb8:	3230      	adds	r2, #48	@ 0x30
 800beba:	f806 2b01 	strb.w	r2, [r6], #1
 800bebe:	42a6      	cmp	r6, r4
 800bec0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bec4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bec8:	d119      	bne.n	800befe <_dtoa_r+0x566>
 800beca:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bece:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bed2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beda:	dc4a      	bgt.n	800bf72 <_dtoa_r+0x5da>
 800bedc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bee0:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee8:	f57f af31 	bpl.w	800bd4e <_dtoa_r+0x3b6>
 800beec:	460e      	mov	r6, r1
 800beee:	3901      	subs	r1, #1
 800bef0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bef4:	2b30      	cmp	r3, #48	@ 0x30
 800bef6:	d0f9      	beq.n	800beec <_dtoa_r+0x554>
 800bef8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800befc:	e027      	b.n	800bf4e <_dtoa_r+0x5b6>
 800befe:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bf02:	e7d5      	b.n	800beb0 <_dtoa_r+0x518>
 800bf04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf08:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bf0c:	463e      	mov	r6, r7
 800bf0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bf12:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bf16:	ee15 3a10 	vmov	r3, s10
 800bf1a:	3330      	adds	r3, #48	@ 0x30
 800bf1c:	f806 3b01 	strb.w	r3, [r6], #1
 800bf20:	1bf3      	subs	r3, r6, r7
 800bf22:	459a      	cmp	sl, r3
 800bf24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bf28:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bf2c:	d132      	bne.n	800bf94 <_dtoa_r+0x5fc>
 800bf2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bf32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bf36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf3a:	dc18      	bgt.n	800bf6e <_dtoa_r+0x5d6>
 800bf3c:	eeb4 7b46 	vcmp.f64	d7, d6
 800bf40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf44:	d103      	bne.n	800bf4e <_dtoa_r+0x5b6>
 800bf46:	ee15 3a10 	vmov	r3, s10
 800bf4a:	07db      	lsls	r3, r3, #31
 800bf4c:	d40f      	bmi.n	800bf6e <_dtoa_r+0x5d6>
 800bf4e:	9901      	ldr	r1, [sp, #4]
 800bf50:	4648      	mov	r0, r9
 800bf52:	f000 fbbf 	bl	800c6d4 <_Bfree>
 800bf56:	2300      	movs	r3, #0
 800bf58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bf5a:	7033      	strb	r3, [r6, #0]
 800bf5c:	f108 0301 	add.w	r3, r8, #1
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 824b 	beq.w	800c400 <_dtoa_r+0xa68>
 800bf6a:	601e      	str	r6, [r3, #0]
 800bf6c:	e248      	b.n	800c400 <_dtoa_r+0xa68>
 800bf6e:	f8cd 8014 	str.w	r8, [sp, #20]
 800bf72:	4633      	mov	r3, r6
 800bf74:	461e      	mov	r6, r3
 800bf76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf7a:	2a39      	cmp	r2, #57	@ 0x39
 800bf7c:	d106      	bne.n	800bf8c <_dtoa_r+0x5f4>
 800bf7e:	429f      	cmp	r7, r3
 800bf80:	d1f8      	bne.n	800bf74 <_dtoa_r+0x5dc>
 800bf82:	9a05      	ldr	r2, [sp, #20]
 800bf84:	3201      	adds	r2, #1
 800bf86:	9205      	str	r2, [sp, #20]
 800bf88:	2230      	movs	r2, #48	@ 0x30
 800bf8a:	703a      	strb	r2, [r7, #0]
 800bf8c:	781a      	ldrb	r2, [r3, #0]
 800bf8e:	3201      	adds	r2, #1
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	e7b1      	b.n	800bef8 <_dtoa_r+0x560>
 800bf94:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bf98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa0:	d1b5      	bne.n	800bf0e <_dtoa_r+0x576>
 800bfa2:	e7d4      	b.n	800bf4e <_dtoa_r+0x5b6>
 800bfa4:	0800e808 	.word	0x0800e808
 800bfa8:	0800e7e0 	.word	0x0800e7e0
 800bfac:	9908      	ldr	r1, [sp, #32]
 800bfae:	2900      	cmp	r1, #0
 800bfb0:	f000 80e9 	beq.w	800c186 <_dtoa_r+0x7ee>
 800bfb4:	9907      	ldr	r1, [sp, #28]
 800bfb6:	2901      	cmp	r1, #1
 800bfb8:	f300 80cb 	bgt.w	800c152 <_dtoa_r+0x7ba>
 800bfbc:	2d00      	cmp	r5, #0
 800bfbe:	f000 80c4 	beq.w	800c14a <_dtoa_r+0x7b2>
 800bfc2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bfc6:	9e04      	ldr	r6, [sp, #16]
 800bfc8:	461c      	mov	r4, r3
 800bfca:	9305      	str	r3, [sp, #20]
 800bfcc:	9b04      	ldr	r3, [sp, #16]
 800bfce:	4413      	add	r3, r2
 800bfd0:	9304      	str	r3, [sp, #16]
 800bfd2:	9b06      	ldr	r3, [sp, #24]
 800bfd4:	2101      	movs	r1, #1
 800bfd6:	4413      	add	r3, r2
 800bfd8:	4648      	mov	r0, r9
 800bfda:	9306      	str	r3, [sp, #24]
 800bfdc:	f000 fc2e 	bl	800c83c <__i2b>
 800bfe0:	9b05      	ldr	r3, [sp, #20]
 800bfe2:	4605      	mov	r5, r0
 800bfe4:	b166      	cbz	r6, 800c000 <_dtoa_r+0x668>
 800bfe6:	9a06      	ldr	r2, [sp, #24]
 800bfe8:	2a00      	cmp	r2, #0
 800bfea:	dd09      	ble.n	800c000 <_dtoa_r+0x668>
 800bfec:	42b2      	cmp	r2, r6
 800bfee:	9904      	ldr	r1, [sp, #16]
 800bff0:	bfa8      	it	ge
 800bff2:	4632      	movge	r2, r6
 800bff4:	1a89      	subs	r1, r1, r2
 800bff6:	9104      	str	r1, [sp, #16]
 800bff8:	9906      	ldr	r1, [sp, #24]
 800bffa:	1ab6      	subs	r6, r6, r2
 800bffc:	1a8a      	subs	r2, r1, r2
 800bffe:	9206      	str	r2, [sp, #24]
 800c000:	b30b      	cbz	r3, 800c046 <_dtoa_r+0x6ae>
 800c002:	9a08      	ldr	r2, [sp, #32]
 800c004:	2a00      	cmp	r2, #0
 800c006:	f000 80c5 	beq.w	800c194 <_dtoa_r+0x7fc>
 800c00a:	2c00      	cmp	r4, #0
 800c00c:	f000 80bf 	beq.w	800c18e <_dtoa_r+0x7f6>
 800c010:	4629      	mov	r1, r5
 800c012:	4622      	mov	r2, r4
 800c014:	4648      	mov	r0, r9
 800c016:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c018:	f000 fcc8 	bl	800c9ac <__pow5mult>
 800c01c:	9a01      	ldr	r2, [sp, #4]
 800c01e:	4601      	mov	r1, r0
 800c020:	4605      	mov	r5, r0
 800c022:	4648      	mov	r0, r9
 800c024:	f000 fc20 	bl	800c868 <__multiply>
 800c028:	9901      	ldr	r1, [sp, #4]
 800c02a:	9005      	str	r0, [sp, #20]
 800c02c:	4648      	mov	r0, r9
 800c02e:	f000 fb51 	bl	800c6d4 <_Bfree>
 800c032:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c034:	1b1b      	subs	r3, r3, r4
 800c036:	f000 80b0 	beq.w	800c19a <_dtoa_r+0x802>
 800c03a:	9905      	ldr	r1, [sp, #20]
 800c03c:	461a      	mov	r2, r3
 800c03e:	4648      	mov	r0, r9
 800c040:	f000 fcb4 	bl	800c9ac <__pow5mult>
 800c044:	9001      	str	r0, [sp, #4]
 800c046:	2101      	movs	r1, #1
 800c048:	4648      	mov	r0, r9
 800c04a:	f000 fbf7 	bl	800c83c <__i2b>
 800c04e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c050:	4604      	mov	r4, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 81da 	beq.w	800c40c <_dtoa_r+0xa74>
 800c058:	461a      	mov	r2, r3
 800c05a:	4601      	mov	r1, r0
 800c05c:	4648      	mov	r0, r9
 800c05e:	f000 fca5 	bl	800c9ac <__pow5mult>
 800c062:	9b07      	ldr	r3, [sp, #28]
 800c064:	2b01      	cmp	r3, #1
 800c066:	4604      	mov	r4, r0
 800c068:	f300 80a0 	bgt.w	800c1ac <_dtoa_r+0x814>
 800c06c:	9b02      	ldr	r3, [sp, #8]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f040 8096 	bne.w	800c1a0 <_dtoa_r+0x808>
 800c074:	9b03      	ldr	r3, [sp, #12]
 800c076:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c07a:	2a00      	cmp	r2, #0
 800c07c:	f040 8092 	bne.w	800c1a4 <_dtoa_r+0x80c>
 800c080:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c084:	0d12      	lsrs	r2, r2, #20
 800c086:	0512      	lsls	r2, r2, #20
 800c088:	2a00      	cmp	r2, #0
 800c08a:	f000 808d 	beq.w	800c1a8 <_dtoa_r+0x810>
 800c08e:	9b04      	ldr	r3, [sp, #16]
 800c090:	3301      	adds	r3, #1
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	9b06      	ldr	r3, [sp, #24]
 800c096:	3301      	adds	r3, #1
 800c098:	9306      	str	r3, [sp, #24]
 800c09a:	2301      	movs	r3, #1
 800c09c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c09e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	f000 81b9 	beq.w	800c418 <_dtoa_r+0xa80>
 800c0a6:	6922      	ldr	r2, [r4, #16]
 800c0a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c0ac:	6910      	ldr	r0, [r2, #16]
 800c0ae:	f000 fb79 	bl	800c7a4 <__hi0bits>
 800c0b2:	f1c0 0020 	rsb	r0, r0, #32
 800c0b6:	9b06      	ldr	r3, [sp, #24]
 800c0b8:	4418      	add	r0, r3
 800c0ba:	f010 001f 	ands.w	r0, r0, #31
 800c0be:	f000 8081 	beq.w	800c1c4 <_dtoa_r+0x82c>
 800c0c2:	f1c0 0220 	rsb	r2, r0, #32
 800c0c6:	2a04      	cmp	r2, #4
 800c0c8:	dd73      	ble.n	800c1b2 <_dtoa_r+0x81a>
 800c0ca:	9b04      	ldr	r3, [sp, #16]
 800c0cc:	f1c0 001c 	rsb	r0, r0, #28
 800c0d0:	4403      	add	r3, r0
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	9b06      	ldr	r3, [sp, #24]
 800c0d6:	4406      	add	r6, r0
 800c0d8:	4403      	add	r3, r0
 800c0da:	9306      	str	r3, [sp, #24]
 800c0dc:	9b04      	ldr	r3, [sp, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	dd05      	ble.n	800c0ee <_dtoa_r+0x756>
 800c0e2:	9901      	ldr	r1, [sp, #4]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	4648      	mov	r0, r9
 800c0e8:	f000 fcba 	bl	800ca60 <__lshift>
 800c0ec:	9001      	str	r0, [sp, #4]
 800c0ee:	9b06      	ldr	r3, [sp, #24]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	dd05      	ble.n	800c100 <_dtoa_r+0x768>
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	4648      	mov	r0, r9
 800c0fa:	f000 fcb1 	bl	800ca60 <__lshift>
 800c0fe:	4604      	mov	r4, r0
 800c100:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c102:	2b00      	cmp	r3, #0
 800c104:	d060      	beq.n	800c1c8 <_dtoa_r+0x830>
 800c106:	9801      	ldr	r0, [sp, #4]
 800c108:	4621      	mov	r1, r4
 800c10a:	f000 fd15 	bl	800cb38 <__mcmp>
 800c10e:	2800      	cmp	r0, #0
 800c110:	da5a      	bge.n	800c1c8 <_dtoa_r+0x830>
 800c112:	f108 33ff 	add.w	r3, r8, #4294967295
 800c116:	9305      	str	r3, [sp, #20]
 800c118:	9901      	ldr	r1, [sp, #4]
 800c11a:	2300      	movs	r3, #0
 800c11c:	220a      	movs	r2, #10
 800c11e:	4648      	mov	r0, r9
 800c120:	f000 fafa 	bl	800c718 <__multadd>
 800c124:	9b08      	ldr	r3, [sp, #32]
 800c126:	9001      	str	r0, [sp, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 8177 	beq.w	800c41c <_dtoa_r+0xa84>
 800c12e:	4629      	mov	r1, r5
 800c130:	2300      	movs	r3, #0
 800c132:	220a      	movs	r2, #10
 800c134:	4648      	mov	r0, r9
 800c136:	f000 faef 	bl	800c718 <__multadd>
 800c13a:	f1bb 0f00 	cmp.w	fp, #0
 800c13e:	4605      	mov	r5, r0
 800c140:	dc6e      	bgt.n	800c220 <_dtoa_r+0x888>
 800c142:	9b07      	ldr	r3, [sp, #28]
 800c144:	2b02      	cmp	r3, #2
 800c146:	dc48      	bgt.n	800c1da <_dtoa_r+0x842>
 800c148:	e06a      	b.n	800c220 <_dtoa_r+0x888>
 800c14a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c14c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c150:	e739      	b.n	800bfc6 <_dtoa_r+0x62e>
 800c152:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c156:	42a3      	cmp	r3, r4
 800c158:	db07      	blt.n	800c16a <_dtoa_r+0x7d2>
 800c15a:	f1ba 0f00 	cmp.w	sl, #0
 800c15e:	eba3 0404 	sub.w	r4, r3, r4
 800c162:	db0b      	blt.n	800c17c <_dtoa_r+0x7e4>
 800c164:	9e04      	ldr	r6, [sp, #16]
 800c166:	4652      	mov	r2, sl
 800c168:	e72f      	b.n	800bfca <_dtoa_r+0x632>
 800c16a:	1ae2      	subs	r2, r4, r3
 800c16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c16e:	9e04      	ldr	r6, [sp, #16]
 800c170:	4413      	add	r3, r2
 800c172:	930a      	str	r3, [sp, #40]	@ 0x28
 800c174:	4652      	mov	r2, sl
 800c176:	4623      	mov	r3, r4
 800c178:	2400      	movs	r4, #0
 800c17a:	e726      	b.n	800bfca <_dtoa_r+0x632>
 800c17c:	9a04      	ldr	r2, [sp, #16]
 800c17e:	eba2 060a 	sub.w	r6, r2, sl
 800c182:	2200      	movs	r2, #0
 800c184:	e721      	b.n	800bfca <_dtoa_r+0x632>
 800c186:	9e04      	ldr	r6, [sp, #16]
 800c188:	9d08      	ldr	r5, [sp, #32]
 800c18a:	461c      	mov	r4, r3
 800c18c:	e72a      	b.n	800bfe4 <_dtoa_r+0x64c>
 800c18e:	9a01      	ldr	r2, [sp, #4]
 800c190:	9205      	str	r2, [sp, #20]
 800c192:	e752      	b.n	800c03a <_dtoa_r+0x6a2>
 800c194:	9901      	ldr	r1, [sp, #4]
 800c196:	461a      	mov	r2, r3
 800c198:	e751      	b.n	800c03e <_dtoa_r+0x6a6>
 800c19a:	9b05      	ldr	r3, [sp, #20]
 800c19c:	9301      	str	r3, [sp, #4]
 800c19e:	e752      	b.n	800c046 <_dtoa_r+0x6ae>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	e77b      	b.n	800c09c <_dtoa_r+0x704>
 800c1a4:	9b02      	ldr	r3, [sp, #8]
 800c1a6:	e779      	b.n	800c09c <_dtoa_r+0x704>
 800c1a8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c1aa:	e778      	b.n	800c09e <_dtoa_r+0x706>
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1b0:	e779      	b.n	800c0a6 <_dtoa_r+0x70e>
 800c1b2:	d093      	beq.n	800c0dc <_dtoa_r+0x744>
 800c1b4:	9b04      	ldr	r3, [sp, #16]
 800c1b6:	321c      	adds	r2, #28
 800c1b8:	4413      	add	r3, r2
 800c1ba:	9304      	str	r3, [sp, #16]
 800c1bc:	9b06      	ldr	r3, [sp, #24]
 800c1be:	4416      	add	r6, r2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	e78a      	b.n	800c0da <_dtoa_r+0x742>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	e7f5      	b.n	800c1b4 <_dtoa_r+0x81c>
 800c1c8:	f1ba 0f00 	cmp.w	sl, #0
 800c1cc:	f8cd 8014 	str.w	r8, [sp, #20]
 800c1d0:	46d3      	mov	fp, sl
 800c1d2:	dc21      	bgt.n	800c218 <_dtoa_r+0x880>
 800c1d4:	9b07      	ldr	r3, [sp, #28]
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	dd1e      	ble.n	800c218 <_dtoa_r+0x880>
 800c1da:	f1bb 0f00 	cmp.w	fp, #0
 800c1de:	f47f addc 	bne.w	800bd9a <_dtoa_r+0x402>
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	465b      	mov	r3, fp
 800c1e6:	2205      	movs	r2, #5
 800c1e8:	4648      	mov	r0, r9
 800c1ea:	f000 fa95 	bl	800c718 <__multadd>
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	9801      	ldr	r0, [sp, #4]
 800c1f4:	f000 fca0 	bl	800cb38 <__mcmp>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	f77f adce 	ble.w	800bd9a <_dtoa_r+0x402>
 800c1fe:	463e      	mov	r6, r7
 800c200:	2331      	movs	r3, #49	@ 0x31
 800c202:	f806 3b01 	strb.w	r3, [r6], #1
 800c206:	9b05      	ldr	r3, [sp, #20]
 800c208:	3301      	adds	r3, #1
 800c20a:	9305      	str	r3, [sp, #20]
 800c20c:	e5c9      	b.n	800bda2 <_dtoa_r+0x40a>
 800c20e:	f8cd 8014 	str.w	r8, [sp, #20]
 800c212:	4654      	mov	r4, sl
 800c214:	4625      	mov	r5, r4
 800c216:	e7f2      	b.n	800c1fe <_dtoa_r+0x866>
 800c218:	9b08      	ldr	r3, [sp, #32]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f000 8102 	beq.w	800c424 <_dtoa_r+0xa8c>
 800c220:	2e00      	cmp	r6, #0
 800c222:	dd05      	ble.n	800c230 <_dtoa_r+0x898>
 800c224:	4629      	mov	r1, r5
 800c226:	4632      	mov	r2, r6
 800c228:	4648      	mov	r0, r9
 800c22a:	f000 fc19 	bl	800ca60 <__lshift>
 800c22e:	4605      	mov	r5, r0
 800c230:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c232:	2b00      	cmp	r3, #0
 800c234:	d058      	beq.n	800c2e8 <_dtoa_r+0x950>
 800c236:	6869      	ldr	r1, [r5, #4]
 800c238:	4648      	mov	r0, r9
 800c23a:	f000 fa0b 	bl	800c654 <_Balloc>
 800c23e:	4606      	mov	r6, r0
 800c240:	b928      	cbnz	r0, 800c24e <_dtoa_r+0x8b6>
 800c242:	4b82      	ldr	r3, [pc, #520]	@ (800c44c <_dtoa_r+0xab4>)
 800c244:	4602      	mov	r2, r0
 800c246:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c24a:	f7ff bbbe 	b.w	800b9ca <_dtoa_r+0x32>
 800c24e:	692a      	ldr	r2, [r5, #16]
 800c250:	3202      	adds	r2, #2
 800c252:	0092      	lsls	r2, r2, #2
 800c254:	f105 010c 	add.w	r1, r5, #12
 800c258:	300c      	adds	r0, #12
 800c25a:	f001 f807 	bl	800d26c <memcpy>
 800c25e:	2201      	movs	r2, #1
 800c260:	4631      	mov	r1, r6
 800c262:	4648      	mov	r0, r9
 800c264:	f000 fbfc 	bl	800ca60 <__lshift>
 800c268:	1c7b      	adds	r3, r7, #1
 800c26a:	9304      	str	r3, [sp, #16]
 800c26c:	eb07 030b 	add.w	r3, r7, fp
 800c270:	9309      	str	r3, [sp, #36]	@ 0x24
 800c272:	9b02      	ldr	r3, [sp, #8]
 800c274:	f003 0301 	and.w	r3, r3, #1
 800c278:	46a8      	mov	r8, r5
 800c27a:	9308      	str	r3, [sp, #32]
 800c27c:	4605      	mov	r5, r0
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	9801      	ldr	r0, [sp, #4]
 800c282:	4621      	mov	r1, r4
 800c284:	f103 3bff 	add.w	fp, r3, #4294967295
 800c288:	f7ff fafb 	bl	800b882 <quorem>
 800c28c:	4641      	mov	r1, r8
 800c28e:	9002      	str	r0, [sp, #8]
 800c290:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c294:	9801      	ldr	r0, [sp, #4]
 800c296:	f000 fc4f 	bl	800cb38 <__mcmp>
 800c29a:	462a      	mov	r2, r5
 800c29c:	9006      	str	r0, [sp, #24]
 800c29e:	4621      	mov	r1, r4
 800c2a0:	4648      	mov	r0, r9
 800c2a2:	f000 fc65 	bl	800cb70 <__mdiff>
 800c2a6:	68c2      	ldr	r2, [r0, #12]
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	b9fa      	cbnz	r2, 800c2ec <_dtoa_r+0x954>
 800c2ac:	4601      	mov	r1, r0
 800c2ae:	9801      	ldr	r0, [sp, #4]
 800c2b0:	f000 fc42 	bl	800cb38 <__mcmp>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	4648      	mov	r0, r9
 800c2ba:	920a      	str	r2, [sp, #40]	@ 0x28
 800c2bc:	f000 fa0a 	bl	800c6d4 <_Bfree>
 800c2c0:	9b07      	ldr	r3, [sp, #28]
 800c2c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c2c4:	9e04      	ldr	r6, [sp, #16]
 800c2c6:	ea42 0103 	orr.w	r1, r2, r3
 800c2ca:	9b08      	ldr	r3, [sp, #32]
 800c2cc:	4319      	orrs	r1, r3
 800c2ce:	d10f      	bne.n	800c2f0 <_dtoa_r+0x958>
 800c2d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c2d4:	d028      	beq.n	800c328 <_dtoa_r+0x990>
 800c2d6:	9b06      	ldr	r3, [sp, #24]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	dd02      	ble.n	800c2e2 <_dtoa_r+0x94a>
 800c2dc:	9b02      	ldr	r3, [sp, #8]
 800c2de:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c2e2:	f88b a000 	strb.w	sl, [fp]
 800c2e6:	e55e      	b.n	800bda6 <_dtoa_r+0x40e>
 800c2e8:	4628      	mov	r0, r5
 800c2ea:	e7bd      	b.n	800c268 <_dtoa_r+0x8d0>
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	e7e2      	b.n	800c2b6 <_dtoa_r+0x91e>
 800c2f0:	9b06      	ldr	r3, [sp, #24]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	db04      	blt.n	800c300 <_dtoa_r+0x968>
 800c2f6:	9907      	ldr	r1, [sp, #28]
 800c2f8:	430b      	orrs	r3, r1
 800c2fa:	9908      	ldr	r1, [sp, #32]
 800c2fc:	430b      	orrs	r3, r1
 800c2fe:	d120      	bne.n	800c342 <_dtoa_r+0x9aa>
 800c300:	2a00      	cmp	r2, #0
 800c302:	ddee      	ble.n	800c2e2 <_dtoa_r+0x94a>
 800c304:	9901      	ldr	r1, [sp, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	4648      	mov	r0, r9
 800c30a:	f000 fba9 	bl	800ca60 <__lshift>
 800c30e:	4621      	mov	r1, r4
 800c310:	9001      	str	r0, [sp, #4]
 800c312:	f000 fc11 	bl	800cb38 <__mcmp>
 800c316:	2800      	cmp	r0, #0
 800c318:	dc03      	bgt.n	800c322 <_dtoa_r+0x98a>
 800c31a:	d1e2      	bne.n	800c2e2 <_dtoa_r+0x94a>
 800c31c:	f01a 0f01 	tst.w	sl, #1
 800c320:	d0df      	beq.n	800c2e2 <_dtoa_r+0x94a>
 800c322:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c326:	d1d9      	bne.n	800c2dc <_dtoa_r+0x944>
 800c328:	2339      	movs	r3, #57	@ 0x39
 800c32a:	f88b 3000 	strb.w	r3, [fp]
 800c32e:	4633      	mov	r3, r6
 800c330:	461e      	mov	r6, r3
 800c332:	3b01      	subs	r3, #1
 800c334:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c338:	2a39      	cmp	r2, #57	@ 0x39
 800c33a:	d052      	beq.n	800c3e2 <_dtoa_r+0xa4a>
 800c33c:	3201      	adds	r2, #1
 800c33e:	701a      	strb	r2, [r3, #0]
 800c340:	e531      	b.n	800bda6 <_dtoa_r+0x40e>
 800c342:	2a00      	cmp	r2, #0
 800c344:	dd07      	ble.n	800c356 <_dtoa_r+0x9be>
 800c346:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c34a:	d0ed      	beq.n	800c328 <_dtoa_r+0x990>
 800c34c:	f10a 0301 	add.w	r3, sl, #1
 800c350:	f88b 3000 	strb.w	r3, [fp]
 800c354:	e527      	b.n	800bda6 <_dtoa_r+0x40e>
 800c356:	9b04      	ldr	r3, [sp, #16]
 800c358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c35a:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c35e:	4293      	cmp	r3, r2
 800c360:	d029      	beq.n	800c3b6 <_dtoa_r+0xa1e>
 800c362:	9901      	ldr	r1, [sp, #4]
 800c364:	2300      	movs	r3, #0
 800c366:	220a      	movs	r2, #10
 800c368:	4648      	mov	r0, r9
 800c36a:	f000 f9d5 	bl	800c718 <__multadd>
 800c36e:	45a8      	cmp	r8, r5
 800c370:	9001      	str	r0, [sp, #4]
 800c372:	f04f 0300 	mov.w	r3, #0
 800c376:	f04f 020a 	mov.w	r2, #10
 800c37a:	4641      	mov	r1, r8
 800c37c:	4648      	mov	r0, r9
 800c37e:	d107      	bne.n	800c390 <_dtoa_r+0x9f8>
 800c380:	f000 f9ca 	bl	800c718 <__multadd>
 800c384:	4680      	mov	r8, r0
 800c386:	4605      	mov	r5, r0
 800c388:	9b04      	ldr	r3, [sp, #16]
 800c38a:	3301      	adds	r3, #1
 800c38c:	9304      	str	r3, [sp, #16]
 800c38e:	e776      	b.n	800c27e <_dtoa_r+0x8e6>
 800c390:	f000 f9c2 	bl	800c718 <__multadd>
 800c394:	4629      	mov	r1, r5
 800c396:	4680      	mov	r8, r0
 800c398:	2300      	movs	r3, #0
 800c39a:	220a      	movs	r2, #10
 800c39c:	4648      	mov	r0, r9
 800c39e:	f000 f9bb 	bl	800c718 <__multadd>
 800c3a2:	4605      	mov	r5, r0
 800c3a4:	e7f0      	b.n	800c388 <_dtoa_r+0x9f0>
 800c3a6:	f1bb 0f00 	cmp.w	fp, #0
 800c3aa:	bfcc      	ite	gt
 800c3ac:	465e      	movgt	r6, fp
 800c3ae:	2601      	movle	r6, #1
 800c3b0:	443e      	add	r6, r7
 800c3b2:	f04f 0800 	mov.w	r8, #0
 800c3b6:	9901      	ldr	r1, [sp, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	4648      	mov	r0, r9
 800c3bc:	f000 fb50 	bl	800ca60 <__lshift>
 800c3c0:	4621      	mov	r1, r4
 800c3c2:	9001      	str	r0, [sp, #4]
 800c3c4:	f000 fbb8 	bl	800cb38 <__mcmp>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	dcb0      	bgt.n	800c32e <_dtoa_r+0x996>
 800c3cc:	d102      	bne.n	800c3d4 <_dtoa_r+0xa3c>
 800c3ce:	f01a 0f01 	tst.w	sl, #1
 800c3d2:	d1ac      	bne.n	800c32e <_dtoa_r+0x996>
 800c3d4:	4633      	mov	r3, r6
 800c3d6:	461e      	mov	r6, r3
 800c3d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3dc:	2a30      	cmp	r2, #48	@ 0x30
 800c3de:	d0fa      	beq.n	800c3d6 <_dtoa_r+0xa3e>
 800c3e0:	e4e1      	b.n	800bda6 <_dtoa_r+0x40e>
 800c3e2:	429f      	cmp	r7, r3
 800c3e4:	d1a4      	bne.n	800c330 <_dtoa_r+0x998>
 800c3e6:	9b05      	ldr	r3, [sp, #20]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	9305      	str	r3, [sp, #20]
 800c3ec:	2331      	movs	r3, #49	@ 0x31
 800c3ee:	703b      	strb	r3, [r7, #0]
 800c3f0:	e4d9      	b.n	800bda6 <_dtoa_r+0x40e>
 800c3f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c3f4:	4f16      	ldr	r7, [pc, #88]	@ (800c450 <_dtoa_r+0xab8>)
 800c3f6:	b11b      	cbz	r3, 800c400 <_dtoa_r+0xa68>
 800c3f8:	f107 0308 	add.w	r3, r7, #8
 800c3fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c3fe:	6013      	str	r3, [r2, #0]
 800c400:	4638      	mov	r0, r7
 800c402:	b011      	add	sp, #68	@ 0x44
 800c404:	ecbd 8b02 	vpop	{d8}
 800c408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c40c:	9b07      	ldr	r3, [sp, #28]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	f77f ae2c 	ble.w	800c06c <_dtoa_r+0x6d4>
 800c414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c416:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c418:	2001      	movs	r0, #1
 800c41a:	e64c      	b.n	800c0b6 <_dtoa_r+0x71e>
 800c41c:	f1bb 0f00 	cmp.w	fp, #0
 800c420:	f77f aed8 	ble.w	800c1d4 <_dtoa_r+0x83c>
 800c424:	463e      	mov	r6, r7
 800c426:	9801      	ldr	r0, [sp, #4]
 800c428:	4621      	mov	r1, r4
 800c42a:	f7ff fa2a 	bl	800b882 <quorem>
 800c42e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c432:	f806 ab01 	strb.w	sl, [r6], #1
 800c436:	1bf2      	subs	r2, r6, r7
 800c438:	4593      	cmp	fp, r2
 800c43a:	ddb4      	ble.n	800c3a6 <_dtoa_r+0xa0e>
 800c43c:	9901      	ldr	r1, [sp, #4]
 800c43e:	2300      	movs	r3, #0
 800c440:	220a      	movs	r2, #10
 800c442:	4648      	mov	r0, r9
 800c444:	f000 f968 	bl	800c718 <__multadd>
 800c448:	9001      	str	r0, [sp, #4]
 800c44a:	e7ec      	b.n	800c426 <_dtoa_r+0xa8e>
 800c44c:	0800e710 	.word	0x0800e710
 800c450:	0800e694 	.word	0x0800e694

0800c454 <_free_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4605      	mov	r5, r0
 800c458:	2900      	cmp	r1, #0
 800c45a:	d041      	beq.n	800c4e0 <_free_r+0x8c>
 800c45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c460:	1f0c      	subs	r4, r1, #4
 800c462:	2b00      	cmp	r3, #0
 800c464:	bfb8      	it	lt
 800c466:	18e4      	addlt	r4, r4, r3
 800c468:	f000 f8e8 	bl	800c63c <__malloc_lock>
 800c46c:	4a1d      	ldr	r2, [pc, #116]	@ (800c4e4 <_free_r+0x90>)
 800c46e:	6813      	ldr	r3, [r2, #0]
 800c470:	b933      	cbnz	r3, 800c480 <_free_r+0x2c>
 800c472:	6063      	str	r3, [r4, #4]
 800c474:	6014      	str	r4, [r2, #0]
 800c476:	4628      	mov	r0, r5
 800c478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c47c:	f000 b8e4 	b.w	800c648 <__malloc_unlock>
 800c480:	42a3      	cmp	r3, r4
 800c482:	d908      	bls.n	800c496 <_free_r+0x42>
 800c484:	6820      	ldr	r0, [r4, #0]
 800c486:	1821      	adds	r1, r4, r0
 800c488:	428b      	cmp	r3, r1
 800c48a:	bf01      	itttt	eq
 800c48c:	6819      	ldreq	r1, [r3, #0]
 800c48e:	685b      	ldreq	r3, [r3, #4]
 800c490:	1809      	addeq	r1, r1, r0
 800c492:	6021      	streq	r1, [r4, #0]
 800c494:	e7ed      	b.n	800c472 <_free_r+0x1e>
 800c496:	461a      	mov	r2, r3
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	b10b      	cbz	r3, 800c4a0 <_free_r+0x4c>
 800c49c:	42a3      	cmp	r3, r4
 800c49e:	d9fa      	bls.n	800c496 <_free_r+0x42>
 800c4a0:	6811      	ldr	r1, [r2, #0]
 800c4a2:	1850      	adds	r0, r2, r1
 800c4a4:	42a0      	cmp	r0, r4
 800c4a6:	d10b      	bne.n	800c4c0 <_free_r+0x6c>
 800c4a8:	6820      	ldr	r0, [r4, #0]
 800c4aa:	4401      	add	r1, r0
 800c4ac:	1850      	adds	r0, r2, r1
 800c4ae:	4283      	cmp	r3, r0
 800c4b0:	6011      	str	r1, [r2, #0]
 800c4b2:	d1e0      	bne.n	800c476 <_free_r+0x22>
 800c4b4:	6818      	ldr	r0, [r3, #0]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	6053      	str	r3, [r2, #4]
 800c4ba:	4408      	add	r0, r1
 800c4bc:	6010      	str	r0, [r2, #0]
 800c4be:	e7da      	b.n	800c476 <_free_r+0x22>
 800c4c0:	d902      	bls.n	800c4c8 <_free_r+0x74>
 800c4c2:	230c      	movs	r3, #12
 800c4c4:	602b      	str	r3, [r5, #0]
 800c4c6:	e7d6      	b.n	800c476 <_free_r+0x22>
 800c4c8:	6820      	ldr	r0, [r4, #0]
 800c4ca:	1821      	adds	r1, r4, r0
 800c4cc:	428b      	cmp	r3, r1
 800c4ce:	bf04      	itt	eq
 800c4d0:	6819      	ldreq	r1, [r3, #0]
 800c4d2:	685b      	ldreq	r3, [r3, #4]
 800c4d4:	6063      	str	r3, [r4, #4]
 800c4d6:	bf04      	itt	eq
 800c4d8:	1809      	addeq	r1, r1, r0
 800c4da:	6021      	streq	r1, [r4, #0]
 800c4dc:	6054      	str	r4, [r2, #4]
 800c4de:	e7ca      	b.n	800c476 <_free_r+0x22>
 800c4e0:	bd38      	pop	{r3, r4, r5, pc}
 800c4e2:	bf00      	nop
 800c4e4:	24000c6c 	.word	0x24000c6c

0800c4e8 <malloc>:
 800c4e8:	4b02      	ldr	r3, [pc, #8]	@ (800c4f4 <malloc+0xc>)
 800c4ea:	4601      	mov	r1, r0
 800c4ec:	6818      	ldr	r0, [r3, #0]
 800c4ee:	f000 b825 	b.w	800c53c <_malloc_r>
 800c4f2:	bf00      	nop
 800c4f4:	24000024 	.word	0x24000024

0800c4f8 <sbrk_aligned>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	4e0f      	ldr	r6, [pc, #60]	@ (800c538 <sbrk_aligned+0x40>)
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	6831      	ldr	r1, [r6, #0]
 800c500:	4605      	mov	r5, r0
 800c502:	b911      	cbnz	r1, 800c50a <sbrk_aligned+0x12>
 800c504:	f000 fea2 	bl	800d24c <_sbrk_r>
 800c508:	6030      	str	r0, [r6, #0]
 800c50a:	4621      	mov	r1, r4
 800c50c:	4628      	mov	r0, r5
 800c50e:	f000 fe9d 	bl	800d24c <_sbrk_r>
 800c512:	1c43      	adds	r3, r0, #1
 800c514:	d103      	bne.n	800c51e <sbrk_aligned+0x26>
 800c516:	f04f 34ff 	mov.w	r4, #4294967295
 800c51a:	4620      	mov	r0, r4
 800c51c:	bd70      	pop	{r4, r5, r6, pc}
 800c51e:	1cc4      	adds	r4, r0, #3
 800c520:	f024 0403 	bic.w	r4, r4, #3
 800c524:	42a0      	cmp	r0, r4
 800c526:	d0f8      	beq.n	800c51a <sbrk_aligned+0x22>
 800c528:	1a21      	subs	r1, r4, r0
 800c52a:	4628      	mov	r0, r5
 800c52c:	f000 fe8e 	bl	800d24c <_sbrk_r>
 800c530:	3001      	adds	r0, #1
 800c532:	d1f2      	bne.n	800c51a <sbrk_aligned+0x22>
 800c534:	e7ef      	b.n	800c516 <sbrk_aligned+0x1e>
 800c536:	bf00      	nop
 800c538:	24000c68 	.word	0x24000c68

0800c53c <_malloc_r>:
 800c53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c540:	1ccd      	adds	r5, r1, #3
 800c542:	f025 0503 	bic.w	r5, r5, #3
 800c546:	3508      	adds	r5, #8
 800c548:	2d0c      	cmp	r5, #12
 800c54a:	bf38      	it	cc
 800c54c:	250c      	movcc	r5, #12
 800c54e:	2d00      	cmp	r5, #0
 800c550:	4606      	mov	r6, r0
 800c552:	db01      	blt.n	800c558 <_malloc_r+0x1c>
 800c554:	42a9      	cmp	r1, r5
 800c556:	d904      	bls.n	800c562 <_malloc_r+0x26>
 800c558:	230c      	movs	r3, #12
 800c55a:	6033      	str	r3, [r6, #0]
 800c55c:	2000      	movs	r0, #0
 800c55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c562:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c638 <_malloc_r+0xfc>
 800c566:	f000 f869 	bl	800c63c <__malloc_lock>
 800c56a:	f8d8 3000 	ldr.w	r3, [r8]
 800c56e:	461c      	mov	r4, r3
 800c570:	bb44      	cbnz	r4, 800c5c4 <_malloc_r+0x88>
 800c572:	4629      	mov	r1, r5
 800c574:	4630      	mov	r0, r6
 800c576:	f7ff ffbf 	bl	800c4f8 <sbrk_aligned>
 800c57a:	1c43      	adds	r3, r0, #1
 800c57c:	4604      	mov	r4, r0
 800c57e:	d158      	bne.n	800c632 <_malloc_r+0xf6>
 800c580:	f8d8 4000 	ldr.w	r4, [r8]
 800c584:	4627      	mov	r7, r4
 800c586:	2f00      	cmp	r7, #0
 800c588:	d143      	bne.n	800c612 <_malloc_r+0xd6>
 800c58a:	2c00      	cmp	r4, #0
 800c58c:	d04b      	beq.n	800c626 <_malloc_r+0xea>
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	4639      	mov	r1, r7
 800c592:	4630      	mov	r0, r6
 800c594:	eb04 0903 	add.w	r9, r4, r3
 800c598:	f000 fe58 	bl	800d24c <_sbrk_r>
 800c59c:	4581      	cmp	r9, r0
 800c59e:	d142      	bne.n	800c626 <_malloc_r+0xea>
 800c5a0:	6821      	ldr	r1, [r4, #0]
 800c5a2:	1a6d      	subs	r5, r5, r1
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f7ff ffa6 	bl	800c4f8 <sbrk_aligned>
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	d03a      	beq.n	800c626 <_malloc_r+0xea>
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	442b      	add	r3, r5
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	bb62      	cbnz	r2, 800c618 <_malloc_r+0xdc>
 800c5be:	f8c8 7000 	str.w	r7, [r8]
 800c5c2:	e00f      	b.n	800c5e4 <_malloc_r+0xa8>
 800c5c4:	6822      	ldr	r2, [r4, #0]
 800c5c6:	1b52      	subs	r2, r2, r5
 800c5c8:	d420      	bmi.n	800c60c <_malloc_r+0xd0>
 800c5ca:	2a0b      	cmp	r2, #11
 800c5cc:	d917      	bls.n	800c5fe <_malloc_r+0xc2>
 800c5ce:	1961      	adds	r1, r4, r5
 800c5d0:	42a3      	cmp	r3, r4
 800c5d2:	6025      	str	r5, [r4, #0]
 800c5d4:	bf18      	it	ne
 800c5d6:	6059      	strne	r1, [r3, #4]
 800c5d8:	6863      	ldr	r3, [r4, #4]
 800c5da:	bf08      	it	eq
 800c5dc:	f8c8 1000 	streq.w	r1, [r8]
 800c5e0:	5162      	str	r2, [r4, r5]
 800c5e2:	604b      	str	r3, [r1, #4]
 800c5e4:	4630      	mov	r0, r6
 800c5e6:	f000 f82f 	bl	800c648 <__malloc_unlock>
 800c5ea:	f104 000b 	add.w	r0, r4, #11
 800c5ee:	1d23      	adds	r3, r4, #4
 800c5f0:	f020 0007 	bic.w	r0, r0, #7
 800c5f4:	1ac2      	subs	r2, r0, r3
 800c5f6:	bf1c      	itt	ne
 800c5f8:	1a1b      	subne	r3, r3, r0
 800c5fa:	50a3      	strne	r3, [r4, r2]
 800c5fc:	e7af      	b.n	800c55e <_malloc_r+0x22>
 800c5fe:	6862      	ldr	r2, [r4, #4]
 800c600:	42a3      	cmp	r3, r4
 800c602:	bf0c      	ite	eq
 800c604:	f8c8 2000 	streq.w	r2, [r8]
 800c608:	605a      	strne	r2, [r3, #4]
 800c60a:	e7eb      	b.n	800c5e4 <_malloc_r+0xa8>
 800c60c:	4623      	mov	r3, r4
 800c60e:	6864      	ldr	r4, [r4, #4]
 800c610:	e7ae      	b.n	800c570 <_malloc_r+0x34>
 800c612:	463c      	mov	r4, r7
 800c614:	687f      	ldr	r7, [r7, #4]
 800c616:	e7b6      	b.n	800c586 <_malloc_r+0x4a>
 800c618:	461a      	mov	r2, r3
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	42a3      	cmp	r3, r4
 800c61e:	d1fb      	bne.n	800c618 <_malloc_r+0xdc>
 800c620:	2300      	movs	r3, #0
 800c622:	6053      	str	r3, [r2, #4]
 800c624:	e7de      	b.n	800c5e4 <_malloc_r+0xa8>
 800c626:	230c      	movs	r3, #12
 800c628:	6033      	str	r3, [r6, #0]
 800c62a:	4630      	mov	r0, r6
 800c62c:	f000 f80c 	bl	800c648 <__malloc_unlock>
 800c630:	e794      	b.n	800c55c <_malloc_r+0x20>
 800c632:	6005      	str	r5, [r0, #0]
 800c634:	e7d6      	b.n	800c5e4 <_malloc_r+0xa8>
 800c636:	bf00      	nop
 800c638:	24000c6c 	.word	0x24000c6c

0800c63c <__malloc_lock>:
 800c63c:	4801      	ldr	r0, [pc, #4]	@ (800c644 <__malloc_lock+0x8>)
 800c63e:	f7ff b91e 	b.w	800b87e <__retarget_lock_acquire_recursive>
 800c642:	bf00      	nop
 800c644:	24000c64 	.word	0x24000c64

0800c648 <__malloc_unlock>:
 800c648:	4801      	ldr	r0, [pc, #4]	@ (800c650 <__malloc_unlock+0x8>)
 800c64a:	f7ff b919 	b.w	800b880 <__retarget_lock_release_recursive>
 800c64e:	bf00      	nop
 800c650:	24000c64 	.word	0x24000c64

0800c654 <_Balloc>:
 800c654:	b570      	push	{r4, r5, r6, lr}
 800c656:	69c6      	ldr	r6, [r0, #28]
 800c658:	4604      	mov	r4, r0
 800c65a:	460d      	mov	r5, r1
 800c65c:	b976      	cbnz	r6, 800c67c <_Balloc+0x28>
 800c65e:	2010      	movs	r0, #16
 800c660:	f7ff ff42 	bl	800c4e8 <malloc>
 800c664:	4602      	mov	r2, r0
 800c666:	61e0      	str	r0, [r4, #28]
 800c668:	b920      	cbnz	r0, 800c674 <_Balloc+0x20>
 800c66a:	4b18      	ldr	r3, [pc, #96]	@ (800c6cc <_Balloc+0x78>)
 800c66c:	4818      	ldr	r0, [pc, #96]	@ (800c6d0 <_Balloc+0x7c>)
 800c66e:	216b      	movs	r1, #107	@ 0x6b
 800c670:	f000 fe0a 	bl	800d288 <__assert_func>
 800c674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c678:	6006      	str	r6, [r0, #0]
 800c67a:	60c6      	str	r6, [r0, #12]
 800c67c:	69e6      	ldr	r6, [r4, #28]
 800c67e:	68f3      	ldr	r3, [r6, #12]
 800c680:	b183      	cbz	r3, 800c6a4 <_Balloc+0x50>
 800c682:	69e3      	ldr	r3, [r4, #28]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c68a:	b9b8      	cbnz	r0, 800c6bc <_Balloc+0x68>
 800c68c:	2101      	movs	r1, #1
 800c68e:	fa01 f605 	lsl.w	r6, r1, r5
 800c692:	1d72      	adds	r2, r6, #5
 800c694:	0092      	lsls	r2, r2, #2
 800c696:	4620      	mov	r0, r4
 800c698:	f000 fe14 	bl	800d2c4 <_calloc_r>
 800c69c:	b160      	cbz	r0, 800c6b8 <_Balloc+0x64>
 800c69e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6a2:	e00e      	b.n	800c6c2 <_Balloc+0x6e>
 800c6a4:	2221      	movs	r2, #33	@ 0x21
 800c6a6:	2104      	movs	r1, #4
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f000 fe0b 	bl	800d2c4 <_calloc_r>
 800c6ae:	69e3      	ldr	r3, [r4, #28]
 800c6b0:	60f0      	str	r0, [r6, #12]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1e4      	bne.n	800c682 <_Balloc+0x2e>
 800c6b8:	2000      	movs	r0, #0
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}
 800c6bc:	6802      	ldr	r2, [r0, #0]
 800c6be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6c8:	e7f7      	b.n	800c6ba <_Balloc+0x66>
 800c6ca:	bf00      	nop
 800c6cc:	0800e6a1 	.word	0x0800e6a1
 800c6d0:	0800e721 	.word	0x0800e721

0800c6d4 <_Bfree>:
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	69c6      	ldr	r6, [r0, #28]
 800c6d8:	4605      	mov	r5, r0
 800c6da:	460c      	mov	r4, r1
 800c6dc:	b976      	cbnz	r6, 800c6fc <_Bfree+0x28>
 800c6de:	2010      	movs	r0, #16
 800c6e0:	f7ff ff02 	bl	800c4e8 <malloc>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	61e8      	str	r0, [r5, #28]
 800c6e8:	b920      	cbnz	r0, 800c6f4 <_Bfree+0x20>
 800c6ea:	4b09      	ldr	r3, [pc, #36]	@ (800c710 <_Bfree+0x3c>)
 800c6ec:	4809      	ldr	r0, [pc, #36]	@ (800c714 <_Bfree+0x40>)
 800c6ee:	218f      	movs	r1, #143	@ 0x8f
 800c6f0:	f000 fdca 	bl	800d288 <__assert_func>
 800c6f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6f8:	6006      	str	r6, [r0, #0]
 800c6fa:	60c6      	str	r6, [r0, #12]
 800c6fc:	b13c      	cbz	r4, 800c70e <_Bfree+0x3a>
 800c6fe:	69eb      	ldr	r3, [r5, #28]
 800c700:	6862      	ldr	r2, [r4, #4]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c708:	6021      	str	r1, [r4, #0]
 800c70a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c70e:	bd70      	pop	{r4, r5, r6, pc}
 800c710:	0800e6a1 	.word	0x0800e6a1
 800c714:	0800e721 	.word	0x0800e721

0800c718 <__multadd>:
 800c718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c71c:	690d      	ldr	r5, [r1, #16]
 800c71e:	4607      	mov	r7, r0
 800c720:	460c      	mov	r4, r1
 800c722:	461e      	mov	r6, r3
 800c724:	f101 0c14 	add.w	ip, r1, #20
 800c728:	2000      	movs	r0, #0
 800c72a:	f8dc 3000 	ldr.w	r3, [ip]
 800c72e:	b299      	uxth	r1, r3
 800c730:	fb02 6101 	mla	r1, r2, r1, r6
 800c734:	0c1e      	lsrs	r6, r3, #16
 800c736:	0c0b      	lsrs	r3, r1, #16
 800c738:	fb02 3306 	mla	r3, r2, r6, r3
 800c73c:	b289      	uxth	r1, r1
 800c73e:	3001      	adds	r0, #1
 800c740:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c744:	4285      	cmp	r5, r0
 800c746:	f84c 1b04 	str.w	r1, [ip], #4
 800c74a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c74e:	dcec      	bgt.n	800c72a <__multadd+0x12>
 800c750:	b30e      	cbz	r6, 800c796 <__multadd+0x7e>
 800c752:	68a3      	ldr	r3, [r4, #8]
 800c754:	42ab      	cmp	r3, r5
 800c756:	dc19      	bgt.n	800c78c <__multadd+0x74>
 800c758:	6861      	ldr	r1, [r4, #4]
 800c75a:	4638      	mov	r0, r7
 800c75c:	3101      	adds	r1, #1
 800c75e:	f7ff ff79 	bl	800c654 <_Balloc>
 800c762:	4680      	mov	r8, r0
 800c764:	b928      	cbnz	r0, 800c772 <__multadd+0x5a>
 800c766:	4602      	mov	r2, r0
 800c768:	4b0c      	ldr	r3, [pc, #48]	@ (800c79c <__multadd+0x84>)
 800c76a:	480d      	ldr	r0, [pc, #52]	@ (800c7a0 <__multadd+0x88>)
 800c76c:	21ba      	movs	r1, #186	@ 0xba
 800c76e:	f000 fd8b 	bl	800d288 <__assert_func>
 800c772:	6922      	ldr	r2, [r4, #16]
 800c774:	3202      	adds	r2, #2
 800c776:	f104 010c 	add.w	r1, r4, #12
 800c77a:	0092      	lsls	r2, r2, #2
 800c77c:	300c      	adds	r0, #12
 800c77e:	f000 fd75 	bl	800d26c <memcpy>
 800c782:	4621      	mov	r1, r4
 800c784:	4638      	mov	r0, r7
 800c786:	f7ff ffa5 	bl	800c6d4 <_Bfree>
 800c78a:	4644      	mov	r4, r8
 800c78c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c790:	3501      	adds	r5, #1
 800c792:	615e      	str	r6, [r3, #20]
 800c794:	6125      	str	r5, [r4, #16]
 800c796:	4620      	mov	r0, r4
 800c798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c79c:	0800e710 	.word	0x0800e710
 800c7a0:	0800e721 	.word	0x0800e721

0800c7a4 <__hi0bits>:
 800c7a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	bf36      	itet	cc
 800c7ac:	0403      	lslcc	r3, r0, #16
 800c7ae:	2000      	movcs	r0, #0
 800c7b0:	2010      	movcc	r0, #16
 800c7b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c7b6:	bf3c      	itt	cc
 800c7b8:	021b      	lslcc	r3, r3, #8
 800c7ba:	3008      	addcc	r0, #8
 800c7bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7c0:	bf3c      	itt	cc
 800c7c2:	011b      	lslcc	r3, r3, #4
 800c7c4:	3004      	addcc	r0, #4
 800c7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7ca:	bf3c      	itt	cc
 800c7cc:	009b      	lslcc	r3, r3, #2
 800c7ce:	3002      	addcc	r0, #2
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	db05      	blt.n	800c7e0 <__hi0bits+0x3c>
 800c7d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c7d8:	f100 0001 	add.w	r0, r0, #1
 800c7dc:	bf08      	it	eq
 800c7de:	2020      	moveq	r0, #32
 800c7e0:	4770      	bx	lr

0800c7e2 <__lo0bits>:
 800c7e2:	6803      	ldr	r3, [r0, #0]
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	f013 0007 	ands.w	r0, r3, #7
 800c7ea:	d00b      	beq.n	800c804 <__lo0bits+0x22>
 800c7ec:	07d9      	lsls	r1, r3, #31
 800c7ee:	d421      	bmi.n	800c834 <__lo0bits+0x52>
 800c7f0:	0798      	lsls	r0, r3, #30
 800c7f2:	bf49      	itett	mi
 800c7f4:	085b      	lsrmi	r3, r3, #1
 800c7f6:	089b      	lsrpl	r3, r3, #2
 800c7f8:	2001      	movmi	r0, #1
 800c7fa:	6013      	strmi	r3, [r2, #0]
 800c7fc:	bf5c      	itt	pl
 800c7fe:	6013      	strpl	r3, [r2, #0]
 800c800:	2002      	movpl	r0, #2
 800c802:	4770      	bx	lr
 800c804:	b299      	uxth	r1, r3
 800c806:	b909      	cbnz	r1, 800c80c <__lo0bits+0x2a>
 800c808:	0c1b      	lsrs	r3, r3, #16
 800c80a:	2010      	movs	r0, #16
 800c80c:	b2d9      	uxtb	r1, r3
 800c80e:	b909      	cbnz	r1, 800c814 <__lo0bits+0x32>
 800c810:	3008      	adds	r0, #8
 800c812:	0a1b      	lsrs	r3, r3, #8
 800c814:	0719      	lsls	r1, r3, #28
 800c816:	bf04      	itt	eq
 800c818:	091b      	lsreq	r3, r3, #4
 800c81a:	3004      	addeq	r0, #4
 800c81c:	0799      	lsls	r1, r3, #30
 800c81e:	bf04      	itt	eq
 800c820:	089b      	lsreq	r3, r3, #2
 800c822:	3002      	addeq	r0, #2
 800c824:	07d9      	lsls	r1, r3, #31
 800c826:	d403      	bmi.n	800c830 <__lo0bits+0x4e>
 800c828:	085b      	lsrs	r3, r3, #1
 800c82a:	f100 0001 	add.w	r0, r0, #1
 800c82e:	d003      	beq.n	800c838 <__lo0bits+0x56>
 800c830:	6013      	str	r3, [r2, #0]
 800c832:	4770      	bx	lr
 800c834:	2000      	movs	r0, #0
 800c836:	4770      	bx	lr
 800c838:	2020      	movs	r0, #32
 800c83a:	4770      	bx	lr

0800c83c <__i2b>:
 800c83c:	b510      	push	{r4, lr}
 800c83e:	460c      	mov	r4, r1
 800c840:	2101      	movs	r1, #1
 800c842:	f7ff ff07 	bl	800c654 <_Balloc>
 800c846:	4602      	mov	r2, r0
 800c848:	b928      	cbnz	r0, 800c856 <__i2b+0x1a>
 800c84a:	4b05      	ldr	r3, [pc, #20]	@ (800c860 <__i2b+0x24>)
 800c84c:	4805      	ldr	r0, [pc, #20]	@ (800c864 <__i2b+0x28>)
 800c84e:	f240 1145 	movw	r1, #325	@ 0x145
 800c852:	f000 fd19 	bl	800d288 <__assert_func>
 800c856:	2301      	movs	r3, #1
 800c858:	6144      	str	r4, [r0, #20]
 800c85a:	6103      	str	r3, [r0, #16]
 800c85c:	bd10      	pop	{r4, pc}
 800c85e:	bf00      	nop
 800c860:	0800e710 	.word	0x0800e710
 800c864:	0800e721 	.word	0x0800e721

0800c868 <__multiply>:
 800c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	4617      	mov	r7, r2
 800c86e:	690a      	ldr	r2, [r1, #16]
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	429a      	cmp	r2, r3
 800c874:	bfa8      	it	ge
 800c876:	463b      	movge	r3, r7
 800c878:	4689      	mov	r9, r1
 800c87a:	bfa4      	itt	ge
 800c87c:	460f      	movge	r7, r1
 800c87e:	4699      	movge	r9, r3
 800c880:	693d      	ldr	r5, [r7, #16]
 800c882:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	6879      	ldr	r1, [r7, #4]
 800c88a:	eb05 060a 	add.w	r6, r5, sl
 800c88e:	42b3      	cmp	r3, r6
 800c890:	b085      	sub	sp, #20
 800c892:	bfb8      	it	lt
 800c894:	3101      	addlt	r1, #1
 800c896:	f7ff fedd 	bl	800c654 <_Balloc>
 800c89a:	b930      	cbnz	r0, 800c8aa <__multiply+0x42>
 800c89c:	4602      	mov	r2, r0
 800c89e:	4b41      	ldr	r3, [pc, #260]	@ (800c9a4 <__multiply+0x13c>)
 800c8a0:	4841      	ldr	r0, [pc, #260]	@ (800c9a8 <__multiply+0x140>)
 800c8a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c8a6:	f000 fcef 	bl	800d288 <__assert_func>
 800c8aa:	f100 0414 	add.w	r4, r0, #20
 800c8ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c8b2:	4623      	mov	r3, r4
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	4573      	cmp	r3, lr
 800c8b8:	d320      	bcc.n	800c8fc <__multiply+0x94>
 800c8ba:	f107 0814 	add.w	r8, r7, #20
 800c8be:	f109 0114 	add.w	r1, r9, #20
 800c8c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c8c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c8ca:	9302      	str	r3, [sp, #8]
 800c8cc:	1beb      	subs	r3, r5, r7
 800c8ce:	3b15      	subs	r3, #21
 800c8d0:	f023 0303 	bic.w	r3, r3, #3
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	3715      	adds	r7, #21
 800c8d8:	42bd      	cmp	r5, r7
 800c8da:	bf38      	it	cc
 800c8dc:	2304      	movcc	r3, #4
 800c8de:	9301      	str	r3, [sp, #4]
 800c8e0:	9b02      	ldr	r3, [sp, #8]
 800c8e2:	9103      	str	r1, [sp, #12]
 800c8e4:	428b      	cmp	r3, r1
 800c8e6:	d80c      	bhi.n	800c902 <__multiply+0x9a>
 800c8e8:	2e00      	cmp	r6, #0
 800c8ea:	dd03      	ble.n	800c8f4 <__multiply+0x8c>
 800c8ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d055      	beq.n	800c9a0 <__multiply+0x138>
 800c8f4:	6106      	str	r6, [r0, #16]
 800c8f6:	b005      	add	sp, #20
 800c8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fc:	f843 2b04 	str.w	r2, [r3], #4
 800c900:	e7d9      	b.n	800c8b6 <__multiply+0x4e>
 800c902:	f8b1 a000 	ldrh.w	sl, [r1]
 800c906:	f1ba 0f00 	cmp.w	sl, #0
 800c90a:	d01f      	beq.n	800c94c <__multiply+0xe4>
 800c90c:	46c4      	mov	ip, r8
 800c90e:	46a1      	mov	r9, r4
 800c910:	2700      	movs	r7, #0
 800c912:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c916:	f8d9 3000 	ldr.w	r3, [r9]
 800c91a:	fa1f fb82 	uxth.w	fp, r2
 800c91e:	b29b      	uxth	r3, r3
 800c920:	fb0a 330b 	mla	r3, sl, fp, r3
 800c924:	443b      	add	r3, r7
 800c926:	f8d9 7000 	ldr.w	r7, [r9]
 800c92a:	0c12      	lsrs	r2, r2, #16
 800c92c:	0c3f      	lsrs	r7, r7, #16
 800c92e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c932:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c936:	b29b      	uxth	r3, r3
 800c938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c93c:	4565      	cmp	r5, ip
 800c93e:	f849 3b04 	str.w	r3, [r9], #4
 800c942:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c946:	d8e4      	bhi.n	800c912 <__multiply+0xaa>
 800c948:	9b01      	ldr	r3, [sp, #4]
 800c94a:	50e7      	str	r7, [r4, r3]
 800c94c:	9b03      	ldr	r3, [sp, #12]
 800c94e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c952:	3104      	adds	r1, #4
 800c954:	f1b9 0f00 	cmp.w	r9, #0
 800c958:	d020      	beq.n	800c99c <__multiply+0x134>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	4647      	mov	r7, r8
 800c95e:	46a4      	mov	ip, r4
 800c960:	f04f 0a00 	mov.w	sl, #0
 800c964:	f8b7 b000 	ldrh.w	fp, [r7]
 800c968:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c96c:	fb09 220b 	mla	r2, r9, fp, r2
 800c970:	4452      	add	r2, sl
 800c972:	b29b      	uxth	r3, r3
 800c974:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c978:	f84c 3b04 	str.w	r3, [ip], #4
 800c97c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c980:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c984:	f8bc 3000 	ldrh.w	r3, [ip]
 800c988:	fb09 330a 	mla	r3, r9, sl, r3
 800c98c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c990:	42bd      	cmp	r5, r7
 800c992:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c996:	d8e5      	bhi.n	800c964 <__multiply+0xfc>
 800c998:	9a01      	ldr	r2, [sp, #4]
 800c99a:	50a3      	str	r3, [r4, r2]
 800c99c:	3404      	adds	r4, #4
 800c99e:	e79f      	b.n	800c8e0 <__multiply+0x78>
 800c9a0:	3e01      	subs	r6, #1
 800c9a2:	e7a1      	b.n	800c8e8 <__multiply+0x80>
 800c9a4:	0800e710 	.word	0x0800e710
 800c9a8:	0800e721 	.word	0x0800e721

0800c9ac <__pow5mult>:
 800c9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9b0:	4615      	mov	r5, r2
 800c9b2:	f012 0203 	ands.w	r2, r2, #3
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	460e      	mov	r6, r1
 800c9ba:	d007      	beq.n	800c9cc <__pow5mult+0x20>
 800c9bc:	4c25      	ldr	r4, [pc, #148]	@ (800ca54 <__pow5mult+0xa8>)
 800c9be:	3a01      	subs	r2, #1
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9c6:	f7ff fea7 	bl	800c718 <__multadd>
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	10ad      	asrs	r5, r5, #2
 800c9ce:	d03d      	beq.n	800ca4c <__pow5mult+0xa0>
 800c9d0:	69fc      	ldr	r4, [r7, #28]
 800c9d2:	b97c      	cbnz	r4, 800c9f4 <__pow5mult+0x48>
 800c9d4:	2010      	movs	r0, #16
 800c9d6:	f7ff fd87 	bl	800c4e8 <malloc>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	61f8      	str	r0, [r7, #28]
 800c9de:	b928      	cbnz	r0, 800c9ec <__pow5mult+0x40>
 800c9e0:	4b1d      	ldr	r3, [pc, #116]	@ (800ca58 <__pow5mult+0xac>)
 800c9e2:	481e      	ldr	r0, [pc, #120]	@ (800ca5c <__pow5mult+0xb0>)
 800c9e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c9e8:	f000 fc4e 	bl	800d288 <__assert_func>
 800c9ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9f0:	6004      	str	r4, [r0, #0]
 800c9f2:	60c4      	str	r4, [r0, #12]
 800c9f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c9f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9fc:	b94c      	cbnz	r4, 800ca12 <__pow5mult+0x66>
 800c9fe:	f240 2171 	movw	r1, #625	@ 0x271
 800ca02:	4638      	mov	r0, r7
 800ca04:	f7ff ff1a 	bl	800c83c <__i2b>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca0e:	4604      	mov	r4, r0
 800ca10:	6003      	str	r3, [r0, #0]
 800ca12:	f04f 0900 	mov.w	r9, #0
 800ca16:	07eb      	lsls	r3, r5, #31
 800ca18:	d50a      	bpl.n	800ca30 <__pow5mult+0x84>
 800ca1a:	4631      	mov	r1, r6
 800ca1c:	4622      	mov	r2, r4
 800ca1e:	4638      	mov	r0, r7
 800ca20:	f7ff ff22 	bl	800c868 <__multiply>
 800ca24:	4631      	mov	r1, r6
 800ca26:	4680      	mov	r8, r0
 800ca28:	4638      	mov	r0, r7
 800ca2a:	f7ff fe53 	bl	800c6d4 <_Bfree>
 800ca2e:	4646      	mov	r6, r8
 800ca30:	106d      	asrs	r5, r5, #1
 800ca32:	d00b      	beq.n	800ca4c <__pow5mult+0xa0>
 800ca34:	6820      	ldr	r0, [r4, #0]
 800ca36:	b938      	cbnz	r0, 800ca48 <__pow5mult+0x9c>
 800ca38:	4622      	mov	r2, r4
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	4638      	mov	r0, r7
 800ca3e:	f7ff ff13 	bl	800c868 <__multiply>
 800ca42:	6020      	str	r0, [r4, #0]
 800ca44:	f8c0 9000 	str.w	r9, [r0]
 800ca48:	4604      	mov	r4, r0
 800ca4a:	e7e4      	b.n	800ca16 <__pow5mult+0x6a>
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca52:	bf00      	nop
 800ca54:	0800e7d4 	.word	0x0800e7d4
 800ca58:	0800e6a1 	.word	0x0800e6a1
 800ca5c:	0800e721 	.word	0x0800e721

0800ca60 <__lshift>:
 800ca60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca64:	460c      	mov	r4, r1
 800ca66:	6849      	ldr	r1, [r1, #4]
 800ca68:	6923      	ldr	r3, [r4, #16]
 800ca6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca6e:	68a3      	ldr	r3, [r4, #8]
 800ca70:	4607      	mov	r7, r0
 800ca72:	4691      	mov	r9, r2
 800ca74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca78:	f108 0601 	add.w	r6, r8, #1
 800ca7c:	42b3      	cmp	r3, r6
 800ca7e:	db0b      	blt.n	800ca98 <__lshift+0x38>
 800ca80:	4638      	mov	r0, r7
 800ca82:	f7ff fde7 	bl	800c654 <_Balloc>
 800ca86:	4605      	mov	r5, r0
 800ca88:	b948      	cbnz	r0, 800ca9e <__lshift+0x3e>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b28      	ldr	r3, [pc, #160]	@ (800cb30 <__lshift+0xd0>)
 800ca8e:	4829      	ldr	r0, [pc, #164]	@ (800cb34 <__lshift+0xd4>)
 800ca90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ca94:	f000 fbf8 	bl	800d288 <__assert_func>
 800ca98:	3101      	adds	r1, #1
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	e7ee      	b.n	800ca7c <__lshift+0x1c>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f100 0114 	add.w	r1, r0, #20
 800caa4:	f100 0210 	add.w	r2, r0, #16
 800caa8:	4618      	mov	r0, r3
 800caaa:	4553      	cmp	r3, sl
 800caac:	db33      	blt.n	800cb16 <__lshift+0xb6>
 800caae:	6920      	ldr	r0, [r4, #16]
 800cab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cab4:	f104 0314 	add.w	r3, r4, #20
 800cab8:	f019 091f 	ands.w	r9, r9, #31
 800cabc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cac0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cac4:	d02b      	beq.n	800cb1e <__lshift+0xbe>
 800cac6:	f1c9 0e20 	rsb	lr, r9, #32
 800caca:	468a      	mov	sl, r1
 800cacc:	2200      	movs	r2, #0
 800cace:	6818      	ldr	r0, [r3, #0]
 800cad0:	fa00 f009 	lsl.w	r0, r0, r9
 800cad4:	4310      	orrs	r0, r2
 800cad6:	f84a 0b04 	str.w	r0, [sl], #4
 800cada:	f853 2b04 	ldr.w	r2, [r3], #4
 800cade:	459c      	cmp	ip, r3
 800cae0:	fa22 f20e 	lsr.w	r2, r2, lr
 800cae4:	d8f3      	bhi.n	800cace <__lshift+0x6e>
 800cae6:	ebac 0304 	sub.w	r3, ip, r4
 800caea:	3b15      	subs	r3, #21
 800caec:	f023 0303 	bic.w	r3, r3, #3
 800caf0:	3304      	adds	r3, #4
 800caf2:	f104 0015 	add.w	r0, r4, #21
 800caf6:	4560      	cmp	r0, ip
 800caf8:	bf88      	it	hi
 800cafa:	2304      	movhi	r3, #4
 800cafc:	50ca      	str	r2, [r1, r3]
 800cafe:	b10a      	cbz	r2, 800cb04 <__lshift+0xa4>
 800cb00:	f108 0602 	add.w	r6, r8, #2
 800cb04:	3e01      	subs	r6, #1
 800cb06:	4638      	mov	r0, r7
 800cb08:	612e      	str	r6, [r5, #16]
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	f7ff fde2 	bl	800c6d4 <_Bfree>
 800cb10:	4628      	mov	r0, r5
 800cb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb16:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	e7c5      	b.n	800caaa <__lshift+0x4a>
 800cb1e:	3904      	subs	r1, #4
 800cb20:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb24:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb28:	459c      	cmp	ip, r3
 800cb2a:	d8f9      	bhi.n	800cb20 <__lshift+0xc0>
 800cb2c:	e7ea      	b.n	800cb04 <__lshift+0xa4>
 800cb2e:	bf00      	nop
 800cb30:	0800e710 	.word	0x0800e710
 800cb34:	0800e721 	.word	0x0800e721

0800cb38 <__mcmp>:
 800cb38:	690a      	ldr	r2, [r1, #16]
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	6900      	ldr	r0, [r0, #16]
 800cb3e:	1a80      	subs	r0, r0, r2
 800cb40:	b530      	push	{r4, r5, lr}
 800cb42:	d10e      	bne.n	800cb62 <__mcmp+0x2a>
 800cb44:	3314      	adds	r3, #20
 800cb46:	3114      	adds	r1, #20
 800cb48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb58:	4295      	cmp	r5, r2
 800cb5a:	d003      	beq.n	800cb64 <__mcmp+0x2c>
 800cb5c:	d205      	bcs.n	800cb6a <__mcmp+0x32>
 800cb5e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb62:	bd30      	pop	{r4, r5, pc}
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	d3f3      	bcc.n	800cb50 <__mcmp+0x18>
 800cb68:	e7fb      	b.n	800cb62 <__mcmp+0x2a>
 800cb6a:	2001      	movs	r0, #1
 800cb6c:	e7f9      	b.n	800cb62 <__mcmp+0x2a>
	...

0800cb70 <__mdiff>:
 800cb70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb74:	4689      	mov	r9, r1
 800cb76:	4606      	mov	r6, r0
 800cb78:	4611      	mov	r1, r2
 800cb7a:	4648      	mov	r0, r9
 800cb7c:	4614      	mov	r4, r2
 800cb7e:	f7ff ffdb 	bl	800cb38 <__mcmp>
 800cb82:	1e05      	subs	r5, r0, #0
 800cb84:	d112      	bne.n	800cbac <__mdiff+0x3c>
 800cb86:	4629      	mov	r1, r5
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f7ff fd63 	bl	800c654 <_Balloc>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	b928      	cbnz	r0, 800cb9e <__mdiff+0x2e>
 800cb92:	4b3f      	ldr	r3, [pc, #252]	@ (800cc90 <__mdiff+0x120>)
 800cb94:	f240 2137 	movw	r1, #567	@ 0x237
 800cb98:	483e      	ldr	r0, [pc, #248]	@ (800cc94 <__mdiff+0x124>)
 800cb9a:	f000 fb75 	bl	800d288 <__assert_func>
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cba4:	4610      	mov	r0, r2
 800cba6:	b003      	add	sp, #12
 800cba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbac:	bfbc      	itt	lt
 800cbae:	464b      	movlt	r3, r9
 800cbb0:	46a1      	movlt	r9, r4
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cbb8:	bfba      	itte	lt
 800cbba:	461c      	movlt	r4, r3
 800cbbc:	2501      	movlt	r5, #1
 800cbbe:	2500      	movge	r5, #0
 800cbc0:	f7ff fd48 	bl	800c654 <_Balloc>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	b918      	cbnz	r0, 800cbd0 <__mdiff+0x60>
 800cbc8:	4b31      	ldr	r3, [pc, #196]	@ (800cc90 <__mdiff+0x120>)
 800cbca:	f240 2145 	movw	r1, #581	@ 0x245
 800cbce:	e7e3      	b.n	800cb98 <__mdiff+0x28>
 800cbd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cbd4:	6926      	ldr	r6, [r4, #16]
 800cbd6:	60c5      	str	r5, [r0, #12]
 800cbd8:	f109 0310 	add.w	r3, r9, #16
 800cbdc:	f109 0514 	add.w	r5, r9, #20
 800cbe0:	f104 0e14 	add.w	lr, r4, #20
 800cbe4:	f100 0b14 	add.w	fp, r0, #20
 800cbe8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cbec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	46d9      	mov	r9, fp
 800cbf4:	f04f 0c00 	mov.w	ip, #0
 800cbf8:	9b01      	ldr	r3, [sp, #4]
 800cbfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cbfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cc02:	9301      	str	r3, [sp, #4]
 800cc04:	fa1f f38a 	uxth.w	r3, sl
 800cc08:	4619      	mov	r1, r3
 800cc0a:	b283      	uxth	r3, r0
 800cc0c:	1acb      	subs	r3, r1, r3
 800cc0e:	0c00      	lsrs	r0, r0, #16
 800cc10:	4463      	add	r3, ip
 800cc12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cc16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cc20:	4576      	cmp	r6, lr
 800cc22:	f849 3b04 	str.w	r3, [r9], #4
 800cc26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc2a:	d8e5      	bhi.n	800cbf8 <__mdiff+0x88>
 800cc2c:	1b33      	subs	r3, r6, r4
 800cc2e:	3b15      	subs	r3, #21
 800cc30:	f023 0303 	bic.w	r3, r3, #3
 800cc34:	3415      	adds	r4, #21
 800cc36:	3304      	adds	r3, #4
 800cc38:	42a6      	cmp	r6, r4
 800cc3a:	bf38      	it	cc
 800cc3c:	2304      	movcc	r3, #4
 800cc3e:	441d      	add	r5, r3
 800cc40:	445b      	add	r3, fp
 800cc42:	461e      	mov	r6, r3
 800cc44:	462c      	mov	r4, r5
 800cc46:	4544      	cmp	r4, r8
 800cc48:	d30e      	bcc.n	800cc68 <__mdiff+0xf8>
 800cc4a:	f108 0103 	add.w	r1, r8, #3
 800cc4e:	1b49      	subs	r1, r1, r5
 800cc50:	f021 0103 	bic.w	r1, r1, #3
 800cc54:	3d03      	subs	r5, #3
 800cc56:	45a8      	cmp	r8, r5
 800cc58:	bf38      	it	cc
 800cc5a:	2100      	movcc	r1, #0
 800cc5c:	440b      	add	r3, r1
 800cc5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc62:	b191      	cbz	r1, 800cc8a <__mdiff+0x11a>
 800cc64:	6117      	str	r7, [r2, #16]
 800cc66:	e79d      	b.n	800cba4 <__mdiff+0x34>
 800cc68:	f854 1b04 	ldr.w	r1, [r4], #4
 800cc6c:	46e6      	mov	lr, ip
 800cc6e:	0c08      	lsrs	r0, r1, #16
 800cc70:	fa1c fc81 	uxtah	ip, ip, r1
 800cc74:	4471      	add	r1, lr
 800cc76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cc7a:	b289      	uxth	r1, r1
 800cc7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cc80:	f846 1b04 	str.w	r1, [r6], #4
 800cc84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cc88:	e7dd      	b.n	800cc46 <__mdiff+0xd6>
 800cc8a:	3f01      	subs	r7, #1
 800cc8c:	e7e7      	b.n	800cc5e <__mdiff+0xee>
 800cc8e:	bf00      	nop
 800cc90:	0800e710 	.word	0x0800e710
 800cc94:	0800e721 	.word	0x0800e721

0800cc98 <__d2b>:
 800cc98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc9c:	460f      	mov	r7, r1
 800cc9e:	2101      	movs	r1, #1
 800cca0:	ec59 8b10 	vmov	r8, r9, d0
 800cca4:	4616      	mov	r6, r2
 800cca6:	f7ff fcd5 	bl	800c654 <_Balloc>
 800ccaa:	4604      	mov	r4, r0
 800ccac:	b930      	cbnz	r0, 800ccbc <__d2b+0x24>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	4b23      	ldr	r3, [pc, #140]	@ (800cd40 <__d2b+0xa8>)
 800ccb2:	4824      	ldr	r0, [pc, #144]	@ (800cd44 <__d2b+0xac>)
 800ccb4:	f240 310f 	movw	r1, #783	@ 0x30f
 800ccb8:	f000 fae6 	bl	800d288 <__assert_func>
 800ccbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ccc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccc4:	b10d      	cbz	r5, 800ccca <__d2b+0x32>
 800ccc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	f1b8 0300 	subs.w	r3, r8, #0
 800ccd0:	d023      	beq.n	800cd1a <__d2b+0x82>
 800ccd2:	4668      	mov	r0, sp
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	f7ff fd84 	bl	800c7e2 <__lo0bits>
 800ccda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ccde:	b1d0      	cbz	r0, 800cd16 <__d2b+0x7e>
 800cce0:	f1c0 0320 	rsb	r3, r0, #32
 800cce4:	fa02 f303 	lsl.w	r3, r2, r3
 800cce8:	430b      	orrs	r3, r1
 800ccea:	40c2      	lsrs	r2, r0
 800ccec:	6163      	str	r3, [r4, #20]
 800ccee:	9201      	str	r2, [sp, #4]
 800ccf0:	9b01      	ldr	r3, [sp, #4]
 800ccf2:	61a3      	str	r3, [r4, #24]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	bf0c      	ite	eq
 800ccf8:	2201      	moveq	r2, #1
 800ccfa:	2202      	movne	r2, #2
 800ccfc:	6122      	str	r2, [r4, #16]
 800ccfe:	b1a5      	cbz	r5, 800cd2a <__d2b+0x92>
 800cd00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cd04:	4405      	add	r5, r0
 800cd06:	603d      	str	r5, [r7, #0]
 800cd08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cd0c:	6030      	str	r0, [r6, #0]
 800cd0e:	4620      	mov	r0, r4
 800cd10:	b003      	add	sp, #12
 800cd12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd16:	6161      	str	r1, [r4, #20]
 800cd18:	e7ea      	b.n	800ccf0 <__d2b+0x58>
 800cd1a:	a801      	add	r0, sp, #4
 800cd1c:	f7ff fd61 	bl	800c7e2 <__lo0bits>
 800cd20:	9b01      	ldr	r3, [sp, #4]
 800cd22:	6163      	str	r3, [r4, #20]
 800cd24:	3020      	adds	r0, #32
 800cd26:	2201      	movs	r2, #1
 800cd28:	e7e8      	b.n	800ccfc <__d2b+0x64>
 800cd2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cd32:	6038      	str	r0, [r7, #0]
 800cd34:	6918      	ldr	r0, [r3, #16]
 800cd36:	f7ff fd35 	bl	800c7a4 <__hi0bits>
 800cd3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd3e:	e7e5      	b.n	800cd0c <__d2b+0x74>
 800cd40:	0800e710 	.word	0x0800e710
 800cd44:	0800e721 	.word	0x0800e721

0800cd48 <__sfputc_r>:
 800cd48:	6893      	ldr	r3, [r2, #8]
 800cd4a:	3b01      	subs	r3, #1
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	b410      	push	{r4}
 800cd50:	6093      	str	r3, [r2, #8]
 800cd52:	da08      	bge.n	800cd66 <__sfputc_r+0x1e>
 800cd54:	6994      	ldr	r4, [r2, #24]
 800cd56:	42a3      	cmp	r3, r4
 800cd58:	db01      	blt.n	800cd5e <__sfputc_r+0x16>
 800cd5a:	290a      	cmp	r1, #10
 800cd5c:	d103      	bne.n	800cd66 <__sfputc_r+0x1e>
 800cd5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd62:	f000 b9df 	b.w	800d124 <__swbuf_r>
 800cd66:	6813      	ldr	r3, [r2, #0]
 800cd68:	1c58      	adds	r0, r3, #1
 800cd6a:	6010      	str	r0, [r2, #0]
 800cd6c:	7019      	strb	r1, [r3, #0]
 800cd6e:	4608      	mov	r0, r1
 800cd70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <__sfputs_r>:
 800cd76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd78:	4606      	mov	r6, r0
 800cd7a:	460f      	mov	r7, r1
 800cd7c:	4614      	mov	r4, r2
 800cd7e:	18d5      	adds	r5, r2, r3
 800cd80:	42ac      	cmp	r4, r5
 800cd82:	d101      	bne.n	800cd88 <__sfputs_r+0x12>
 800cd84:	2000      	movs	r0, #0
 800cd86:	e007      	b.n	800cd98 <__sfputs_r+0x22>
 800cd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd8c:	463a      	mov	r2, r7
 800cd8e:	4630      	mov	r0, r6
 800cd90:	f7ff ffda 	bl	800cd48 <__sfputc_r>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	d1f3      	bne.n	800cd80 <__sfputs_r+0xa>
 800cd98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd9c <_vfiprintf_r>:
 800cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda0:	460d      	mov	r5, r1
 800cda2:	b09d      	sub	sp, #116	@ 0x74
 800cda4:	4614      	mov	r4, r2
 800cda6:	4698      	mov	r8, r3
 800cda8:	4606      	mov	r6, r0
 800cdaa:	b118      	cbz	r0, 800cdb4 <_vfiprintf_r+0x18>
 800cdac:	6a03      	ldr	r3, [r0, #32]
 800cdae:	b90b      	cbnz	r3, 800cdb4 <_vfiprintf_r+0x18>
 800cdb0:	f7fe fc5c 	bl	800b66c <__sinit>
 800cdb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdb6:	07d9      	lsls	r1, r3, #31
 800cdb8:	d405      	bmi.n	800cdc6 <_vfiprintf_r+0x2a>
 800cdba:	89ab      	ldrh	r3, [r5, #12]
 800cdbc:	059a      	lsls	r2, r3, #22
 800cdbe:	d402      	bmi.n	800cdc6 <_vfiprintf_r+0x2a>
 800cdc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdc2:	f7fe fd5c 	bl	800b87e <__retarget_lock_acquire_recursive>
 800cdc6:	89ab      	ldrh	r3, [r5, #12]
 800cdc8:	071b      	lsls	r3, r3, #28
 800cdca:	d501      	bpl.n	800cdd0 <_vfiprintf_r+0x34>
 800cdcc:	692b      	ldr	r3, [r5, #16]
 800cdce:	b99b      	cbnz	r3, 800cdf8 <_vfiprintf_r+0x5c>
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	f000 f9e4 	bl	800d1a0 <__swsetup_r>
 800cdd8:	b170      	cbz	r0, 800cdf8 <_vfiprintf_r+0x5c>
 800cdda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cddc:	07dc      	lsls	r4, r3, #31
 800cdde:	d504      	bpl.n	800cdea <_vfiprintf_r+0x4e>
 800cde0:	f04f 30ff 	mov.w	r0, #4294967295
 800cde4:	b01d      	add	sp, #116	@ 0x74
 800cde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdea:	89ab      	ldrh	r3, [r5, #12]
 800cdec:	0598      	lsls	r0, r3, #22
 800cdee:	d4f7      	bmi.n	800cde0 <_vfiprintf_r+0x44>
 800cdf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdf2:	f7fe fd45 	bl	800b880 <__retarget_lock_release_recursive>
 800cdf6:	e7f3      	b.n	800cde0 <_vfiprintf_r+0x44>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdfc:	2320      	movs	r3, #32
 800cdfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce02:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce06:	2330      	movs	r3, #48	@ 0x30
 800ce08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cfb8 <_vfiprintf_r+0x21c>
 800ce0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce10:	f04f 0901 	mov.w	r9, #1
 800ce14:	4623      	mov	r3, r4
 800ce16:	469a      	mov	sl, r3
 800ce18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce1c:	b10a      	cbz	r2, 800ce22 <_vfiprintf_r+0x86>
 800ce1e:	2a25      	cmp	r2, #37	@ 0x25
 800ce20:	d1f9      	bne.n	800ce16 <_vfiprintf_r+0x7a>
 800ce22:	ebba 0b04 	subs.w	fp, sl, r4
 800ce26:	d00b      	beq.n	800ce40 <_vfiprintf_r+0xa4>
 800ce28:	465b      	mov	r3, fp
 800ce2a:	4622      	mov	r2, r4
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f7ff ffa1 	bl	800cd76 <__sfputs_r>
 800ce34:	3001      	adds	r0, #1
 800ce36:	f000 80a7 	beq.w	800cf88 <_vfiprintf_r+0x1ec>
 800ce3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce3c:	445a      	add	r2, fp
 800ce3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce40:	f89a 3000 	ldrb.w	r3, [sl]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 809f 	beq.w	800cf88 <_vfiprintf_r+0x1ec>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce54:	f10a 0a01 	add.w	sl, sl, #1
 800ce58:	9304      	str	r3, [sp, #16]
 800ce5a:	9307      	str	r3, [sp, #28]
 800ce5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce60:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce62:	4654      	mov	r4, sl
 800ce64:	2205      	movs	r2, #5
 800ce66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce6a:	4853      	ldr	r0, [pc, #332]	@ (800cfb8 <_vfiprintf_r+0x21c>)
 800ce6c:	f7f3 fa38 	bl	80002e0 <memchr>
 800ce70:	9a04      	ldr	r2, [sp, #16]
 800ce72:	b9d8      	cbnz	r0, 800ceac <_vfiprintf_r+0x110>
 800ce74:	06d1      	lsls	r1, r2, #27
 800ce76:	bf44      	itt	mi
 800ce78:	2320      	movmi	r3, #32
 800ce7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce7e:	0713      	lsls	r3, r2, #28
 800ce80:	bf44      	itt	mi
 800ce82:	232b      	movmi	r3, #43	@ 0x2b
 800ce84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce88:	f89a 3000 	ldrb.w	r3, [sl]
 800ce8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce8e:	d015      	beq.n	800cebc <_vfiprintf_r+0x120>
 800ce90:	9a07      	ldr	r2, [sp, #28]
 800ce92:	4654      	mov	r4, sl
 800ce94:	2000      	movs	r0, #0
 800ce96:	f04f 0c0a 	mov.w	ip, #10
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cea0:	3b30      	subs	r3, #48	@ 0x30
 800cea2:	2b09      	cmp	r3, #9
 800cea4:	d94b      	bls.n	800cf3e <_vfiprintf_r+0x1a2>
 800cea6:	b1b0      	cbz	r0, 800ced6 <_vfiprintf_r+0x13a>
 800cea8:	9207      	str	r2, [sp, #28]
 800ceaa:	e014      	b.n	800ced6 <_vfiprintf_r+0x13a>
 800ceac:	eba0 0308 	sub.w	r3, r0, r8
 800ceb0:	fa09 f303 	lsl.w	r3, r9, r3
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	9304      	str	r3, [sp, #16]
 800ceb8:	46a2      	mov	sl, r4
 800ceba:	e7d2      	b.n	800ce62 <_vfiprintf_r+0xc6>
 800cebc:	9b03      	ldr	r3, [sp, #12]
 800cebe:	1d19      	adds	r1, r3, #4
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	9103      	str	r1, [sp, #12]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	bfbb      	ittet	lt
 800cec8:	425b      	neglt	r3, r3
 800ceca:	f042 0202 	orrlt.w	r2, r2, #2
 800cece:	9307      	strge	r3, [sp, #28]
 800ced0:	9307      	strlt	r3, [sp, #28]
 800ced2:	bfb8      	it	lt
 800ced4:	9204      	strlt	r2, [sp, #16]
 800ced6:	7823      	ldrb	r3, [r4, #0]
 800ced8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ceda:	d10a      	bne.n	800cef2 <_vfiprintf_r+0x156>
 800cedc:	7863      	ldrb	r3, [r4, #1]
 800cede:	2b2a      	cmp	r3, #42	@ 0x2a
 800cee0:	d132      	bne.n	800cf48 <_vfiprintf_r+0x1ac>
 800cee2:	9b03      	ldr	r3, [sp, #12]
 800cee4:	1d1a      	adds	r2, r3, #4
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	9203      	str	r2, [sp, #12]
 800ceea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ceee:	3402      	adds	r4, #2
 800cef0:	9305      	str	r3, [sp, #20]
 800cef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cfc8 <_vfiprintf_r+0x22c>
 800cef6:	7821      	ldrb	r1, [r4, #0]
 800cef8:	2203      	movs	r2, #3
 800cefa:	4650      	mov	r0, sl
 800cefc:	f7f3 f9f0 	bl	80002e0 <memchr>
 800cf00:	b138      	cbz	r0, 800cf12 <_vfiprintf_r+0x176>
 800cf02:	9b04      	ldr	r3, [sp, #16]
 800cf04:	eba0 000a 	sub.w	r0, r0, sl
 800cf08:	2240      	movs	r2, #64	@ 0x40
 800cf0a:	4082      	lsls	r2, r0
 800cf0c:	4313      	orrs	r3, r2
 800cf0e:	3401      	adds	r4, #1
 800cf10:	9304      	str	r3, [sp, #16]
 800cf12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf16:	4829      	ldr	r0, [pc, #164]	@ (800cfbc <_vfiprintf_r+0x220>)
 800cf18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf1c:	2206      	movs	r2, #6
 800cf1e:	f7f3 f9df 	bl	80002e0 <memchr>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d03f      	beq.n	800cfa6 <_vfiprintf_r+0x20a>
 800cf26:	4b26      	ldr	r3, [pc, #152]	@ (800cfc0 <_vfiprintf_r+0x224>)
 800cf28:	bb1b      	cbnz	r3, 800cf72 <_vfiprintf_r+0x1d6>
 800cf2a:	9b03      	ldr	r3, [sp, #12]
 800cf2c:	3307      	adds	r3, #7
 800cf2e:	f023 0307 	bic.w	r3, r3, #7
 800cf32:	3308      	adds	r3, #8
 800cf34:	9303      	str	r3, [sp, #12]
 800cf36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf38:	443b      	add	r3, r7
 800cf3a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf3c:	e76a      	b.n	800ce14 <_vfiprintf_r+0x78>
 800cf3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf42:	460c      	mov	r4, r1
 800cf44:	2001      	movs	r0, #1
 800cf46:	e7a8      	b.n	800ce9a <_vfiprintf_r+0xfe>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	3401      	adds	r4, #1
 800cf4c:	9305      	str	r3, [sp, #20]
 800cf4e:	4619      	mov	r1, r3
 800cf50:	f04f 0c0a 	mov.w	ip, #10
 800cf54:	4620      	mov	r0, r4
 800cf56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf5a:	3a30      	subs	r2, #48	@ 0x30
 800cf5c:	2a09      	cmp	r2, #9
 800cf5e:	d903      	bls.n	800cf68 <_vfiprintf_r+0x1cc>
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d0c6      	beq.n	800cef2 <_vfiprintf_r+0x156>
 800cf64:	9105      	str	r1, [sp, #20]
 800cf66:	e7c4      	b.n	800cef2 <_vfiprintf_r+0x156>
 800cf68:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e7f0      	b.n	800cf54 <_vfiprintf_r+0x1b8>
 800cf72:	ab03      	add	r3, sp, #12
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	462a      	mov	r2, r5
 800cf78:	4b12      	ldr	r3, [pc, #72]	@ (800cfc4 <_vfiprintf_r+0x228>)
 800cf7a:	a904      	add	r1, sp, #16
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f7fd ff43 	bl	800ae08 <_printf_float>
 800cf82:	4607      	mov	r7, r0
 800cf84:	1c78      	adds	r0, r7, #1
 800cf86:	d1d6      	bne.n	800cf36 <_vfiprintf_r+0x19a>
 800cf88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf8a:	07d9      	lsls	r1, r3, #31
 800cf8c:	d405      	bmi.n	800cf9a <_vfiprintf_r+0x1fe>
 800cf8e:	89ab      	ldrh	r3, [r5, #12]
 800cf90:	059a      	lsls	r2, r3, #22
 800cf92:	d402      	bmi.n	800cf9a <_vfiprintf_r+0x1fe>
 800cf94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf96:	f7fe fc73 	bl	800b880 <__retarget_lock_release_recursive>
 800cf9a:	89ab      	ldrh	r3, [r5, #12]
 800cf9c:	065b      	lsls	r3, r3, #25
 800cf9e:	f53f af1f 	bmi.w	800cde0 <_vfiprintf_r+0x44>
 800cfa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfa4:	e71e      	b.n	800cde4 <_vfiprintf_r+0x48>
 800cfa6:	ab03      	add	r3, sp, #12
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	462a      	mov	r2, r5
 800cfac:	4b05      	ldr	r3, [pc, #20]	@ (800cfc4 <_vfiprintf_r+0x228>)
 800cfae:	a904      	add	r1, sp, #16
 800cfb0:	4630      	mov	r0, r6
 800cfb2:	f7fe f9b1 	bl	800b318 <_printf_i>
 800cfb6:	e7e4      	b.n	800cf82 <_vfiprintf_r+0x1e6>
 800cfb8:	0800e77a 	.word	0x0800e77a
 800cfbc:	0800e784 	.word	0x0800e784
 800cfc0:	0800ae09 	.word	0x0800ae09
 800cfc4:	0800cd77 	.word	0x0800cd77
 800cfc8:	0800e780 	.word	0x0800e780

0800cfcc <__sflush_r>:
 800cfcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd4:	0716      	lsls	r6, r2, #28
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	460c      	mov	r4, r1
 800cfda:	d454      	bmi.n	800d086 <__sflush_r+0xba>
 800cfdc:	684b      	ldr	r3, [r1, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	dc02      	bgt.n	800cfe8 <__sflush_r+0x1c>
 800cfe2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dd48      	ble.n	800d07a <__sflush_r+0xae>
 800cfe8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfea:	2e00      	cmp	r6, #0
 800cfec:	d045      	beq.n	800d07a <__sflush_r+0xae>
 800cfee:	2300      	movs	r3, #0
 800cff0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cff4:	682f      	ldr	r7, [r5, #0]
 800cff6:	6a21      	ldr	r1, [r4, #32]
 800cff8:	602b      	str	r3, [r5, #0]
 800cffa:	d030      	beq.n	800d05e <__sflush_r+0x92>
 800cffc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cffe:	89a3      	ldrh	r3, [r4, #12]
 800d000:	0759      	lsls	r1, r3, #29
 800d002:	d505      	bpl.n	800d010 <__sflush_r+0x44>
 800d004:	6863      	ldr	r3, [r4, #4]
 800d006:	1ad2      	subs	r2, r2, r3
 800d008:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d00a:	b10b      	cbz	r3, 800d010 <__sflush_r+0x44>
 800d00c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d00e:	1ad2      	subs	r2, r2, r3
 800d010:	2300      	movs	r3, #0
 800d012:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d014:	6a21      	ldr	r1, [r4, #32]
 800d016:	4628      	mov	r0, r5
 800d018:	47b0      	blx	r6
 800d01a:	1c43      	adds	r3, r0, #1
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	d106      	bne.n	800d02e <__sflush_r+0x62>
 800d020:	6829      	ldr	r1, [r5, #0]
 800d022:	291d      	cmp	r1, #29
 800d024:	d82b      	bhi.n	800d07e <__sflush_r+0xb2>
 800d026:	4a2a      	ldr	r2, [pc, #168]	@ (800d0d0 <__sflush_r+0x104>)
 800d028:	40ca      	lsrs	r2, r1
 800d02a:	07d6      	lsls	r6, r2, #31
 800d02c:	d527      	bpl.n	800d07e <__sflush_r+0xb2>
 800d02e:	2200      	movs	r2, #0
 800d030:	6062      	str	r2, [r4, #4]
 800d032:	04d9      	lsls	r1, r3, #19
 800d034:	6922      	ldr	r2, [r4, #16]
 800d036:	6022      	str	r2, [r4, #0]
 800d038:	d504      	bpl.n	800d044 <__sflush_r+0x78>
 800d03a:	1c42      	adds	r2, r0, #1
 800d03c:	d101      	bne.n	800d042 <__sflush_r+0x76>
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	b903      	cbnz	r3, 800d044 <__sflush_r+0x78>
 800d042:	6560      	str	r0, [r4, #84]	@ 0x54
 800d044:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d046:	602f      	str	r7, [r5, #0]
 800d048:	b1b9      	cbz	r1, 800d07a <__sflush_r+0xae>
 800d04a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d04e:	4299      	cmp	r1, r3
 800d050:	d002      	beq.n	800d058 <__sflush_r+0x8c>
 800d052:	4628      	mov	r0, r5
 800d054:	f7ff f9fe 	bl	800c454 <_free_r>
 800d058:	2300      	movs	r3, #0
 800d05a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d05c:	e00d      	b.n	800d07a <__sflush_r+0xae>
 800d05e:	2301      	movs	r3, #1
 800d060:	4628      	mov	r0, r5
 800d062:	47b0      	blx	r6
 800d064:	4602      	mov	r2, r0
 800d066:	1c50      	adds	r0, r2, #1
 800d068:	d1c9      	bne.n	800cffe <__sflush_r+0x32>
 800d06a:	682b      	ldr	r3, [r5, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0c6      	beq.n	800cffe <__sflush_r+0x32>
 800d070:	2b1d      	cmp	r3, #29
 800d072:	d001      	beq.n	800d078 <__sflush_r+0xac>
 800d074:	2b16      	cmp	r3, #22
 800d076:	d11e      	bne.n	800d0b6 <__sflush_r+0xea>
 800d078:	602f      	str	r7, [r5, #0]
 800d07a:	2000      	movs	r0, #0
 800d07c:	e022      	b.n	800d0c4 <__sflush_r+0xf8>
 800d07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d082:	b21b      	sxth	r3, r3
 800d084:	e01b      	b.n	800d0be <__sflush_r+0xf2>
 800d086:	690f      	ldr	r7, [r1, #16]
 800d088:	2f00      	cmp	r7, #0
 800d08a:	d0f6      	beq.n	800d07a <__sflush_r+0xae>
 800d08c:	0793      	lsls	r3, r2, #30
 800d08e:	680e      	ldr	r6, [r1, #0]
 800d090:	bf08      	it	eq
 800d092:	694b      	ldreq	r3, [r1, #20]
 800d094:	600f      	str	r7, [r1, #0]
 800d096:	bf18      	it	ne
 800d098:	2300      	movne	r3, #0
 800d09a:	eba6 0807 	sub.w	r8, r6, r7
 800d09e:	608b      	str	r3, [r1, #8]
 800d0a0:	f1b8 0f00 	cmp.w	r8, #0
 800d0a4:	dde9      	ble.n	800d07a <__sflush_r+0xae>
 800d0a6:	6a21      	ldr	r1, [r4, #32]
 800d0a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d0aa:	4643      	mov	r3, r8
 800d0ac:	463a      	mov	r2, r7
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	47b0      	blx	r6
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	dc08      	bgt.n	800d0c8 <__sflush_r+0xfc>
 800d0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0be:	81a3      	strh	r3, [r4, #12]
 800d0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	4407      	add	r7, r0
 800d0ca:	eba8 0800 	sub.w	r8, r8, r0
 800d0ce:	e7e7      	b.n	800d0a0 <__sflush_r+0xd4>
 800d0d0:	20400001 	.word	0x20400001

0800d0d4 <_fflush_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	690b      	ldr	r3, [r1, #16]
 800d0d8:	4605      	mov	r5, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	b913      	cbnz	r3, 800d0e4 <_fflush_r+0x10>
 800d0de:	2500      	movs	r5, #0
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	bd38      	pop	{r3, r4, r5, pc}
 800d0e4:	b118      	cbz	r0, 800d0ee <_fflush_r+0x1a>
 800d0e6:	6a03      	ldr	r3, [r0, #32]
 800d0e8:	b90b      	cbnz	r3, 800d0ee <_fflush_r+0x1a>
 800d0ea:	f7fe fabf 	bl	800b66c <__sinit>
 800d0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d0f3      	beq.n	800d0de <_fflush_r+0xa>
 800d0f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0f8:	07d0      	lsls	r0, r2, #31
 800d0fa:	d404      	bmi.n	800d106 <_fflush_r+0x32>
 800d0fc:	0599      	lsls	r1, r3, #22
 800d0fe:	d402      	bmi.n	800d106 <_fflush_r+0x32>
 800d100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d102:	f7fe fbbc 	bl	800b87e <__retarget_lock_acquire_recursive>
 800d106:	4628      	mov	r0, r5
 800d108:	4621      	mov	r1, r4
 800d10a:	f7ff ff5f 	bl	800cfcc <__sflush_r>
 800d10e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d110:	07da      	lsls	r2, r3, #31
 800d112:	4605      	mov	r5, r0
 800d114:	d4e4      	bmi.n	800d0e0 <_fflush_r+0xc>
 800d116:	89a3      	ldrh	r3, [r4, #12]
 800d118:	059b      	lsls	r3, r3, #22
 800d11a:	d4e1      	bmi.n	800d0e0 <_fflush_r+0xc>
 800d11c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d11e:	f7fe fbaf 	bl	800b880 <__retarget_lock_release_recursive>
 800d122:	e7dd      	b.n	800d0e0 <_fflush_r+0xc>

0800d124 <__swbuf_r>:
 800d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d126:	460e      	mov	r6, r1
 800d128:	4614      	mov	r4, r2
 800d12a:	4605      	mov	r5, r0
 800d12c:	b118      	cbz	r0, 800d136 <__swbuf_r+0x12>
 800d12e:	6a03      	ldr	r3, [r0, #32]
 800d130:	b90b      	cbnz	r3, 800d136 <__swbuf_r+0x12>
 800d132:	f7fe fa9b 	bl	800b66c <__sinit>
 800d136:	69a3      	ldr	r3, [r4, #24]
 800d138:	60a3      	str	r3, [r4, #8]
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	071a      	lsls	r2, r3, #28
 800d13e:	d501      	bpl.n	800d144 <__swbuf_r+0x20>
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	b943      	cbnz	r3, 800d156 <__swbuf_r+0x32>
 800d144:	4621      	mov	r1, r4
 800d146:	4628      	mov	r0, r5
 800d148:	f000 f82a 	bl	800d1a0 <__swsetup_r>
 800d14c:	b118      	cbz	r0, 800d156 <__swbuf_r+0x32>
 800d14e:	f04f 37ff 	mov.w	r7, #4294967295
 800d152:	4638      	mov	r0, r7
 800d154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	6922      	ldr	r2, [r4, #16]
 800d15a:	1a98      	subs	r0, r3, r2
 800d15c:	6963      	ldr	r3, [r4, #20]
 800d15e:	b2f6      	uxtb	r6, r6
 800d160:	4283      	cmp	r3, r0
 800d162:	4637      	mov	r7, r6
 800d164:	dc05      	bgt.n	800d172 <__swbuf_r+0x4e>
 800d166:	4621      	mov	r1, r4
 800d168:	4628      	mov	r0, r5
 800d16a:	f7ff ffb3 	bl	800d0d4 <_fflush_r>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d1ed      	bne.n	800d14e <__swbuf_r+0x2a>
 800d172:	68a3      	ldr	r3, [r4, #8]
 800d174:	3b01      	subs	r3, #1
 800d176:	60a3      	str	r3, [r4, #8]
 800d178:	6823      	ldr	r3, [r4, #0]
 800d17a:	1c5a      	adds	r2, r3, #1
 800d17c:	6022      	str	r2, [r4, #0]
 800d17e:	701e      	strb	r6, [r3, #0]
 800d180:	6962      	ldr	r2, [r4, #20]
 800d182:	1c43      	adds	r3, r0, #1
 800d184:	429a      	cmp	r2, r3
 800d186:	d004      	beq.n	800d192 <__swbuf_r+0x6e>
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	07db      	lsls	r3, r3, #31
 800d18c:	d5e1      	bpl.n	800d152 <__swbuf_r+0x2e>
 800d18e:	2e0a      	cmp	r6, #10
 800d190:	d1df      	bne.n	800d152 <__swbuf_r+0x2e>
 800d192:	4621      	mov	r1, r4
 800d194:	4628      	mov	r0, r5
 800d196:	f7ff ff9d 	bl	800d0d4 <_fflush_r>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d0d9      	beq.n	800d152 <__swbuf_r+0x2e>
 800d19e:	e7d6      	b.n	800d14e <__swbuf_r+0x2a>

0800d1a0 <__swsetup_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4b29      	ldr	r3, [pc, #164]	@ (800d248 <__swsetup_r+0xa8>)
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	6818      	ldr	r0, [r3, #0]
 800d1a8:	460c      	mov	r4, r1
 800d1aa:	b118      	cbz	r0, 800d1b4 <__swsetup_r+0x14>
 800d1ac:	6a03      	ldr	r3, [r0, #32]
 800d1ae:	b90b      	cbnz	r3, 800d1b4 <__swsetup_r+0x14>
 800d1b0:	f7fe fa5c 	bl	800b66c <__sinit>
 800d1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b8:	0719      	lsls	r1, r3, #28
 800d1ba:	d422      	bmi.n	800d202 <__swsetup_r+0x62>
 800d1bc:	06da      	lsls	r2, r3, #27
 800d1be:	d407      	bmi.n	800d1d0 <__swsetup_r+0x30>
 800d1c0:	2209      	movs	r2, #9
 800d1c2:	602a      	str	r2, [r5, #0]
 800d1c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1c8:	81a3      	strh	r3, [r4, #12]
 800d1ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ce:	e033      	b.n	800d238 <__swsetup_r+0x98>
 800d1d0:	0758      	lsls	r0, r3, #29
 800d1d2:	d512      	bpl.n	800d1fa <__swsetup_r+0x5a>
 800d1d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1d6:	b141      	cbz	r1, 800d1ea <__swsetup_r+0x4a>
 800d1d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1dc:	4299      	cmp	r1, r3
 800d1de:	d002      	beq.n	800d1e6 <__swsetup_r+0x46>
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	f7ff f937 	bl	800c454 <_free_r>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1ea:	89a3      	ldrh	r3, [r4, #12]
 800d1ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1f0:	81a3      	strh	r3, [r4, #12]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	6063      	str	r3, [r4, #4]
 800d1f6:	6923      	ldr	r3, [r4, #16]
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	89a3      	ldrh	r3, [r4, #12]
 800d1fc:	f043 0308 	orr.w	r3, r3, #8
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	6923      	ldr	r3, [r4, #16]
 800d204:	b94b      	cbnz	r3, 800d21a <__swsetup_r+0x7a>
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d20c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d210:	d003      	beq.n	800d21a <__swsetup_r+0x7a>
 800d212:	4621      	mov	r1, r4
 800d214:	4628      	mov	r0, r5
 800d216:	f000 f8c1 	bl	800d39c <__smakebuf_r>
 800d21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d21e:	f013 0201 	ands.w	r2, r3, #1
 800d222:	d00a      	beq.n	800d23a <__swsetup_r+0x9a>
 800d224:	2200      	movs	r2, #0
 800d226:	60a2      	str	r2, [r4, #8]
 800d228:	6962      	ldr	r2, [r4, #20]
 800d22a:	4252      	negs	r2, r2
 800d22c:	61a2      	str	r2, [r4, #24]
 800d22e:	6922      	ldr	r2, [r4, #16]
 800d230:	b942      	cbnz	r2, 800d244 <__swsetup_r+0xa4>
 800d232:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d236:	d1c5      	bne.n	800d1c4 <__swsetup_r+0x24>
 800d238:	bd38      	pop	{r3, r4, r5, pc}
 800d23a:	0799      	lsls	r1, r3, #30
 800d23c:	bf58      	it	pl
 800d23e:	6962      	ldrpl	r2, [r4, #20]
 800d240:	60a2      	str	r2, [r4, #8]
 800d242:	e7f4      	b.n	800d22e <__swsetup_r+0x8e>
 800d244:	2000      	movs	r0, #0
 800d246:	e7f7      	b.n	800d238 <__swsetup_r+0x98>
 800d248:	24000024 	.word	0x24000024

0800d24c <_sbrk_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4d06      	ldr	r5, [pc, #24]	@ (800d268 <_sbrk_r+0x1c>)
 800d250:	2300      	movs	r3, #0
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	f7f5 f8f2 	bl	8002440 <_sbrk>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_sbrk_r+0x1a>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_sbrk_r+0x1a>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	24000c60 	.word	0x24000c60

0800d26c <memcpy>:
 800d26c:	440a      	add	r2, r1
 800d26e:	4291      	cmp	r1, r2
 800d270:	f100 33ff 	add.w	r3, r0, #4294967295
 800d274:	d100      	bne.n	800d278 <memcpy+0xc>
 800d276:	4770      	bx	lr
 800d278:	b510      	push	{r4, lr}
 800d27a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d27e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d282:	4291      	cmp	r1, r2
 800d284:	d1f9      	bne.n	800d27a <memcpy+0xe>
 800d286:	bd10      	pop	{r4, pc}

0800d288 <__assert_func>:
 800d288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d28a:	4614      	mov	r4, r2
 800d28c:	461a      	mov	r2, r3
 800d28e:	4b09      	ldr	r3, [pc, #36]	@ (800d2b4 <__assert_func+0x2c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4605      	mov	r5, r0
 800d294:	68d8      	ldr	r0, [r3, #12]
 800d296:	b14c      	cbz	r4, 800d2ac <__assert_func+0x24>
 800d298:	4b07      	ldr	r3, [pc, #28]	@ (800d2b8 <__assert_func+0x30>)
 800d29a:	9100      	str	r1, [sp, #0]
 800d29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d2a0:	4906      	ldr	r1, [pc, #24]	@ (800d2bc <__assert_func+0x34>)
 800d2a2:	462b      	mov	r3, r5
 800d2a4:	f000 f842 	bl	800d32c <fiprintf>
 800d2a8:	f000 f8d6 	bl	800d458 <abort>
 800d2ac:	4b04      	ldr	r3, [pc, #16]	@ (800d2c0 <__assert_func+0x38>)
 800d2ae:	461c      	mov	r4, r3
 800d2b0:	e7f3      	b.n	800d29a <__assert_func+0x12>
 800d2b2:	bf00      	nop
 800d2b4:	24000024 	.word	0x24000024
 800d2b8:	0800e795 	.word	0x0800e795
 800d2bc:	0800e7a2 	.word	0x0800e7a2
 800d2c0:	0800e7d0 	.word	0x0800e7d0

0800d2c4 <_calloc_r>:
 800d2c4:	b570      	push	{r4, r5, r6, lr}
 800d2c6:	fba1 5402 	umull	r5, r4, r1, r2
 800d2ca:	b934      	cbnz	r4, 800d2da <_calloc_r+0x16>
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	f7ff f935 	bl	800c53c <_malloc_r>
 800d2d2:	4606      	mov	r6, r0
 800d2d4:	b928      	cbnz	r0, 800d2e2 <_calloc_r+0x1e>
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	bd70      	pop	{r4, r5, r6, pc}
 800d2da:	220c      	movs	r2, #12
 800d2dc:	6002      	str	r2, [r0, #0]
 800d2de:	2600      	movs	r6, #0
 800d2e0:	e7f9      	b.n	800d2d6 <_calloc_r+0x12>
 800d2e2:	462a      	mov	r2, r5
 800d2e4:	4621      	mov	r1, r4
 800d2e6:	f7fe fa4c 	bl	800b782 <memset>
 800d2ea:	e7f4      	b.n	800d2d6 <_calloc_r+0x12>

0800d2ec <__ascii_mbtowc>:
 800d2ec:	b082      	sub	sp, #8
 800d2ee:	b901      	cbnz	r1, 800d2f2 <__ascii_mbtowc+0x6>
 800d2f0:	a901      	add	r1, sp, #4
 800d2f2:	b142      	cbz	r2, 800d306 <__ascii_mbtowc+0x1a>
 800d2f4:	b14b      	cbz	r3, 800d30a <__ascii_mbtowc+0x1e>
 800d2f6:	7813      	ldrb	r3, [r2, #0]
 800d2f8:	600b      	str	r3, [r1, #0]
 800d2fa:	7812      	ldrb	r2, [r2, #0]
 800d2fc:	1e10      	subs	r0, r2, #0
 800d2fe:	bf18      	it	ne
 800d300:	2001      	movne	r0, #1
 800d302:	b002      	add	sp, #8
 800d304:	4770      	bx	lr
 800d306:	4610      	mov	r0, r2
 800d308:	e7fb      	b.n	800d302 <__ascii_mbtowc+0x16>
 800d30a:	f06f 0001 	mvn.w	r0, #1
 800d30e:	e7f8      	b.n	800d302 <__ascii_mbtowc+0x16>

0800d310 <__ascii_wctomb>:
 800d310:	4603      	mov	r3, r0
 800d312:	4608      	mov	r0, r1
 800d314:	b141      	cbz	r1, 800d328 <__ascii_wctomb+0x18>
 800d316:	2aff      	cmp	r2, #255	@ 0xff
 800d318:	d904      	bls.n	800d324 <__ascii_wctomb+0x14>
 800d31a:	228a      	movs	r2, #138	@ 0x8a
 800d31c:	601a      	str	r2, [r3, #0]
 800d31e:	f04f 30ff 	mov.w	r0, #4294967295
 800d322:	4770      	bx	lr
 800d324:	700a      	strb	r2, [r1, #0]
 800d326:	2001      	movs	r0, #1
 800d328:	4770      	bx	lr
	...

0800d32c <fiprintf>:
 800d32c:	b40e      	push	{r1, r2, r3}
 800d32e:	b503      	push	{r0, r1, lr}
 800d330:	4601      	mov	r1, r0
 800d332:	ab03      	add	r3, sp, #12
 800d334:	4805      	ldr	r0, [pc, #20]	@ (800d34c <fiprintf+0x20>)
 800d336:	f853 2b04 	ldr.w	r2, [r3], #4
 800d33a:	6800      	ldr	r0, [r0, #0]
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	f7ff fd2d 	bl	800cd9c <_vfiprintf_r>
 800d342:	b002      	add	sp, #8
 800d344:	f85d eb04 	ldr.w	lr, [sp], #4
 800d348:	b003      	add	sp, #12
 800d34a:	4770      	bx	lr
 800d34c:	24000024 	.word	0x24000024

0800d350 <__swhatbuf_r>:
 800d350:	b570      	push	{r4, r5, r6, lr}
 800d352:	460c      	mov	r4, r1
 800d354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d358:	2900      	cmp	r1, #0
 800d35a:	b096      	sub	sp, #88	@ 0x58
 800d35c:	4615      	mov	r5, r2
 800d35e:	461e      	mov	r6, r3
 800d360:	da0d      	bge.n	800d37e <__swhatbuf_r+0x2e>
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d368:	f04f 0100 	mov.w	r1, #0
 800d36c:	bf14      	ite	ne
 800d36e:	2340      	movne	r3, #64	@ 0x40
 800d370:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d374:	2000      	movs	r0, #0
 800d376:	6031      	str	r1, [r6, #0]
 800d378:	602b      	str	r3, [r5, #0]
 800d37a:	b016      	add	sp, #88	@ 0x58
 800d37c:	bd70      	pop	{r4, r5, r6, pc}
 800d37e:	466a      	mov	r2, sp
 800d380:	f000 f848 	bl	800d414 <_fstat_r>
 800d384:	2800      	cmp	r0, #0
 800d386:	dbec      	blt.n	800d362 <__swhatbuf_r+0x12>
 800d388:	9901      	ldr	r1, [sp, #4]
 800d38a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d38e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d392:	4259      	negs	r1, r3
 800d394:	4159      	adcs	r1, r3
 800d396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d39a:	e7eb      	b.n	800d374 <__swhatbuf_r+0x24>

0800d39c <__smakebuf_r>:
 800d39c:	898b      	ldrh	r3, [r1, #12]
 800d39e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3a0:	079d      	lsls	r5, r3, #30
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	d507      	bpl.n	800d3b8 <__smakebuf_r+0x1c>
 800d3a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d3ac:	6023      	str	r3, [r4, #0]
 800d3ae:	6123      	str	r3, [r4, #16]
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	6163      	str	r3, [r4, #20]
 800d3b4:	b003      	add	sp, #12
 800d3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b8:	ab01      	add	r3, sp, #4
 800d3ba:	466a      	mov	r2, sp
 800d3bc:	f7ff ffc8 	bl	800d350 <__swhatbuf_r>
 800d3c0:	9f00      	ldr	r7, [sp, #0]
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	4639      	mov	r1, r7
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	f7ff f8b8 	bl	800c53c <_malloc_r>
 800d3cc:	b948      	cbnz	r0, 800d3e2 <__smakebuf_r+0x46>
 800d3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3d2:	059a      	lsls	r2, r3, #22
 800d3d4:	d4ee      	bmi.n	800d3b4 <__smakebuf_r+0x18>
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	f043 0302 	orr.w	r3, r3, #2
 800d3de:	81a3      	strh	r3, [r4, #12]
 800d3e0:	e7e2      	b.n	800d3a8 <__smakebuf_r+0xc>
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	6020      	str	r0, [r4, #0]
 800d3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ea:	81a3      	strh	r3, [r4, #12]
 800d3ec:	9b01      	ldr	r3, [sp, #4]
 800d3ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d3f2:	b15b      	cbz	r3, 800d40c <__smakebuf_r+0x70>
 800d3f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3f8:	4630      	mov	r0, r6
 800d3fa:	f000 f81d 	bl	800d438 <_isatty_r>
 800d3fe:	b128      	cbz	r0, 800d40c <__smakebuf_r+0x70>
 800d400:	89a3      	ldrh	r3, [r4, #12]
 800d402:	f023 0303 	bic.w	r3, r3, #3
 800d406:	f043 0301 	orr.w	r3, r3, #1
 800d40a:	81a3      	strh	r3, [r4, #12]
 800d40c:	89a3      	ldrh	r3, [r4, #12]
 800d40e:	431d      	orrs	r5, r3
 800d410:	81a5      	strh	r5, [r4, #12]
 800d412:	e7cf      	b.n	800d3b4 <__smakebuf_r+0x18>

0800d414 <_fstat_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	4d07      	ldr	r5, [pc, #28]	@ (800d434 <_fstat_r+0x20>)
 800d418:	2300      	movs	r3, #0
 800d41a:	4604      	mov	r4, r0
 800d41c:	4608      	mov	r0, r1
 800d41e:	4611      	mov	r1, r2
 800d420:	602b      	str	r3, [r5, #0]
 800d422:	f7f4 ffe5 	bl	80023f0 <_fstat>
 800d426:	1c43      	adds	r3, r0, #1
 800d428:	d102      	bne.n	800d430 <_fstat_r+0x1c>
 800d42a:	682b      	ldr	r3, [r5, #0]
 800d42c:	b103      	cbz	r3, 800d430 <_fstat_r+0x1c>
 800d42e:	6023      	str	r3, [r4, #0]
 800d430:	bd38      	pop	{r3, r4, r5, pc}
 800d432:	bf00      	nop
 800d434:	24000c60 	.word	0x24000c60

0800d438 <_isatty_r>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	4d06      	ldr	r5, [pc, #24]	@ (800d454 <_isatty_r+0x1c>)
 800d43c:	2300      	movs	r3, #0
 800d43e:	4604      	mov	r4, r0
 800d440:	4608      	mov	r0, r1
 800d442:	602b      	str	r3, [r5, #0]
 800d444:	f7f4 ffe4 	bl	8002410 <_isatty>
 800d448:	1c43      	adds	r3, r0, #1
 800d44a:	d102      	bne.n	800d452 <_isatty_r+0x1a>
 800d44c:	682b      	ldr	r3, [r5, #0]
 800d44e:	b103      	cbz	r3, 800d452 <_isatty_r+0x1a>
 800d450:	6023      	str	r3, [r4, #0]
 800d452:	bd38      	pop	{r3, r4, r5, pc}
 800d454:	24000c60 	.word	0x24000c60

0800d458 <abort>:
 800d458:	b508      	push	{r3, lr}
 800d45a:	2006      	movs	r0, #6
 800d45c:	f000 f82c 	bl	800d4b8 <raise>
 800d460:	2001      	movs	r0, #1
 800d462:	f7f4 ff75 	bl	8002350 <_exit>

0800d466 <_raise_r>:
 800d466:	291f      	cmp	r1, #31
 800d468:	b538      	push	{r3, r4, r5, lr}
 800d46a:	4605      	mov	r5, r0
 800d46c:	460c      	mov	r4, r1
 800d46e:	d904      	bls.n	800d47a <_raise_r+0x14>
 800d470:	2316      	movs	r3, #22
 800d472:	6003      	str	r3, [r0, #0]
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	bd38      	pop	{r3, r4, r5, pc}
 800d47a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d47c:	b112      	cbz	r2, 800d484 <_raise_r+0x1e>
 800d47e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d482:	b94b      	cbnz	r3, 800d498 <_raise_r+0x32>
 800d484:	4628      	mov	r0, r5
 800d486:	f000 f831 	bl	800d4ec <_getpid_r>
 800d48a:	4622      	mov	r2, r4
 800d48c:	4601      	mov	r1, r0
 800d48e:	4628      	mov	r0, r5
 800d490:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d494:	f000 b818 	b.w	800d4c8 <_kill_r>
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d00a      	beq.n	800d4b2 <_raise_r+0x4c>
 800d49c:	1c59      	adds	r1, r3, #1
 800d49e:	d103      	bne.n	800d4a8 <_raise_r+0x42>
 800d4a0:	2316      	movs	r3, #22
 800d4a2:	6003      	str	r3, [r0, #0]
 800d4a4:	2001      	movs	r0, #1
 800d4a6:	e7e7      	b.n	800d478 <_raise_r+0x12>
 800d4a8:	2100      	movs	r1, #0
 800d4aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	4798      	blx	r3
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	e7e0      	b.n	800d478 <_raise_r+0x12>
	...

0800d4b8 <raise>:
 800d4b8:	4b02      	ldr	r3, [pc, #8]	@ (800d4c4 <raise+0xc>)
 800d4ba:	4601      	mov	r1, r0
 800d4bc:	6818      	ldr	r0, [r3, #0]
 800d4be:	f7ff bfd2 	b.w	800d466 <_raise_r>
 800d4c2:	bf00      	nop
 800d4c4:	24000024 	.word	0x24000024

0800d4c8 <_kill_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4d07      	ldr	r5, [pc, #28]	@ (800d4e8 <_kill_r+0x20>)
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	4604      	mov	r4, r0
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	4611      	mov	r1, r2
 800d4d4:	602b      	str	r3, [r5, #0]
 800d4d6:	f7f4 ff2b 	bl	8002330 <_kill>
 800d4da:	1c43      	adds	r3, r0, #1
 800d4dc:	d102      	bne.n	800d4e4 <_kill_r+0x1c>
 800d4de:	682b      	ldr	r3, [r5, #0]
 800d4e0:	b103      	cbz	r3, 800d4e4 <_kill_r+0x1c>
 800d4e2:	6023      	str	r3, [r4, #0]
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
 800d4e6:	bf00      	nop
 800d4e8:	24000c60 	.word	0x24000c60

0800d4ec <_getpid_r>:
 800d4ec:	f7f4 bf18 	b.w	8002320 <_getpid>

0800d4f0 <atan2f>:
 800d4f0:	f000 bada 	b.w	800daa8 <__ieee754_atan2f>

0800d4f4 <sqrtf>:
 800d4f4:	b508      	push	{r3, lr}
 800d4f6:	ed2d 8b02 	vpush	{d8}
 800d4fa:	eeb0 8a40 	vmov.f32	s16, s0
 800d4fe:	f000 f9f0 	bl	800d8e2 <__ieee754_sqrtf>
 800d502:	eeb4 8a48 	vcmp.f32	s16, s16
 800d506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d50a:	d60c      	bvs.n	800d526 <sqrtf+0x32>
 800d50c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d52c <sqrtf+0x38>
 800d510:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d518:	d505      	bpl.n	800d526 <sqrtf+0x32>
 800d51a:	f7fe f985 	bl	800b828 <__errno>
 800d51e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d522:	2321      	movs	r3, #33	@ 0x21
 800d524:	6003      	str	r3, [r0, #0]
 800d526:	ecbd 8b02 	vpop	{d8}
 800d52a:	bd08      	pop	{r3, pc}
 800d52c:	00000000 	.word	0x00000000

0800d530 <tanf>:
 800d530:	ee10 3a10 	vmov	r3, s0
 800d534:	b507      	push	{r0, r1, r2, lr}
 800d536:	4a12      	ldr	r2, [pc, #72]	@ (800d580 <tanf+0x50>)
 800d538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d807      	bhi.n	800d550 <tanf+0x20>
 800d540:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800d584 <tanf+0x54>
 800d544:	2001      	movs	r0, #1
 800d546:	b003      	add	sp, #12
 800d548:	f85d eb04 	ldr.w	lr, [sp], #4
 800d54c:	f000 b9cc 	b.w	800d8e8 <__kernel_tanf>
 800d550:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d554:	d304      	bcc.n	800d560 <tanf+0x30>
 800d556:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d55a:	b003      	add	sp, #12
 800d55c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d560:	4668      	mov	r0, sp
 800d562:	f000 fb3f 	bl	800dbe4 <__ieee754_rem_pio2f>
 800d566:	0040      	lsls	r0, r0, #1
 800d568:	f000 0002 	and.w	r0, r0, #2
 800d56c:	eddd 0a01 	vldr	s1, [sp, #4]
 800d570:	ed9d 0a00 	vldr	s0, [sp]
 800d574:	f1c0 0001 	rsb	r0, r0, #1
 800d578:	f000 f9b6 	bl	800d8e8 <__kernel_tanf>
 800d57c:	e7ed      	b.n	800d55a <tanf+0x2a>
 800d57e:	bf00      	nop
 800d580:	3f490fda 	.word	0x3f490fda
 800d584:	00000000 	.word	0x00000000

0800d588 <sinf_poly>:
 800d588:	07cb      	lsls	r3, r1, #31
 800d58a:	d412      	bmi.n	800d5b2 <sinf_poly+0x2a>
 800d58c:	ee21 5b00 	vmul.f64	d5, d1, d0
 800d590:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800d594:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800d598:	eea6 7b01 	vfma.f64	d7, d6, d1
 800d59c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800d5a0:	ee21 1b05 	vmul.f64	d1, d1, d5
 800d5a4:	eea6 0b05 	vfma.f64	d0, d6, d5
 800d5a8:	eea7 0b01 	vfma.f64	d0, d7, d1
 800d5ac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d5b0:	4770      	bx	lr
 800d5b2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800d5b6:	ee21 5b01 	vmul.f64	d5, d1, d1
 800d5ba:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800d5be:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800d5c2:	eea1 7b06 	vfma.f64	d7, d1, d6
 800d5c6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800d5ca:	eea1 0b06 	vfma.f64	d0, d1, d6
 800d5ce:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800d5d2:	ee21 1b05 	vmul.f64	d1, d1, d5
 800d5d6:	eea5 0b06 	vfma.f64	d0, d5, d6
 800d5da:	e7e5      	b.n	800d5a8 <sinf_poly+0x20>
 800d5dc:	0000      	movs	r0, r0
	...

0800d5e0 <sinf>:
 800d5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5e2:	ee10 4a10 	vmov	r4, s0
 800d5e6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d5ea:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800d5ee:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800d5f2:	eef0 7a40 	vmov.f32	s15, s0
 800d5f6:	d218      	bcs.n	800d62a <sinf+0x4a>
 800d5f8:	ee26 1b06 	vmul.f64	d1, d6, d6
 800d5fc:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800d600:	d20a      	bcs.n	800d618 <sinf+0x38>
 800d602:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800d606:	d103      	bne.n	800d610 <sinf+0x30>
 800d608:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800d60c:	ed8d 1a01 	vstr	s2, [sp, #4]
 800d610:	eeb0 0a67 	vmov.f32	s0, s15
 800d614:	b003      	add	sp, #12
 800d616:	bd30      	pop	{r4, r5, pc}
 800d618:	483b      	ldr	r0, [pc, #236]	@ (800d708 <sinf+0x128>)
 800d61a:	eeb0 0b46 	vmov.f64	d0, d6
 800d61e:	2100      	movs	r1, #0
 800d620:	b003      	add	sp, #12
 800d622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d626:	f7ff bfaf 	b.w	800d588 <sinf_poly>
 800d62a:	f240 422e 	movw	r2, #1070	@ 0x42e
 800d62e:	4293      	cmp	r3, r2
 800d630:	d824      	bhi.n	800d67c <sinf+0x9c>
 800d632:	4b35      	ldr	r3, [pc, #212]	@ (800d708 <sinf+0x128>)
 800d634:	ed93 7b08 	vldr	d7, [r3, #32]
 800d638:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d63c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d640:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800d644:	ee17 1a90 	vmov	r1, s15
 800d648:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800d64c:	1609      	asrs	r1, r1, #24
 800d64e:	ee07 1a90 	vmov	s15, r1
 800d652:	f001 0203 	and.w	r2, r1, #3
 800d656:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d65a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d65e:	ed92 0b00 	vldr	d0, [r2]
 800d662:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800d666:	f011 0f02 	tst.w	r1, #2
 800d66a:	eea5 6b47 	vfms.f64	d6, d5, d7
 800d66e:	bf08      	it	eq
 800d670:	4618      	moveq	r0, r3
 800d672:	ee26 1b06 	vmul.f64	d1, d6, d6
 800d676:	ee20 0b06 	vmul.f64	d0, d0, d6
 800d67a:	e7d1      	b.n	800d620 <sinf+0x40>
 800d67c:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800d680:	d237      	bcs.n	800d6f2 <sinf+0x112>
 800d682:	4922      	ldr	r1, [pc, #136]	@ (800d70c <sinf+0x12c>)
 800d684:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800d688:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800d68c:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800d690:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800d694:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d698:	6a10      	ldr	r0, [r2, #32]
 800d69a:	6912      	ldr	r2, [r2, #16]
 800d69c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d6a0:	40ab      	lsls	r3, r5
 800d6a2:	fba0 5003 	umull	r5, r0, r0, r3
 800d6a6:	4359      	muls	r1, r3
 800d6a8:	fbe3 0102 	umlal	r0, r1, r3, r2
 800d6ac:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800d6b0:	0f9d      	lsrs	r5, r3, #30
 800d6b2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d6b6:	1ac9      	subs	r1, r1, r3
 800d6b8:	f7f2 fff8 	bl	80006ac <__aeabi_l2d>
 800d6bc:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800d6c0:	4b11      	ldr	r3, [pc, #68]	@ (800d708 <sinf+0x128>)
 800d6c2:	f004 0203 	and.w	r2, r4, #3
 800d6c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d6ca:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 800d700 <sinf+0x120>
 800d6ce:	ed92 0b00 	vldr	d0, [r2]
 800d6d2:	ec41 0b17 	vmov	d7, r0, r1
 800d6d6:	f014 0f02 	tst.w	r4, #2
 800d6da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d6de:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	bf08      	it	eq
 800d6e6:	4618      	moveq	r0, r3
 800d6e8:	ee27 1b07 	vmul.f64	d1, d7, d7
 800d6ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d6f0:	e796      	b.n	800d620 <sinf+0x40>
 800d6f2:	b003      	add	sp, #12
 800d6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d6f8:	f000 b8e4 	b.w	800d8c4 <__math_invalidf>
 800d6fc:	f3af 8000 	nop.w
 800d700:	54442d18 	.word	0x54442d18
 800d704:	3c1921fb 	.word	0x3c1921fb
 800d708:	0800ea38 	.word	0x0800ea38
 800d70c:	0800e9d4 	.word	0x0800e9d4

0800d710 <sinf_poly>:
 800d710:	07cb      	lsls	r3, r1, #31
 800d712:	d412      	bmi.n	800d73a <sinf_poly+0x2a>
 800d714:	ee21 5b00 	vmul.f64	d5, d1, d0
 800d718:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800d71c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800d720:	eea6 7b01 	vfma.f64	d7, d6, d1
 800d724:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800d728:	ee21 1b05 	vmul.f64	d1, d1, d5
 800d72c:	eea6 0b05 	vfma.f64	d0, d6, d5
 800d730:	eea7 0b01 	vfma.f64	d0, d7, d1
 800d734:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d738:	4770      	bx	lr
 800d73a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800d73e:	ee21 5b01 	vmul.f64	d5, d1, d1
 800d742:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800d746:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800d74a:	eea1 7b06 	vfma.f64	d7, d1, d6
 800d74e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800d752:	eea1 0b06 	vfma.f64	d0, d1, d6
 800d756:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800d75a:	ee21 1b05 	vmul.f64	d1, d1, d5
 800d75e:	eea5 0b06 	vfma.f64	d0, d5, d6
 800d762:	e7e5      	b.n	800d730 <sinf_poly+0x20>
 800d764:	0000      	movs	r0, r0
	...

0800d768 <cosf>:
 800d768:	b538      	push	{r3, r4, r5, lr}
 800d76a:	ee10 4a10 	vmov	r4, s0
 800d76e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800d772:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800d776:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800d77a:	d21f      	bcs.n	800d7bc <cosf+0x54>
 800d77c:	ee27 7b07 	vmul.f64	d7, d7, d7
 800d780:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800d784:	f0c0 8082 	bcc.w	800d88c <cosf+0x124>
 800d788:	ee27 4b07 	vmul.f64	d4, d7, d7
 800d78c:	4b44      	ldr	r3, [pc, #272]	@ (800d8a0 <cosf+0x138>)
 800d78e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800d792:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800d796:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 800d79a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d79e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800d7a2:	eea7 0b05 	vfma.f64	d0, d7, d5
 800d7a6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 800d7aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d7ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 800d7b2:	eea6 0b07 	vfma.f64	d0, d6, d7
 800d7b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800d7ba:	bd38      	pop	{r3, r4, r5, pc}
 800d7bc:	f240 422e 	movw	r2, #1070	@ 0x42e
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d829      	bhi.n	800d818 <cosf+0xb0>
 800d7c4:	4b36      	ldr	r3, [pc, #216]	@ (800d8a0 <cosf+0x138>)
 800d7c6:	ed93 6b08 	vldr	d6, [r3, #32]
 800d7ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d7ce:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800d7d2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800d7d6:	ee16 1a90 	vmov	r1, s13
 800d7da:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800d7de:	1609      	asrs	r1, r1, #24
 800d7e0:	ee06 1a90 	vmov	s13, r1
 800d7e4:	f001 0203 	and.w	r2, r1, #3
 800d7e8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d7ec:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d7f0:	ed92 0b00 	vldr	d0, [r2]
 800d7f4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 800d7f8:	f011 0f02 	tst.w	r1, #2
 800d7fc:	f081 0101 	eor.w	r1, r1, #1
 800d800:	eea5 7b46 	vfms.f64	d7, d5, d6
 800d804:	bf08      	it	eq
 800d806:	4618      	moveq	r0, r3
 800d808:	ee27 1b07 	vmul.f64	d1, d7, d7
 800d80c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d810:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d814:	f7ff bf7c 	b.w	800d710 <sinf_poly>
 800d818:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800d81c:	d232      	bcs.n	800d884 <cosf+0x11c>
 800d81e:	4921      	ldr	r1, [pc, #132]	@ (800d8a4 <cosf+0x13c>)
 800d820:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800d824:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800d828:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800d82c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800d830:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d834:	6a10      	ldr	r0, [r2, #32]
 800d836:	6912      	ldr	r2, [r2, #16]
 800d838:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d83c:	40ab      	lsls	r3, r5
 800d83e:	fba0 5003 	umull	r5, r0, r0, r3
 800d842:	4359      	muls	r1, r3
 800d844:	fbe3 0102 	umlal	r0, r1, r3, r2
 800d848:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800d84c:	0f9d      	lsrs	r5, r3, #30
 800d84e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800d852:	1ac9      	subs	r1, r1, r3
 800d854:	f7f2 ff2a 	bl	80006ac <__aeabi_l2d>
 800d858:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800d85c:	4b10      	ldr	r3, [pc, #64]	@ (800d8a0 <cosf+0x138>)
 800d85e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800d898 <cosf+0x130>
 800d862:	ec41 0b17 	vmov	d7, r0, r1
 800d866:	f004 0203 	and.w	r2, r4, #3
 800d86a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d86e:	ed92 0b00 	vldr	d0, [r2]
 800d872:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d876:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800d87a:	f014 0f02 	tst.w	r4, #2
 800d87e:	f085 0101 	eor.w	r1, r5, #1
 800d882:	e7bf      	b.n	800d804 <cosf+0x9c>
 800d884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d888:	f000 b81c 	b.w	800d8c4 <__math_invalidf>
 800d88c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d890:	e793      	b.n	800d7ba <cosf+0x52>
 800d892:	bf00      	nop
 800d894:	f3af 8000 	nop.w
 800d898:	54442d18 	.word	0x54442d18
 800d89c:	3c1921fb 	.word	0x3c1921fb
 800d8a0:	0800ea38 	.word	0x0800ea38
 800d8a4:	0800e9d4 	.word	0x0800e9d4

0800d8a8 <with_errnof>:
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	ed2d 8b02 	vpush	{d8}
 800d8ae:	eeb0 8a40 	vmov.f32	s16, s0
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	f7fd ffb8 	bl	800b828 <__errno>
 800d8b8:	eeb0 0a48 	vmov.f32	s0, s16
 800d8bc:	ecbd 8b02 	vpop	{d8}
 800d8c0:	6004      	str	r4, [r0, #0]
 800d8c2:	bd10      	pop	{r4, pc}

0800d8c4 <__math_invalidf>:
 800d8c4:	eef0 7a40 	vmov.f32	s15, s0
 800d8c8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800d8cc:	eef4 7a67 	vcmp.f32	s15, s15
 800d8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800d8d8:	d602      	bvs.n	800d8e0 <__math_invalidf+0x1c>
 800d8da:	2021      	movs	r0, #33	@ 0x21
 800d8dc:	f7ff bfe4 	b.w	800d8a8 <with_errnof>
 800d8e0:	4770      	bx	lr

0800d8e2 <__ieee754_sqrtf>:
 800d8e2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d8e6:	4770      	bx	lr

0800d8e8 <__kernel_tanf>:
 800d8e8:	b508      	push	{r3, lr}
 800d8ea:	ee10 3a10 	vmov	r3, s0
 800d8ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d8f2:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 800d8f6:	eef0 7a40 	vmov.f32	s15, s0
 800d8fa:	d217      	bcs.n	800d92c <__kernel_tanf+0x44>
 800d8fc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800d900:	ee17 1a10 	vmov	r1, s14
 800d904:	bb41      	cbnz	r1, 800d958 <__kernel_tanf+0x70>
 800d906:	1c43      	adds	r3, r0, #1
 800d908:	4313      	orrs	r3, r2
 800d90a:	d108      	bne.n	800d91e <__kernel_tanf+0x36>
 800d90c:	f000 fb6e 	bl	800dfec <fabsf>
 800d910:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d914:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d918:	eeb0 0a67 	vmov.f32	s0, s15
 800d91c:	bd08      	pop	{r3, pc}
 800d91e:	2801      	cmp	r0, #1
 800d920:	d0fa      	beq.n	800d918 <__kernel_tanf+0x30>
 800d922:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d926:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d92a:	e7f5      	b.n	800d918 <__kernel_tanf+0x30>
 800d92c:	494c      	ldr	r1, [pc, #304]	@ (800da60 <__kernel_tanf+0x178>)
 800d92e:	428a      	cmp	r2, r1
 800d930:	d312      	bcc.n	800d958 <__kernel_tanf+0x70>
 800d932:	2b00      	cmp	r3, #0
 800d934:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800da64 <__kernel_tanf+0x17c>
 800d938:	bfb8      	it	lt
 800d93a:	eef1 7a40 	vneglt.f32	s15, s0
 800d93e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d942:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800da68 <__kernel_tanf+0x180>
 800d946:	bfb8      	it	lt
 800d948:	eef1 0a60 	vneglt.f32	s1, s1
 800d94c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d950:	eddf 0a46 	vldr	s1, [pc, #280]	@ 800da6c <__kernel_tanf+0x184>
 800d954:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d958:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800d95c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800da70 <__kernel_tanf+0x188>
 800d960:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 800da74 <__kernel_tanf+0x18c>
 800d964:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 800da78 <__kernel_tanf+0x190>
 800d968:	493d      	ldr	r1, [pc, #244]	@ (800da60 <__kernel_tanf+0x178>)
 800d96a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d96e:	428a      	cmp	r2, r1
 800d970:	eea7 6a25 	vfma.f32	s12, s14, s11
 800d974:	eddf 5a41 	vldr	s11, [pc, #260]	@ 800da7c <__kernel_tanf+0x194>
 800d978:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d97c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 800da80 <__kernel_tanf+0x198>
 800d980:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d984:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800da84 <__kernel_tanf+0x19c>
 800d988:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d98c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 800da88 <__kernel_tanf+0x1a0>
 800d990:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d994:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800da8c <__kernel_tanf+0x1a4>
 800d998:	eee7 5a05 	vfma.f32	s11, s14, s10
 800d99c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800da90 <__kernel_tanf+0x1a8>
 800d9a0:	eea5 5a87 	vfma.f32	s10, s11, s14
 800d9a4:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800da94 <__kernel_tanf+0x1ac>
 800d9a8:	eee5 5a07 	vfma.f32	s11, s10, s14
 800d9ac:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800da98 <__kernel_tanf+0x1b0>
 800d9b0:	eea5 5a87 	vfma.f32	s10, s11, s14
 800d9b4:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800da9c <__kernel_tanf+0x1b4>
 800d9b8:	eee5 5a07 	vfma.f32	s11, s10, s14
 800d9bc:	eeb0 7a46 	vmov.f32	s14, s12
 800d9c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d9c4:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800d9c8:	eeb0 6a60 	vmov.f32	s12, s1
 800d9cc:	eea7 6a05 	vfma.f32	s12, s14, s10
 800d9d0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800daa0 <__kernel_tanf+0x1b8>
 800d9d4:	eee6 0a26 	vfma.f32	s1, s12, s13
 800d9d8:	eee5 0a07 	vfma.f32	s1, s10, s14
 800d9dc:	ee37 6aa0 	vadd.f32	s12, s15, s1
 800d9e0:	d31d      	bcc.n	800da1e <__kernel_tanf+0x136>
 800d9e2:	ee07 0a10 	vmov	s14, r0
 800d9e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d9ea:	ee26 5a06 	vmul.f32	s10, s12, s12
 800d9ee:	ee36 6a07 	vadd.f32	s12, s12, s14
 800d9f2:	179b      	asrs	r3, r3, #30
 800d9f4:	eec5 5a06 	vdiv.f32	s11, s10, s12
 800d9f8:	f003 0302 	and.w	r3, r3, #2
 800d9fc:	f1c3 0301 	rsb	r3, r3, #1
 800da00:	ee06 3a90 	vmov	s13, r3
 800da04:	ee35 6ae0 	vsub.f32	s12, s11, s1
 800da08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800da0c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800da10:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800da14:	eea7 7ac6 	vfms.f32	s14, s15, s12
 800da18:	ee66 7a87 	vmul.f32	s15, s13, s14
 800da1c:	e77c      	b.n	800d918 <__kernel_tanf+0x30>
 800da1e:	2801      	cmp	r0, #1
 800da20:	d01b      	beq.n	800da5a <__kernel_tanf+0x172>
 800da22:	4b20      	ldr	r3, [pc, #128]	@ (800daa4 <__kernel_tanf+0x1bc>)
 800da24:	ee16 2a10 	vmov	r2, s12
 800da28:	401a      	ands	r2, r3
 800da2a:	ee05 2a90 	vmov	s11, r2
 800da2e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800da32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da36:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800da3a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800da3e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800da42:	ee16 2a90 	vmov	r2, s13
 800da46:	4013      	ands	r3, r2
 800da48:	ee07 3a90 	vmov	s15, r3
 800da4c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800da50:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800da54:	eee7 7a26 	vfma.f32	s15, s14, s13
 800da58:	e75e      	b.n	800d918 <__kernel_tanf+0x30>
 800da5a:	eef0 7a46 	vmov.f32	s15, s12
 800da5e:	e75b      	b.n	800d918 <__kernel_tanf+0x30>
 800da60:	3f2ca140 	.word	0x3f2ca140
 800da64:	3f490fda 	.word	0x3f490fda
 800da68:	33222168 	.word	0x33222168
 800da6c:	00000000 	.word	0x00000000
 800da70:	b79bae5f 	.word	0xb79bae5f
 800da74:	38a3f445 	.word	0x38a3f445
 800da78:	37d95384 	.word	0x37d95384
 800da7c:	3a1a26c8 	.word	0x3a1a26c8
 800da80:	3b6b6916 	.word	0x3b6b6916
 800da84:	3cb327a4 	.word	0x3cb327a4
 800da88:	3e088889 	.word	0x3e088889
 800da8c:	3895c07a 	.word	0x3895c07a
 800da90:	398137b9 	.word	0x398137b9
 800da94:	3abede48 	.word	0x3abede48
 800da98:	3c11371f 	.word	0x3c11371f
 800da9c:	3d5d0dd1 	.word	0x3d5d0dd1
 800daa0:	3eaaaaab 	.word	0x3eaaaaab
 800daa4:	fffff000 	.word	0xfffff000

0800daa8 <__ieee754_atan2f>:
 800daa8:	ee10 2a90 	vmov	r2, s1
 800daac:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800dab0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800dab4:	b510      	push	{r4, lr}
 800dab6:	eef0 7a40 	vmov.f32	s15, s0
 800daba:	d806      	bhi.n	800daca <__ieee754_atan2f+0x22>
 800dabc:	ee10 0a10 	vmov	r0, s0
 800dac0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800dac4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800dac8:	d904      	bls.n	800dad4 <__ieee754_atan2f+0x2c>
 800daca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800dace:	eeb0 0a67 	vmov.f32	s0, s15
 800dad2:	bd10      	pop	{r4, pc}
 800dad4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800dad8:	d103      	bne.n	800dae2 <__ieee754_atan2f+0x3a>
 800dada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dade:	f000 b9b1 	b.w	800de44 <atanf>
 800dae2:	1794      	asrs	r4, r2, #30
 800dae4:	f004 0402 	and.w	r4, r4, #2
 800dae8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800daec:	b93b      	cbnz	r3, 800dafe <__ieee754_atan2f+0x56>
 800daee:	2c02      	cmp	r4, #2
 800daf0:	d05c      	beq.n	800dbac <__ieee754_atan2f+0x104>
 800daf2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800dbc0 <__ieee754_atan2f+0x118>
 800daf6:	2c03      	cmp	r4, #3
 800daf8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800dafc:	e7e7      	b.n	800dace <__ieee754_atan2f+0x26>
 800dafe:	b939      	cbnz	r1, 800db10 <__ieee754_atan2f+0x68>
 800db00:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800dbc4 <__ieee754_atan2f+0x11c>
 800db04:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800dbc8 <__ieee754_atan2f+0x120>
 800db08:	2800      	cmp	r0, #0
 800db0a:	fe67 7a27 	vselge.f32	s15, s14, s15
 800db0e:	e7de      	b.n	800dace <__ieee754_atan2f+0x26>
 800db10:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800db14:	d110      	bne.n	800db38 <__ieee754_atan2f+0x90>
 800db16:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800db1a:	f104 34ff 	add.w	r4, r4, #4294967295
 800db1e:	d107      	bne.n	800db30 <__ieee754_atan2f+0x88>
 800db20:	2c02      	cmp	r4, #2
 800db22:	d846      	bhi.n	800dbb2 <__ieee754_atan2f+0x10a>
 800db24:	4b29      	ldr	r3, [pc, #164]	@ (800dbcc <__ieee754_atan2f+0x124>)
 800db26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800db2a:	edd3 7a00 	vldr	s15, [r3]
 800db2e:	e7ce      	b.n	800dace <__ieee754_atan2f+0x26>
 800db30:	2c02      	cmp	r4, #2
 800db32:	d841      	bhi.n	800dbb8 <__ieee754_atan2f+0x110>
 800db34:	4b26      	ldr	r3, [pc, #152]	@ (800dbd0 <__ieee754_atan2f+0x128>)
 800db36:	e7f6      	b.n	800db26 <__ieee754_atan2f+0x7e>
 800db38:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800db3c:	d0e0      	beq.n	800db00 <__ieee754_atan2f+0x58>
 800db3e:	1a5b      	subs	r3, r3, r1
 800db40:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800db44:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800db48:	da1a      	bge.n	800db80 <__ieee754_atan2f+0xd8>
 800db4a:	2a00      	cmp	r2, #0
 800db4c:	da01      	bge.n	800db52 <__ieee754_atan2f+0xaa>
 800db4e:	313c      	adds	r1, #60	@ 0x3c
 800db50:	db19      	blt.n	800db86 <__ieee754_atan2f+0xde>
 800db52:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800db56:	f000 fa49 	bl	800dfec <fabsf>
 800db5a:	f000 f973 	bl	800de44 <atanf>
 800db5e:	eef0 7a40 	vmov.f32	s15, s0
 800db62:	2c01      	cmp	r4, #1
 800db64:	d012      	beq.n	800db8c <__ieee754_atan2f+0xe4>
 800db66:	2c02      	cmp	r4, #2
 800db68:	d017      	beq.n	800db9a <__ieee754_atan2f+0xf2>
 800db6a:	2c00      	cmp	r4, #0
 800db6c:	d0af      	beq.n	800dace <__ieee754_atan2f+0x26>
 800db6e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800dbd4 <__ieee754_atan2f+0x12c>
 800db72:	ee77 7a87 	vadd.f32	s15, s15, s14
 800db76:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800dbd8 <__ieee754_atan2f+0x130>
 800db7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800db7e:	e7a6      	b.n	800dace <__ieee754_atan2f+0x26>
 800db80:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800dbc8 <__ieee754_atan2f+0x120>
 800db84:	e7ed      	b.n	800db62 <__ieee754_atan2f+0xba>
 800db86:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800dbdc <__ieee754_atan2f+0x134>
 800db8a:	e7ea      	b.n	800db62 <__ieee754_atan2f+0xba>
 800db8c:	ee17 3a90 	vmov	r3, s15
 800db90:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800db94:	ee07 3a90 	vmov	s15, r3
 800db98:	e799      	b.n	800dace <__ieee754_atan2f+0x26>
 800db9a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800dbd4 <__ieee754_atan2f+0x12c>
 800db9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dba2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800dbd8 <__ieee754_atan2f+0x130>
 800dba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dbaa:	e790      	b.n	800dace <__ieee754_atan2f+0x26>
 800dbac:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800dbd8 <__ieee754_atan2f+0x130>
 800dbb0:	e78d      	b.n	800dace <__ieee754_atan2f+0x26>
 800dbb2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800dbe0 <__ieee754_atan2f+0x138>
 800dbb6:	e78a      	b.n	800dace <__ieee754_atan2f+0x26>
 800dbb8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800dbdc <__ieee754_atan2f+0x134>
 800dbbc:	e787      	b.n	800dace <__ieee754_atan2f+0x26>
 800dbbe:	bf00      	nop
 800dbc0:	c0490fdb 	.word	0xc0490fdb
 800dbc4:	bfc90fdb 	.word	0xbfc90fdb
 800dbc8:	3fc90fdb 	.word	0x3fc90fdb
 800dbcc:	0800eb24 	.word	0x0800eb24
 800dbd0:	0800eb18 	.word	0x0800eb18
 800dbd4:	33bbbd2e 	.word	0x33bbbd2e
 800dbd8:	40490fdb 	.word	0x40490fdb
 800dbdc:	00000000 	.word	0x00000000
 800dbe0:	3f490fdb 	.word	0x3f490fdb

0800dbe4 <__ieee754_rem_pio2f>:
 800dbe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbe6:	ee10 6a10 	vmov	r6, s0
 800dbea:	4b88      	ldr	r3, [pc, #544]	@ (800de0c <__ieee754_rem_pio2f+0x228>)
 800dbec:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800dbf0:	429d      	cmp	r5, r3
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	d805      	bhi.n	800dc04 <__ieee754_rem_pio2f+0x20>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	ed80 0a00 	vstr	s0, [r0]
 800dbfe:	6043      	str	r3, [r0, #4]
 800dc00:	2000      	movs	r0, #0
 800dc02:	e022      	b.n	800dc4a <__ieee754_rem_pio2f+0x66>
 800dc04:	4b82      	ldr	r3, [pc, #520]	@ (800de10 <__ieee754_rem_pio2f+0x22c>)
 800dc06:	429d      	cmp	r5, r3
 800dc08:	d83a      	bhi.n	800dc80 <__ieee754_rem_pio2f+0x9c>
 800dc0a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800dc0e:	2e00      	cmp	r6, #0
 800dc10:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800de14 <__ieee754_rem_pio2f+0x230>
 800dc14:	4a80      	ldr	r2, [pc, #512]	@ (800de18 <__ieee754_rem_pio2f+0x234>)
 800dc16:	f023 030f 	bic.w	r3, r3, #15
 800dc1a:	dd18      	ble.n	800dc4e <__ieee754_rem_pio2f+0x6a>
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800dc22:	bf09      	itett	eq
 800dc24:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800de1c <__ieee754_rem_pio2f+0x238>
 800dc28:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800de20 <__ieee754_rem_pio2f+0x23c>
 800dc2c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800de24 <__ieee754_rem_pio2f+0x240>
 800dc30:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800dc34:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800dc38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc3c:	ed80 7a00 	vstr	s14, [r0]
 800dc40:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dc44:	edc0 7a01 	vstr	s15, [r0, #4]
 800dc48:	2001      	movs	r0, #1
 800dc4a:	b007      	add	sp, #28
 800dc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	ee70 7a07 	vadd.f32	s15, s0, s14
 800dc54:	bf09      	itett	eq
 800dc56:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800de1c <__ieee754_rem_pio2f+0x238>
 800dc5a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800de20 <__ieee754_rem_pio2f+0x23c>
 800dc5e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800de24 <__ieee754_rem_pio2f+0x240>
 800dc62:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800dc66:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dc6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc6e:	ed80 7a00 	vstr	s14, [r0]
 800dc72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc76:	edc0 7a01 	vstr	s15, [r0, #4]
 800dc7a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc7e:	e7e4      	b.n	800dc4a <__ieee754_rem_pio2f+0x66>
 800dc80:	4b69      	ldr	r3, [pc, #420]	@ (800de28 <__ieee754_rem_pio2f+0x244>)
 800dc82:	429d      	cmp	r5, r3
 800dc84:	d873      	bhi.n	800dd6e <__ieee754_rem_pio2f+0x18a>
 800dc86:	f000 f9b1 	bl	800dfec <fabsf>
 800dc8a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800de2c <__ieee754_rem_pio2f+0x248>
 800dc8e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dc92:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dc96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dc9e:	ee17 0a90 	vmov	r0, s15
 800dca2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800de14 <__ieee754_rem_pio2f+0x230>
 800dca6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800dcaa:	281f      	cmp	r0, #31
 800dcac:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800de20 <__ieee754_rem_pio2f+0x23c>
 800dcb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcb4:	eeb1 6a47 	vneg.f32	s12, s14
 800dcb8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dcbc:	ee16 1a90 	vmov	r1, s13
 800dcc0:	dc09      	bgt.n	800dcd6 <__ieee754_rem_pio2f+0xf2>
 800dcc2:	4a5b      	ldr	r2, [pc, #364]	@ (800de30 <__ieee754_rem_pio2f+0x24c>)
 800dcc4:	1e47      	subs	r7, r0, #1
 800dcc6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800dcca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800dcce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d107      	bne.n	800dce6 <__ieee754_rem_pio2f+0x102>
 800dcd6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800dcda:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800dcde:	2a08      	cmp	r2, #8
 800dce0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800dce4:	dc14      	bgt.n	800dd10 <__ieee754_rem_pio2f+0x12c>
 800dce6:	6021      	str	r1, [r4, #0]
 800dce8:	ed94 7a00 	vldr	s14, [r4]
 800dcec:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dcf0:	2e00      	cmp	r6, #0
 800dcf2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dcf6:	ed84 0a01 	vstr	s0, [r4, #4]
 800dcfa:	daa6      	bge.n	800dc4a <__ieee754_rem_pio2f+0x66>
 800dcfc:	eeb1 7a47 	vneg.f32	s14, s14
 800dd00:	eeb1 0a40 	vneg.f32	s0, s0
 800dd04:	ed84 7a00 	vstr	s14, [r4]
 800dd08:	ed84 0a01 	vstr	s0, [r4, #4]
 800dd0c:	4240      	negs	r0, r0
 800dd0e:	e79c      	b.n	800dc4a <__ieee754_rem_pio2f+0x66>
 800dd10:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800de1c <__ieee754_rem_pio2f+0x238>
 800dd14:	eef0 6a40 	vmov.f32	s13, s0
 800dd18:	eee6 6a25 	vfma.f32	s13, s12, s11
 800dd1c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800dd20:	eee6 7a25 	vfma.f32	s15, s12, s11
 800dd24:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800de24 <__ieee754_rem_pio2f+0x240>
 800dd28:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800dd2c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800dd30:	ee15 2a90 	vmov	r2, s11
 800dd34:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800dd38:	1a5b      	subs	r3, r3, r1
 800dd3a:	2b19      	cmp	r3, #25
 800dd3c:	dc04      	bgt.n	800dd48 <__ieee754_rem_pio2f+0x164>
 800dd3e:	edc4 5a00 	vstr	s11, [r4]
 800dd42:	eeb0 0a66 	vmov.f32	s0, s13
 800dd46:	e7cf      	b.n	800dce8 <__ieee754_rem_pio2f+0x104>
 800dd48:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800de34 <__ieee754_rem_pio2f+0x250>
 800dd4c:	eeb0 0a66 	vmov.f32	s0, s13
 800dd50:	eea6 0a25 	vfma.f32	s0, s12, s11
 800dd54:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800dd58:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800de38 <__ieee754_rem_pio2f+0x254>
 800dd5c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800dd60:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800dd64:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dd68:	ed84 7a00 	vstr	s14, [r4]
 800dd6c:	e7bc      	b.n	800dce8 <__ieee754_rem_pio2f+0x104>
 800dd6e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800dd72:	d306      	bcc.n	800dd82 <__ieee754_rem_pio2f+0x19e>
 800dd74:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dd78:	edc0 7a01 	vstr	s15, [r0, #4]
 800dd7c:	edc0 7a00 	vstr	s15, [r0]
 800dd80:	e73e      	b.n	800dc00 <__ieee754_rem_pio2f+0x1c>
 800dd82:	15ea      	asrs	r2, r5, #23
 800dd84:	3a86      	subs	r2, #134	@ 0x86
 800dd86:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800dd8a:	ee07 3a90 	vmov	s15, r3
 800dd8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800dd92:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800de3c <__ieee754_rem_pio2f+0x258>
 800dd96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dd9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd9e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800dda2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dda6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ddaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ddae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ddb2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ddb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ddba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ddbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc2:	edcd 7a05 	vstr	s15, [sp, #20]
 800ddc6:	d11e      	bne.n	800de06 <__ieee754_rem_pio2f+0x222>
 800ddc8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ddcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd0:	bf0c      	ite	eq
 800ddd2:	2301      	moveq	r3, #1
 800ddd4:	2302      	movne	r3, #2
 800ddd6:	491a      	ldr	r1, [pc, #104]	@ (800de40 <__ieee754_rem_pio2f+0x25c>)
 800ddd8:	9101      	str	r1, [sp, #4]
 800ddda:	2102      	movs	r1, #2
 800dddc:	9100      	str	r1, [sp, #0]
 800ddde:	a803      	add	r0, sp, #12
 800dde0:	4621      	mov	r1, r4
 800dde2:	f000 f90b 	bl	800dffc <__kernel_rem_pio2f>
 800dde6:	2e00      	cmp	r6, #0
 800dde8:	f6bf af2f 	bge.w	800dc4a <__ieee754_rem_pio2f+0x66>
 800ddec:	edd4 7a00 	vldr	s15, [r4]
 800ddf0:	eef1 7a67 	vneg.f32	s15, s15
 800ddf4:	edc4 7a00 	vstr	s15, [r4]
 800ddf8:	edd4 7a01 	vldr	s15, [r4, #4]
 800ddfc:	eef1 7a67 	vneg.f32	s15, s15
 800de00:	edc4 7a01 	vstr	s15, [r4, #4]
 800de04:	e782      	b.n	800dd0c <__ieee754_rem_pio2f+0x128>
 800de06:	2303      	movs	r3, #3
 800de08:	e7e5      	b.n	800ddd6 <__ieee754_rem_pio2f+0x1f2>
 800de0a:	bf00      	nop
 800de0c:	3f490fd8 	.word	0x3f490fd8
 800de10:	4016cbe3 	.word	0x4016cbe3
 800de14:	3fc90f80 	.word	0x3fc90f80
 800de18:	3fc90fd0 	.word	0x3fc90fd0
 800de1c:	37354400 	.word	0x37354400
 800de20:	37354443 	.word	0x37354443
 800de24:	2e85a308 	.word	0x2e85a308
 800de28:	43490f80 	.word	0x43490f80
 800de2c:	3f22f984 	.word	0x3f22f984
 800de30:	0800eb30 	.word	0x0800eb30
 800de34:	2e85a300 	.word	0x2e85a300
 800de38:	248d3132 	.word	0x248d3132
 800de3c:	43800000 	.word	0x43800000
 800de40:	0800ebb0 	.word	0x0800ebb0

0800de44 <atanf>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	ee10 5a10 	vmov	r5, s0
 800de4a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800de4e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800de52:	eef0 7a40 	vmov.f32	s15, s0
 800de56:	d30f      	bcc.n	800de78 <atanf+0x34>
 800de58:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800de5c:	d904      	bls.n	800de68 <atanf+0x24>
 800de5e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800de62:	eeb0 0a67 	vmov.f32	s0, s15
 800de66:	bd38      	pop	{r3, r4, r5, pc}
 800de68:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800dfa0 <atanf+0x15c>
 800de6c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800dfa4 <atanf+0x160>
 800de70:	2d00      	cmp	r5, #0
 800de72:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800de76:	e7f4      	b.n	800de62 <atanf+0x1e>
 800de78:	4b4b      	ldr	r3, [pc, #300]	@ (800dfa8 <atanf+0x164>)
 800de7a:	429c      	cmp	r4, r3
 800de7c:	d810      	bhi.n	800dea0 <atanf+0x5c>
 800de7e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800de82:	d20a      	bcs.n	800de9a <atanf+0x56>
 800de84:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800dfac <atanf+0x168>
 800de88:	ee30 7a07 	vadd.f32	s14, s0, s14
 800de8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de90:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800de94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de98:	dce3      	bgt.n	800de62 <atanf+0x1e>
 800de9a:	f04f 33ff 	mov.w	r3, #4294967295
 800de9e:	e013      	b.n	800dec8 <atanf+0x84>
 800dea0:	f000 f8a4 	bl	800dfec <fabsf>
 800dea4:	4b42      	ldr	r3, [pc, #264]	@ (800dfb0 <atanf+0x16c>)
 800dea6:	429c      	cmp	r4, r3
 800dea8:	d84f      	bhi.n	800df4a <atanf+0x106>
 800deaa:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800deae:	429c      	cmp	r4, r3
 800deb0:	d841      	bhi.n	800df36 <atanf+0xf2>
 800deb2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800deb6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800deba:	eea0 7a27 	vfma.f32	s14, s0, s15
 800debe:	2300      	movs	r3, #0
 800dec0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dec4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dec8:	1c5a      	adds	r2, r3, #1
 800deca:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800dece:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800dfb4 <atanf+0x170>
 800ded2:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800dfb8 <atanf+0x174>
 800ded6:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800dfbc <atanf+0x178>
 800deda:	ee66 6a06 	vmul.f32	s13, s12, s12
 800dede:	eee6 5a87 	vfma.f32	s11, s13, s14
 800dee2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800dfc0 <atanf+0x17c>
 800dee6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800deea:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800dfc4 <atanf+0x180>
 800deee:	eee7 5a26 	vfma.f32	s11, s14, s13
 800def2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800dfc8 <atanf+0x184>
 800def6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800defa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dfcc <atanf+0x188>
 800defe:	eee7 5a26 	vfma.f32	s11, s14, s13
 800df02:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800dfd0 <atanf+0x18c>
 800df06:	eea6 5a87 	vfma.f32	s10, s13, s14
 800df0a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800dfd4 <atanf+0x190>
 800df0e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800df12:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800dfd8 <atanf+0x194>
 800df16:	eea7 5a26 	vfma.f32	s10, s14, s13
 800df1a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800dfdc <atanf+0x198>
 800df1e:	eea5 7a26 	vfma.f32	s14, s10, s13
 800df22:	ee27 7a26 	vmul.f32	s14, s14, s13
 800df26:	eea5 7a86 	vfma.f32	s14, s11, s12
 800df2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800df2e:	d121      	bne.n	800df74 <atanf+0x130>
 800df30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df34:	e795      	b.n	800de62 <atanf+0x1e>
 800df36:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800df3a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800df3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800df42:	2301      	movs	r3, #1
 800df44:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800df48:	e7be      	b.n	800dec8 <atanf+0x84>
 800df4a:	4b25      	ldr	r3, [pc, #148]	@ (800dfe0 <atanf+0x19c>)
 800df4c:	429c      	cmp	r4, r3
 800df4e:	d80b      	bhi.n	800df68 <atanf+0x124>
 800df50:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800df54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df58:	eea0 7a27 	vfma.f32	s14, s0, s15
 800df5c:	2302      	movs	r3, #2
 800df5e:	ee70 6a67 	vsub.f32	s13, s0, s15
 800df62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df66:	e7af      	b.n	800dec8 <atanf+0x84>
 800df68:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800df6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800df70:	2303      	movs	r3, #3
 800df72:	e7a9      	b.n	800dec8 <atanf+0x84>
 800df74:	4a1b      	ldr	r2, [pc, #108]	@ (800dfe4 <atanf+0x1a0>)
 800df76:	491c      	ldr	r1, [pc, #112]	@ (800dfe8 <atanf+0x1a4>)
 800df78:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800df7c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800df80:	edd3 6a00 	vldr	s13, [r3]
 800df84:	ee37 7a66 	vsub.f32	s14, s14, s13
 800df88:	2d00      	cmp	r5, #0
 800df8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df8e:	edd2 7a00 	vldr	s15, [r2]
 800df92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df96:	bfb8      	it	lt
 800df98:	eef1 7a67 	vneglt.f32	s15, s15
 800df9c:	e761      	b.n	800de62 <atanf+0x1e>
 800df9e:	bf00      	nop
 800dfa0:	bfc90fdb 	.word	0xbfc90fdb
 800dfa4:	3fc90fdb 	.word	0x3fc90fdb
 800dfa8:	3edfffff 	.word	0x3edfffff
 800dfac:	7149f2ca 	.word	0x7149f2ca
 800dfb0:	3f97ffff 	.word	0x3f97ffff
 800dfb4:	3c8569d7 	.word	0x3c8569d7
 800dfb8:	3d4bda59 	.word	0x3d4bda59
 800dfbc:	bd6ef16b 	.word	0xbd6ef16b
 800dfc0:	3d886b35 	.word	0x3d886b35
 800dfc4:	3dba2e6e 	.word	0x3dba2e6e
 800dfc8:	3e124925 	.word	0x3e124925
 800dfcc:	3eaaaaab 	.word	0x3eaaaaab
 800dfd0:	bd15a221 	.word	0xbd15a221
 800dfd4:	bd9d8795 	.word	0xbd9d8795
 800dfd8:	bde38e38 	.word	0xbde38e38
 800dfdc:	be4ccccd 	.word	0xbe4ccccd
 800dfe0:	401bffff 	.word	0x401bffff
 800dfe4:	0800eed8 	.word	0x0800eed8
 800dfe8:	0800eec8 	.word	0x0800eec8

0800dfec <fabsf>:
 800dfec:	ee10 3a10 	vmov	r3, s0
 800dff0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dff4:	ee00 3a10 	vmov	s0, r3
 800dff8:	4770      	bx	lr
	...

0800dffc <__kernel_rem_pio2f>:
 800dffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e000:	ed2d 8b04 	vpush	{d8-d9}
 800e004:	b0d9      	sub	sp, #356	@ 0x164
 800e006:	4690      	mov	r8, r2
 800e008:	9001      	str	r0, [sp, #4]
 800e00a:	4ab6      	ldr	r2, [pc, #728]	@ (800e2e4 <__kernel_rem_pio2f+0x2e8>)
 800e00c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800e00e:	f118 0f04 	cmn.w	r8, #4
 800e012:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800e016:	460f      	mov	r7, r1
 800e018:	f103 3bff 	add.w	fp, r3, #4294967295
 800e01c:	db26      	blt.n	800e06c <__kernel_rem_pio2f+0x70>
 800e01e:	f1b8 0203 	subs.w	r2, r8, #3
 800e022:	bf48      	it	mi
 800e024:	f108 0204 	addmi.w	r2, r8, #4
 800e028:	10d2      	asrs	r2, r2, #3
 800e02a:	1c55      	adds	r5, r2, #1
 800e02c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e02e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800e2f4 <__kernel_rem_pio2f+0x2f8>
 800e032:	00e8      	lsls	r0, r5, #3
 800e034:	eba2 060b 	sub.w	r6, r2, fp
 800e038:	9002      	str	r0, [sp, #8]
 800e03a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800e03e:	eb0a 0c0b 	add.w	ip, sl, fp
 800e042:	ac1c      	add	r4, sp, #112	@ 0x70
 800e044:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800e048:	2000      	movs	r0, #0
 800e04a:	4560      	cmp	r0, ip
 800e04c:	dd10      	ble.n	800e070 <__kernel_rem_pio2f+0x74>
 800e04e:	a91c      	add	r1, sp, #112	@ 0x70
 800e050:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800e054:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800e058:	2600      	movs	r6, #0
 800e05a:	4556      	cmp	r6, sl
 800e05c:	dc24      	bgt.n	800e0a8 <__kernel_rem_pio2f+0xac>
 800e05e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e062:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800e2f4 <__kernel_rem_pio2f+0x2f8>
 800e066:	4684      	mov	ip, r0
 800e068:	2400      	movs	r4, #0
 800e06a:	e016      	b.n	800e09a <__kernel_rem_pio2f+0x9e>
 800e06c:	2200      	movs	r2, #0
 800e06e:	e7dc      	b.n	800e02a <__kernel_rem_pio2f+0x2e>
 800e070:	42c6      	cmn	r6, r0
 800e072:	bf5d      	ittte	pl
 800e074:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800e078:	ee07 1a90 	vmovpl	s15, r1
 800e07c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e080:	eef0 7a47 	vmovmi.f32	s15, s14
 800e084:	ece4 7a01 	vstmia	r4!, {s15}
 800e088:	3001      	adds	r0, #1
 800e08a:	e7de      	b.n	800e04a <__kernel_rem_pio2f+0x4e>
 800e08c:	ecfe 6a01 	vldmia	lr!, {s13}
 800e090:	ed3c 7a01 	vldmdb	ip!, {s14}
 800e094:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e098:	3401      	adds	r4, #1
 800e09a:	455c      	cmp	r4, fp
 800e09c:	ddf6      	ble.n	800e08c <__kernel_rem_pio2f+0x90>
 800e09e:	ece9 7a01 	vstmia	r9!, {s15}
 800e0a2:	3601      	adds	r6, #1
 800e0a4:	3004      	adds	r0, #4
 800e0a6:	e7d8      	b.n	800e05a <__kernel_rem_pio2f+0x5e>
 800e0a8:	a908      	add	r1, sp, #32
 800e0aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0ae:	9104      	str	r1, [sp, #16]
 800e0b0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e0b2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800e2f0 <__kernel_rem_pio2f+0x2f4>
 800e0b6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800e2ec <__kernel_rem_pio2f+0x2f0>
 800e0ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e0be:	9203      	str	r2, [sp, #12]
 800e0c0:	4654      	mov	r4, sl
 800e0c2:	00a2      	lsls	r2, r4, #2
 800e0c4:	9205      	str	r2, [sp, #20]
 800e0c6:	aa58      	add	r2, sp, #352	@ 0x160
 800e0c8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e0cc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800e0d0:	a944      	add	r1, sp, #272	@ 0x110
 800e0d2:	aa08      	add	r2, sp, #32
 800e0d4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800e0d8:	4694      	mov	ip, r2
 800e0da:	4626      	mov	r6, r4
 800e0dc:	2e00      	cmp	r6, #0
 800e0de:	dc4c      	bgt.n	800e17a <__kernel_rem_pio2f+0x17e>
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e0e6:	f000 f9f1 	bl	800e4cc <scalbnf>
 800e0ea:	eeb0 8a40 	vmov.f32	s16, s0
 800e0ee:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800e0f2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e0f6:	f000 fa4d 	bl	800e594 <floorf>
 800e0fa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800e0fe:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e102:	2d00      	cmp	r5, #0
 800e104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e108:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e10c:	ee17 9a90 	vmov	r9, s15
 800e110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e114:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e118:	dd41      	ble.n	800e19e <__kernel_rem_pio2f+0x1a2>
 800e11a:	f104 3cff 	add.w	ip, r4, #4294967295
 800e11e:	a908      	add	r1, sp, #32
 800e120:	f1c5 0e08 	rsb	lr, r5, #8
 800e124:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800e128:	fa46 f00e 	asr.w	r0, r6, lr
 800e12c:	4481      	add	r9, r0
 800e12e:	fa00 f00e 	lsl.w	r0, r0, lr
 800e132:	1a36      	subs	r6, r6, r0
 800e134:	f1c5 0007 	rsb	r0, r5, #7
 800e138:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800e13c:	4106      	asrs	r6, r0
 800e13e:	2e00      	cmp	r6, #0
 800e140:	dd3c      	ble.n	800e1bc <__kernel_rem_pio2f+0x1c0>
 800e142:	f04f 0e00 	mov.w	lr, #0
 800e146:	f109 0901 	add.w	r9, r9, #1
 800e14a:	4670      	mov	r0, lr
 800e14c:	4574      	cmp	r4, lr
 800e14e:	dc68      	bgt.n	800e222 <__kernel_rem_pio2f+0x226>
 800e150:	2d00      	cmp	r5, #0
 800e152:	dd03      	ble.n	800e15c <__kernel_rem_pio2f+0x160>
 800e154:	2d01      	cmp	r5, #1
 800e156:	d074      	beq.n	800e242 <__kernel_rem_pio2f+0x246>
 800e158:	2d02      	cmp	r5, #2
 800e15a:	d07d      	beq.n	800e258 <__kernel_rem_pio2f+0x25c>
 800e15c:	2e02      	cmp	r6, #2
 800e15e:	d12d      	bne.n	800e1bc <__kernel_rem_pio2f+0x1c0>
 800e160:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e164:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e168:	b340      	cbz	r0, 800e1bc <__kernel_rem_pio2f+0x1c0>
 800e16a:	4628      	mov	r0, r5
 800e16c:	9306      	str	r3, [sp, #24]
 800e16e:	f000 f9ad 	bl	800e4cc <scalbnf>
 800e172:	9b06      	ldr	r3, [sp, #24]
 800e174:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e178:	e020      	b.n	800e1bc <__kernel_rem_pio2f+0x1c0>
 800e17a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e17e:	3e01      	subs	r6, #1
 800e180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e188:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e18c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e190:	ecac 0a01 	vstmia	ip!, {s0}
 800e194:	ed30 0a01 	vldmdb	r0!, {s0}
 800e198:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e19c:	e79e      	b.n	800e0dc <__kernel_rem_pio2f+0xe0>
 800e19e:	d105      	bne.n	800e1ac <__kernel_rem_pio2f+0x1b0>
 800e1a0:	1e60      	subs	r0, r4, #1
 800e1a2:	a908      	add	r1, sp, #32
 800e1a4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800e1a8:	11f6      	asrs	r6, r6, #7
 800e1aa:	e7c8      	b.n	800e13e <__kernel_rem_pio2f+0x142>
 800e1ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e1b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1b8:	da31      	bge.n	800e21e <__kernel_rem_pio2f+0x222>
 800e1ba:	2600      	movs	r6, #0
 800e1bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c4:	f040 8098 	bne.w	800e2f8 <__kernel_rem_pio2f+0x2fc>
 800e1c8:	1e60      	subs	r0, r4, #1
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	4550      	cmp	r0, sl
 800e1ce:	da4b      	bge.n	800e268 <__kernel_rem_pio2f+0x26c>
 800e1d0:	2a00      	cmp	r2, #0
 800e1d2:	d065      	beq.n	800e2a0 <__kernel_rem_pio2f+0x2a4>
 800e1d4:	3c01      	subs	r4, #1
 800e1d6:	ab08      	add	r3, sp, #32
 800e1d8:	3d08      	subs	r5, #8
 800e1da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d0f8      	beq.n	800e1d4 <__kernel_rem_pio2f+0x1d8>
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e1e8:	f000 f970 	bl	800e4cc <scalbnf>
 800e1ec:	1c63      	adds	r3, r4, #1
 800e1ee:	aa44      	add	r2, sp, #272	@ 0x110
 800e1f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800e2f0 <__kernel_rem_pio2f+0x2f4>
 800e1f4:	0099      	lsls	r1, r3, #2
 800e1f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e1fa:	4623      	mov	r3, r4
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	f280 80a9 	bge.w	800e354 <__kernel_rem_pio2f+0x358>
 800e202:	4623      	mov	r3, r4
 800e204:	2b00      	cmp	r3, #0
 800e206:	f2c0 80c7 	blt.w	800e398 <__kernel_rem_pio2f+0x39c>
 800e20a:	aa44      	add	r2, sp, #272	@ 0x110
 800e20c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e210:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800e2e8 <__kernel_rem_pio2f+0x2ec>
 800e214:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800e2f4 <__kernel_rem_pio2f+0x2f8>
 800e218:	2000      	movs	r0, #0
 800e21a:	1ae2      	subs	r2, r4, r3
 800e21c:	e0b1      	b.n	800e382 <__kernel_rem_pio2f+0x386>
 800e21e:	2602      	movs	r6, #2
 800e220:	e78f      	b.n	800e142 <__kernel_rem_pio2f+0x146>
 800e222:	f852 1b04 	ldr.w	r1, [r2], #4
 800e226:	b948      	cbnz	r0, 800e23c <__kernel_rem_pio2f+0x240>
 800e228:	b121      	cbz	r1, 800e234 <__kernel_rem_pio2f+0x238>
 800e22a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800e22e:	f842 1c04 	str.w	r1, [r2, #-4]
 800e232:	2101      	movs	r1, #1
 800e234:	f10e 0e01 	add.w	lr, lr, #1
 800e238:	4608      	mov	r0, r1
 800e23a:	e787      	b.n	800e14c <__kernel_rem_pio2f+0x150>
 800e23c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800e240:	e7f5      	b.n	800e22e <__kernel_rem_pio2f+0x232>
 800e242:	f104 3cff 	add.w	ip, r4, #4294967295
 800e246:	aa08      	add	r2, sp, #32
 800e248:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e24c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e250:	a908      	add	r1, sp, #32
 800e252:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800e256:	e781      	b.n	800e15c <__kernel_rem_pio2f+0x160>
 800e258:	f104 3cff 	add.w	ip, r4, #4294967295
 800e25c:	aa08      	add	r2, sp, #32
 800e25e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800e262:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800e266:	e7f3      	b.n	800e250 <__kernel_rem_pio2f+0x254>
 800e268:	a908      	add	r1, sp, #32
 800e26a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e26e:	3801      	subs	r0, #1
 800e270:	430a      	orrs	r2, r1
 800e272:	e7ab      	b.n	800e1cc <__kernel_rem_pio2f+0x1d0>
 800e274:	3201      	adds	r2, #1
 800e276:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800e27a:	2e00      	cmp	r6, #0
 800e27c:	d0fa      	beq.n	800e274 <__kernel_rem_pio2f+0x278>
 800e27e:	9905      	ldr	r1, [sp, #20]
 800e280:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800e284:	eb0d 0001 	add.w	r0, sp, r1
 800e288:	18e6      	adds	r6, r4, r3
 800e28a:	a91c      	add	r1, sp, #112	@ 0x70
 800e28c:	f104 0c01 	add.w	ip, r4, #1
 800e290:	384c      	subs	r0, #76	@ 0x4c
 800e292:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800e296:	4422      	add	r2, r4
 800e298:	4562      	cmp	r2, ip
 800e29a:	da04      	bge.n	800e2a6 <__kernel_rem_pio2f+0x2aa>
 800e29c:	4614      	mov	r4, r2
 800e29e:	e710      	b.n	800e0c2 <__kernel_rem_pio2f+0xc6>
 800e2a0:	9804      	ldr	r0, [sp, #16]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	e7e7      	b.n	800e276 <__kernel_rem_pio2f+0x27a>
 800e2a6:	9903      	ldr	r1, [sp, #12]
 800e2a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e2ac:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800e2b0:	9105      	str	r1, [sp, #20]
 800e2b2:	ee07 1a90 	vmov	s15, r1
 800e2b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2ba:	2400      	movs	r4, #0
 800e2bc:	ece6 7a01 	vstmia	r6!, {s15}
 800e2c0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800e2f4 <__kernel_rem_pio2f+0x2f8>
 800e2c4:	46b1      	mov	r9, r6
 800e2c6:	455c      	cmp	r4, fp
 800e2c8:	dd04      	ble.n	800e2d4 <__kernel_rem_pio2f+0x2d8>
 800e2ca:	ece0 7a01 	vstmia	r0!, {s15}
 800e2ce:	f10c 0c01 	add.w	ip, ip, #1
 800e2d2:	e7e1      	b.n	800e298 <__kernel_rem_pio2f+0x29c>
 800e2d4:	ecfe 6a01 	vldmia	lr!, {s13}
 800e2d8:	ed39 7a01 	vldmdb	r9!, {s14}
 800e2dc:	3401      	adds	r4, #1
 800e2de:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e2e2:	e7f0      	b.n	800e2c6 <__kernel_rem_pio2f+0x2ca>
 800e2e4:	0800ef14 	.word	0x0800ef14
 800e2e8:	0800eee8 	.word	0x0800eee8
 800e2ec:	43800000 	.word	0x43800000
 800e2f0:	3b800000 	.word	0x3b800000
 800e2f4:	00000000 	.word	0x00000000
 800e2f8:	9b02      	ldr	r3, [sp, #8]
 800e2fa:	eeb0 0a48 	vmov.f32	s0, s16
 800e2fe:	eba3 0008 	sub.w	r0, r3, r8
 800e302:	f000 f8e3 	bl	800e4cc <scalbnf>
 800e306:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800e2ec <__kernel_rem_pio2f+0x2f0>
 800e30a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e312:	db19      	blt.n	800e348 <__kernel_rem_pio2f+0x34c>
 800e314:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800e2f0 <__kernel_rem_pio2f+0x2f4>
 800e318:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e31c:	aa08      	add	r2, sp, #32
 800e31e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e322:	3508      	adds	r5, #8
 800e324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e328:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e32c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e330:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e334:	ee10 3a10 	vmov	r3, s0
 800e338:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e33c:	ee17 3a90 	vmov	r3, s15
 800e340:	3401      	adds	r4, #1
 800e342:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e346:	e74c      	b.n	800e1e2 <__kernel_rem_pio2f+0x1e6>
 800e348:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e34c:	aa08      	add	r2, sp, #32
 800e34e:	ee10 3a10 	vmov	r3, s0
 800e352:	e7f6      	b.n	800e342 <__kernel_rem_pio2f+0x346>
 800e354:	a808      	add	r0, sp, #32
 800e356:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e35a:	9001      	str	r0, [sp, #4]
 800e35c:	ee07 0a90 	vmov	s15, r0
 800e360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e364:	3b01      	subs	r3, #1
 800e366:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e36a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e36e:	ed62 7a01 	vstmdb	r2!, {s15}
 800e372:	e743      	b.n	800e1fc <__kernel_rem_pio2f+0x200>
 800e374:	ecfc 6a01 	vldmia	ip!, {s13}
 800e378:	ecb5 7a01 	vldmia	r5!, {s14}
 800e37c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e380:	3001      	adds	r0, #1
 800e382:	4550      	cmp	r0, sl
 800e384:	dc01      	bgt.n	800e38a <__kernel_rem_pio2f+0x38e>
 800e386:	4290      	cmp	r0, r2
 800e388:	ddf4      	ble.n	800e374 <__kernel_rem_pio2f+0x378>
 800e38a:	a858      	add	r0, sp, #352	@ 0x160
 800e38c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e390:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800e394:	3b01      	subs	r3, #1
 800e396:	e735      	b.n	800e204 <__kernel_rem_pio2f+0x208>
 800e398:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e39a:	2b02      	cmp	r3, #2
 800e39c:	dc09      	bgt.n	800e3b2 <__kernel_rem_pio2f+0x3b6>
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	dc27      	bgt.n	800e3f2 <__kernel_rem_pio2f+0x3f6>
 800e3a2:	d040      	beq.n	800e426 <__kernel_rem_pio2f+0x42a>
 800e3a4:	f009 0007 	and.w	r0, r9, #7
 800e3a8:	b059      	add	sp, #356	@ 0x164
 800e3aa:	ecbd 8b04 	vpop	{d8-d9}
 800e3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800e3b4:	2b03      	cmp	r3, #3
 800e3b6:	d1f5      	bne.n	800e3a4 <__kernel_rem_pio2f+0x3a8>
 800e3b8:	aa30      	add	r2, sp, #192	@ 0xc0
 800e3ba:	1f0b      	subs	r3, r1, #4
 800e3bc:	4413      	add	r3, r2
 800e3be:	461a      	mov	r2, r3
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	dc50      	bgt.n	800e468 <__kernel_rem_pio2f+0x46c>
 800e3c6:	4622      	mov	r2, r4
 800e3c8:	2a01      	cmp	r2, #1
 800e3ca:	dc5d      	bgt.n	800e488 <__kernel_rem_pio2f+0x48c>
 800e3cc:	ab30      	add	r3, sp, #192	@ 0xc0
 800e3ce:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800e2f4 <__kernel_rem_pio2f+0x2f8>
 800e3d2:	440b      	add	r3, r1
 800e3d4:	2c01      	cmp	r4, #1
 800e3d6:	dc67      	bgt.n	800e4a8 <__kernel_rem_pio2f+0x4ac>
 800e3d8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800e3dc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800e3e0:	2e00      	cmp	r6, #0
 800e3e2:	d167      	bne.n	800e4b4 <__kernel_rem_pio2f+0x4b8>
 800e3e4:	edc7 6a00 	vstr	s13, [r7]
 800e3e8:	ed87 7a01 	vstr	s14, [r7, #4]
 800e3ec:	edc7 7a02 	vstr	s15, [r7, #8]
 800e3f0:	e7d8      	b.n	800e3a4 <__kernel_rem_pio2f+0x3a8>
 800e3f2:	ab30      	add	r3, sp, #192	@ 0xc0
 800e3f4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800e2f4 <__kernel_rem_pio2f+0x2f8>
 800e3f8:	440b      	add	r3, r1
 800e3fa:	4622      	mov	r2, r4
 800e3fc:	2a00      	cmp	r2, #0
 800e3fe:	da24      	bge.n	800e44a <__kernel_rem_pio2f+0x44e>
 800e400:	b34e      	cbz	r6, 800e456 <__kernel_rem_pio2f+0x45a>
 800e402:	eef1 7a47 	vneg.f32	s15, s14
 800e406:	edc7 7a00 	vstr	s15, [r7]
 800e40a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800e40e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e412:	aa31      	add	r2, sp, #196	@ 0xc4
 800e414:	2301      	movs	r3, #1
 800e416:	429c      	cmp	r4, r3
 800e418:	da20      	bge.n	800e45c <__kernel_rem_pio2f+0x460>
 800e41a:	b10e      	cbz	r6, 800e420 <__kernel_rem_pio2f+0x424>
 800e41c:	eef1 7a67 	vneg.f32	s15, s15
 800e420:	edc7 7a01 	vstr	s15, [r7, #4]
 800e424:	e7be      	b.n	800e3a4 <__kernel_rem_pio2f+0x3a8>
 800e426:	ab30      	add	r3, sp, #192	@ 0xc0
 800e428:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800e2f4 <__kernel_rem_pio2f+0x2f8>
 800e42c:	440b      	add	r3, r1
 800e42e:	2c00      	cmp	r4, #0
 800e430:	da05      	bge.n	800e43e <__kernel_rem_pio2f+0x442>
 800e432:	b10e      	cbz	r6, 800e438 <__kernel_rem_pio2f+0x43c>
 800e434:	eef1 7a67 	vneg.f32	s15, s15
 800e438:	edc7 7a00 	vstr	s15, [r7]
 800e43c:	e7b2      	b.n	800e3a4 <__kernel_rem_pio2f+0x3a8>
 800e43e:	ed33 7a01 	vldmdb	r3!, {s14}
 800e442:	3c01      	subs	r4, #1
 800e444:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e448:	e7f1      	b.n	800e42e <__kernel_rem_pio2f+0x432>
 800e44a:	ed73 7a01 	vldmdb	r3!, {s15}
 800e44e:	3a01      	subs	r2, #1
 800e450:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e454:	e7d2      	b.n	800e3fc <__kernel_rem_pio2f+0x400>
 800e456:	eef0 7a47 	vmov.f32	s15, s14
 800e45a:	e7d4      	b.n	800e406 <__kernel_rem_pio2f+0x40a>
 800e45c:	ecb2 7a01 	vldmia	r2!, {s14}
 800e460:	3301      	adds	r3, #1
 800e462:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e466:	e7d6      	b.n	800e416 <__kernel_rem_pio2f+0x41a>
 800e468:	ed72 7a01 	vldmdb	r2!, {s15}
 800e46c:	edd2 6a01 	vldr	s13, [r2, #4]
 800e470:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e474:	3801      	subs	r0, #1
 800e476:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e47a:	ed82 7a00 	vstr	s14, [r2]
 800e47e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e482:	edc2 7a01 	vstr	s15, [r2, #4]
 800e486:	e79c      	b.n	800e3c2 <__kernel_rem_pio2f+0x3c6>
 800e488:	ed73 7a01 	vldmdb	r3!, {s15}
 800e48c:	edd3 6a01 	vldr	s13, [r3, #4]
 800e490:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e494:	3a01      	subs	r2, #1
 800e496:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e49a:	ed83 7a00 	vstr	s14, [r3]
 800e49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4a2:	edc3 7a01 	vstr	s15, [r3, #4]
 800e4a6:	e78f      	b.n	800e3c8 <__kernel_rem_pio2f+0x3cc>
 800e4a8:	ed33 7a01 	vldmdb	r3!, {s14}
 800e4ac:	3c01      	subs	r4, #1
 800e4ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e4b2:	e78f      	b.n	800e3d4 <__kernel_rem_pio2f+0x3d8>
 800e4b4:	eef1 6a66 	vneg.f32	s13, s13
 800e4b8:	eeb1 7a47 	vneg.f32	s14, s14
 800e4bc:	edc7 6a00 	vstr	s13, [r7]
 800e4c0:	ed87 7a01 	vstr	s14, [r7, #4]
 800e4c4:	eef1 7a67 	vneg.f32	s15, s15
 800e4c8:	e790      	b.n	800e3ec <__kernel_rem_pio2f+0x3f0>
 800e4ca:	bf00      	nop

0800e4cc <scalbnf>:
 800e4cc:	ee10 3a10 	vmov	r3, s0
 800e4d0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800e4d4:	d02a      	beq.n	800e52c <scalbnf+0x60>
 800e4d6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800e4da:	d302      	bcc.n	800e4e2 <scalbnf+0x16>
 800e4dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e4e0:	4770      	bx	lr
 800e4e2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e4e6:	d122      	bne.n	800e52e <scalbnf+0x62>
 800e4e8:	4b23      	ldr	r3, [pc, #140]	@ (800e578 <scalbnf+0xac>)
 800e4ea:	eddf 7a24 	vldr	s15, [pc, #144]	@ 800e57c <scalbnf+0xb0>
 800e4ee:	4298      	cmp	r0, r3
 800e4f0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e4f4:	db16      	blt.n	800e524 <scalbnf+0x58>
 800e4f6:	ee10 3a10 	vmov	r3, s0
 800e4fa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e4fe:	3a19      	subs	r2, #25
 800e500:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800e504:	4288      	cmp	r0, r1
 800e506:	dd14      	ble.n	800e532 <scalbnf+0x66>
 800e508:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 800e580 <scalbnf+0xb4>
 800e50c:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800e584 <scalbnf+0xb8>
 800e510:	ee10 3a10 	vmov	r3, s0
 800e514:	eeb0 7a67 	vmov.f32	s14, s15
 800e518:	2b00      	cmp	r3, #0
 800e51a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800e51e:	ee27 0a87 	vmul.f32	s0, s15, s14
 800e522:	4770      	bx	lr
 800e524:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800e588 <scalbnf+0xbc>
 800e528:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e52c:	4770      	bx	lr
 800e52e:	0dd2      	lsrs	r2, r2, #23
 800e530:	e7e6      	b.n	800e500 <scalbnf+0x34>
 800e532:	4410      	add	r0, r2
 800e534:	28fe      	cmp	r0, #254	@ 0xfe
 800e536:	dce7      	bgt.n	800e508 <scalbnf+0x3c>
 800e538:	2800      	cmp	r0, #0
 800e53a:	dd06      	ble.n	800e54a <scalbnf+0x7e>
 800e53c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e540:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e544:	ee00 3a10 	vmov	s0, r3
 800e548:	4770      	bx	lr
 800e54a:	f110 0f16 	cmn.w	r0, #22
 800e54e:	da09      	bge.n	800e564 <scalbnf+0x98>
 800e550:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e588 <scalbnf+0xbc>
 800e554:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800e58c <scalbnf+0xc0>
 800e558:	ee10 3a10 	vmov	r3, s0
 800e55c:	eeb0 7a67 	vmov.f32	s14, s15
 800e560:	2b00      	cmp	r3, #0
 800e562:	e7da      	b.n	800e51a <scalbnf+0x4e>
 800e564:	3019      	adds	r0, #25
 800e566:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e56a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800e56e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800e590 <scalbnf+0xc4>
 800e572:	ee07 3a90 	vmov	s15, r3
 800e576:	e7d7      	b.n	800e528 <scalbnf+0x5c>
 800e578:	ffff3cb0 	.word	0xffff3cb0
 800e57c:	4c000000 	.word	0x4c000000
 800e580:	7149f2ca 	.word	0x7149f2ca
 800e584:	f149f2ca 	.word	0xf149f2ca
 800e588:	0da24260 	.word	0x0da24260
 800e58c:	8da24260 	.word	0x8da24260
 800e590:	33000000 	.word	0x33000000

0800e594 <floorf>:
 800e594:	ee10 3a10 	vmov	r3, s0
 800e598:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e59c:	3a7f      	subs	r2, #127	@ 0x7f
 800e59e:	2a16      	cmp	r2, #22
 800e5a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e5a4:	dc2b      	bgt.n	800e5fe <floorf+0x6a>
 800e5a6:	2a00      	cmp	r2, #0
 800e5a8:	da12      	bge.n	800e5d0 <floorf+0x3c>
 800e5aa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e610 <floorf+0x7c>
 800e5ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e5b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ba:	dd06      	ble.n	800e5ca <floorf+0x36>
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	da24      	bge.n	800e60a <floorf+0x76>
 800e5c0:	2900      	cmp	r1, #0
 800e5c2:	4b14      	ldr	r3, [pc, #80]	@ (800e614 <floorf+0x80>)
 800e5c4:	bf08      	it	eq
 800e5c6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e5ca:	ee00 3a10 	vmov	s0, r3
 800e5ce:	4770      	bx	lr
 800e5d0:	4911      	ldr	r1, [pc, #68]	@ (800e618 <floorf+0x84>)
 800e5d2:	4111      	asrs	r1, r2
 800e5d4:	420b      	tst	r3, r1
 800e5d6:	d0fa      	beq.n	800e5ce <floorf+0x3a>
 800e5d8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e610 <floorf+0x7c>
 800e5dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e5e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e8:	ddef      	ble.n	800e5ca <floorf+0x36>
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	bfbe      	ittt	lt
 800e5ee:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e5f2:	fa40 f202 	asrlt.w	r2, r0, r2
 800e5f6:	189b      	addlt	r3, r3, r2
 800e5f8:	ea23 0301 	bic.w	r3, r3, r1
 800e5fc:	e7e5      	b.n	800e5ca <floorf+0x36>
 800e5fe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e602:	d3e4      	bcc.n	800e5ce <floorf+0x3a>
 800e604:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e608:	4770      	bx	lr
 800e60a:	2300      	movs	r3, #0
 800e60c:	e7dd      	b.n	800e5ca <floorf+0x36>
 800e60e:	bf00      	nop
 800e610:	7149f2ca 	.word	0x7149f2ca
 800e614:	bf800000 	.word	0xbf800000
 800e618:	007fffff 	.word	0x007fffff

0800e61c <_init>:
 800e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61e:	bf00      	nop
 800e620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e622:	bc08      	pop	{r3}
 800e624:	469e      	mov	lr, r3
 800e626:	4770      	bx	lr

0800e628 <_fini>:
 800e628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62a:	bf00      	nop
 800e62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e62e:	bc08      	pop	{r3}
 800e630:	469e      	mov	lr, r3
 800e632:	4770      	bx	lr
