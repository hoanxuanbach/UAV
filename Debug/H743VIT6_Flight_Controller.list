
H743VIT6_Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b2c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  08012dd0  08012dd0  00013dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013700  08013700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013708  08013708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801370c  0801370c  0001470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d4  24000000  08013710  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002284  240002d4  080139e4  000152d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002558  080139e4  00015558  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000152d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f88c  00000000  00000000  00015302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049f2  00000000  00000000  00034b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018b0  00000000  00000000  00039580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000012b5  00000000  00000000  0003ae30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c180  00000000  00000000  0003c0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002362b  00000000  00000000  00078265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167539  00000000  00000000  0009b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00202dc9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000077dc  00000000  00000000  00202e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  0020a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d4 	.word	0x240002d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012db4 	.word	0x08012db4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d8 	.word	0x240002d8
 80002dc:	08012db4 	.word	0x08012db4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070e:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000714:	4a27      	ldr	r2, [pc, #156]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000716:	f043 0302 	orr.w	r3, r3, #2
 800071a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000724:	f003 0302 	and.w	r3, r3, #2
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <MX_DMA_Init+0xac>)
 800072e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000732:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <MX_DMA_Init+0xac>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_DMA_Init+0xac>)
 800073e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	200b      	movs	r0, #11
 8000750:	f001 feef 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000754:	200b      	movs	r0, #11
 8000756:	f001 ff06 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	200c      	movs	r0, #12
 8000760:	f001 fee7 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000764:	200c      	movs	r0, #12
 8000766:	f001 fefe 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	200d      	movs	r0, #13
 8000770:	f001 fedf 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000774:	200d      	movs	r0, #13
 8000776:	f001 fef6 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200e      	movs	r0, #14
 8000780:	f001 fed7 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000784:	200e      	movs	r0, #14
 8000786:	f001 feee 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2039      	movs	r0, #57	@ 0x39
 8000790:	f001 fecf 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000794:	2039      	movs	r0, #57	@ 0x39
 8000796:	f001 fee6 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	203b      	movs	r0, #59	@ 0x3b
 80007a0:	f001 fec7 	bl	8002532 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007a4:	203b      	movs	r0, #59	@ 0x3b
 80007a6:	f001 fede 	bl	8002566 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58024400 	.word	0x58024400

080007b8 <IIR_Filter_1D_Init>:
#include "filter.h"
void IIR_Filter_1D_Init(IIR_Filter_1D *f, float alpha, float beta){
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80007c4:	edc7 0a01 	vstr	s1, [r7, #4]
    f->alpha = alpha;
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	601a      	str	r2, [r3, #0]
    f->beta = beta;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	605a      	str	r2, [r3, #4]
    f->prev_input = 0.0f;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	f04f 0200 	mov.w	r2, #0
 80007da:	60da      	str	r2, [r3, #12]
    f->prev_output = 0.0f;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f04f 0200 	mov.w	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <IIR_Filter_1D_Update>:
float IIR_Filter_1D_Update(IIR_Filter_1D *f, float input){
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	ed87 0a00 	vstr	s0, [r7]
    float output = f->alpha * f->prev_output + f->beta * input + f->beta * f->prev_input;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	ed93 7a00 	vldr	s14, [r3]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	edd3 7a02 	vldr	s15, [r3, #8]
 8000808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	edd3 6a01 	vldr	s13, [r3, #4]
 8000812:	edd7 7a00 	vldr	s15, [r7]
 8000816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800081a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	edd3 6a01 	vldr	s13, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	edd3 7a03 	vldr	s15, [r3, #12]
 800082a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800082e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000832:	edc7 7a03 	vstr	s15, [r7, #12]
    f->prev_input = input;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	683a      	ldr	r2, [r7, #0]
 800083a:	60da      	str	r2, [r3, #12]
    f->prev_output = output;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	609a      	str	r2, [r3, #8]
    return output;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	ee07 3a90 	vmov	s15, r3
}
 8000848:	eeb0 0a67 	vmov.f32	s0, s15
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <IIR_Filter_3D_Init>:
void IIR_Filter_3D_Init(IIR_Filter_3D *f, float alpha, float beta){
 8000856:	b580      	push	{r7, lr}
 8000858:	b084      	sub	sp, #16
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000862:	edc7 0a01 	vstr	s1, [r7, #4]
	IIR_Filter_1D_Init(&f->x, alpha, beta);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	edd7 0a01 	vldr	s1, [r7, #4]
 800086c:	ed97 0a02 	vldr	s0, [r7, #8]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ffa1 	bl	80007b8 <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->y, alpha, beta);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3310      	adds	r3, #16
 800087a:	edd7 0a01 	vldr	s1, [r7, #4]
 800087e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff98 	bl	80007b8 <IIR_Filter_1D_Init>
	IIR_Filter_1D_Init(&f->z, alpha, beta);
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3320      	adds	r3, #32
 800088c:	edd7 0a01 	vldr	s1, [r7, #4]
 8000890:	ed97 0a02 	vldr	s0, [r7, #8]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff8f 	bl	80007b8 <IIR_Filter_1D_Init>
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <IIR_Filter_3D_Update>:
void IIR_Filter_3D_Update(IIR_Filter_3D *f, float x_in, float y_in, float z_in, float *x_out, float *y_out, float *z_out){
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b088      	sub	sp, #32
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	61f8      	str	r0, [r7, #28]
 80008aa:	ed87 0a06 	vstr	s0, [r7, #24]
 80008ae:	edc7 0a05 	vstr	s1, [r7, #20]
 80008b2:	ed87 1a04 	vstr	s2, [r7, #16]
 80008b6:	60f9      	str	r1, [r7, #12]
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	607b      	str	r3, [r7, #4]
    *x_out = IIR_Filter_1D_Update(&f->x, x_in);
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	ed97 0a06 	vldr	s0, [r7, #24]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff94 	bl	80007f0 <IIR_Filter_1D_Update>
 80008c8:	eef0 7a40 	vmov.f32	s15, s0
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	edc3 7a00 	vstr	s15, [r3]
    *y_out = IIR_Filter_1D_Update(&f->y, y_in);
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3310      	adds	r3, #16
 80008d6:	ed97 0a05 	vldr	s0, [r7, #20]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff88 	bl	80007f0 <IIR_Filter_1D_Update>
 80008e0:	eef0 7a40 	vmov.f32	s15, s0
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	edc3 7a00 	vstr	s15, [r3]
    *z_out = IIR_Filter_1D_Update(&f->z, z_in);
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3320      	adds	r3, #32
 80008ee:	ed97 0a04 	vldr	s0, [r7, #16]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ff7c 	bl	80007f0 <IIR_Filter_1D_Update>
 80008f8:	eef0 7a40 	vmov.f32	s15, s0
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	edc3 7a00 	vstr	s15, [r3]
}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	@ 0x28
 8000910:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	4b3c      	ldr	r3, [pc, #240]	@ (8000a14 <MX_GPIO_Init+0x108>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000928:	4a3a      	ldr	r2, [pc, #232]	@ (8000a14 <MX_GPIO_Init+0x108>)
 800092a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800092e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000932:	4b38      	ldr	r3, [pc, #224]	@ (8000a14 <MX_GPIO_Init+0x108>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	4b34      	ldr	r3, [pc, #208]	@ (8000a14 <MX_GPIO_Init+0x108>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000946:	4a33      	ldr	r2, [pc, #204]	@ (8000a14 <MX_GPIO_Init+0x108>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000950:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <MX_GPIO_Init+0x108>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <MX_GPIO_Init+0x108>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a2b      	ldr	r2, [pc, #172]	@ (8000a14 <MX_GPIO_Init+0x108>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b29      	ldr	r3, [pc, #164]	@ (8000a14 <MX_GPIO_Init+0x108>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 0308 	and.w	r3, r3, #8
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097c:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <MX_GPIO_Init+0x108>)
 800097e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000982:	4a24      	ldr	r2, [pc, #144]	@ (8000a14 <MX_GPIO_Init+0x108>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098c:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_GPIO_Init+0x108>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <MX_GPIO_Init+0x108>)
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000a14 <MX_GPIO_Init+0x108>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_GPIO_Init+0x108>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009be:	4816      	ldr	r0, [pc, #88]	@ (8000a18 <MX_GPIO_Init+0x10c>)
 80009c0:	f004 fde4 	bl	800558c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009ca:	4814      	ldr	r0, [pc, #80]	@ (8000a1c <MX_GPIO_Init+0x110>)
 80009cc:	f004 fdde 	bl	800558c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	480b      	ldr	r0, [pc, #44]	@ (8000a18 <MX_GPIO_Init+0x10c>)
 80009ea:	f004 fc1f 	bl	800522c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80009ee:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_GPIO_Init+0x110>)
 8000a08:	f004 fc10 	bl	800522c <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	58024400 	.word	0x58024400
 8000a18:	58021000 	.word	0x58021000
 8000a1c:	58020c00 	.word	0x58020c00

08000a20 <HAL_SPI_TxCpltCallback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI4) {
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a06      	ldr	r2, [pc, #24]	@ (8000a48 <HAL_SPI_TxCpltCallback+0x28>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d103      	bne.n	8000a3a <HAL_SPI_TxCpltCallback+0x1a>
        mpu.spi_transfer_done=true;
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_SPI_TxCpltCallback+0x2c>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40013400 	.word	0x40013400
 8000a4c:	24000320 	.word	0x24000320

08000a50 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI4) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <HAL_SPI_TxRxCpltCallback+0x28>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d103      	bne.n	8000a6a <HAL_SPI_TxRxCpltCallback+0x1a>
        mpu.spi_transfer_done=true;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_SPI_TxRxCpltCallback+0x2c>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40013400 	.word	0x40013400
 8000a7c:	24000320 	.word	0x24000320

08000a80 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a90:	d10c      	bne.n	8000aac <HAL_TIM_PeriodElapsedCallback+0x2c>
    {
        if (!mpu.state)
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d106      	bne.n	8000aac <HAL_TIM_PeriodElapsedCallback+0x2c>
        {
        	mpu.state = 1;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            MPU6000_Start_DMA(&mpu);
 8000aa6:	4803      	ldr	r0, [pc, #12]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000aa8:	f000 fbc4 	bl	8001234 <MPU6000_Start_DMA>
        }
    }
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000320 	.word	0x24000320

08000ab8 <init_PIDs>:
float get_roll(float Ax, float Az) {
    return atan2f(-Ax, Az) * 180.0f / M_PI;
}

void init_PIDs(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
    PID_Init(&pid_roll,  1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
 8000abc:	ed9f 2a14 	vldr	s4, [pc, #80]	@ 8000b10 <init_PIDs+0x58>
 8000ac0:	eddf 1a14 	vldr	s3, [pc, #80]	@ 8000b14 <init_PIDs+0x5c>
 8000ac4:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8000b18 <init_PIDs+0x60>
 8000ac8:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8000b1c <init_PIDs+0x64>
 8000acc:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000ad0:	4813      	ldr	r0, [pc, #76]	@ (8000b20 <init_PIDs+0x68>)
 8000ad2:	f000 fcb3 	bl	800143c <PID_Init>
    PID_Init(&pid_pitch, 1.5f, 0.0f, 0.05f, 400.0f, 100.0f);
 8000ad6:	ed9f 2a0e 	vldr	s4, [pc, #56]	@ 8000b10 <init_PIDs+0x58>
 8000ada:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 8000b14 <init_PIDs+0x5c>
 8000ade:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000b18 <init_PIDs+0x60>
 8000ae2:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8000b1c <init_PIDs+0x64>
 8000ae6:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000aea:	480e      	ldr	r0, [pc, #56]	@ (8000b24 <init_PIDs+0x6c>)
 8000aec:	f000 fca6 	bl	800143c <PID_Init>
    PID_Init(&pid_yaw,   2.0f, 0.0f, 0.10f, 400.0f, 100.0f);
 8000af0:	ed9f 2a07 	vldr	s4, [pc, #28]	@ 8000b10 <init_PIDs+0x58>
 8000af4:	eddf 1a07 	vldr	s3, [pc, #28]	@ 8000b14 <init_PIDs+0x5c>
 8000af8:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8000b28 <init_PIDs+0x70>
 8000afc:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8000b1c <init_PIDs+0x64>
 8000b00:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <init_PIDs+0x74>)
 8000b06:	f000 fc99 	bl	800143c <PID_Init>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	42c80000 	.word	0x42c80000
 8000b14:	43c80000 	.word	0x43c80000
 8000b18:	3d4ccccd 	.word	0x3d4ccccd
 8000b1c:	00000000 	.word	0x00000000
 8000b20:	24000364 	.word	0x24000364
 8000b24:	24000388 	.word	0x24000388
 8000b28:	3dcccccd 	.word	0x3dcccccd
 8000b2c:	240003ac 	.word	0x240003ac

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	ed2d 8b02 	vpush	{d8}
 8000b36:	b08e      	sub	sp, #56	@ 0x38
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3a:	f001 fb5d 	bl	80021f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3e:	f000 fa2d 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b42:	f7ff fee3 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b46:	f7ff fddf 	bl	8000708 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000b4a:	f00d ff81 	bl	800ea50 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8000b4e:	f000 fd45 	bl	80015dc <MX_SPI4_Init>
  MX_TIM2_Init();
 8000b52:	f001 f8b9 	bl	8001cc8 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000b56:	f001 f905 	bl	8001d64 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  IIR_Filter_3D_Init(&acc_filtered, IIR_ACC_ALPHA, IIR_ACC_BETA);
 8000b5a:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8000b8c <main+0x5c>
 8000b5e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000b90 <main+0x60>
 8000b62:	480c      	ldr	r0, [pc, #48]	@ (8000b94 <main+0x64>)
 8000b64:	f7ff fe77 	bl	8000856 <IIR_Filter_3D_Init>
  IIR_Filter_3D_Init(&gyro_filtered, IIR_GYR_ALPHA, IIR_GYR_BETA);
 8000b68:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8000b98 <main+0x68>
 8000b6c:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000b9c <main+0x6c>
 8000b70:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <main+0x70>)
 8000b72:	f7ff fe70 	bl	8000856 <IIR_Filter_3D_Init>
  MPU6000_Init(&mpu, &hspi4);
 8000b76:	490b      	ldr	r1, [pc, #44]	@ (8000ba4 <main+0x74>)
 8000b78:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <main+0x78>)
 8000b7a:	f000 fb07 	bl	800118c <MPU6000_Init>

  mpu.state=1;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <main+0x78>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  for(int i=0;i<=14;i++) mpu.tx_buffer[i]=0xFF;
 8000b86:	2300      	movs	r3, #0
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b8a:	e018      	b.n	8000bbe <main+0x8e>
 8000b8c:	3cf9db23 	.word	0x3cf9db23
 8000b90:	3f7068dc 	.word	0x3f7068dc
 8000b94:	240003d0 	.word	0x240003d0
 8000b98:	3d727bb3 	.word	0x3d727bb3
 8000b9c:	3f61b08a 	.word	0x3f61b08a
 8000ba0:	24000400 	.word	0x24000400
 8000ba4:	24000430 	.word	0x24000430
 8000ba8:	24000320 	.word	0x24000320
 8000bac:	4ada      	ldr	r2, [pc, #872]	@ (8000f18 <main+0x3e8>)
 8000bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bb0:	4413      	add	r3, r2
 8000bb2:	3320      	adds	r3, #32
 8000bb4:	22ff      	movs	r2, #255	@ 0xff
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bba:	3301      	adds	r3, #1
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bc0:	2b0e      	cmp	r3, #14
 8000bc2:	ddf3      	ble.n	8000bac <main+0x7c>
  MPU6000_Start_DMA(&mpu);
 8000bc4:	48d4      	ldr	r0, [pc, #848]	@ (8000f18 <main+0x3e8>)
 8000bc6:	f000 fb35 	bl	8001234 <MPU6000_Start_DMA>
  init_PIDs();
 8000bca:	f7ff ff75 	bl	8000ab8 <init_PIDs>

  HAL_TIM_Base_Start_IT(&htim2);
 8000bce:	48d3      	ldr	r0, [pc, #844]	@ (8000f1c <main+0x3ec>)
 8000bd0:	f009 fad8 	bl	800a184 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (mpu.state==2){
 8000bd4:	4bd0      	ldr	r3, [pc, #832]	@ (8000f18 <main+0x3e8>)
 8000bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d1f9      	bne.n	8000bd4 <main+0xa4>
		  MPU6000_Process_DMA(&mpu);
 8000be0:	48cd      	ldr	r0, [pc, #820]	@ (8000f18 <main+0x3e8>)
 8000be2:	f000 fb61 	bl	80012a8 <MPU6000_Process_DMA>

		  /*low-pass filter*/
		  IIR_Filter_3D_Update(&acc_filtered, mpu.acc[0], mpu.acc[1], mpu.acc[2], &acc_x, &acc_y, &acc_z);
 8000be6:	4bcc      	ldr	r3, [pc, #816]	@ (8000f18 <main+0x3e8>)
 8000be8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bec:	4bca      	ldr	r3, [pc, #808]	@ (8000f18 <main+0x3e8>)
 8000bee:	ed93 7a02 	vldr	s14, [r3, #8]
 8000bf2:	4bc9      	ldr	r3, [pc, #804]	@ (8000f18 <main+0x3e8>)
 8000bf4:	edd3 6a03 	vldr	s13, [r3, #12]
 8000bf8:	4bc9      	ldr	r3, [pc, #804]	@ (8000f20 <main+0x3f0>)
 8000bfa:	4aca      	ldr	r2, [pc, #808]	@ (8000f24 <main+0x3f4>)
 8000bfc:	49ca      	ldr	r1, [pc, #808]	@ (8000f28 <main+0x3f8>)
 8000bfe:	eeb0 1a66 	vmov.f32	s2, s13
 8000c02:	eef0 0a47 	vmov.f32	s1, s14
 8000c06:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0a:	48c8      	ldr	r0, [pc, #800]	@ (8000f2c <main+0x3fc>)
 8000c0c:	f7ff fe49 	bl	80008a2 <IIR_Filter_3D_Update>
		  IIR_Filter_3D_Update(&gyro_filtered, mpu.gyro[0], mpu.gyro[1], mpu.gyro[2], &gyro_p, &gyro_q, &gyro_r);
 8000c10:	4bc1      	ldr	r3, [pc, #772]	@ (8000f18 <main+0x3e8>)
 8000c12:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c16:	4bc0      	ldr	r3, [pc, #768]	@ (8000f18 <main+0x3e8>)
 8000c18:	ed93 7a05 	vldr	s14, [r3, #20]
 8000c1c:	4bbe      	ldr	r3, [pc, #760]	@ (8000f18 <main+0x3e8>)
 8000c1e:	edd3 6a06 	vldr	s13, [r3, #24]
 8000c22:	4bc3      	ldr	r3, [pc, #780]	@ (8000f30 <main+0x400>)
 8000c24:	4ac3      	ldr	r2, [pc, #780]	@ (8000f34 <main+0x404>)
 8000c26:	49c4      	ldr	r1, [pc, #784]	@ (8000f38 <main+0x408>)
 8000c28:	eeb0 1a66 	vmov.f32	s2, s13
 8000c2c:	eef0 0a47 	vmov.f32	s1, s14
 8000c30:	eeb0 0a67 	vmov.f32	s0, s15
 8000c34:	48c1      	ldr	r0, [pc, #772]	@ (8000f3c <main+0x40c>)
 8000c36:	f7ff fe34 	bl	80008a2 <IIR_Filter_3D_Update>

		  /*Estimate pitch and roll*/
		  float rollHat_acc_rad = atan2f(acc_y, acc_z);
 8000c3a:	4bba      	ldr	r3, [pc, #744]	@ (8000f24 <main+0x3f4>)
 8000c3c:	edd3 7a00 	vldr	s15, [r3]
 8000c40:	4bb7      	ldr	r3, [pc, #732]	@ (8000f20 <main+0x3f0>)
 8000c42:	ed93 7a00 	vldr	s14, [r3]
 8000c46:	eef0 0a47 	vmov.f32	s1, s14
 8000c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c4e:	f011 f81b 	bl	8011c88 <atan2f>
 8000c52:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
		  float pitchHat_acc_rad = atan2f(-acc_x, sqrtf(acc_y * acc_y + acc_z * acc_z));
 8000c56:	4bb4      	ldr	r3, [pc, #720]	@ (8000f28 <main+0x3f8>)
 8000c58:	edd3 7a00 	vldr	s15, [r3]
 8000c5c:	eeb1 8a67 	vneg.f32	s16, s15
 8000c60:	4bb0      	ldr	r3, [pc, #704]	@ (8000f24 <main+0x3f4>)
 8000c62:	ed93 7a00 	vldr	s14, [r3]
 8000c66:	4baf      	ldr	r3, [pc, #700]	@ (8000f24 <main+0x3f4>)
 8000c68:	edd3 7a00 	vldr	s15, [r3]
 8000c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c70:	4bab      	ldr	r3, [pc, #684]	@ (8000f20 <main+0x3f0>)
 8000c72:	edd3 6a00 	vldr	s13, [r3]
 8000c76:	4baa      	ldr	r3, [pc, #680]	@ (8000f20 <main+0x3f0>)
 8000c78:	edd3 7a00 	vldr	s15, [r3]
 8000c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c84:	eeb0 0a67 	vmov.f32	s0, s15
 8000c88:	f011 f800 	bl	8011c8c <sqrtf>
 8000c8c:	eef0 7a40 	vmov.f32	s15, s0
 8000c90:	eef0 0a67 	vmov.f32	s1, s15
 8000c94:	eeb0 0a48 	vmov.f32	s0, s16
 8000c98:	f010 fff6 	bl	8011c88 <atan2f>
 8000c9c:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

		  float yawDot = gyro_r * (M_PI/ 180.0f);
 8000ca0:	4ba3      	ldr	r3, [pc, #652]	@ (8000f30 <main+0x400>)
 8000ca2:	edd3 7a00 	vldr	s15, [r3]
 8000ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000caa:	ed9f 6b95 	vldr	d6, [pc, #596]	@ 8000f00 <main+0x3d0>
 8000cae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cb6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		  float rollDot = (gyro_p + tanf(pitchHat_acc_rad) * sinf(rollHat_acc_rad) * gyro_q + tanf(pitchHat_acc_rad) * cosf(rollHat_acc_rad) * gyro_r) * (M_PI / 180.0f);
 8000cba:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8000cbe:	f011 f803 	bl	8011cc8 <tanf>
 8000cc2:	eeb0 8a40 	vmov.f32	s16, s0
 8000cc6:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000cca:	f011 f855 	bl	8011d78 <sinf>
 8000cce:	eef0 7a40 	vmov.f32	s15, s0
 8000cd2:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000cd6:	4b97      	ldr	r3, [pc, #604]	@ (8000f34 <main+0x404>)
 8000cd8:	edd3 7a00 	vldr	s15, [r3]
 8000cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ce0:	4b95      	ldr	r3, [pc, #596]	@ (8000f38 <main+0x408>)
 8000ce2:	edd3 7a00 	vldr	s15, [r3]
 8000ce6:	ee37 8a27 	vadd.f32	s16, s14, s15
 8000cea:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8000cee:	f010 ffeb 	bl	8011cc8 <tanf>
 8000cf2:	eef0 8a40 	vmov.f32	s17, s0
 8000cf6:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000cfa:	f011 f901 	bl	8011f00 <cosf>
 8000cfe:	eef0 7a40 	vmov.f32	s15, s0
 8000d02:	ee28 7aa7 	vmul.f32	s14, s17, s15
 8000d06:	4b8a      	ldr	r3, [pc, #552]	@ (8000f30 <main+0x400>)
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000d14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d18:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 8000f00 <main+0x3d0>
 8000d1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d24:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		  float pitchDot = (cosf(rollHat_acc_rad) * gyro_q - sinf(rollHat_acc_rad) * gyro_r) * (M_PI / 180.0f);
 8000d28:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000d2c:	f011 f8e8 	bl	8011f00 <cosf>
 8000d30:	eeb0 7a40 	vmov.f32	s14, s0
 8000d34:	4b7f      	ldr	r3, [pc, #508]	@ (8000f34 <main+0x404>)
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000d3e:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8000d42:	f011 f819 	bl	8011d78 <sinf>
 8000d46:	eeb0 7a40 	vmov.f32	s14, s0
 8000d4a:	4b79      	ldr	r3, [pc, #484]	@ (8000f30 <main+0x400>)
 8000d4c:	edd3 7a00 	vldr	s15, [r3]
 8000d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d54:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000d58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d5c:	ed9f 6b68 	vldr	d6, [pc, #416]	@ 8000f00 <main+0x3d0>
 8000d60:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d68:	edc7 7a08 	vstr	s15, [r7, #32]

		  //Complementary filter
		  roll = (1.0f - COMP_ALPHA) * rollHat_acc_rad + COMP_ALPHA * (roll + rollDot * dt );
 8000d6c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000d70:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d74:	ed9f 6b64 	vldr	d6, [pc, #400]	@ 8000f08 <main+0x3d8>
 8000d78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d7c:	4b70      	ldr	r3, [pc, #448]	@ (8000f40 <main+0x410>)
 8000d7e:	ed93 7a00 	vldr	s14, [r3]
 8000d82:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d8a:	4b6e      	ldr	r3, [pc, #440]	@ (8000f44 <main+0x414>)
 8000d8c:	edd3 7a00 	vldr	s15, [r3]
 8000d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d98:	ed9f 5b5d 	vldr	d5, [pc, #372]	@ 8000f10 <main+0x3e0>
 8000d9c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000da0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000da4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000da8:	4b66      	ldr	r3, [pc, #408]	@ (8000f44 <main+0x414>)
 8000daa:	edc3 7a00 	vstr	s15, [r3]
		  pitch = (1.0f - COMP_ALPHA) * pitchHat_acc_rad + COMP_ALPHA * (pitch + pitchDot * dt );
 8000dae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000db2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000db6:	ed9f 6b54 	vldr	d6, [pc, #336]	@ 8000f08 <main+0x3d8>
 8000dba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000dbe:	4b60      	ldr	r3, [pc, #384]	@ (8000f40 <main+0x410>)
 8000dc0:	ed93 7a00 	vldr	s14, [r3]
 8000dc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dcc:	4b5e      	ldr	r3, [pc, #376]	@ (8000f48 <main+0x418>)
 8000dce:	edd3 7a00 	vldr	s15, [r3]
 8000dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dda:	ed9f 5b4d 	vldr	d5, [pc, #308]	@ 8000f10 <main+0x3e0>
 8000dde:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000de2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000de6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dea:	4b57      	ldr	r3, [pc, #348]	@ (8000f48 <main+0x418>)
 8000dec:	edc3 7a00 	vstr	s15, [r3]
		  yaw = yaw + yawDot*dt;
 8000df0:	4b53      	ldr	r3, [pc, #332]	@ (8000f40 <main+0x410>)
 8000df2:	ed93 7a00 	vldr	s14, [r3]
 8000df6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dfe:	4b53      	ldr	r3, [pc, #332]	@ (8000f4c <main+0x41c>)
 8000e00:	edd3 7a00 	vldr	s15, [r3]
 8000e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e08:	4b50      	ldr	r3, [pc, #320]	@ (8000f4c <main+0x41c>)
 8000e0a:	edc3 7a00 	vstr	s15, [r3]

		  float roll_out = PID_Compute(&pid_roll,roll_target,roll,dt);
 8000e0e:	4b50      	ldr	r3, [pc, #320]	@ (8000f50 <main+0x420>)
 8000e10:	edd3 7a00 	vldr	s15, [r3]
 8000e14:	4b4b      	ldr	r3, [pc, #300]	@ (8000f44 <main+0x414>)
 8000e16:	ed93 7a00 	vldr	s14, [r3]
 8000e1a:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <main+0x410>)
 8000e1c:	edd3 6a00 	vldr	s13, [r3]
 8000e20:	eeb0 1a66 	vmov.f32	s2, s13
 8000e24:	eef0 0a47 	vmov.f32	s1, s14
 8000e28:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2c:	4849      	ldr	r0, [pc, #292]	@ (8000f54 <main+0x424>)
 8000e2e:	f000 fb34 	bl	800149a <PID_Compute>
 8000e32:	ed87 0a07 	vstr	s0, [r7, #28]
		  float pitch_out = PID_Compute(&pid_pitch,pitch_target,roll,dt);
 8000e36:	4b48      	ldr	r3, [pc, #288]	@ (8000f58 <main+0x428>)
 8000e38:	edd3 7a00 	vldr	s15, [r3]
 8000e3c:	4b41      	ldr	r3, [pc, #260]	@ (8000f44 <main+0x414>)
 8000e3e:	ed93 7a00 	vldr	s14, [r3]
 8000e42:	4b3f      	ldr	r3, [pc, #252]	@ (8000f40 <main+0x410>)
 8000e44:	edd3 6a00 	vldr	s13, [r3]
 8000e48:	eeb0 1a66 	vmov.f32	s2, s13
 8000e4c:	eef0 0a47 	vmov.f32	s1, s14
 8000e50:	eeb0 0a67 	vmov.f32	s0, s15
 8000e54:	4841      	ldr	r0, [pc, #260]	@ (8000f5c <main+0x42c>)
 8000e56:	f000 fb20 	bl	800149a <PID_Compute>
 8000e5a:	ed87 0a06 	vstr	s0, [r7, #24]
		  float yaw_out = PID_Compute(&pid_yaw,yaw_target,roll,dt);
 8000e5e:	4b40      	ldr	r3, [pc, #256]	@ (8000f60 <main+0x430>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	4b37      	ldr	r3, [pc, #220]	@ (8000f44 <main+0x414>)
 8000e66:	ed93 7a00 	vldr	s14, [r3]
 8000e6a:	4b35      	ldr	r3, [pc, #212]	@ (8000f40 <main+0x410>)
 8000e6c:	edd3 6a00 	vldr	s13, [r3]
 8000e70:	eeb0 1a66 	vmov.f32	s2, s13
 8000e74:	eef0 0a47 	vmov.f32	s1, s14
 8000e78:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7c:	4839      	ldr	r0, [pc, #228]	@ (8000f64 <main+0x434>)
 8000e7e:	f000 fb0c 	bl	800149a <PID_Compute>
 8000e82:	ed87 0a05 	vstr	s0, [r7, #20]


		  float m1 = throttle + pitch_out - roll_out + yaw_out;
 8000e86:	4b38      	ldr	r3, [pc, #224]	@ (8000f68 <main+0x438>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	ee07 3a90 	vmov	s15, r3
 8000e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e92:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eaa:	edc7 7a04 	vstr	s15, [r7, #16]
		  float m2 = throttle + pitch_out + roll_out - yaw_out;
 8000eae:	4b2e      	ldr	r3, [pc, #184]	@ (8000f68 <main+0x438>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eba:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eca:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed2:	edc7 7a03 	vstr	s15, [r7, #12]
		  float m3 = throttle - pitch_out + roll_out + yaw_out;
 8000ed6:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <main+0x438>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ee6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eea:	edd7 7a07 	vldr	s15, [r7, #28]
 8000eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	edc7 7a02 	vstr	s15, [r7, #8]
 8000efe:	e035      	b.n	8000f6c <main+0x43c>
 8000f00:	a2529d39 	.word	0xa2529d39
 8000f04:	3f91df46 	.word	0x3f91df46
 8000f08:	999999a0 	.word	0x999999a0
 8000f0c:	3fa99999 	.word	0x3fa99999
 8000f10:	66666666 	.word	0x66666666
 8000f14:	3fee6666 	.word	0x3fee6666
 8000f18:	24000320 	.word	0x24000320
 8000f1c:	240005ac 	.word	0x240005ac
 8000f20:	240002f8 	.word	0x240002f8
 8000f24:	240002f4 	.word	0x240002f4
 8000f28:	240002f0 	.word	0x240002f0
 8000f2c:	240003d0 	.word	0x240003d0
 8000f30:	24000304 	.word	0x24000304
 8000f34:	24000300 	.word	0x24000300
 8000f38:	240002fc 	.word	0x240002fc
 8000f3c:	24000400 	.word	0x24000400
 8000f40:	24000000 	.word	0x24000000
 8000f44:	24000318 	.word	0x24000318
 8000f48:	24000314 	.word	0x24000314
 8000f4c:	2400031c 	.word	0x2400031c
 8000f50:	2400030c 	.word	0x2400030c
 8000f54:	24000364 	.word	0x24000364
 8000f58:	24000308 	.word	0x24000308
 8000f5c:	24000388 	.word	0x24000388
 8000f60:	24000310 	.word	0x24000310
 8000f64:	240003ac 	.word	0x240003ac
 8000f68:	24000004 	.word	0x24000004
		  float m4 = throttle - pitch_out - roll_out - yaw_out;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <main+0x468>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f80:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f90:	edc7 7a01 	vstr	s15, [r7, #4]
	  if (mpu.state==2){
 8000f94:	e61e      	b.n	8000bd4 <main+0xa4>
 8000f96:	bf00      	nop
 8000f98:	24000004 	.word	0x24000004

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b09c      	sub	sp, #112	@ 0x70
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa6:	224c      	movs	r2, #76	@ 0x4c
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00e ffb5 	bl	800ff1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2220      	movs	r2, #32
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f00e ffaf 	bl	800ff1a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f005 fd9f 	bl	8006b00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b33      	ldr	r3, [pc, #204]	@ (8001094 <SystemClock_Config+0xf8>)
 8000fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fca:	4a32      	ldr	r2, [pc, #200]	@ (8001094 <SystemClock_Config+0xf8>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fd2:	4b30      	ldr	r3, [pc, #192]	@ (8001094 <SystemClock_Config+0xf8>)
 8000fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001098 <SystemClock_Config+0xfc>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8001098 <SystemClock_Config+0xfc>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b2a      	ldr	r3, [pc, #168]	@ (8001098 <SystemClock_Config+0xfc>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ff4:	603b      	str	r3, [r7, #0]
 8000ff6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ff8:	bf00      	nop
 8000ffa:	4b27      	ldr	r3, [pc, #156]	@ (8001098 <SystemClock_Config+0xfc>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001006:	d1f8      	bne.n	8000ffa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001008:	2303      	movs	r3, #3
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800100c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001010:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001012:	2301      	movs	r3, #1
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001016:	2340      	movs	r3, #64	@ 0x40
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101a:	2302      	movs	r3, #2
 800101c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101e:	2302      	movs	r3, #2
 8001020:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 19;
 8001026:	2313      	movs	r3, #19
 8001028:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800102a:	2302      	movs	r3, #2
 800102c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800102e:	2303      	movs	r3, #3
 8001030:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001032:	2302      	movs	r3, #2
 8001034:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001036:	230c      	movs	r3, #12
 8001038:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800103a:	2302      	movs	r3, #2
 800103c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001046:	4618      	mov	r0, r3
 8001048:	f005 fda4 	bl	8006b94 <HAL_RCC_OscConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001052:	f000 f823 	bl	800109c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001056:	233f      	movs	r3, #63	@ 0x3f
 8001058:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800106e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001072:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2101      	movs	r1, #1
 800107c:	4618      	mov	r0, r3
 800107e:	f006 f9e3 	bl	8007448 <HAL_RCC_ClockConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001088:	f000 f808 	bl	800109c <Error_Handler>
  }
}
 800108c:	bf00      	nop
 800108e:	3770      	adds	r7, #112	@ 0x70
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	58000400 	.word	0x58000400
 8001098:	58024800 	.word	0x58024800

0800109c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <Error_Handler+0x8>

080010a8 <MPU6000_Read>:
#include "mpu6000.h"

uint16_t MPU6000_Read(MPU6000 *dev,uint8_t reg) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
    // Pull CS low to select the device
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010ba:	4817      	ldr	r0, [pc, #92]	@ (8001118 <MPU6000_Read+0x70>)
 80010bc:	f004 fa66 	bl	800558c <HAL_GPIO_WritePin>

    // Transmit the register address with the read bit set (0x80)
    uint8_t tx[2] = {reg|0x80,0x00};
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	733b      	strb	r3, [r7, #12]
 80010ca:	2300      	movs	r3, #0
 80010cc:	737b      	strb	r3, [r7, #13]
    uint8_t rx[2] = {0x00,0x00};
 80010ce:	2300      	movs	r3, #0
 80010d0:	813b      	strh	r3, [r7, #8]
    HAL_SPI_TransmitReceive_DMA(dev->hspi,tx,rx,2);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f107 0208 	add.w	r2, r7, #8
 80010da:	f107 010c 	add.w	r1, r7, #12
 80010de:	2302      	movs	r3, #2
 80010e0:	f008 fae6 	bl	80096b0 <HAL_SPI_TransmitReceive_DMA>

    while (!dev->spi_transfer_done);
 80010e4:	bf00      	nop
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	f083 0301 	eor.w	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f6      	bne.n	80010e6 <MPU6000_Read+0x3e>
    dev->spi_transfer_done=false;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    // Pull CS high to deselect the device
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001106:	4804      	ldr	r0, [pc, #16]	@ (8001118 <MPU6000_Read+0x70>)
 8001108:	f004 fa40 	bl	800558c <HAL_GPIO_WritePin>

    // Combine the high byte and low byte to form a 16-bit value
    //return (uint16_t)((data[0] << 8) | data[1]);
    return rx[1];
 800110c:	7a7b      	ldrb	r3, [r7, #9]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	58021000 	.word	0x58021000

0800111c <MPU6000_Write>:

void MPU6000_Write(MPU6000 *dev,uint8_t reg,uint8_t data) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
 8001128:	4613      	mov	r3, r2
 800112a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001132:	4815      	ldr	r0, [pc, #84]	@ (8001188 <MPU6000_Write+0x6c>)
 8001134:	f004 fa2a 	bl	800558c <HAL_GPIO_WritePin>

	// Transmit the register address with the read bit set (0x80)
	dev->tx_buffer[0]=reg;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	78fa      	ldrb	r2, [r7, #3]
 800113c:	f883 2020 	strb.w	r2, [r3, #32]
	dev->tx_buffer[1]=data;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	78ba      	ldrb	r2, [r7, #2]
 8001144:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	HAL_SPI_Transmit_DMA(dev->hspi, dev->tx_buffer, 2);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3320      	adds	r3, #32
 8001150:	2202      	movs	r2, #2
 8001152:	4619      	mov	r1, r3
 8001154:	f008 f96a 	bl	800942c <HAL_SPI_Transmit_DMA>

	while (!dev->spi_transfer_done);
 8001158:	bf00      	nop
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f083 0301 	eor.w	r3, r3, #1
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f6      	bne.n	800115a <MPU6000_Write+0x3e>
	dev->spi_transfer_done=false;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

	// Pull CS high to deselect the device
	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800117a:	4803      	ldr	r0, [pc, #12]	@ (8001188 <MPU6000_Write+0x6c>)
 800117c:	f004 fa06 	bl	800558c <HAL_GPIO_WritePin>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	58021000 	.word	0x58021000

0800118c <MPU6000_Init>:


void MPU6000_Init(MPU6000 *dev,SPI_HandleTypeDef *hspi){
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
	dev->spi_transfer_done=false;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	dev->hspi = hspi;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	601a      	str	r2, [r3, #0]

	dev->acc[0] = 0.0f;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
	dev->acc[2] = 0.0f;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]

	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c2:	481a      	ldr	r0, [pc, #104]	@ (800122c <MPU6000_Init+0xa0>)
 80011c4:	f004 f9e2 	bl	800558c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011c8:	2064      	movs	r0, #100	@ 0x64
 80011ca:	f001 f8a7 	bl	800231c <HAL_Delay>

	MPU6000_Write(dev,MPU6000_PWR_MGMT_1,0x80);
 80011ce:	2280      	movs	r2, #128	@ 0x80
 80011d0:	216b      	movs	r1, #107	@ 0x6b
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ffa2 	bl	800111c <MPU6000_Write>
	HAL_Delay(100);
 80011d8:	2064      	movs	r0, #100	@ 0x64
 80011da:	f001 f89f 	bl	800231c <HAL_Delay>

	MPU6000_Write(dev,MPU6000_PWR_MGMT_1,0x00);
 80011de:	2200      	movs	r2, #0
 80011e0:	216b      	movs	r1, #107	@ 0x6b
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff9a 	bl	800111c <MPU6000_Write>
	HAL_Delay(10);
 80011e8:	200a      	movs	r0, #10
 80011ea:	f001 f897 	bl	800231c <HAL_Delay>
	MPU6000_Write(dev,MPU6000_GYRO_CONFIG,0x00);
 80011ee:	2200      	movs	r2, #0
 80011f0:	211b      	movs	r1, #27
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff92 	bl	800111c <MPU6000_Write>
	MPU6000_Write(dev,MPU6000_ACCEL_CONFIG,0x00);
 80011f8:	2200      	movs	r2, #0
 80011fa:	211c      	movs	r1, #28
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff8d 	bl	800111c <MPU6000_Write>

	uint8_t whoami = MPU6000_Read(dev,MPU6000_WHO_AM_I);
 8001202:	2175      	movs	r1, #117	@ 0x75
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff4f 	bl	80010a8 <MPU6000_Read>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
	printf("Who am I: %d\n",whoami);
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	4619      	mov	r1, r3
 8001212:	4807      	ldr	r0, [pc, #28]	@ (8001230 <MPU6000_Init+0xa4>)
 8001214:	f00e fe2c 	bl	800fe70 <iprintf>

	// Pull CS low to select the device
	HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800121e:	4803      	ldr	r0, [pc, #12]	@ (800122c <MPU6000_Init+0xa0>)
 8001220:	f004 f9b4 	bl	800558c <HAL_GPIO_WritePin>
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	58021000 	.word	0x58021000
 8001230:	08012dd0 	.word	0x08012dd0

08001234 <MPU6000_Start_DMA>:

void MPU6000_Start_DMA(MPU6000 *dev){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    // Pull CS low to select the device
    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001242:	4818      	ldr	r0, [pc, #96]	@ (80012a4 <MPU6000_Start_DMA+0x70>)
 8001244:	f004 f9a2 	bl	800558c <HAL_GPIO_WritePin>

    // Transmit the register address with the read bit set (0x80)
    dev->tx_buffer[0]=0x3B|0x80;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	22bb      	movs	r2, #187	@ 0xbb
 800124c:	f883 2020 	strb.w	r2, [r3, #32]
    //SCB_CleanDCache_by_Addr((uint32_t*)dev->tx_buffer, 15);

    HAL_StatusTypeDef status = HAL_SPI_TransmitReceive_DMA(dev->hspi,dev->tx_buffer,dev->dma_buffer,15);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6818      	ldr	r0, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f103 0120 	add.w	r1, r3, #32
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001260:	230f      	movs	r3, #15
 8001262:	f008 fa25 	bl	80096b0 <HAL_SPI_TransmitReceive_DMA>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]

    while (!dev->spi_transfer_done);
 800126a:	bf00      	nop
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f083 0301 	eor.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f6      	bne.n	800126c <MPU6000_Start_DMA+0x38>
    dev->spi_transfer_done=false;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    //SCB_InvalidateDCache_by_Addr((uint32_t*)dev->dma_buffer, 15);

    HAL_GPIO_WritePin(MPU6000_CS_PORT, MPU6000_CS_PIN, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800128c:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <MPU6000_Start_DMA+0x70>)
 800128e:	f004 f97d 	bl	800558c <HAL_GPIO_WritePin>
    dev->state=2;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2202      	movs	r2, #2
 8001296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	58021000 	.word	0x58021000

080012a8 <MPU6000_Process_DMA>:

void MPU6000_Process_DMA(MPU6000 *dev) {
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
    int16_t raw_acc_x = (dev->dma_buffer[1] << 8) | dev->dma_buffer[2];
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	82fb      	strh	r3, [r7, #22]
    int16_t raw_acc_y = (dev->dma_buffer[3] << 8) | dev->dma_buffer[4];
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	021b      	lsls	r3, r3, #8
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	82bb      	strh	r3, [r7, #20]
    int16_t raw_acc_z = (dev->dma_buffer[5] << 8) | dev->dma_buffer[6];
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	827b      	strh	r3, [r7, #18]

    int16_t raw_temp  = (dev->dma_buffer[7] << 8) | dev->dma_buffer[8];
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80012fe:	b21b      	sxth	r3, r3
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	823b      	strh	r3, [r7, #16]

    int16_t raw_gyro_x = (dev->dma_buffer[9] << 8) | dev->dma_buffer[10];
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001316:	b21b      	sxth	r3, r3
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001322:	b21b      	sxth	r3, r3
 8001324:	4313      	orrs	r3, r2
 8001326:	81fb      	strh	r3, [r7, #14]
    int16_t raw_gyro_y = (dev->dma_buffer[11] << 8) | dev->dma_buffer[12];
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800132e:	b21b      	sxth	r3, r3
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	81bb      	strh	r3, [r7, #12]
    int16_t raw_gyro_z = (dev->dma_buffer[13] << 8) | dev->dma_buffer[14];
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001346:	b21b      	sxth	r3, r3
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	817b      	strh	r3, [r7, #10]

    dev->acc[0] = (float)raw_acc_x / ACCEL_SCALE;   // ±4g scale
 8001358:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800135c:	ee07 3a90 	vmov	s15, r3
 8001360:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001364:	eddf 6a31 	vldr	s13, [pc, #196]	@ 800142c <MPU6000_Process_DMA+0x184>
 8001368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	edc3 7a01 	vstr	s15, [r3, #4]
    dev->acc[1] = (float)raw_acc_y / ACCEL_SCALE;
 8001372:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001376:	ee07 3a90 	vmov	s15, r3
 800137a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137e:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 800142c <MPU6000_Process_DMA+0x184>
 8001382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	edc3 7a02 	vstr	s15, [r3, #8]
    dev->acc[2] = (float)raw_acc_z / ACCEL_SCALE;
 800138c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001398:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800142c <MPU6000_Process_DMA+0x184>
 800139c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	edc3 7a03 	vstr	s15, [r3, #12]

    dev->temp = ((float)raw_temp) / 340.0f + 36.53f;
 80013a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b2:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001430 <MPU6000_Process_DMA+0x188>
 80013b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ba:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001434 <MPU6000_Process_DMA+0x18c>
 80013be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edc3 7a07 	vstr	s15, [r3, #28]

    dev->gyro[0] = (float)raw_gyro_x / GYRO_SCALE;   // ±500°/s
 80013c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d4:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001438 <MPU6000_Process_DMA+0x190>
 80013d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edc3 7a04 	vstr	s15, [r3, #16]
    dev->gyro[1] = (float)raw_gyro_y / GYRO_SCALE;
 80013e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ee:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001438 <MPU6000_Process_DMA+0x190>
 80013f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	edc3 7a05 	vstr	s15, [r3, #20]
    dev->gyro[2] = (float)raw_gyro_z / GYRO_SCALE;
 80013fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001408:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001438 <MPU6000_Process_DMA+0x190>
 800140c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	edc3 7a06 	vstr	s15, [r3, #24]

    dev->state=0; // Reset after processing
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800141e:	bf00      	nop
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	46800000 	.word	0x46800000
 8001430:	43aa0000 	.word	0x43aa0000
 8001434:	42121eb8 	.word	0x42121eb8
 8001438:	43030000 	.word	0x43030000

0800143c <PID_Init>:
#include "pid.h"

void PID_Init(PID_Controller *pid, float Kp, float Ki, float Kd, float output_limit, float integral_limit)
{
 800143c:	b480      	push	{r7}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6178      	str	r0, [r7, #20]
 8001444:	ed87 0a04 	vstr	s0, [r7, #16]
 8001448:	edc7 0a03 	vstr	s1, [r7, #12]
 800144c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001450:	edc7 1a01 	vstr	s3, [r7, #4]
 8001454:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	68ba      	ldr	r2, [r7, #8]
 8001468:	609a      	str	r2, [r3, #8]

    pid->prev_error = 0.0f;
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
    pid->integral = 0.0f;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	615a      	str	r2, [r3, #20]
    pid->output = 0.0f;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	621a      	str	r2, [r3, #32]

    pid->output_limit = output_limit;
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
    pid->integral_limit = integral_limit;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	61da      	str	r2, [r3, #28]
}
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <PID_Compute>:

float PID_Compute(PID_Controller *pid, float target, float measured, float dt)
{
 800149a:	b480      	push	{r7}
 800149c:	b087      	sub	sp, #28
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80014a6:	edc7 0a01 	vstr	s1, [r7, #4]
 80014aa:	ed87 1a00 	vstr	s2, [r7]
    float error = target - measured;
 80014ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80014b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ba:	edc7 7a05 	vstr	s15, [r7, #20]
    pid->integral += error * dt;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80014c4:	edd7 6a05 	vldr	s13, [r7, #20]
 80014c8:	edd7 7a00 	vldr	s15, [r7]
 80014cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	edc3 7a05 	vstr	s15, [r3, #20]

    // Limit integral to prevent windup
    if (pid->integral > pid->integral_limit) pid->integral = pid->integral_limit;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	ed93 7a05 	vldr	s14, [r3, #20]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80014e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	dd03      	ble.n	80014f8 <PID_Compute+0x5e>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	69da      	ldr	r2, [r3, #28]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	615a      	str	r2, [r3, #20]
    if (pid->integral < -pid->integral_limit) pid->integral = -pid->integral_limit;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	ed93 7a05 	vldr	s14, [r3, #20]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	edd3 7a07 	vldr	s15, [r3, #28]
 8001504:	eef1 7a67 	vneg.f32	s15, s15
 8001508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800150c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001510:	d507      	bpl.n	8001522 <PID_Compute+0x88>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	edd3 7a07 	vldr	s15, [r3, #28]
 8001518:	eef1 7a67 	vneg.f32	s15, s15
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	edc3 7a05 	vstr	s15, [r3, #20]

    float derivative = (error - pid->prev_error) / dt;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	edd3 7a04 	vldr	s15, [r3, #16]
 8001528:	ed97 7a05 	vldr	s14, [r7, #20]
 800152c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001530:	ed97 7a00 	vldr	s14, [r7]
 8001534:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001538:	edc7 7a04 	vstr	s15, [r7, #16]

    pid->output = pid->Kp * error + pid->Ki * pid->integral + pid->Kd * derivative;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	edd7 7a05 	vldr	s15, [r7, #20]
 8001546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	edd3 7a05 	vldr	s15, [r3, #20]
 8001556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	edd3 6a02 	vldr	s13, [r3, #8]
 8001564:	edd7 7a04 	vldr	s15, [r7, #16]
 8001568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800156c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	edc3 7a08 	vstr	s15, [r3, #32]

    // Limit output
    if (pid->output > pid->output_limit) pid->output = pid->output_limit;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	ed93 7a08 	vldr	s14, [r3, #32]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001582:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158a:	dd03      	ble.n	8001594 <PID_Compute+0xfa>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	621a      	str	r2, [r3, #32]
    if (pid->output < -pid->output_limit) pid->output = -pid->output_limit;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	ed93 7a08 	vldr	s14, [r3, #32]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	edd3 7a06 	vldr	s15, [r3, #24]
 80015a0:	eef1 7a67 	vneg.f32	s15, s15
 80015a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d507      	bpl.n	80015be <PID_Compute+0x124>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80015b4:	eef1 7a67 	vneg.f32	s15, s15
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	edc3 7a08 	vstr	s15, [r3, #32]

    pid->prev_error = error;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	611a      	str	r2, [r3, #16]

    return pid->output;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	ee07 3a90 	vmov	s15, r3
}
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	371c      	adds	r7, #28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <MX_SPI4_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80015e0:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <MX_SPI4_Init+0xa4>)
 80015e2:	4a28      	ldr	r2, [pc, #160]	@ (8001684 <MX_SPI4_Init+0xa8>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <MX_SPI4_Init+0xa4>)
 80015e8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015ec:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <MX_SPI4_Init+0xa4>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <MX_SPI4_Init+0xa4>)
 80015f6:	2207      	movs	r2, #7
 80015f8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <MX_SPI4_Init+0xa4>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001600:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001606:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001608:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800160c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <MX_SPI4_Init+0xa4>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001628:	2200      	movs	r2, #0
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_SPI4_Init+0xa4>)
 800162e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001632:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001634:	4b12      	ldr	r3, [pc, #72]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001636:	2200      	movs	r2, #0
 8001638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <MX_SPI4_Init+0xa4>)
 800163c:	2200      	movs	r2, #0
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001640:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001642:	2200      	movs	r2, #0
 8001644:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001648:	2200      	movs	r2, #0
 800164a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800164c:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <MX_SPI4_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001658:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <MX_SPI4_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800165e:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <MX_SPI4_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_SPI4_Init+0xa4>)
 800166c:	f007 fdba 	bl	80091e4 <HAL_SPI_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001676:	f7ff fd11 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	24000430 	.word	0x24000430
 8001684:	40013400 	.word	0x40013400

08001688 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0ba      	sub	sp, #232	@ 0xe8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a0:	f107 0310 	add.w	r3, r7, #16
 80016a4:	22c0      	movs	r2, #192	@ 0xc0
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f00e fc36 	bl	800ff1a <memset>
  if(spiHandle->Instance==SPI4)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a59      	ldr	r2, [pc, #356]	@ (8001818 <HAL_SPI_MspInit+0x190>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	f040 80aa 	bne.w	800180e <HAL_SPI_MspInit+0x186>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80016ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4618      	mov	r0, r3
 80016d0:	f006 fa1a 	bl	8007b08 <HAL_RCCEx_PeriphCLKConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80016da:	f7ff fcdf 	bl	800109c <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016de:	4b4f      	ldr	r3, [pc, #316]	@ (800181c <HAL_SPI_MspInit+0x194>)
 80016e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016e4:	4a4d      	ldr	r2, [pc, #308]	@ (800181c <HAL_SPI_MspInit+0x194>)
 80016e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016ee:	4b4b      	ldr	r3, [pc, #300]	@ (800181c <HAL_SPI_MspInit+0x194>)
 80016f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016fc:	4b47      	ldr	r3, [pc, #284]	@ (800181c <HAL_SPI_MspInit+0x194>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	4a46      	ldr	r2, [pc, #280]	@ (800181c <HAL_SPI_MspInit+0x194>)
 8001704:	f043 0310 	orr.w	r3, r3, #16
 8001708:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800170c:	4b43      	ldr	r3, [pc, #268]	@ (800181c <HAL_SPI_MspInit+0x194>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800171a:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 800171e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001734:	2305      	movs	r3, #5
 8001736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800173a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800173e:	4619      	mov	r1, r3
 8001740:	4837      	ldr	r0, [pc, #220]	@ (8001820 <HAL_SPI_MspInit+0x198>)
 8001742:	f003 fd73 	bl	800522c <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8001746:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 8001748:	4a37      	ldr	r2, [pc, #220]	@ (8001828 <HAL_SPI_MspInit+0x1a0>)
 800174a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 800174c:	4b35      	ldr	r3, [pc, #212]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 800174e:	2253      	movs	r2, #83	@ 0x53
 8001750:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001758:	4b32      	ldr	r3, [pc, #200]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800175e:	4b31      	ldr	r3, [pc, #196]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 8001760:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001764:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001766:	4b2f      	ldr	r3, [pc, #188]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 8001768:	2200      	movs	r2, #0
 800176a:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800176c:	4b2d      	ldr	r3, [pc, #180]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 800176e:	2200      	movs	r2, #0
 8001770:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001772:	4b2c      	ldr	r3, [pc, #176]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 8001774:	2200      	movs	r2, #0
 8001776:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001778:	4b2a      	ldr	r3, [pc, #168]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 800177a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800177e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001780:	4b28      	ldr	r3, [pc, #160]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001786:	4827      	ldr	r0, [pc, #156]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 8001788:	f000 ff08 	bl	800259c <HAL_DMA_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8001792:	f7ff fc83 	bl	800109c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a22      	ldr	r2, [pc, #136]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 800179a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800179c:	4a21      	ldr	r2, [pc, #132]	@ (8001824 <HAL_SPI_MspInit+0x19c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 80017a2:	4b22      	ldr	r3, [pc, #136]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017a4:	4a22      	ldr	r2, [pc, #136]	@ (8001830 <HAL_SPI_MspInit+0x1a8>)
 80017a6:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80017a8:	4b20      	ldr	r3, [pc, #128]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017aa:	2254      	movs	r2, #84	@ 0x54
 80017ac:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ae:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017b0:	2240      	movs	r2, #64	@ 0x40
 80017b2:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017c0:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017da:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80017e2:	4812      	ldr	r0, [pc, #72]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017e4:	f000 feda 	bl	800259c <HAL_DMA_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 80017ee:	f7ff fc55 	bl	800109c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017f6:	679a      	str	r2, [r3, #120]	@ 0x78
 80017f8:	4a0c      	ldr	r2, [pc, #48]	@ (800182c <HAL_SPI_MspInit+0x1a4>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2054      	movs	r0, #84	@ 0x54
 8001804:	f000 fe95 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001808:	2054      	movs	r0, #84	@ 0x54
 800180a:	f000 feac 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800180e:	bf00      	nop
 8001810:	37e8      	adds	r7, #232	@ 0xe8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40013400 	.word	0x40013400
 800181c:	58024400 	.word	0x58024400
 8001820:	58021000 	.word	0x58021000
 8001824:	240004b8 	.word	0x240004b8
 8001828:	40020458 	.word	0x40020458
 800182c:	24000530 	.word	0x24000530
 8001830:	40020428 	.word	0x40020428

08001834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <HAL_MspInit+0x30>)
 800183c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001840:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <HAL_MspInit+0x30>)
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800184a:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <HAL_MspInit+0x30>)
 800184c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	58024400 	.word	0x58024400

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <NMI_Handler+0x4>

08001870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <MemManage_Handler+0x4>

08001880 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <UsageFault_Handler+0x4>

08001890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f000 fd0d 	bl	80022dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <DMA1_Stream0_IRQHandler+0x10>)
 80018ce:	f002 f98f 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	24000644 	.word	0x24000644

080018dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <DMA1_Stream1_IRQHandler+0x10>)
 80018e2:	f002 f985 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	240006bc 	.word	0x240006bc

080018f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <DMA1_Stream2_IRQHandler+0x10>)
 80018f6:	f002 f97b 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	24000734 	.word	0x24000734

08001904 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <DMA1_Stream3_IRQHandler+0x10>)
 800190a:	f002 f971 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	240007ac 	.word	0x240007ac

08001918 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <TIM2_IRQHandler+0x10>)
 800191e:	f008 fd0a 	bl	800a336 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	240005ac 	.word	0x240005ac

0800192c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001930:	4802      	ldr	r0, [pc, #8]	@ (800193c <DMA2_Stream1_IRQHandler+0x10>)
 8001932:	f002 f95d 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	24000530 	.word	0x24000530

08001940 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001944:	4802      	ldr	r0, [pc, #8]	@ (8001950 <DMA2_Stream3_IRQHandler+0x10>)
 8001946:	f002 f953 	bl	8003bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	240004b8 	.word	0x240004b8

08001954 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001958:	4802      	ldr	r0, [pc, #8]	@ (8001964 <SPI4_IRQHandler+0x10>)
 800195a:	f008 f861 	bl	8009a20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	24000430 	.word	0x24000430

08001968 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <OTG_FS_IRQHandler+0x10>)
 800196e:	f003 ff67 	bl	8005840 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	24001d08 	.word	0x24001d08

0800197c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001986:	4b0f      	ldr	r3, [pc, #60]	@ (80019c4 <ITM_SendChar+0x48>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <ITM_SendChar+0x48>)
 800198c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001990:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001992:	4b0d      	ldr	r3, [pc, #52]	@ (80019c8 <ITM_SendChar+0x4c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <ITM_SendChar+0x4c>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800199e:	bf00      	nop
 80019a0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f8      	beq.n	80019a0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80019ae:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	6013      	str	r3, [r2, #0]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000edfc 	.word	0xe000edfc
 80019c8:	e0000e00 	.word	0xe0000e00

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_kill>:

int _kill(int pid, int sig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e6:	f00e faeb 	bl	800ffc0 <__errno>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2216      	movs	r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
  return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe7 	bl	80019dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0e:	bf00      	nop
 8001a10:	e7fd      	b.n	8001a0e <_exit+0x12>

08001a12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e00a      	b.n	8001a3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a24:	f3af 8000 	nop.w
 8001a28:	4601      	mov	r1, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	60ba      	str	r2, [r7, #8]
 8001a30:	b2ca      	uxtb	r2, r1
 8001a32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	3301      	adds	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	dbf0      	blt.n	8001a24 <_read+0x12>
  }

  return len;
 8001a42:	687b      	ldr	r3, [r7, #4]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e009      	b.n	8001a72 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1c5a      	adds	r2, r3, #1
 8001a62:	60ba      	str	r2, [r7, #8]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff88 	bl	800197c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbf1      	blt.n	8001a5e <_write+0x12>
  }
  return len;
 8001a7a:	687b      	ldr	r3, [r7, #4]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_close>:

int _close(int file)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aac:	605a      	str	r2, [r3, #4]
  return 0;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_isatty>:

int _isatty(int file)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac4:	2301      	movs	r3, #1
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	@ (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f00e fa50 	bl	800ffc0 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	@ (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	24080000 	.word	0x24080000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	240005a8 	.word	0x240005a8
 8001b54:	24002558 	.word	0x24002558

08001b58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b43      	ldr	r3, [pc, #268]	@ (8001c6c <SystemInit+0x114>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b62:	4a42      	ldr	r2, [pc, #264]	@ (8001c6c <SystemInit+0x114>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b6c:	4b40      	ldr	r3, [pc, #256]	@ (8001c70 <SystemInit+0x118>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	2b06      	cmp	r3, #6
 8001b76:	d807      	bhi.n	8001b88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b78:	4b3d      	ldr	r3, [pc, #244]	@ (8001c70 <SystemInit+0x118>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f023 030f 	bic.w	r3, r3, #15
 8001b80:	4a3b      	ldr	r2, [pc, #236]	@ (8001c70 <SystemInit+0x118>)
 8001b82:	f043 0307 	orr.w	r3, r3, #7
 8001b86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b88:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <SystemInit+0x11c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a39      	ldr	r2, [pc, #228]	@ (8001c74 <SystemInit+0x11c>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b94:	4b37      	ldr	r3, [pc, #220]	@ (8001c74 <SystemInit+0x11c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b9a:	4b36      	ldr	r3, [pc, #216]	@ (8001c74 <SystemInit+0x11c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4935      	ldr	r1, [pc, #212]	@ (8001c74 <SystemInit+0x11c>)
 8001ba0:	4b35      	ldr	r3, [pc, #212]	@ (8001c78 <SystemInit+0x120>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ba6:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <SystemInit+0x118>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <SystemInit+0x118>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 030f 	bic.w	r3, r3, #15
 8001bba:	4a2d      	ldr	r2, [pc, #180]	@ (8001c70 <SystemInit+0x118>)
 8001bbc:	f043 0307 	orr.w	r3, r3, #7
 8001bc0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <SystemInit+0x11c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c74 <SystemInit+0x11c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bce:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <SystemInit+0x11c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bd4:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <SystemInit+0x11c>)
 8001bd6:	4a29      	ldr	r2, [pc, #164]	@ (8001c7c <SystemInit+0x124>)
 8001bd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bda:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <SystemInit+0x11c>)
 8001bdc:	4a28      	ldr	r2, [pc, #160]	@ (8001c80 <SystemInit+0x128>)
 8001bde:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001be0:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <SystemInit+0x11c>)
 8001be2:	4a28      	ldr	r2, [pc, #160]	@ (8001c84 <SystemInit+0x12c>)
 8001be4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001be6:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <SystemInit+0x11c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bec:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <SystemInit+0x11c>)
 8001bee:	4a25      	ldr	r2, [pc, #148]	@ (8001c84 <SystemInit+0x12c>)
 8001bf0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <SystemInit+0x11c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c74 <SystemInit+0x11c>)
 8001bfa:	4a22      	ldr	r2, [pc, #136]	@ (8001c84 <SystemInit+0x12c>)
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <SystemInit+0x11c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <SystemInit+0x11c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1a      	ldr	r2, [pc, #104]	@ (8001c74 <SystemInit+0x11c>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c10:	4b18      	ldr	r3, [pc, #96]	@ (8001c74 <SystemInit+0x11c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c16:	4b1c      	ldr	r3, [pc, #112]	@ (8001c88 <SystemInit+0x130>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <SystemInit+0x134>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c22:	d202      	bcs.n	8001c2a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c24:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <SystemInit+0x138>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001c2a:	4b12      	ldr	r3, [pc, #72]	@ (8001c74 <SystemInit+0x11c>)
 8001c2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d113      	bne.n	8001c60 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c38:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <SystemInit+0x11c>)
 8001c3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <SystemInit+0x11c>)
 8001c40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c44:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <SystemInit+0x13c>)
 8001c4a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <SystemInit+0x11c>)
 8001c52:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001c56:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <SystemInit+0x11c>)
 8001c58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c5c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00
 8001c70:	52002000 	.word	0x52002000
 8001c74:	58024400 	.word	0x58024400
 8001c78:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c7c:	02020200 	.word	0x02020200
 8001c80:	01ff0000 	.word	0x01ff0000
 8001c84:	01010280 	.word	0x01010280
 8001c88:	5c001000 	.word	0x5c001000
 8001c8c:	ffff0000 	.word	0xffff0000
 8001c90:	51008108 	.word	0x51008108
 8001c94:	52004000 	.word	0x52004000

08001c98 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <ExitRun0Mode+0x2c>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a08      	ldr	r2, [pc, #32]	@ (8001cc4 <ExitRun0Mode+0x2c>)
 8001ca2:	f043 0302 	orr.w	r3, r3, #2
 8001ca6:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001ca8:	bf00      	nop
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <ExitRun0Mode+0x2c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f9      	beq.n	8001caa <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	58024800 	.word	0x58024800

08001cc8 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim8_ch3;
DMA_HandleTypeDef hdma_tim8_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001ce8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001cf0:	223f      	movs	r2, #63	@ 0x3f
 8001cf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001cfc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d0e:	4814      	ldr	r0, [pc, #80]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d10:	f008 f9e1 	bl	800a0d6 <HAL_TIM_Base_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d1a:	f7ff f9bf 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480d      	ldr	r0, [pc, #52]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d2c:	f008 fd1e 	bl	800a76c <HAL_TIM_ConfigClockSource>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d36:	f7ff f9b1 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4806      	ldr	r0, [pc, #24]	@ (8001d60 <MX_TIM2_Init+0x98>)
 8001d48:	f009 fa44 	bl	800b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d52:	f7ff f9a3 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d56:	bf00      	nop
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	240005ac 	.word	0x240005ac

08001d64 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b09a      	sub	sp, #104	@ 0x68
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	222c      	movs	r2, #44	@ 0x2c
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f00e f8bb 	bl	800ff1a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001da4:	4b59      	ldr	r3, [pc, #356]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001da6:	4a5a      	ldr	r2, [pc, #360]	@ (8001f10 <MX_TIM8_Init+0x1ac>)
 8001da8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001daa:	4b58      	ldr	r3, [pc, #352]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db0:	4b56      	ldr	r3, [pc, #344]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 320-1;
 8001db6:	4b55      	ldr	r3, [pc, #340]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001db8:	f240 123f 	movw	r2, #319	@ 0x13f
 8001dbc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbe:	4b53      	ldr	r3, [pc, #332]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dc4:	4b51      	ldr	r3, [pc, #324]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dca:	4b50      	ldr	r3, [pc, #320]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001dd0:	484e      	ldr	r0, [pc, #312]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001dd2:	f008 f980 	bl	800a0d6 <HAL_TIM_Base_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001ddc:	f7ff f95e 	bl	800109c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001de6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001dea:	4619      	mov	r1, r3
 8001dec:	4847      	ldr	r0, [pc, #284]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001dee:	f008 fcbd 	bl	800a76c <HAL_TIM_ConfigClockSource>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001df8:	f7ff f950 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001dfc:	4843      	ldr	r0, [pc, #268]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001dfe:	f008 fa39 	bl	800a274 <HAL_TIM_PWM_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001e08:	f7ff f948 	bl	800109c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e10:	2300      	movs	r3, #0
 8001e12:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e14:	2300      	movs	r3, #0
 8001e16:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	483b      	ldr	r0, [pc, #236]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001e20:	f009 f9d8 	bl	800b1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001e2a:	f7ff f937 	bl	800109c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e2e:	2360      	movs	r3, #96	@ 0x60
 8001e30:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e36:	2300      	movs	r3, #0
 8001e38:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e4e:	2200      	movs	r2, #0
 8001e50:	4619      	mov	r1, r3
 8001e52:	482e      	ldr	r0, [pc, #184]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001e54:	f008 fb76 	bl	800a544 <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001e5e:	f7ff f91d 	bl	800109c <Error_Handler>
  }
  sConfigOC.Pulse = 420;
 8001e62:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8001e66:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e74:	2204      	movs	r2, #4
 8001e76:	4619      	mov	r1, r3
 8001e78:	4824      	ldr	r0, [pc, #144]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001e7a:	f008 fb63 	bl	800a544 <HAL_TIM_PWM_ConfigChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8001e84:	f7ff f90a 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e88:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	4619      	mov	r1, r3
 8001e90:	481e      	ldr	r0, [pc, #120]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001e92:	f008 fb57 	bl	800a544 <HAL_TIM_PWM_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8001e9c:	f7ff f8fe 	bl	800109c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ea0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ea4:	220c      	movs	r2, #12
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4818      	ldr	r0, [pc, #96]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001eaa:	f008 fb4b 	bl	800a544 <HAL_TIM_PWM_ConfigChannel>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM8_Init+0x154>
  {
    Error_Handler();
 8001eb4:	f7ff f8f2 	bl	800109c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ecc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ed0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001eda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	4619      	mov	r1, r3
 8001eec:	4807      	ldr	r0, [pc, #28]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001eee:	f009 f9ff 	bl	800b2f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM8_Init+0x198>
  {
    Error_Handler();
 8001ef8:	f7ff f8d0 	bl	800109c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001efc:	4803      	ldr	r0, [pc, #12]	@ (8001f0c <MX_TIM8_Init+0x1a8>)
 8001efe:	f000 f913 	bl	8002128 <HAL_TIM_MspPostInit>

}
 8001f02:	bf00      	nop
 8001f04:	3768      	adds	r7, #104	@ 0x68
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	240005f8 	.word	0x240005f8
 8001f10:	40010400 	.word	0x40010400

08001f14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f24:	d117      	bne.n	8001f56 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f26:	4b76      	ldr	r3, [pc, #472]	@ (8002100 <HAL_TIM_Base_MspInit+0x1ec>)
 8001f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f2c:	4a74      	ldr	r2, [pc, #464]	@ (8002100 <HAL_TIM_Base_MspInit+0x1ec>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f36:	4b72      	ldr	r3, [pc, #456]	@ (8002100 <HAL_TIM_Base_MspInit+0x1ec>)
 8001f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2100      	movs	r1, #0
 8001f48:	201c      	movs	r0, #28
 8001f4a:	f000 faf2 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f4e:	201c      	movs	r0, #28
 8001f50:	f000 fb09 	bl	8002566 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f54:	e0d0      	b.n	80020f8 <HAL_TIM_Base_MspInit+0x1e4>
  else if(tim_baseHandle->Instance==TIM8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a6a      	ldr	r2, [pc, #424]	@ (8002104 <HAL_TIM_Base_MspInit+0x1f0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f040 80cb 	bne.w	80020f8 <HAL_TIM_Base_MspInit+0x1e4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f62:	4b67      	ldr	r3, [pc, #412]	@ (8002100 <HAL_TIM_Base_MspInit+0x1ec>)
 8001f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f68:	4a65      	ldr	r2, [pc, #404]	@ (8002100 <HAL_TIM_Base_MspInit+0x1ec>)
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f72:	4b63      	ldr	r3, [pc, #396]	@ (8002100 <HAL_TIM_Base_MspInit+0x1ec>)
 8001f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch1.Instance = DMA1_Stream0;
 8001f80:	4b61      	ldr	r3, [pc, #388]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001f82:	4a62      	ldr	r2, [pc, #392]	@ (800210c <HAL_TIM_Base_MspInit+0x1f8>)
 8001f84:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1.Init.Request = DMA_REQUEST_TIM8_CH1;
 8001f86:	4b60      	ldr	r3, [pc, #384]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001f88:	222f      	movs	r2, #47	@ 0x2f
 8001f8a:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001f8e:	2240      	movs	r2, #64	@ 0x40
 8001f90:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f92:	4b5d      	ldr	r3, [pc, #372]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f98:	4b5b      	ldr	r3, [pc, #364]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001f9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f9e:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fa0:	4b59      	ldr	r3, [pc, #356]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fa6:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fa8:	4b57      	ldr	r3, [pc, #348]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001faa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fae:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1.Init.Mode = DMA_NORMAL;
 8001fb0:	4b55      	ldr	r3, [pc, #340]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001fb6:	4b54      	ldr	r3, [pc, #336]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fbc:	4b52      	ldr	r3, [pc, #328]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1) != HAL_OK)
 8001fc2:	4851      	ldr	r0, [pc, #324]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fc4:	f000 faea 	bl	800259c <HAL_DMA_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8001fce:	f7ff f865 	bl	800109c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002108 <HAL_TIM_Base_MspInit+0x1f4>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim8_ch2.Instance = DMA1_Stream1;
 8001fde:	4b4c      	ldr	r3, [pc, #304]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	@ (8002114 <HAL_TIM_Base_MspInit+0x200>)
 8001fe2:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Request = DMA_REQUEST_TIM8_CH2;
 8001fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8001fe6:	2230      	movs	r2, #48	@ 0x30
 8001fe8:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fea:	4b49      	ldr	r3, [pc, #292]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8001fec:	2240      	movs	r2, #64	@ 0x40
 8001fee:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ff0:	4b47      	ldr	r3, [pc, #284]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001ff6:	4b46      	ldr	r3, [pc, #280]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8001ff8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ffc:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ffe:	4b44      	ldr	r3, [pc, #272]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8002000:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002004:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002006:	4b42      	ldr	r3, [pc, #264]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8002008:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800200c:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_NORMAL;
 800200e:	4b40      	ldr	r3, [pc, #256]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8002010:	2200      	movs	r2, #0
 8002012:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002014:	4b3e      	ldr	r3, [pc, #248]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8002016:	2200      	movs	r2, #0
 8002018:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800201a:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 8002020:	483b      	ldr	r0, [pc, #236]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8002022:	f000 fabb 	bl	800259c <HAL_DMA_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_TIM_Base_MspInit+0x11c>
      Error_Handler();
 800202c:	f7ff f836 	bl	800109c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a37      	ldr	r2, [pc, #220]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28
 8002036:	4a36      	ldr	r2, [pc, #216]	@ (8002110 <HAL_TIM_Base_MspInit+0x1fc>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim8_ch3.Instance = DMA1_Stream2;
 800203c:	4b36      	ldr	r3, [pc, #216]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 800203e:	4a37      	ldr	r2, [pc, #220]	@ (800211c <HAL_TIM_Base_MspInit+0x208>)
 8002040:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Request = DMA_REQUEST_TIM8_CH3;
 8002042:	4b35      	ldr	r3, [pc, #212]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 8002044:	2231      	movs	r2, #49	@ 0x31
 8002046:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002048:	4b33      	ldr	r3, [pc, #204]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 800204a:	2240      	movs	r2, #64	@ 0x40
 800204c:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800204e:	4b32      	ldr	r3, [pc, #200]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 8002050:	2200      	movs	r2, #0
 8002052:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002054:	4b30      	ldr	r3, [pc, #192]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 8002056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800205a:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800205c:	4b2e      	ldr	r3, [pc, #184]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 800205e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002062:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002064:	4b2c      	ldr	r3, [pc, #176]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 8002066:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800206a:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_NORMAL;
 800206c:	4b2a      	ldr	r3, [pc, #168]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002072:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002078:	4b27      	ldr	r3, [pc, #156]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 800207e:	4826      	ldr	r0, [pc, #152]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 8002080:	f000 fa8c 	bl	800259c <HAL_DMA_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_TIM_Base_MspInit+0x17a>
      Error_Handler();
 800208a:	f7ff f807 	bl	800109c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a21      	ldr	r2, [pc, #132]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 8002092:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002094:	4a20      	ldr	r2, [pc, #128]	@ (8002118 <HAL_TIM_Base_MspInit+0x204>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim8_ch4.Instance = DMA1_Stream3;
 800209a:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 800209c:	4a21      	ldr	r2, [pc, #132]	@ (8002124 <HAL_TIM_Base_MspInit+0x210>)
 800209e:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4.Init.Request = DMA_REQUEST_TIM8_CH4;
 80020a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020a2:	2232      	movs	r2, #50	@ 0x32
 80020a4:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020a8:	2240      	movs	r2, #64	@ 0x40
 80020aa:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80020b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b8:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020ba:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020c0:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020c2:	4b17      	ldr	r3, [pc, #92]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c8:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4.Init.Mode = DMA_NORMAL;
 80020ca:	4b15      	ldr	r3, [pc, #84]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020d6:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4) != HAL_OK)
 80020dc:	4810      	ldr	r0, [pc, #64]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020de:	f000 fa5d 	bl	800259c <HAL_DMA_Init>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_TIM_Base_MspInit+0x1d8>
      Error_Handler();
 80020e8:	f7fe ffd8 	bl	800109c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80020f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002120 <HAL_TIM_Base_MspInit+0x20c>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	58024400 	.word	0x58024400
 8002104:	40010400 	.word	0x40010400
 8002108:	24000644 	.word	0x24000644
 800210c:	40020010 	.word	0x40020010
 8002110:	240006bc 	.word	0x240006bc
 8002114:	40020028 	.word	0x40020028
 8002118:	24000734 	.word	0x24000734
 800211c:	40020040 	.word	0x40020040
 8002120:	240007ac 	.word	0x240007ac
 8002124:	40020058 	.word	0x40020058

08002128 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a13      	ldr	r2, [pc, #76]	@ (8002194 <HAL_TIM_MspPostInit+0x6c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d11f      	bne.n	800218a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <HAL_TIM_MspPostInit+0x70>)
 800214c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002150:	4a11      	ldr	r2, [pc, #68]	@ (8002198 <HAL_TIM_MspPostInit+0x70>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800215a:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_TIM_MspPostInit+0x70>)
 800215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	60bb      	str	r3, [r7, #8]
 8002166:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002168:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800216c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800217a:	2303      	movs	r3, #3
 800217c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	@ (800219c <HAL_TIM_MspPostInit+0x74>)
 8002186:	f003 f851 	bl	800522c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	3720      	adds	r7, #32
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40010400 	.word	0x40010400
 8002198:	58024400 	.word	0x58024400
 800219c:	58020800 	.word	0x58020800

080021a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021a0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80021dc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80021a4:	f7ff fd78 	bl	8001c98 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021a8:	f7ff fcd6 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ac:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ae:	490d      	ldr	r1, [pc, #52]	@ (80021e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021b0:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b4:	e002      	b.n	80021bc <LoopCopyDataInit>

080021b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ba:	3304      	adds	r3, #4

080021bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c0:	d3f9      	bcc.n	80021b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021c4:	4c0a      	ldr	r4, [pc, #40]	@ (80021f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c8:	e001      	b.n	80021ce <LoopFillZerobss>

080021ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021cc:	3204      	adds	r2, #4

080021ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d0:	d3fb      	bcc.n	80021ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021d2:	f00d fefb 	bl	800ffcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021d6:	f7fe fcab 	bl	8000b30 <main>
  bx  lr
 80021da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021e4:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 80021e8:	08013710 	.word	0x08013710
  ldr r2, =_sbss
 80021ec:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 80021f0:	24002558 	.word	0x24002558

080021f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021f4:	e7fe      	b.n	80021f4 <ADC3_IRQHandler>
	...

080021f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fe:	2003      	movs	r0, #3
 8002200:	f000 f98c 	bl	800251c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002204:	f005 fad6 	bl	80077b4 <HAL_RCC_GetSysClockFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <HAL_Init+0x68>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	4913      	ldr	r1, [pc, #76]	@ (8002264 <HAL_Init+0x6c>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002222:	4b0f      	ldr	r3, [pc, #60]	@ (8002260 <HAL_Init+0x68>)
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	4a0e      	ldr	r2, [pc, #56]	@ (8002264 <HAL_Init+0x6c>)
 800222c:	5cd3      	ldrb	r3, [r2, r3]
 800222e:	f003 031f 	and.w	r3, r3, #31
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	4a0b      	ldr	r2, [pc, #44]	@ (8002268 <HAL_Init+0x70>)
 800223a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800223c:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <HAL_Init+0x74>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002242:	200f      	movs	r0, #15
 8002244:	f000 f814 	bl	8002270 <HAL_InitTick>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e002      	b.n	8002258 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002252:	f7ff faef 	bl	8001834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	58024400 	.word	0x58024400
 8002264:	08012e28 	.word	0x08012e28
 8002268:	2400000c 	.word	0x2400000c
 800226c:	24000008 	.word	0x24000008

08002270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002278:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <HAL_InitTick+0x60>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e021      	b.n	80022c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <HAL_InitTick+0x64>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b11      	ldr	r3, [pc, #68]	@ (80022d0 <HAL_InitTick+0x60>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002292:	fbb3 f3f1 	udiv	r3, r3, r1
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f971 	bl	8002582 <HAL_SYSTICK_Config>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e00e      	b.n	80022c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0f      	cmp	r3, #15
 80022ae:	d80a      	bhi.n	80022c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b0:	2200      	movs	r2, #0
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	f04f 30ff 	mov.w	r0, #4294967295
 80022b8:	f000 f93b 	bl	8002532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022bc:	4a06      	ldr	r2, [pc, #24]	@ (80022d8 <HAL_InitTick+0x68>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e000      	b.n	80022c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	24000014 	.word	0x24000014
 80022d4:	24000008 	.word	0x24000008
 80022d8:	24000010 	.word	0x24000010

080022dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e0:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_IncTick+0x20>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_IncTick+0x24>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4413      	add	r3, r2
 80022ec:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <HAL_IncTick+0x24>)
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	24000014 	.word	0x24000014
 8002300:	24000824 	.word	0x24000824

08002304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return uwTick;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_GetTick+0x14>)
 800230a:	681b      	ldr	r3, [r3, #0]
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	24000824 	.word	0x24000824

0800231c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff ffee 	bl	8002304 <HAL_GetTick>
 8002328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d005      	beq.n	8002342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_Delay+0x44>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	461a      	mov	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002342:	bf00      	nop
 8002344:	f7ff ffde 	bl	8002304 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	429a      	cmp	r2, r3
 8002352:	d8f7      	bhi.n	8002344 <HAL_Delay+0x28>
  {
  }
}
 8002354:	bf00      	nop
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	24000014 	.word	0x24000014

08002364 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <HAL_GetREVID+0x14>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0c1b      	lsrs	r3, r3, #16
}
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	5c001000 	.word	0x5c001000

0800237c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <__NVIC_SetPriorityGrouping+0x40>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023aa:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <__NVIC_SetPriorityGrouping+0x40>)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	60d3      	str	r3, [r2, #12]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00
 80023c0:	05fa0000 	.word	0x05fa0000

080023c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4907      	ldr	r1, [pc, #28]	@ (8002418 <__NVIC_EnableIRQ+0x38>)
 80023fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	@ (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	@ (800246c <__NVIC_SetPriority+0x50>)
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	@ 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
         );
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	@ 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024e8:	d301      	bcc.n	80024ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ea:	2301      	movs	r3, #1
 80024ec:	e00f      	b.n	800250e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002518 <SysTick_Config+0x40>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f6:	210f      	movs	r1, #15
 80024f8:	f04f 30ff 	mov.w	r0, #4294967295
 80024fc:	f7ff ff8e 	bl	800241c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002500:	4b05      	ldr	r3, [pc, #20]	@ (8002518 <SysTick_Config+0x40>)
 8002502:	2200      	movs	r2, #0
 8002504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	4b04      	ldr	r3, [pc, #16]	@ (8002518 <SysTick_Config+0x40>)
 8002508:	2207      	movs	r2, #7
 800250a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	e000e010 	.word	0xe000e010

0800251c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ff29 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b086      	sub	sp, #24
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	607a      	str	r2, [r7, #4]
 800253e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002540:	f7ff ff40 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f7ff ff90 	bl	8002470 <NVIC_EncodePriority>
 8002550:	4602      	mov	r2, r0
 8002552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff5f 	bl	800241c <__NVIC_SetPriority>
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff33 	bl	80023e0 <__NVIC_EnableIRQ>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffa4 	bl	80024d8 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff feae 	bl	8002304 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e316      	b.n	8002be2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a66      	ldr	r2, [pc, #408]	@ (8002754 <HAL_DMA_Init+0x1b8>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d04a      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a65      	ldr	r2, [pc, #404]	@ (8002758 <HAL_DMA_Init+0x1bc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d045      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a63      	ldr	r2, [pc, #396]	@ (800275c <HAL_DMA_Init+0x1c0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d040      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a62      	ldr	r2, [pc, #392]	@ (8002760 <HAL_DMA_Init+0x1c4>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d03b      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a60      	ldr	r2, [pc, #384]	@ (8002764 <HAL_DMA_Init+0x1c8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d036      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002768 <HAL_DMA_Init+0x1cc>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d031      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5d      	ldr	r2, [pc, #372]	@ (800276c <HAL_DMA_Init+0x1d0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02c      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5c      	ldr	r2, [pc, #368]	@ (8002770 <HAL_DMA_Init+0x1d4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d027      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a5a      	ldr	r2, [pc, #360]	@ (8002774 <HAL_DMA_Init+0x1d8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d022      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a59      	ldr	r2, [pc, #356]	@ (8002778 <HAL_DMA_Init+0x1dc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d01d      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a57      	ldr	r2, [pc, #348]	@ (800277c <HAL_DMA_Init+0x1e0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d018      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a56      	ldr	r2, [pc, #344]	@ (8002780 <HAL_DMA_Init+0x1e4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d013      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a54      	ldr	r2, [pc, #336]	@ (8002784 <HAL_DMA_Init+0x1e8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00e      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a53      	ldr	r2, [pc, #332]	@ (8002788 <HAL_DMA_Init+0x1ec>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d009      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a51      	ldr	r2, [pc, #324]	@ (800278c <HAL_DMA_Init+0x1f0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d004      	beq.n	8002654 <HAL_DMA_Init+0xb8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a50      	ldr	r2, [pc, #320]	@ (8002790 <HAL_DMA_Init+0x1f4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_DMA_Init+0xbc>
 8002654:	2301      	movs	r3, #1
 8002656:	e000      	b.n	800265a <HAL_DMA_Init+0xbe>
 8002658:	2300      	movs	r3, #0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 813b 	beq.w	80028d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a37      	ldr	r2, [pc, #220]	@ (8002754 <HAL_DMA_Init+0x1b8>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d04a      	beq.n	8002710 <HAL_DMA_Init+0x174>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a36      	ldr	r2, [pc, #216]	@ (8002758 <HAL_DMA_Init+0x1bc>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d045      	beq.n	8002710 <HAL_DMA_Init+0x174>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a34      	ldr	r2, [pc, #208]	@ (800275c <HAL_DMA_Init+0x1c0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d040      	beq.n	8002710 <HAL_DMA_Init+0x174>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a33      	ldr	r2, [pc, #204]	@ (8002760 <HAL_DMA_Init+0x1c4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d03b      	beq.n	8002710 <HAL_DMA_Init+0x174>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a31      	ldr	r2, [pc, #196]	@ (8002764 <HAL_DMA_Init+0x1c8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d036      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a30      	ldr	r2, [pc, #192]	@ (8002768 <HAL_DMA_Init+0x1cc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d031      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2e      	ldr	r2, [pc, #184]	@ (800276c <HAL_DMA_Init+0x1d0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02c      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002770 <HAL_DMA_Init+0x1d4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d027      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002774 <HAL_DMA_Init+0x1d8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d022      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2a      	ldr	r2, [pc, #168]	@ (8002778 <HAL_DMA_Init+0x1dc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d01d      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a28      	ldr	r2, [pc, #160]	@ (800277c <HAL_DMA_Init+0x1e0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d018      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a27      	ldr	r2, [pc, #156]	@ (8002780 <HAL_DMA_Init+0x1e4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d013      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a25      	ldr	r2, [pc, #148]	@ (8002784 <HAL_DMA_Init+0x1e8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a24      	ldr	r2, [pc, #144]	@ (8002788 <HAL_DMA_Init+0x1ec>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d009      	beq.n	8002710 <HAL_DMA_Init+0x174>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a22      	ldr	r2, [pc, #136]	@ (800278c <HAL_DMA_Init+0x1f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_DMA_Init+0x174>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a21      	ldr	r2, [pc, #132]	@ (8002790 <HAL_DMA_Init+0x1f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d108      	bne.n	8002722 <HAL_DMA_Init+0x186>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e007      	b.n	8002732 <HAL_DMA_Init+0x196>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002732:	e02f      	b.n	8002794 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002734:	f7ff fde6 	bl	8002304 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b05      	cmp	r3, #5
 8002740:	d928      	bls.n	8002794 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2203      	movs	r2, #3
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e246      	b.n	8002be2 <HAL_DMA_Init+0x646>
 8002754:	40020010 	.word	0x40020010
 8002758:	40020028 	.word	0x40020028
 800275c:	40020040 	.word	0x40020040
 8002760:	40020058 	.word	0x40020058
 8002764:	40020070 	.word	0x40020070
 8002768:	40020088 	.word	0x40020088
 800276c:	400200a0 	.word	0x400200a0
 8002770:	400200b8 	.word	0x400200b8
 8002774:	40020410 	.word	0x40020410
 8002778:	40020428 	.word	0x40020428
 800277c:	40020440 	.word	0x40020440
 8002780:	40020458 	.word	0x40020458
 8002784:	40020470 	.word	0x40020470
 8002788:	40020488 	.word	0x40020488
 800278c:	400204a0 	.word	0x400204a0
 8002790:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1c8      	bne.n	8002734 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4b83      	ldr	r3, [pc, #524]	@ (80029bc <HAL_DMA_Init+0x420>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80027ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d107      	bne.n	80027f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f0:	4313      	orrs	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80027f8:	4b71      	ldr	r3, [pc, #452]	@ (80029c0 <HAL_DMA_Init+0x424>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b71      	ldr	r3, [pc, #452]	@ (80029c4 <HAL_DMA_Init+0x428>)
 80027fe:	4013      	ands	r3, r2
 8002800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002804:	d328      	bcc.n	8002858 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b28      	cmp	r3, #40	@ 0x28
 800280c:	d903      	bls.n	8002816 <HAL_DMA_Init+0x27a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b2e      	cmp	r3, #46	@ 0x2e
 8002814:	d917      	bls.n	8002846 <HAL_DMA_Init+0x2aa>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b3e      	cmp	r3, #62	@ 0x3e
 800281c:	d903      	bls.n	8002826 <HAL_DMA_Init+0x28a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b42      	cmp	r3, #66	@ 0x42
 8002824:	d90f      	bls.n	8002846 <HAL_DMA_Init+0x2aa>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b46      	cmp	r3, #70	@ 0x46
 800282c:	d903      	bls.n	8002836 <HAL_DMA_Init+0x29a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b48      	cmp	r3, #72	@ 0x48
 8002834:	d907      	bls.n	8002846 <HAL_DMA_Init+0x2aa>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b4e      	cmp	r3, #78	@ 0x4e
 800283c:	d905      	bls.n	800284a <HAL_DMA_Init+0x2ae>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b52      	cmp	r3, #82	@ 0x52
 8002844:	d801      	bhi.n	800284a <HAL_DMA_Init+0x2ae>
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_DMA_Init+0x2b0>
 800284a:	2300      	movs	r3, #0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002856:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f023 0307 	bic.w	r3, r3, #7
 800286e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	2b04      	cmp	r3, #4
 8002880:	d117      	bne.n	80028b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00e      	beq.n	80028b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f002 fb3f 	bl	8004f18 <DMA_CheckFifoParam>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2240      	movs	r2, #64	@ 0x40
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e197      	b.n	8002be2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f002 fa7a 	bl	8004db4 <DMA_CalcBaseAndBitshift>
 80028c0:	4603      	mov	r3, r0
 80028c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	223f      	movs	r2, #63	@ 0x3f
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	e0cd      	b.n	8002a72 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a3b      	ldr	r2, [pc, #236]	@ (80029c8 <HAL_DMA_Init+0x42c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d022      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a39      	ldr	r2, [pc, #228]	@ (80029cc <HAL_DMA_Init+0x430>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01d      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a38      	ldr	r2, [pc, #224]	@ (80029d0 <HAL_DMA_Init+0x434>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d018      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a36      	ldr	r2, [pc, #216]	@ (80029d4 <HAL_DMA_Init+0x438>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d013      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a35      	ldr	r2, [pc, #212]	@ (80029d8 <HAL_DMA_Init+0x43c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a33      	ldr	r2, [pc, #204]	@ (80029dc <HAL_DMA_Init+0x440>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d009      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a32      	ldr	r2, [pc, #200]	@ (80029e0 <HAL_DMA_Init+0x444>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d004      	beq.n	8002926 <HAL_DMA_Init+0x38a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a30      	ldr	r2, [pc, #192]	@ (80029e4 <HAL_DMA_Init+0x448>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_DMA_Init+0x38e>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_DMA_Init+0x390>
 800292a:	2300      	movs	r3, #0
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8097 	beq.w	8002a60 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a24      	ldr	r2, [pc, #144]	@ (80029c8 <HAL_DMA_Init+0x42c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d021      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a22      	ldr	r2, [pc, #136]	@ (80029cc <HAL_DMA_Init+0x430>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01c      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a21      	ldr	r2, [pc, #132]	@ (80029d0 <HAL_DMA_Init+0x434>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d017      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1f      	ldr	r2, [pc, #124]	@ (80029d4 <HAL_DMA_Init+0x438>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d012      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1e      	ldr	r2, [pc, #120]	@ (80029d8 <HAL_DMA_Init+0x43c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00d      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <HAL_DMA_Init+0x440>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d008      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <HAL_DMA_Init+0x444>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <HAL_DMA_Init+0x3e4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a19      	ldr	r2, [pc, #100]	@ (80029e4 <HAL_DMA_Init+0x448>)
 800297e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4b13      	ldr	r3, [pc, #76]	@ (80029e8 <HAL_DMA_Init+0x44c>)
 800299c:	4013      	ands	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b40      	cmp	r3, #64	@ 0x40
 80029a6:	d021      	beq.n	80029ec <HAL_DMA_Init+0x450>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b80      	cmp	r3, #128	@ 0x80
 80029ae:	d102      	bne.n	80029b6 <HAL_DMA_Init+0x41a>
 80029b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029b4:	e01b      	b.n	80029ee <HAL_DMA_Init+0x452>
 80029b6:	2300      	movs	r3, #0
 80029b8:	e019      	b.n	80029ee <HAL_DMA_Init+0x452>
 80029ba:	bf00      	nop
 80029bc:	fe10803f 	.word	0xfe10803f
 80029c0:	5c001000 	.word	0x5c001000
 80029c4:	ffff0000 	.word	0xffff0000
 80029c8:	58025408 	.word	0x58025408
 80029cc:	5802541c 	.word	0x5802541c
 80029d0:	58025430 	.word	0x58025430
 80029d4:	58025444 	.word	0x58025444
 80029d8:	58025458 	.word	0x58025458
 80029dc:	5802546c 	.word	0x5802546c
 80029e0:	58025480 	.word	0x58025480
 80029e4:	58025494 	.word	0x58025494
 80029e8:	fffe000f 	.word	0xfffe000f
 80029ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	68d2      	ldr	r2, [r2, #12]
 80029f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80029fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002a04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002a1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b6e      	ldr	r3, [pc, #440]	@ (8002bec <HAL_DMA_Init+0x650>)
 8002a34:	4413      	add	r3, r2
 8002a36:	4a6e      	ldr	r2, [pc, #440]	@ (8002bf0 <HAL_DMA_Init+0x654>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	009a      	lsls	r2, r3, #2
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f002 f9b5 	bl	8004db4 <DMA_CalcBaseAndBitshift>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	2201      	movs	r2, #1
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e008      	b.n	8002a72 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2240      	movs	r2, #64	@ 0x40
 8002a64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e0b7      	b.n	8002be2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5f      	ldr	r2, [pc, #380]	@ (8002bf4 <HAL_DMA_Init+0x658>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d072      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a5d      	ldr	r2, [pc, #372]	@ (8002bf8 <HAL_DMA_Init+0x65c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d06d      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bfc <HAL_DMA_Init+0x660>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d068      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a5a      	ldr	r2, [pc, #360]	@ (8002c00 <HAL_DMA_Init+0x664>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d063      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a59      	ldr	r2, [pc, #356]	@ (8002c04 <HAL_DMA_Init+0x668>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d05e      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a57      	ldr	r2, [pc, #348]	@ (8002c08 <HAL_DMA_Init+0x66c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d059      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a56      	ldr	r2, [pc, #344]	@ (8002c0c <HAL_DMA_Init+0x670>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d054      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a54      	ldr	r2, [pc, #336]	@ (8002c10 <HAL_DMA_Init+0x674>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04f      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a53      	ldr	r2, [pc, #332]	@ (8002c14 <HAL_DMA_Init+0x678>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d04a      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a51      	ldr	r2, [pc, #324]	@ (8002c18 <HAL_DMA_Init+0x67c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d045      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a50      	ldr	r2, [pc, #320]	@ (8002c1c <HAL_DMA_Init+0x680>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d040      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a4e      	ldr	r2, [pc, #312]	@ (8002c20 <HAL_DMA_Init+0x684>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d03b      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4d      	ldr	r2, [pc, #308]	@ (8002c24 <HAL_DMA_Init+0x688>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d036      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a4b      	ldr	r2, [pc, #300]	@ (8002c28 <HAL_DMA_Init+0x68c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d031      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a4a      	ldr	r2, [pc, #296]	@ (8002c2c <HAL_DMA_Init+0x690>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d02c      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a48      	ldr	r2, [pc, #288]	@ (8002c30 <HAL_DMA_Init+0x694>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d027      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a47      	ldr	r2, [pc, #284]	@ (8002c34 <HAL_DMA_Init+0x698>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d022      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a45      	ldr	r2, [pc, #276]	@ (8002c38 <HAL_DMA_Init+0x69c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01d      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a44      	ldr	r2, [pc, #272]	@ (8002c3c <HAL_DMA_Init+0x6a0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d018      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a42      	ldr	r2, [pc, #264]	@ (8002c40 <HAL_DMA_Init+0x6a4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d013      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a41      	ldr	r2, [pc, #260]	@ (8002c44 <HAL_DMA_Init+0x6a8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00e      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a3f      	ldr	r2, [pc, #252]	@ (8002c48 <HAL_DMA_Init+0x6ac>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3e      	ldr	r2, [pc, #248]	@ (8002c4c <HAL_DMA_Init+0x6b0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d004      	beq.n	8002b62 <HAL_DMA_Init+0x5c6>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8002c50 <HAL_DMA_Init+0x6b4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA_Init+0x5ca>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_Init+0x5cc>
 8002b66:	2300      	movs	r3, #0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d032      	beq.n	8002bd2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f002 fa4f 	bl	8005010 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b80      	cmp	r3, #128	@ 0x80
 8002b78:	d102      	bne.n	8002b80 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_DMA_Init+0x624>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d80c      	bhi.n	8002bc0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f002 facc 	bl	8005144 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	e008      	b.n	8002bd2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	a7fdabf8 	.word	0xa7fdabf8
 8002bf0:	cccccccd 	.word	0xcccccccd
 8002bf4:	40020010 	.word	0x40020010
 8002bf8:	40020028 	.word	0x40020028
 8002bfc:	40020040 	.word	0x40020040
 8002c00:	40020058 	.word	0x40020058
 8002c04:	40020070 	.word	0x40020070
 8002c08:	40020088 	.word	0x40020088
 8002c0c:	400200a0 	.word	0x400200a0
 8002c10:	400200b8 	.word	0x400200b8
 8002c14:	40020410 	.word	0x40020410
 8002c18:	40020428 	.word	0x40020428
 8002c1c:	40020440 	.word	0x40020440
 8002c20:	40020458 	.word	0x40020458
 8002c24:	40020470 	.word	0x40020470
 8002c28:	40020488 	.word	0x40020488
 8002c2c:	400204a0 	.word	0x400204a0
 8002c30:	400204b8 	.word	0x400204b8
 8002c34:	58025408 	.word	0x58025408
 8002c38:	5802541c 	.word	0x5802541c
 8002c3c:	58025430 	.word	0x58025430
 8002c40:	58025444 	.word	0x58025444
 8002c44:	58025458 	.word	0x58025458
 8002c48:	5802546c 	.word	0x5802546c
 8002c4c:	58025480 	.word	0x58025480
 8002c50:	58025494 	.word	0x58025494

08002c54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e226      	b.n	80030be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_DMA_Start_IT+0x2a>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e21f      	b.n	80030be <HAL_DMA_Start_IT+0x46a>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	f040 820a 	bne.w	80030a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a68      	ldr	r2, [pc, #416]	@ (8002e48 <HAL_DMA_Start_IT+0x1f4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d04a      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a66      	ldr	r2, [pc, #408]	@ (8002e4c <HAL_DMA_Start_IT+0x1f8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d045      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a65      	ldr	r2, [pc, #404]	@ (8002e50 <HAL_DMA_Start_IT+0x1fc>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d040      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a63      	ldr	r2, [pc, #396]	@ (8002e54 <HAL_DMA_Start_IT+0x200>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d03b      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a62      	ldr	r2, [pc, #392]	@ (8002e58 <HAL_DMA_Start_IT+0x204>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d036      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a60      	ldr	r2, [pc, #384]	@ (8002e5c <HAL_DMA_Start_IT+0x208>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d031      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e60 <HAL_DMA_Start_IT+0x20c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d02c      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5d      	ldr	r2, [pc, #372]	@ (8002e64 <HAL_DMA_Start_IT+0x210>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d027      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e68 <HAL_DMA_Start_IT+0x214>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d022      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a5a      	ldr	r2, [pc, #360]	@ (8002e6c <HAL_DMA_Start_IT+0x218>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d01d      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a59      	ldr	r2, [pc, #356]	@ (8002e70 <HAL_DMA_Start_IT+0x21c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d018      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a57      	ldr	r2, [pc, #348]	@ (8002e74 <HAL_DMA_Start_IT+0x220>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a56      	ldr	r2, [pc, #344]	@ (8002e78 <HAL_DMA_Start_IT+0x224>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00e      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a54      	ldr	r2, [pc, #336]	@ (8002e7c <HAL_DMA_Start_IT+0x228>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d009      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a53      	ldr	r2, [pc, #332]	@ (8002e80 <HAL_DMA_Start_IT+0x22c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_DMA_Start_IT+0xee>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a51      	ldr	r2, [pc, #324]	@ (8002e84 <HAL_DMA_Start_IT+0x230>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <HAL_DMA_Start_IT+0x100>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e007      	b.n	8002d64 <HAL_DMA_Start_IT+0x110>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f001 fe76 	bl	8004a5c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a34      	ldr	r2, [pc, #208]	@ (8002e48 <HAL_DMA_Start_IT+0x1f4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d04a      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a33      	ldr	r2, [pc, #204]	@ (8002e4c <HAL_DMA_Start_IT+0x1f8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d045      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a31      	ldr	r2, [pc, #196]	@ (8002e50 <HAL_DMA_Start_IT+0x1fc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d040      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a30      	ldr	r2, [pc, #192]	@ (8002e54 <HAL_DMA_Start_IT+0x200>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d03b      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8002e58 <HAL_DMA_Start_IT+0x204>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d036      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2d      	ldr	r2, [pc, #180]	@ (8002e5c <HAL_DMA_Start_IT+0x208>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d031      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e60 <HAL_DMA_Start_IT+0x20c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d02c      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2a      	ldr	r2, [pc, #168]	@ (8002e64 <HAL_DMA_Start_IT+0x210>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d027      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a28      	ldr	r2, [pc, #160]	@ (8002e68 <HAL_DMA_Start_IT+0x214>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d022      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a27      	ldr	r2, [pc, #156]	@ (8002e6c <HAL_DMA_Start_IT+0x218>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d01d      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a25      	ldr	r2, [pc, #148]	@ (8002e70 <HAL_DMA_Start_IT+0x21c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d018      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a24      	ldr	r2, [pc, #144]	@ (8002e74 <HAL_DMA_Start_IT+0x220>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a22      	ldr	r2, [pc, #136]	@ (8002e78 <HAL_DMA_Start_IT+0x224>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00e      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a21      	ldr	r2, [pc, #132]	@ (8002e7c <HAL_DMA_Start_IT+0x228>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d009      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1f      	ldr	r2, [pc, #124]	@ (8002e80 <HAL_DMA_Start_IT+0x22c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_DMA_Start_IT+0x1bc>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e84 <HAL_DMA_Start_IT+0x230>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_DMA_Start_IT+0x1c0>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_DMA_Start_IT+0x1c2>
 8002e14:	2300      	movs	r3, #0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d036      	beq.n	8002e88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 021e 	bic.w	r2, r3, #30
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0216 	orr.w	r2, r2, #22
 8002e2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d03e      	beq.n	8002eb4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0208 	orr.w	r2, r2, #8
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e035      	b.n	8002eb4 <HAL_DMA_Start_IT+0x260>
 8002e48:	40020010 	.word	0x40020010
 8002e4c:	40020028 	.word	0x40020028
 8002e50:	40020040 	.word	0x40020040
 8002e54:	40020058 	.word	0x40020058
 8002e58:	40020070 	.word	0x40020070
 8002e5c:	40020088 	.word	0x40020088
 8002e60:	400200a0 	.word	0x400200a0
 8002e64:	400200b8 	.word	0x400200b8
 8002e68:	40020410 	.word	0x40020410
 8002e6c:	40020428 	.word	0x40020428
 8002e70:	40020440 	.word	0x40020440
 8002e74:	40020458 	.word	0x40020458
 8002e78:	40020470 	.word	0x40020470
 8002e7c:	40020488 	.word	0x40020488
 8002e80:	400204a0 	.word	0x400204a0
 8002e84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f023 020e 	bic.w	r2, r3, #14
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 020a 	orr.w	r2, r2, #10
 8002e9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0204 	orr.w	r2, r2, #4
 8002eb2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a83      	ldr	r2, [pc, #524]	@ (80030c8 <HAL_DMA_Start_IT+0x474>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d072      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a82      	ldr	r2, [pc, #520]	@ (80030cc <HAL_DMA_Start_IT+0x478>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d06d      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a80      	ldr	r2, [pc, #512]	@ (80030d0 <HAL_DMA_Start_IT+0x47c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d068      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7f      	ldr	r2, [pc, #508]	@ (80030d4 <HAL_DMA_Start_IT+0x480>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d063      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a7d      	ldr	r2, [pc, #500]	@ (80030d8 <HAL_DMA_Start_IT+0x484>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d05e      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a7c      	ldr	r2, [pc, #496]	@ (80030dc <HAL_DMA_Start_IT+0x488>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d059      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a7a      	ldr	r2, [pc, #488]	@ (80030e0 <HAL_DMA_Start_IT+0x48c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d054      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a79      	ldr	r2, [pc, #484]	@ (80030e4 <HAL_DMA_Start_IT+0x490>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d04f      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a77      	ldr	r2, [pc, #476]	@ (80030e8 <HAL_DMA_Start_IT+0x494>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d04a      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a76      	ldr	r2, [pc, #472]	@ (80030ec <HAL_DMA_Start_IT+0x498>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d045      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a74      	ldr	r2, [pc, #464]	@ (80030f0 <HAL_DMA_Start_IT+0x49c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d040      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a73      	ldr	r2, [pc, #460]	@ (80030f4 <HAL_DMA_Start_IT+0x4a0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d03b      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a71      	ldr	r2, [pc, #452]	@ (80030f8 <HAL_DMA_Start_IT+0x4a4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d036      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a70      	ldr	r2, [pc, #448]	@ (80030fc <HAL_DMA_Start_IT+0x4a8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d031      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a6e      	ldr	r2, [pc, #440]	@ (8003100 <HAL_DMA_Start_IT+0x4ac>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02c      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6d      	ldr	r2, [pc, #436]	@ (8003104 <HAL_DMA_Start_IT+0x4b0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d027      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a6b      	ldr	r2, [pc, #428]	@ (8003108 <HAL_DMA_Start_IT+0x4b4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d022      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6a      	ldr	r2, [pc, #424]	@ (800310c <HAL_DMA_Start_IT+0x4b8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d01d      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a68      	ldr	r2, [pc, #416]	@ (8003110 <HAL_DMA_Start_IT+0x4bc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d018      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a67      	ldr	r2, [pc, #412]	@ (8003114 <HAL_DMA_Start_IT+0x4c0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a65      	ldr	r2, [pc, #404]	@ (8003118 <HAL_DMA_Start_IT+0x4c4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00e      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a64      	ldr	r2, [pc, #400]	@ (800311c <HAL_DMA_Start_IT+0x4c8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a62      	ldr	r2, [pc, #392]	@ (8003120 <HAL_DMA_Start_IT+0x4cc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x350>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a61      	ldr	r2, [pc, #388]	@ (8003124 <HAL_DMA_Start_IT+0x4d0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DMA_Start_IT+0x354>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_DMA_Start_IT+0x356>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01a      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fe2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a37      	ldr	r2, [pc, #220]	@ (80030c8 <HAL_DMA_Start_IT+0x474>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d04a      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a36      	ldr	r2, [pc, #216]	@ (80030cc <HAL_DMA_Start_IT+0x478>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d045      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a34      	ldr	r2, [pc, #208]	@ (80030d0 <HAL_DMA_Start_IT+0x47c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d040      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a33      	ldr	r2, [pc, #204]	@ (80030d4 <HAL_DMA_Start_IT+0x480>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d03b      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a31      	ldr	r2, [pc, #196]	@ (80030d8 <HAL_DMA_Start_IT+0x484>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d036      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a30      	ldr	r2, [pc, #192]	@ (80030dc <HAL_DMA_Start_IT+0x488>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d031      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2e      	ldr	r2, [pc, #184]	@ (80030e0 <HAL_DMA_Start_IT+0x48c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d02c      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2d      	ldr	r2, [pc, #180]	@ (80030e4 <HAL_DMA_Start_IT+0x490>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d027      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2b      	ldr	r2, [pc, #172]	@ (80030e8 <HAL_DMA_Start_IT+0x494>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d022      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2a      	ldr	r2, [pc, #168]	@ (80030ec <HAL_DMA_Start_IT+0x498>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d01d      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a28      	ldr	r2, [pc, #160]	@ (80030f0 <HAL_DMA_Start_IT+0x49c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d018      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a27      	ldr	r2, [pc, #156]	@ (80030f4 <HAL_DMA_Start_IT+0x4a0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a25      	ldr	r2, [pc, #148]	@ (80030f8 <HAL_DMA_Start_IT+0x4a4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00e      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a24      	ldr	r2, [pc, #144]	@ (80030fc <HAL_DMA_Start_IT+0x4a8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a22      	ldr	r2, [pc, #136]	@ (8003100 <HAL_DMA_Start_IT+0x4ac>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_DMA_Start_IT+0x430>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a21      	ldr	r2, [pc, #132]	@ (8003104 <HAL_DMA_Start_IT+0x4b0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d108      	bne.n	8003096 <HAL_DMA_Start_IT+0x442>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e012      	b.n	80030bc <HAL_DMA_Start_IT+0x468>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e009      	b.n	80030bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80030bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8
 8003108:	58025408 	.word	0x58025408
 800310c:	5802541c 	.word	0x5802541c
 8003110:	58025430 	.word	0x58025430
 8003114:	58025444 	.word	0x58025444
 8003118:	58025458 	.word	0x58025458
 800311c:	5802546c 	.word	0x5802546c
 8003120:	58025480 	.word	0x58025480
 8003124:	58025494 	.word	0x58025494

08003128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003130:	f7ff f8e8 	bl	8002304 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e2dc      	b.n	80036fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d008      	beq.n	800315e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2280      	movs	r2, #128	@ 0x80
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e2cd      	b.n	80036fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a76      	ldr	r2, [pc, #472]	@ (800333c <HAL_DMA_Abort+0x214>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d04a      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a74      	ldr	r2, [pc, #464]	@ (8003340 <HAL_DMA_Abort+0x218>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d045      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a73      	ldr	r2, [pc, #460]	@ (8003344 <HAL_DMA_Abort+0x21c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d040      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a71      	ldr	r2, [pc, #452]	@ (8003348 <HAL_DMA_Abort+0x220>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d03b      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a70      	ldr	r2, [pc, #448]	@ (800334c <HAL_DMA_Abort+0x224>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d036      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a6e      	ldr	r2, [pc, #440]	@ (8003350 <HAL_DMA_Abort+0x228>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a6d      	ldr	r2, [pc, #436]	@ (8003354 <HAL_DMA_Abort+0x22c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d02c      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003358 <HAL_DMA_Abort+0x230>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d027      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6a      	ldr	r2, [pc, #424]	@ (800335c <HAL_DMA_Abort+0x234>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d022      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a68      	ldr	r2, [pc, #416]	@ (8003360 <HAL_DMA_Abort+0x238>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01d      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a67      	ldr	r2, [pc, #412]	@ (8003364 <HAL_DMA_Abort+0x23c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d018      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a65      	ldr	r2, [pc, #404]	@ (8003368 <HAL_DMA_Abort+0x240>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a64      	ldr	r2, [pc, #400]	@ (800336c <HAL_DMA_Abort+0x244>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00e      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a62      	ldr	r2, [pc, #392]	@ (8003370 <HAL_DMA_Abort+0x248>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d009      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a61      	ldr	r2, [pc, #388]	@ (8003374 <HAL_DMA_Abort+0x24c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d004      	beq.n	80031fe <HAL_DMA_Abort+0xd6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003378 <HAL_DMA_Abort+0x250>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d101      	bne.n	8003202 <HAL_DMA_Abort+0xda>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_DMA_Abort+0xdc>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 021e 	bic.w	r2, r2, #30
 8003216:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	695a      	ldr	r2, [r3, #20]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003226:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e00a      	b.n	8003246 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 020e 	bic.w	r2, r2, #14
 800323e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a3c      	ldr	r2, [pc, #240]	@ (800333c <HAL_DMA_Abort+0x214>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d072      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a3a      	ldr	r2, [pc, #232]	@ (8003340 <HAL_DMA_Abort+0x218>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d06d      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a39      	ldr	r2, [pc, #228]	@ (8003344 <HAL_DMA_Abort+0x21c>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d068      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a37      	ldr	r2, [pc, #220]	@ (8003348 <HAL_DMA_Abort+0x220>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d063      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a36      	ldr	r2, [pc, #216]	@ (800334c <HAL_DMA_Abort+0x224>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d05e      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a34      	ldr	r2, [pc, #208]	@ (8003350 <HAL_DMA_Abort+0x228>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d059      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a33      	ldr	r2, [pc, #204]	@ (8003354 <HAL_DMA_Abort+0x22c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d054      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a31      	ldr	r2, [pc, #196]	@ (8003358 <HAL_DMA_Abort+0x230>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d04f      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a30      	ldr	r2, [pc, #192]	@ (800335c <HAL_DMA_Abort+0x234>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d04a      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003360 <HAL_DMA_Abort+0x238>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d045      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <HAL_DMA_Abort+0x23c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d040      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003368 <HAL_DMA_Abort+0x240>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d03b      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2a      	ldr	r2, [pc, #168]	@ (800336c <HAL_DMA_Abort+0x244>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d036      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a28      	ldr	r2, [pc, #160]	@ (8003370 <HAL_DMA_Abort+0x248>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d031      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a27      	ldr	r2, [pc, #156]	@ (8003374 <HAL_DMA_Abort+0x24c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d02c      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a25      	ldr	r2, [pc, #148]	@ (8003378 <HAL_DMA_Abort+0x250>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d027      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a24      	ldr	r2, [pc, #144]	@ (800337c <HAL_DMA_Abort+0x254>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a22      	ldr	r2, [pc, #136]	@ (8003380 <HAL_DMA_Abort+0x258>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01d      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a21      	ldr	r2, [pc, #132]	@ (8003384 <HAL_DMA_Abort+0x25c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d018      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1f      	ldr	r2, [pc, #124]	@ (8003388 <HAL_DMA_Abort+0x260>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1e      	ldr	r2, [pc, #120]	@ (800338c <HAL_DMA_Abort+0x264>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <HAL_DMA_Abort+0x268>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d009      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1b      	ldr	r2, [pc, #108]	@ (8003394 <HAL_DMA_Abort+0x26c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <HAL_DMA_Abort+0x20e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	@ (8003398 <HAL_DMA_Abort+0x270>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d132      	bne.n	800339c <HAL_DMA_Abort+0x274>
 8003336:	2301      	movs	r3, #1
 8003338:	e031      	b.n	800339e <HAL_DMA_Abort+0x276>
 800333a:	bf00      	nop
 800333c:	40020010 	.word	0x40020010
 8003340:	40020028 	.word	0x40020028
 8003344:	40020040 	.word	0x40020040
 8003348:	40020058 	.word	0x40020058
 800334c:	40020070 	.word	0x40020070
 8003350:	40020088 	.word	0x40020088
 8003354:	400200a0 	.word	0x400200a0
 8003358:	400200b8 	.word	0x400200b8
 800335c:	40020410 	.word	0x40020410
 8003360:	40020428 	.word	0x40020428
 8003364:	40020440 	.word	0x40020440
 8003368:	40020458 	.word	0x40020458
 800336c:	40020470 	.word	0x40020470
 8003370:	40020488 	.word	0x40020488
 8003374:	400204a0 	.word	0x400204a0
 8003378:	400204b8 	.word	0x400204b8
 800337c:	58025408 	.word	0x58025408
 8003380:	5802541c 	.word	0x5802541c
 8003384:	58025430 	.word	0x58025430
 8003388:	58025444 	.word	0x58025444
 800338c:	58025458 	.word	0x58025458
 8003390:	5802546c 	.word	0x5802546c
 8003394:	58025480 	.word	0x58025480
 8003398:	58025494 	.word	0x58025494
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6d      	ldr	r2, [pc, #436]	@ (800356c <HAL_DMA_Abort+0x444>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d04a      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003570 <HAL_DMA_Abort+0x448>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d045      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003574 <HAL_DMA_Abort+0x44c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d040      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a68      	ldr	r2, [pc, #416]	@ (8003578 <HAL_DMA_Abort+0x450>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d03b      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a67      	ldr	r2, [pc, #412]	@ (800357c <HAL_DMA_Abort+0x454>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d036      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a65      	ldr	r2, [pc, #404]	@ (8003580 <HAL_DMA_Abort+0x458>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a64      	ldr	r2, [pc, #400]	@ (8003584 <HAL_DMA_Abort+0x45c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d02c      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a62      	ldr	r2, [pc, #392]	@ (8003588 <HAL_DMA_Abort+0x460>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a61      	ldr	r2, [pc, #388]	@ (800358c <HAL_DMA_Abort+0x464>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a5f      	ldr	r2, [pc, #380]	@ (8003590 <HAL_DMA_Abort+0x468>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01d      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5e      	ldr	r2, [pc, #376]	@ (8003594 <HAL_DMA_Abort+0x46c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a5c      	ldr	r2, [pc, #368]	@ (8003598 <HAL_DMA_Abort+0x470>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a5b      	ldr	r2, [pc, #364]	@ (800359c <HAL_DMA_Abort+0x474>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a59      	ldr	r2, [pc, #356]	@ (80035a0 <HAL_DMA_Abort+0x478>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a58      	ldr	r2, [pc, #352]	@ (80035a4 <HAL_DMA_Abort+0x47c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_DMA_Abort+0x32a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a56      	ldr	r2, [pc, #344]	@ (80035a8 <HAL_DMA_Abort+0x480>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d108      	bne.n	8003464 <HAL_DMA_Abort+0x33c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0201 	bic.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	e007      	b.n	8003474 <HAL_DMA_Abort+0x34c>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003474:	e013      	b.n	800349e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003476:	f7fe ff45 	bl	8002304 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b05      	cmp	r3, #5
 8003482:	d90c      	bls.n	800349e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e12d      	b.n	80036fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1e5      	bne.n	8003476 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a2f      	ldr	r2, [pc, #188]	@ (800356c <HAL_DMA_Abort+0x444>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d04a      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003570 <HAL_DMA_Abort+0x448>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d045      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003574 <HAL_DMA_Abort+0x44c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d040      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003578 <HAL_DMA_Abort+0x450>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d03b      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a29      	ldr	r2, [pc, #164]	@ (800357c <HAL_DMA_Abort+0x454>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d036      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a27      	ldr	r2, [pc, #156]	@ (8003580 <HAL_DMA_Abort+0x458>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d031      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a26      	ldr	r2, [pc, #152]	@ (8003584 <HAL_DMA_Abort+0x45c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d02c      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a24      	ldr	r2, [pc, #144]	@ (8003588 <HAL_DMA_Abort+0x460>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d027      	beq.n	800354a <HAL_DMA_Abort+0x422>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a23      	ldr	r2, [pc, #140]	@ (800358c <HAL_DMA_Abort+0x464>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a21      	ldr	r2, [pc, #132]	@ (8003590 <HAL_DMA_Abort+0x468>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01d      	beq.n	800354a <HAL_DMA_Abort+0x422>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a20      	ldr	r2, [pc, #128]	@ (8003594 <HAL_DMA_Abort+0x46c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d018      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1e      	ldr	r2, [pc, #120]	@ (8003598 <HAL_DMA_Abort+0x470>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1d      	ldr	r2, [pc, #116]	@ (800359c <HAL_DMA_Abort+0x474>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_DMA_Abort+0x422>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	@ (80035a0 <HAL_DMA_Abort+0x478>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1a      	ldr	r2, [pc, #104]	@ (80035a4 <HAL_DMA_Abort+0x47c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_DMA_Abort+0x422>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <HAL_DMA_Abort+0x480>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d101      	bne.n	800354e <HAL_DMA_Abort+0x426>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_DMA_Abort+0x428>
 800354e:	2300      	movs	r3, #0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d02b      	beq.n	80035ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003558:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	223f      	movs	r2, #63	@ 0x3f
 8003564:	409a      	lsls	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	e02a      	b.n	80035c2 <HAL_DMA_Abort+0x49a>
 800356c:	40020010 	.word	0x40020010
 8003570:	40020028 	.word	0x40020028
 8003574:	40020040 	.word	0x40020040
 8003578:	40020058 	.word	0x40020058
 800357c:	40020070 	.word	0x40020070
 8003580:	40020088 	.word	0x40020088
 8003584:	400200a0 	.word	0x400200a0
 8003588:	400200b8 	.word	0x400200b8
 800358c:	40020410 	.word	0x40020410
 8003590:	40020428 	.word	0x40020428
 8003594:	40020440 	.word	0x40020440
 8003598:	40020458 	.word	0x40020458
 800359c:	40020470 	.word	0x40020470
 80035a0:	40020488 	.word	0x40020488
 80035a4:	400204a0 	.word	0x400204a0
 80035a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2201      	movs	r2, #1
 80035bc:	409a      	lsls	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003704 <HAL_DMA_Abort+0x5dc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d072      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a4d      	ldr	r2, [pc, #308]	@ (8003708 <HAL_DMA_Abort+0x5e0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d06d      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4c      	ldr	r2, [pc, #304]	@ (800370c <HAL_DMA_Abort+0x5e4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d068      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003710 <HAL_DMA_Abort+0x5e8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d063      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a49      	ldr	r2, [pc, #292]	@ (8003714 <HAL_DMA_Abort+0x5ec>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d05e      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a47      	ldr	r2, [pc, #284]	@ (8003718 <HAL_DMA_Abort+0x5f0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d059      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a46      	ldr	r2, [pc, #280]	@ (800371c <HAL_DMA_Abort+0x5f4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d054      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a44      	ldr	r2, [pc, #272]	@ (8003720 <HAL_DMA_Abort+0x5f8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d04f      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a43      	ldr	r2, [pc, #268]	@ (8003724 <HAL_DMA_Abort+0x5fc>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04a      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a41      	ldr	r2, [pc, #260]	@ (8003728 <HAL_DMA_Abort+0x600>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d045      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a40      	ldr	r2, [pc, #256]	@ (800372c <HAL_DMA_Abort+0x604>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d040      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3e      	ldr	r2, [pc, #248]	@ (8003730 <HAL_DMA_Abort+0x608>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a3d      	ldr	r2, [pc, #244]	@ (8003734 <HAL_DMA_Abort+0x60c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d036      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a3b      	ldr	r2, [pc, #236]	@ (8003738 <HAL_DMA_Abort+0x610>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a3a      	ldr	r2, [pc, #232]	@ (800373c <HAL_DMA_Abort+0x614>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d02c      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a38      	ldr	r2, [pc, #224]	@ (8003740 <HAL_DMA_Abort+0x618>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a37      	ldr	r2, [pc, #220]	@ (8003744 <HAL_DMA_Abort+0x61c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a35      	ldr	r2, [pc, #212]	@ (8003748 <HAL_DMA_Abort+0x620>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a34      	ldr	r2, [pc, #208]	@ (800374c <HAL_DMA_Abort+0x624>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a32      	ldr	r2, [pc, #200]	@ (8003750 <HAL_DMA_Abort+0x628>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a31      	ldr	r2, [pc, #196]	@ (8003754 <HAL_DMA_Abort+0x62c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a2f      	ldr	r2, [pc, #188]	@ (8003758 <HAL_DMA_Abort+0x630>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2e      	ldr	r2, [pc, #184]	@ (800375c <HAL_DMA_Abort+0x634>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_Abort+0x58a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003760 <HAL_DMA_Abort+0x638>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_DMA_Abort+0x58e>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_DMA_Abort+0x590>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80036c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00c      	beq.n	80036e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80036e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40020010 	.word	0x40020010
 8003708:	40020028 	.word	0x40020028
 800370c:	40020040 	.word	0x40020040
 8003710:	40020058 	.word	0x40020058
 8003714:	40020070 	.word	0x40020070
 8003718:	40020088 	.word	0x40020088
 800371c:	400200a0 	.word	0x400200a0
 8003720:	400200b8 	.word	0x400200b8
 8003724:	40020410 	.word	0x40020410
 8003728:	40020428 	.word	0x40020428
 800372c:	40020440 	.word	0x40020440
 8003730:	40020458 	.word	0x40020458
 8003734:	40020470 	.word	0x40020470
 8003738:	40020488 	.word	0x40020488
 800373c:	400204a0 	.word	0x400204a0
 8003740:	400204b8 	.word	0x400204b8
 8003744:	58025408 	.word	0x58025408
 8003748:	5802541c 	.word	0x5802541c
 800374c:	58025430 	.word	0x58025430
 8003750:	58025444 	.word	0x58025444
 8003754:	58025458 	.word	0x58025458
 8003758:	5802546c 	.word	0x5802546c
 800375c:	58025480 	.word	0x58025480
 8003760:	58025494 	.word	0x58025494

08003764 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e237      	b.n	8003be6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d004      	beq.n	800378c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2280      	movs	r2, #128	@ 0x80
 8003786:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e22c      	b.n	8003be6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5c      	ldr	r2, [pc, #368]	@ (8003904 <HAL_DMA_Abort_IT+0x1a0>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d04a      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a5b      	ldr	r2, [pc, #364]	@ (8003908 <HAL_DMA_Abort_IT+0x1a4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d045      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a59      	ldr	r2, [pc, #356]	@ (800390c <HAL_DMA_Abort_IT+0x1a8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d040      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a58      	ldr	r2, [pc, #352]	@ (8003910 <HAL_DMA_Abort_IT+0x1ac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d03b      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a56      	ldr	r2, [pc, #344]	@ (8003914 <HAL_DMA_Abort_IT+0x1b0>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d036      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a55      	ldr	r2, [pc, #340]	@ (8003918 <HAL_DMA_Abort_IT+0x1b4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d031      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a53      	ldr	r2, [pc, #332]	@ (800391c <HAL_DMA_Abort_IT+0x1b8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d02c      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a52      	ldr	r2, [pc, #328]	@ (8003920 <HAL_DMA_Abort_IT+0x1bc>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d027      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a50      	ldr	r2, [pc, #320]	@ (8003924 <HAL_DMA_Abort_IT+0x1c0>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d022      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4f      	ldr	r2, [pc, #316]	@ (8003928 <HAL_DMA_Abort_IT+0x1c4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d01d      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a4d      	ldr	r2, [pc, #308]	@ (800392c <HAL_DMA_Abort_IT+0x1c8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d018      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003930 <HAL_DMA_Abort_IT+0x1cc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d013      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a4a      	ldr	r2, [pc, #296]	@ (8003934 <HAL_DMA_Abort_IT+0x1d0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00e      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a49      	ldr	r2, [pc, #292]	@ (8003938 <HAL_DMA_Abort_IT+0x1d4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a47      	ldr	r2, [pc, #284]	@ (800393c <HAL_DMA_Abort_IT+0x1d8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d004      	beq.n	800382c <HAL_DMA_Abort_IT+0xc8>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a46      	ldr	r2, [pc, #280]	@ (8003940 <HAL_DMA_Abort_IT+0x1dc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_DMA_Abort_IT+0xcc>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_DMA_Abort_IT+0xce>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8086 	beq.w	8003944 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2204      	movs	r2, #4
 800383c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2f      	ldr	r2, [pc, #188]	@ (8003904 <HAL_DMA_Abort_IT+0x1a0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d04a      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2e      	ldr	r2, [pc, #184]	@ (8003908 <HAL_DMA_Abort_IT+0x1a4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d045      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2c      	ldr	r2, [pc, #176]	@ (800390c <HAL_DMA_Abort_IT+0x1a8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d040      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2b      	ldr	r2, [pc, #172]	@ (8003910 <HAL_DMA_Abort_IT+0x1ac>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d03b      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a29      	ldr	r2, [pc, #164]	@ (8003914 <HAL_DMA_Abort_IT+0x1b0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d036      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a28      	ldr	r2, [pc, #160]	@ (8003918 <HAL_DMA_Abort_IT+0x1b4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d031      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a26      	ldr	r2, [pc, #152]	@ (800391c <HAL_DMA_Abort_IT+0x1b8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02c      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a25      	ldr	r2, [pc, #148]	@ (8003920 <HAL_DMA_Abort_IT+0x1bc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d027      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a23      	ldr	r2, [pc, #140]	@ (8003924 <HAL_DMA_Abort_IT+0x1c0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d022      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a22      	ldr	r2, [pc, #136]	@ (8003928 <HAL_DMA_Abort_IT+0x1c4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d01d      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a20      	ldr	r2, [pc, #128]	@ (800392c <HAL_DMA_Abort_IT+0x1c8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d018      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003930 <HAL_DMA_Abort_IT+0x1cc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d013      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003934 <HAL_DMA_Abort_IT+0x1d0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00e      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <HAL_DMA_Abort_IT+0x1d4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1a      	ldr	r2, [pc, #104]	@ (800393c <HAL_DMA_Abort_IT+0x1d8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d004      	beq.n	80038e0 <HAL_DMA_Abort_IT+0x17c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a19      	ldr	r2, [pc, #100]	@ (8003940 <HAL_DMA_Abort_IT+0x1dc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d108      	bne.n	80038f2 <HAL_DMA_Abort_IT+0x18e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	e178      	b.n	8003be4 <HAL_DMA_Abort_IT+0x480>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e16f      	b.n	8003be4 <HAL_DMA_Abort_IT+0x480>
 8003904:	40020010 	.word	0x40020010
 8003908:	40020028 	.word	0x40020028
 800390c:	40020040 	.word	0x40020040
 8003910:	40020058 	.word	0x40020058
 8003914:	40020070 	.word	0x40020070
 8003918:	40020088 	.word	0x40020088
 800391c:	400200a0 	.word	0x400200a0
 8003920:	400200b8 	.word	0x400200b8
 8003924:	40020410 	.word	0x40020410
 8003928:	40020428 	.word	0x40020428
 800392c:	40020440 	.word	0x40020440
 8003930:	40020458 	.word	0x40020458
 8003934:	40020470 	.word	0x40020470
 8003938:	40020488 	.word	0x40020488
 800393c:	400204a0 	.word	0x400204a0
 8003940:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 020e 	bic.w	r2, r2, #14
 8003952:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a6c      	ldr	r2, [pc, #432]	@ (8003b0c <HAL_DMA_Abort_IT+0x3a8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d04a      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6b      	ldr	r2, [pc, #428]	@ (8003b10 <HAL_DMA_Abort_IT+0x3ac>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d045      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a69      	ldr	r2, [pc, #420]	@ (8003b14 <HAL_DMA_Abort_IT+0x3b0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d040      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a68      	ldr	r2, [pc, #416]	@ (8003b18 <HAL_DMA_Abort_IT+0x3b4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d03b      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a66      	ldr	r2, [pc, #408]	@ (8003b1c <HAL_DMA_Abort_IT+0x3b8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d036      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a65      	ldr	r2, [pc, #404]	@ (8003b20 <HAL_DMA_Abort_IT+0x3bc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d031      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a63      	ldr	r2, [pc, #396]	@ (8003b24 <HAL_DMA_Abort_IT+0x3c0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d02c      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a62      	ldr	r2, [pc, #392]	@ (8003b28 <HAL_DMA_Abort_IT+0x3c4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d027      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a60      	ldr	r2, [pc, #384]	@ (8003b2c <HAL_DMA_Abort_IT+0x3c8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d022      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003b30 <HAL_DMA_Abort_IT+0x3cc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d01d      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a5d      	ldr	r2, [pc, #372]	@ (8003b34 <HAL_DMA_Abort_IT+0x3d0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d018      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a5c      	ldr	r2, [pc, #368]	@ (8003b38 <HAL_DMA_Abort_IT+0x3d4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a5a      	ldr	r2, [pc, #360]	@ (8003b3c <HAL_DMA_Abort_IT+0x3d8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00e      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a59      	ldr	r2, [pc, #356]	@ (8003b40 <HAL_DMA_Abort_IT+0x3dc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d009      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a57      	ldr	r2, [pc, #348]	@ (8003b44 <HAL_DMA_Abort_IT+0x3e0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d004      	beq.n	80039f4 <HAL_DMA_Abort_IT+0x290>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a56      	ldr	r2, [pc, #344]	@ (8003b48 <HAL_DMA_Abort_IT+0x3e4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d108      	bne.n	8003a06 <HAL_DMA_Abort_IT+0x2a2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0201 	bic.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e007      	b.n	8003a16 <HAL_DMA_Abort_IT+0x2b2>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a3c      	ldr	r2, [pc, #240]	@ (8003b0c <HAL_DMA_Abort_IT+0x3a8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d072      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a3a      	ldr	r2, [pc, #232]	@ (8003b10 <HAL_DMA_Abort_IT+0x3ac>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d06d      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a39      	ldr	r2, [pc, #228]	@ (8003b14 <HAL_DMA_Abort_IT+0x3b0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d068      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a37      	ldr	r2, [pc, #220]	@ (8003b18 <HAL_DMA_Abort_IT+0x3b4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d063      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a36      	ldr	r2, [pc, #216]	@ (8003b1c <HAL_DMA_Abort_IT+0x3b8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d05e      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a34      	ldr	r2, [pc, #208]	@ (8003b20 <HAL_DMA_Abort_IT+0x3bc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d059      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a33      	ldr	r2, [pc, #204]	@ (8003b24 <HAL_DMA_Abort_IT+0x3c0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d054      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a31      	ldr	r2, [pc, #196]	@ (8003b28 <HAL_DMA_Abort_IT+0x3c4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d04f      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a30      	ldr	r2, [pc, #192]	@ (8003b2c <HAL_DMA_Abort_IT+0x3c8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d04a      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2e      	ldr	r2, [pc, #184]	@ (8003b30 <HAL_DMA_Abort_IT+0x3cc>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d045      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b34 <HAL_DMA_Abort_IT+0x3d0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d040      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2b      	ldr	r2, [pc, #172]	@ (8003b38 <HAL_DMA_Abort_IT+0x3d4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d03b      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2a      	ldr	r2, [pc, #168]	@ (8003b3c <HAL_DMA_Abort_IT+0x3d8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d036      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a28      	ldr	r2, [pc, #160]	@ (8003b40 <HAL_DMA_Abort_IT+0x3dc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d031      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a27      	ldr	r2, [pc, #156]	@ (8003b44 <HAL_DMA_Abort_IT+0x3e0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d02c      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a25      	ldr	r2, [pc, #148]	@ (8003b48 <HAL_DMA_Abort_IT+0x3e4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d027      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a24      	ldr	r2, [pc, #144]	@ (8003b4c <HAL_DMA_Abort_IT+0x3e8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d022      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <HAL_DMA_Abort_IT+0x3ec>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01d      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a21      	ldr	r2, [pc, #132]	@ (8003b54 <HAL_DMA_Abort_IT+0x3f0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d018      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8003b58 <HAL_DMA_Abort_IT+0x3f4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8003b5c <HAL_DMA_Abort_IT+0x3f8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00e      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1c      	ldr	r2, [pc, #112]	@ (8003b60 <HAL_DMA_Abort_IT+0x3fc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d009      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b64 <HAL_DMA_Abort_IT+0x400>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_DMA_Abort_IT+0x3a2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <HAL_DMA_Abort_IT+0x404>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d132      	bne.n	8003b6c <HAL_DMA_Abort_IT+0x408>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e031      	b.n	8003b6e <HAL_DMA_Abort_IT+0x40a>
 8003b0a:	bf00      	nop
 8003b0c:	40020010 	.word	0x40020010
 8003b10:	40020028 	.word	0x40020028
 8003b14:	40020040 	.word	0x40020040
 8003b18:	40020058 	.word	0x40020058
 8003b1c:	40020070 	.word	0x40020070
 8003b20:	40020088 	.word	0x40020088
 8003b24:	400200a0 	.word	0x400200a0
 8003b28:	400200b8 	.word	0x400200b8
 8003b2c:	40020410 	.word	0x40020410
 8003b30:	40020428 	.word	0x40020428
 8003b34:	40020440 	.word	0x40020440
 8003b38:	40020458 	.word	0x40020458
 8003b3c:	40020470 	.word	0x40020470
 8003b40:	40020488 	.word	0x40020488
 8003b44:	400204a0 	.word	0x400204a0
 8003b48:	400204b8 	.word	0x400204b8
 8003b4c:	58025408 	.word	0x58025408
 8003b50:	5802541c 	.word	0x5802541c
 8003b54:	58025430 	.word	0x58025430
 8003b58:	58025444 	.word	0x58025444
 8003b5c:	58025458 	.word	0x58025458
 8003b60:	5802546c 	.word	0x5802546c
 8003b64:	58025480 	.word	0x58025480
 8003b68:	58025494 	.word	0x58025494
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d028      	beq.n	8003bc4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ba0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003bc2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop

08003bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	@ 0x28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bfc:	4b67      	ldr	r3, [pc, #412]	@ (8003d9c <HAL_DMA_IRQHandler+0x1ac>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a67      	ldr	r2, [pc, #412]	@ (8003da0 <HAL_DMA_IRQHandler+0x1b0>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	0a9b      	lsrs	r3, r3, #10
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5f      	ldr	r2, [pc, #380]	@ (8003da4 <HAL_DMA_IRQHandler+0x1b4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d04a      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a5d      	ldr	r2, [pc, #372]	@ (8003da8 <HAL_DMA_IRQHandler+0x1b8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d045      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8003dac <HAL_DMA_IRQHandler+0x1bc>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d040      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a5a      	ldr	r2, [pc, #360]	@ (8003db0 <HAL_DMA_IRQHandler+0x1c0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d03b      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a59      	ldr	r2, [pc, #356]	@ (8003db4 <HAL_DMA_IRQHandler+0x1c4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d036      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a57      	ldr	r2, [pc, #348]	@ (8003db8 <HAL_DMA_IRQHandler+0x1c8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d031      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a56      	ldr	r2, [pc, #344]	@ (8003dbc <HAL_DMA_IRQHandler+0x1cc>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d02c      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a54      	ldr	r2, [pc, #336]	@ (8003dc0 <HAL_DMA_IRQHandler+0x1d0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d027      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a53      	ldr	r2, [pc, #332]	@ (8003dc4 <HAL_DMA_IRQHandler+0x1d4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a51      	ldr	r2, [pc, #324]	@ (8003dc8 <HAL_DMA_IRQHandler+0x1d8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01d      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a50      	ldr	r2, [pc, #320]	@ (8003dcc <HAL_DMA_IRQHandler+0x1dc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d018      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a4e      	ldr	r2, [pc, #312]	@ (8003dd0 <HAL_DMA_IRQHandler+0x1e0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8003dd4 <HAL_DMA_IRQHandler+0x1e4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a4b      	ldr	r2, [pc, #300]	@ (8003dd8 <HAL_DMA_IRQHandler+0x1e8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d009      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ddc <HAL_DMA_IRQHandler+0x1ec>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0xd2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a48      	ldr	r2, [pc, #288]	@ (8003de0 <HAL_DMA_IRQHandler+0x1f0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0xd6>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <HAL_DMA_IRQHandler+0xd8>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 842b 	beq.w	8004524 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2208      	movs	r2, #8
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80a2 	beq.w	8003e28 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8003da4 <HAL_DMA_IRQHandler+0x1b4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d04a      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8003da8 <HAL_DMA_IRQHandler+0x1b8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d045      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8003dac <HAL_DMA_IRQHandler+0x1bc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d040      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2a      	ldr	r2, [pc, #168]	@ (8003db0 <HAL_DMA_IRQHandler+0x1c0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d03b      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a28      	ldr	r2, [pc, #160]	@ (8003db4 <HAL_DMA_IRQHandler+0x1c4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d036      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a27      	ldr	r2, [pc, #156]	@ (8003db8 <HAL_DMA_IRQHandler+0x1c8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d031      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a25      	ldr	r2, [pc, #148]	@ (8003dbc <HAL_DMA_IRQHandler+0x1cc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d02c      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a24      	ldr	r2, [pc, #144]	@ (8003dc0 <HAL_DMA_IRQHandler+0x1d0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d027      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a22      	ldr	r2, [pc, #136]	@ (8003dc4 <HAL_DMA_IRQHandler+0x1d4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d022      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a21      	ldr	r2, [pc, #132]	@ (8003dc8 <HAL_DMA_IRQHandler+0x1d8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d01d      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8003dcc <HAL_DMA_IRQHandler+0x1dc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d018      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd0 <HAL_DMA_IRQHandler+0x1e0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd4 <HAL_DMA_IRQHandler+0x1e4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00e      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd8 <HAL_DMA_IRQHandler+0x1e8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a19      	ldr	r2, [pc, #100]	@ (8003ddc <HAL_DMA_IRQHandler+0x1ec>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x194>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	@ (8003de0 <HAL_DMA_IRQHandler+0x1f0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d12f      	bne.n	8003de4 <HAL_DMA_IRQHandler+0x1f4>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf14      	ite	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	2300      	moveq	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e02e      	b.n	8003df8 <HAL_DMA_IRQHandler+0x208>
 8003d9a:	bf00      	nop
 8003d9c:	24000008 	.word	0x24000008
 8003da0:	1b4e81b5 	.word	0x1b4e81b5
 8003da4:	40020010 	.word	0x40020010
 8003da8:	40020028 	.word	0x40020028
 8003dac:	40020040 	.word	0x40020040
 8003db0:	40020058 	.word	0x40020058
 8003db4:	40020070 	.word	0x40020070
 8003db8:	40020088 	.word	0x40020088
 8003dbc:	400200a0 	.word	0x400200a0
 8003dc0:	400200b8 	.word	0x400200b8
 8003dc4:	40020410 	.word	0x40020410
 8003dc8:	40020428 	.word	0x40020428
 8003dcc:	40020440 	.word	0x40020440
 8003dd0:	40020458 	.word	0x40020458
 8003dd4:	40020470 	.word	0x40020470
 8003dd8:	40020488 	.word	0x40020488
 8003ddc:	400204a0 	.word	0x400204a0
 8003de0:	400204b8 	.word	0x400204b8
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bf14      	ite	ne
 8003df2:	2301      	movne	r3, #1
 8003df4:	2300      	moveq	r3, #0
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d015      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0204 	bic.w	r2, r2, #4
 8003e0a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2208      	movs	r2, #8
 8003e16:	409a      	lsls	r2, r3
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e20:	f043 0201 	orr.w	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2c:	f003 031f 	and.w	r3, r3, #31
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d06e      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a69      	ldr	r2, [pc, #420]	@ (8003fe8 <HAL_DMA_IRQHandler+0x3f8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d04a      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a67      	ldr	r2, [pc, #412]	@ (8003fec <HAL_DMA_IRQHandler+0x3fc>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d045      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a66      	ldr	r2, [pc, #408]	@ (8003ff0 <HAL_DMA_IRQHandler+0x400>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d040      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a64      	ldr	r2, [pc, #400]	@ (8003ff4 <HAL_DMA_IRQHandler+0x404>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d03b      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a63      	ldr	r2, [pc, #396]	@ (8003ff8 <HAL_DMA_IRQHandler+0x408>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d036      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a61      	ldr	r2, [pc, #388]	@ (8003ffc <HAL_DMA_IRQHandler+0x40c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d031      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a60      	ldr	r2, [pc, #384]	@ (8004000 <HAL_DMA_IRQHandler+0x410>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d02c      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a5e      	ldr	r2, [pc, #376]	@ (8004004 <HAL_DMA_IRQHandler+0x414>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d027      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5d      	ldr	r2, [pc, #372]	@ (8004008 <HAL_DMA_IRQHandler+0x418>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d022      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5b      	ldr	r2, [pc, #364]	@ (800400c <HAL_DMA_IRQHandler+0x41c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d01d      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5a      	ldr	r2, [pc, #360]	@ (8004010 <HAL_DMA_IRQHandler+0x420>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d018      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	@ (8004014 <HAL_DMA_IRQHandler+0x424>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a57      	ldr	r2, [pc, #348]	@ (8004018 <HAL_DMA_IRQHandler+0x428>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00e      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a55      	ldr	r2, [pc, #340]	@ (800401c <HAL_DMA_IRQHandler+0x42c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a54      	ldr	r2, [pc, #336]	@ (8004020 <HAL_DMA_IRQHandler+0x430>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d004      	beq.n	8003ede <HAL_DMA_IRQHandler+0x2ee>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	@ (8004024 <HAL_DMA_IRQHandler+0x434>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10a      	bne.n	8003ef4 <HAL_DMA_IRQHandler+0x304>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf14      	ite	ne
 8003eec:	2301      	movne	r3, #1
 8003eee:	2300      	moveq	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	e003      	b.n	8003efc <HAL_DMA_IRQHandler+0x30c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00d      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f14:	f043 0202 	orr.w	r2, r3, #2
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2204      	movs	r2, #4
 8003f26:	409a      	lsls	r2, r3
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 808f 	beq.w	8004050 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe8 <HAL_DMA_IRQHandler+0x3f8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d04a      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a2a      	ldr	r2, [pc, #168]	@ (8003fec <HAL_DMA_IRQHandler+0x3fc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d045      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a29      	ldr	r2, [pc, #164]	@ (8003ff0 <HAL_DMA_IRQHandler+0x400>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d040      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a27      	ldr	r2, [pc, #156]	@ (8003ff4 <HAL_DMA_IRQHandler+0x404>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d03b      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a26      	ldr	r2, [pc, #152]	@ (8003ff8 <HAL_DMA_IRQHandler+0x408>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d036      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a24      	ldr	r2, [pc, #144]	@ (8003ffc <HAL_DMA_IRQHandler+0x40c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d031      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a23      	ldr	r2, [pc, #140]	@ (8004000 <HAL_DMA_IRQHandler+0x410>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d02c      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a21      	ldr	r2, [pc, #132]	@ (8004004 <HAL_DMA_IRQHandler+0x414>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d027      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a20      	ldr	r2, [pc, #128]	@ (8004008 <HAL_DMA_IRQHandler+0x418>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d022      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1e      	ldr	r2, [pc, #120]	@ (800400c <HAL_DMA_IRQHandler+0x41c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d01d      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004010 <HAL_DMA_IRQHandler+0x420>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8004014 <HAL_DMA_IRQHandler+0x424>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1a      	ldr	r2, [pc, #104]	@ (8004018 <HAL_DMA_IRQHandler+0x428>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00e      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a18      	ldr	r2, [pc, #96]	@ (800401c <HAL_DMA_IRQHandler+0x42c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	@ (8004020 <HAL_DMA_IRQHandler+0x430>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x3e2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a15      	ldr	r2, [pc, #84]	@ (8004024 <HAL_DMA_IRQHandler+0x434>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d12a      	bne.n	8004028 <HAL_DMA_IRQHandler+0x438>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	e023      	b.n	8004030 <HAL_DMA_IRQHandler+0x440>
 8003fe8:	40020010 	.word	0x40020010
 8003fec:	40020028 	.word	0x40020028
 8003ff0:	40020040 	.word	0x40020040
 8003ff4:	40020058 	.word	0x40020058
 8003ff8:	40020070 	.word	0x40020070
 8003ffc:	40020088 	.word	0x40020088
 8004000:	400200a0 	.word	0x400200a0
 8004004:	400200b8 	.word	0x400200b8
 8004008:	40020410 	.word	0x40020410
 800400c:	40020428 	.word	0x40020428
 8004010:	40020440 	.word	0x40020440
 8004014:	40020458 	.word	0x40020458
 8004018:	40020470 	.word	0x40020470
 800401c:	40020488 	.word	0x40020488
 8004020:	400204a0 	.word	0x400204a0
 8004024:	400204b8 	.word	0x400204b8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004038:	f003 031f 	and.w	r3, r3, #31
 800403c:	2204      	movs	r2, #4
 800403e:	409a      	lsls	r2, r3
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	f043 0204 	orr.w	r2, r3, #4
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2210      	movs	r2, #16
 800405a:	409a      	lsls	r2, r3
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80a6 	beq.w	80041b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a85      	ldr	r2, [pc, #532]	@ (8004280 <HAL_DMA_IRQHandler+0x690>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d04a      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a83      	ldr	r2, [pc, #524]	@ (8004284 <HAL_DMA_IRQHandler+0x694>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d045      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a82      	ldr	r2, [pc, #520]	@ (8004288 <HAL_DMA_IRQHandler+0x698>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d040      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a80      	ldr	r2, [pc, #512]	@ (800428c <HAL_DMA_IRQHandler+0x69c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d03b      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a7f      	ldr	r2, [pc, #508]	@ (8004290 <HAL_DMA_IRQHandler+0x6a0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d036      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a7d      	ldr	r2, [pc, #500]	@ (8004294 <HAL_DMA_IRQHandler+0x6a4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d031      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a7c      	ldr	r2, [pc, #496]	@ (8004298 <HAL_DMA_IRQHandler+0x6a8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d02c      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a7a      	ldr	r2, [pc, #488]	@ (800429c <HAL_DMA_IRQHandler+0x6ac>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d027      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a79      	ldr	r2, [pc, #484]	@ (80042a0 <HAL_DMA_IRQHandler+0x6b0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a77      	ldr	r2, [pc, #476]	@ (80042a4 <HAL_DMA_IRQHandler+0x6b4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01d      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a76      	ldr	r2, [pc, #472]	@ (80042a8 <HAL_DMA_IRQHandler+0x6b8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a74      	ldr	r2, [pc, #464]	@ (80042ac <HAL_DMA_IRQHandler+0x6bc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a73      	ldr	r2, [pc, #460]	@ (80042b0 <HAL_DMA_IRQHandler+0x6c0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a71      	ldr	r2, [pc, #452]	@ (80042b4 <HAL_DMA_IRQHandler+0x6c4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a70      	ldr	r2, [pc, #448]	@ (80042b8 <HAL_DMA_IRQHandler+0x6c8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_DMA_IRQHandler+0x516>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6e      	ldr	r2, [pc, #440]	@ (80042bc <HAL_DMA_IRQHandler+0x6cc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d10a      	bne.n	800411c <HAL_DMA_IRQHandler+0x52c>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e009      	b.n	8004130 <HAL_DMA_IRQHandler+0x540>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d03e      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2210      	movs	r2, #16
 800413e:	409a      	lsls	r2, r3
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d018      	beq.n	8004184 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d108      	bne.n	8004172 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d024      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	4798      	blx	r3
 8004170:	e01f      	b.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01b      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	4798      	blx	r3
 8004182:	e016      	b.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d107      	bne.n	80041a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0208 	bic.w	r2, r2, #8
 80041a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	2220      	movs	r2, #32
 80041bc:	409a      	lsls	r2, r3
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8110 	beq.w	80043e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004280 <HAL_DMA_IRQHandler+0x690>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d04a      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004284 <HAL_DMA_IRQHandler+0x694>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d045      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a29      	ldr	r2, [pc, #164]	@ (8004288 <HAL_DMA_IRQHandler+0x698>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d040      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a28      	ldr	r2, [pc, #160]	@ (800428c <HAL_DMA_IRQHandler+0x69c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d03b      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a26      	ldr	r2, [pc, #152]	@ (8004290 <HAL_DMA_IRQHandler+0x6a0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d036      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a25      	ldr	r2, [pc, #148]	@ (8004294 <HAL_DMA_IRQHandler+0x6a4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d031      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a23      	ldr	r2, [pc, #140]	@ (8004298 <HAL_DMA_IRQHandler+0x6a8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d02c      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a22      	ldr	r2, [pc, #136]	@ (800429c <HAL_DMA_IRQHandler+0x6ac>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d027      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a20      	ldr	r2, [pc, #128]	@ (80042a0 <HAL_DMA_IRQHandler+0x6b0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d022      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_DMA_IRQHandler+0x6b4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d01d      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <HAL_DMA_IRQHandler+0x6b8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <HAL_DMA_IRQHandler+0x6bc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1a      	ldr	r2, [pc, #104]	@ (80042b0 <HAL_DMA_IRQHandler+0x6c0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a19      	ldr	r2, [pc, #100]	@ (80042b4 <HAL_DMA_IRQHandler+0x6c4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a17      	ldr	r2, [pc, #92]	@ (80042b8 <HAL_DMA_IRQHandler+0x6c8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_DMA_IRQHandler+0x678>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a16      	ldr	r2, [pc, #88]	@ (80042bc <HAL_DMA_IRQHandler+0x6cc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d12b      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x6d0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e02a      	b.n	80042d4 <HAL_DMA_IRQHandler+0x6e4>
 800427e:	bf00      	nop
 8004280:	40020010 	.word	0x40020010
 8004284:	40020028 	.word	0x40020028
 8004288:	40020040 	.word	0x40020040
 800428c:	40020058 	.word	0x40020058
 8004290:	40020070 	.word	0x40020070
 8004294:	40020088 	.word	0x40020088
 8004298:	400200a0 	.word	0x400200a0
 800429c:	400200b8 	.word	0x400200b8
 80042a0:	40020410 	.word	0x40020410
 80042a4:	40020428 	.word	0x40020428
 80042a8:	40020440 	.word	0x40020440
 80042ac:	40020458 	.word	0x40020458
 80042b0:	40020470 	.word	0x40020470
 80042b4:	40020488 	.word	0x40020488
 80042b8:	400204a0 	.word	0x400204a0
 80042bc:	400204b8 	.word	0x400204b8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8087 	beq.w	80043e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	2220      	movs	r2, #32
 80042e4:	409a      	lsls	r2, r3
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d139      	bne.n	800436a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0216 	bic.w	r2, r2, #22
 8004304:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004314:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <HAL_DMA_IRQHandler+0x736>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004322:	2b00      	cmp	r3, #0
 8004324:	d007      	beq.n	8004336 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0208 	bic.w	r2, r2, #8
 8004334:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	223f      	movs	r2, #63	@ 0x3f
 8004340:	409a      	lsls	r2, r3
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 834a 	beq.w	80049f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
          }
          return;
 8004368:	e344      	b.n	80049f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d018      	beq.n	80043aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d108      	bne.n	8004398 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	2b00      	cmp	r3, #0
 800438c:	d02c      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
 8004396:	e027      	b.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d023      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	4798      	blx	r3
 80043a8:	e01e      	b.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10f      	bne.n	80043d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0210 	bic.w	r2, r2, #16
 80043c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8306 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8088 	beq.w	8004510 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2204      	movs	r2, #4
 8004404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a7a      	ldr	r2, [pc, #488]	@ (80045f8 <HAL_DMA_IRQHandler+0xa08>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d04a      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a79      	ldr	r2, [pc, #484]	@ (80045fc <HAL_DMA_IRQHandler+0xa0c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d045      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a77      	ldr	r2, [pc, #476]	@ (8004600 <HAL_DMA_IRQHandler+0xa10>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d040      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a76      	ldr	r2, [pc, #472]	@ (8004604 <HAL_DMA_IRQHandler+0xa14>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d03b      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a74      	ldr	r2, [pc, #464]	@ (8004608 <HAL_DMA_IRQHandler+0xa18>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d036      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a73      	ldr	r2, [pc, #460]	@ (800460c <HAL_DMA_IRQHandler+0xa1c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d031      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a71      	ldr	r2, [pc, #452]	@ (8004610 <HAL_DMA_IRQHandler+0xa20>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d02c      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a70      	ldr	r2, [pc, #448]	@ (8004614 <HAL_DMA_IRQHandler+0xa24>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d027      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a6e      	ldr	r2, [pc, #440]	@ (8004618 <HAL_DMA_IRQHandler+0xa28>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d022      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a6d      	ldr	r2, [pc, #436]	@ (800461c <HAL_DMA_IRQHandler+0xa2c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d01d      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6b      	ldr	r2, [pc, #428]	@ (8004620 <HAL_DMA_IRQHandler+0xa30>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d018      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6a      	ldr	r2, [pc, #424]	@ (8004624 <HAL_DMA_IRQHandler+0xa34>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a68      	ldr	r2, [pc, #416]	@ (8004628 <HAL_DMA_IRQHandler+0xa38>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a67      	ldr	r2, [pc, #412]	@ (800462c <HAL_DMA_IRQHandler+0xa3c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a65      	ldr	r2, [pc, #404]	@ (8004630 <HAL_DMA_IRQHandler+0xa40>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x8b8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a64      	ldr	r2, [pc, #400]	@ (8004634 <HAL_DMA_IRQHandler+0xa44>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <HAL_DMA_IRQHandler+0x8ca>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e007      	b.n	80044ca <HAL_DMA_IRQHandler+0x8da>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0201 	bic.w	r2, r2, #1
 80044c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3301      	adds	r3, #1
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d307      	bcc.n	80044e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f2      	bne.n	80044ca <HAL_DMA_IRQHandler+0x8da>
 80044e4:	e000      	b.n	80044e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80044e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2203      	movs	r2, #3
 80044fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80044fe:	e003      	b.n	8004508 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8272 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
 8004522:	e26c      	b.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a43      	ldr	r2, [pc, #268]	@ (8004638 <HAL_DMA_IRQHandler+0xa48>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d022      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a42      	ldr	r2, [pc, #264]	@ (800463c <HAL_DMA_IRQHandler+0xa4c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d01d      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a40      	ldr	r2, [pc, #256]	@ (8004640 <HAL_DMA_IRQHandler+0xa50>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d018      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a3f      	ldr	r2, [pc, #252]	@ (8004644 <HAL_DMA_IRQHandler+0xa54>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3d      	ldr	r2, [pc, #244]	@ (8004648 <HAL_DMA_IRQHandler+0xa58>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00e      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3c      	ldr	r2, [pc, #240]	@ (800464c <HAL_DMA_IRQHandler+0xa5c>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d009      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3a      	ldr	r2, [pc, #232]	@ (8004650 <HAL_DMA_IRQHandler+0xa60>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_DMA_IRQHandler+0x984>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a39      	ldr	r2, [pc, #228]	@ (8004654 <HAL_DMA_IRQHandler+0xa64>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_DMA_IRQHandler+0x988>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_DMA_IRQHandler+0x98a>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 823f 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2204      	movs	r2, #4
 8004592:	409a      	lsls	r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80cd 	beq.w	8004738 <HAL_DMA_IRQHandler+0xb48>
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80c7 	beq.w	8004738 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2204      	movs	r2, #4
 80045b4:	409a      	lsls	r2, r3
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d049      	beq.n	8004658 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 8210 	beq.w	80049f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e0:	e20a      	b.n	80049f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8206 	beq.w	80049f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f4:	e200      	b.n	80049f8 <HAL_DMA_IRQHandler+0xe08>
 80045f6:	bf00      	nop
 80045f8:	40020010 	.word	0x40020010
 80045fc:	40020028 	.word	0x40020028
 8004600:	40020040 	.word	0x40020040
 8004604:	40020058 	.word	0x40020058
 8004608:	40020070 	.word	0x40020070
 800460c:	40020088 	.word	0x40020088
 8004610:	400200a0 	.word	0x400200a0
 8004614:	400200b8 	.word	0x400200b8
 8004618:	40020410 	.word	0x40020410
 800461c:	40020428 	.word	0x40020428
 8004620:	40020440 	.word	0x40020440
 8004624:	40020458 	.word	0x40020458
 8004628:	40020470 	.word	0x40020470
 800462c:	40020488 	.word	0x40020488
 8004630:	400204a0 	.word	0x400204a0
 8004634:	400204b8 	.word	0x400204b8
 8004638:	58025408 	.word	0x58025408
 800463c:	5802541c 	.word	0x5802541c
 8004640:	58025430 	.word	0x58025430
 8004644:	58025444 	.word	0x58025444
 8004648:	58025458 	.word	0x58025458
 800464c:	5802546c 	.word	0x5802546c
 8004650:	58025480 	.word	0x58025480
 8004654:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d160      	bne.n	8004724 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a7f      	ldr	r2, [pc, #508]	@ (8004864 <HAL_DMA_IRQHandler+0xc74>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d04a      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a7d      	ldr	r2, [pc, #500]	@ (8004868 <HAL_DMA_IRQHandler+0xc78>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d045      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a7c      	ldr	r2, [pc, #496]	@ (800486c <HAL_DMA_IRQHandler+0xc7c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d040      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a7a      	ldr	r2, [pc, #488]	@ (8004870 <HAL_DMA_IRQHandler+0xc80>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03b      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a79      	ldr	r2, [pc, #484]	@ (8004874 <HAL_DMA_IRQHandler+0xc84>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d036      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a77      	ldr	r2, [pc, #476]	@ (8004878 <HAL_DMA_IRQHandler+0xc88>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a76      	ldr	r2, [pc, #472]	@ (800487c <HAL_DMA_IRQHandler+0xc8c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d02c      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a74      	ldr	r2, [pc, #464]	@ (8004880 <HAL_DMA_IRQHandler+0xc90>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d027      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a73      	ldr	r2, [pc, #460]	@ (8004884 <HAL_DMA_IRQHandler+0xc94>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d022      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a71      	ldr	r2, [pc, #452]	@ (8004888 <HAL_DMA_IRQHandler+0xc98>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d01d      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a70      	ldr	r2, [pc, #448]	@ (800488c <HAL_DMA_IRQHandler+0xc9c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004890 <HAL_DMA_IRQHandler+0xca0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a6d      	ldr	r2, [pc, #436]	@ (8004894 <HAL_DMA_IRQHandler+0xca4>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a6b      	ldr	r2, [pc, #428]	@ (8004898 <HAL_DMA_IRQHandler+0xca8>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6a      	ldr	r2, [pc, #424]	@ (800489c <HAL_DMA_IRQHandler+0xcac>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_DMA_IRQHandler+0xb12>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a68      	ldr	r2, [pc, #416]	@ (80048a0 <HAL_DMA_IRQHandler+0xcb0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <HAL_DMA_IRQHandler+0xb24>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0208 	bic.w	r2, r2, #8
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e007      	b.n	8004724 <HAL_DMA_IRQHandler+0xb34>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0204 	bic.w	r2, r2, #4
 8004722:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8165 	beq.w	80049f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004736:	e15f      	b.n	80049f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	2202      	movs	r2, #2
 8004742:	409a      	lsls	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 80c5 	beq.w	80048d8 <HAL_DMA_IRQHandler+0xce8>
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80bf 	beq.w	80048d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2202      	movs	r2, #2
 8004764:	409a      	lsls	r2, r3
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d018      	beq.n	80047a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 813a 	beq.w	80049fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004790:	e134      	b.n	80049fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 8130 	beq.w	80049fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a4:	e12a      	b.n	80049fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f040 8089 	bne.w	80048c4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004864 <HAL_DMA_IRQHandler+0xc74>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d04a      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a29      	ldr	r2, [pc, #164]	@ (8004868 <HAL_DMA_IRQHandler+0xc78>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d045      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a28      	ldr	r2, [pc, #160]	@ (800486c <HAL_DMA_IRQHandler+0xc7c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d040      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a26      	ldr	r2, [pc, #152]	@ (8004870 <HAL_DMA_IRQHandler+0xc80>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d03b      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a25      	ldr	r2, [pc, #148]	@ (8004874 <HAL_DMA_IRQHandler+0xc84>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d036      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a23      	ldr	r2, [pc, #140]	@ (8004878 <HAL_DMA_IRQHandler+0xc88>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d031      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a22      	ldr	r2, [pc, #136]	@ (800487c <HAL_DMA_IRQHandler+0xc8c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d02c      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a20      	ldr	r2, [pc, #128]	@ (8004880 <HAL_DMA_IRQHandler+0xc90>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d027      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1f      	ldr	r2, [pc, #124]	@ (8004884 <HAL_DMA_IRQHandler+0xc94>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1d      	ldr	r2, [pc, #116]	@ (8004888 <HAL_DMA_IRQHandler+0xc98>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01d      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1c      	ldr	r2, [pc, #112]	@ (800488c <HAL_DMA_IRQHandler+0xc9c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1a      	ldr	r2, [pc, #104]	@ (8004890 <HAL_DMA_IRQHandler+0xca0>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a19      	ldr	r2, [pc, #100]	@ (8004894 <HAL_DMA_IRQHandler+0xca4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a17      	ldr	r2, [pc, #92]	@ (8004898 <HAL_DMA_IRQHandler+0xca8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a16      	ldr	r2, [pc, #88]	@ (800489c <HAL_DMA_IRQHandler+0xcac>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_DMA_IRQHandler+0xc62>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a14      	ldr	r2, [pc, #80]	@ (80048a0 <HAL_DMA_IRQHandler+0xcb0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d128      	bne.n	80048a4 <HAL_DMA_IRQHandler+0xcb4>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0214 	bic.w	r2, r2, #20
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	e027      	b.n	80048b4 <HAL_DMA_IRQHandler+0xcc4>
 8004864:	40020010 	.word	0x40020010
 8004868:	40020028 	.word	0x40020028
 800486c:	40020040 	.word	0x40020040
 8004870:	40020058 	.word	0x40020058
 8004874:	40020070 	.word	0x40020070
 8004878:	40020088 	.word	0x40020088
 800487c:	400200a0 	.word	0x400200a0
 8004880:	400200b8 	.word	0x400200b8
 8004884:	40020410 	.word	0x40020410
 8004888:	40020428 	.word	0x40020428
 800488c:	40020440 	.word	0x40020440
 8004890:	40020458 	.word	0x40020458
 8004894:	40020470 	.word	0x40020470
 8004898:	40020488 	.word	0x40020488
 800489c:	400204a0 	.word	0x400204a0
 80048a0:	400204b8 	.word	0x400204b8
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 020a 	bic.w	r2, r2, #10
 80048b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 8097 	beq.w	80049fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048d6:	e091      	b.n	80049fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048dc:	f003 031f 	and.w	r3, r3, #31
 80048e0:	2208      	movs	r2, #8
 80048e2:	409a      	lsls	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4013      	ands	r3, r2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 8088 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 8082 	beq.w	80049fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a41      	ldr	r2, [pc, #260]	@ (8004a04 <HAL_DMA_IRQHandler+0xe14>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d04a      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a3f      	ldr	r2, [pc, #252]	@ (8004a08 <HAL_DMA_IRQHandler+0xe18>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d045      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3e      	ldr	r2, [pc, #248]	@ (8004a0c <HAL_DMA_IRQHandler+0xe1c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d040      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a10 <HAL_DMA_IRQHandler+0xe20>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d03b      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a3b      	ldr	r2, [pc, #236]	@ (8004a14 <HAL_DMA_IRQHandler+0xe24>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d036      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a39      	ldr	r2, [pc, #228]	@ (8004a18 <HAL_DMA_IRQHandler+0xe28>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d031      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a38      	ldr	r2, [pc, #224]	@ (8004a1c <HAL_DMA_IRQHandler+0xe2c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d02c      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a36      	ldr	r2, [pc, #216]	@ (8004a20 <HAL_DMA_IRQHandler+0xe30>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d027      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a35      	ldr	r2, [pc, #212]	@ (8004a24 <HAL_DMA_IRQHandler+0xe34>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d022      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a33      	ldr	r2, [pc, #204]	@ (8004a28 <HAL_DMA_IRQHandler+0xe38>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01d      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a32      	ldr	r2, [pc, #200]	@ (8004a2c <HAL_DMA_IRQHandler+0xe3c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d018      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a30      	ldr	r2, [pc, #192]	@ (8004a30 <HAL_DMA_IRQHandler+0xe40>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d013      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2f      	ldr	r2, [pc, #188]	@ (8004a34 <HAL_DMA_IRQHandler+0xe44>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00e      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a2d      	ldr	r2, [pc, #180]	@ (8004a38 <HAL_DMA_IRQHandler+0xe48>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a3c <HAL_DMA_IRQHandler+0xe4c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d004      	beq.n	800499a <HAL_DMA_IRQHandler+0xdaa>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2a      	ldr	r2, [pc, #168]	@ (8004a40 <HAL_DMA_IRQHandler+0xe50>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d108      	bne.n	80049ac <HAL_DMA_IRQHandler+0xdbc>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 021c 	bic.w	r2, r2, #28
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	e007      	b.n	80049bc <HAL_DMA_IRQHandler+0xdcc>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 020e 	bic.w	r2, r2, #14
 80049ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	2201      	movs	r2, #1
 80049c6:	409a      	lsls	r2, r3
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	4798      	blx	r3
 80049f2:	e004      	b.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80049f4:	bf00      	nop
 80049f6:	e002      	b.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80049fe:	3728      	adds	r7, #40	@ 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8

08004a44 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a74:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a7f      	ldr	r2, [pc, #508]	@ (8004c78 <DMA_SetConfig+0x21c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d072      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a7d      	ldr	r2, [pc, #500]	@ (8004c7c <DMA_SetConfig+0x220>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d06d      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c80 <DMA_SetConfig+0x224>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d068      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a7a      	ldr	r2, [pc, #488]	@ (8004c84 <DMA_SetConfig+0x228>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d063      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a79      	ldr	r2, [pc, #484]	@ (8004c88 <DMA_SetConfig+0x22c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d05e      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a77      	ldr	r2, [pc, #476]	@ (8004c8c <DMA_SetConfig+0x230>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d059      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a76      	ldr	r2, [pc, #472]	@ (8004c90 <DMA_SetConfig+0x234>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d054      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a74      	ldr	r2, [pc, #464]	@ (8004c94 <DMA_SetConfig+0x238>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d04f      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a73      	ldr	r2, [pc, #460]	@ (8004c98 <DMA_SetConfig+0x23c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d04a      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a71      	ldr	r2, [pc, #452]	@ (8004c9c <DMA_SetConfig+0x240>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d045      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a70      	ldr	r2, [pc, #448]	@ (8004ca0 <DMA_SetConfig+0x244>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d040      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca4 <DMA_SetConfig+0x248>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d03b      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a6d      	ldr	r2, [pc, #436]	@ (8004ca8 <DMA_SetConfig+0x24c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d036      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a6b      	ldr	r2, [pc, #428]	@ (8004cac <DMA_SetConfig+0x250>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d031      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6a      	ldr	r2, [pc, #424]	@ (8004cb0 <DMA_SetConfig+0x254>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d02c      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a68      	ldr	r2, [pc, #416]	@ (8004cb4 <DMA_SetConfig+0x258>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d027      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a67      	ldr	r2, [pc, #412]	@ (8004cb8 <DMA_SetConfig+0x25c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d022      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a65      	ldr	r2, [pc, #404]	@ (8004cbc <DMA_SetConfig+0x260>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d01d      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a64      	ldr	r2, [pc, #400]	@ (8004cc0 <DMA_SetConfig+0x264>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d018      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a62      	ldr	r2, [pc, #392]	@ (8004cc4 <DMA_SetConfig+0x268>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d013      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a61      	ldr	r2, [pc, #388]	@ (8004cc8 <DMA_SetConfig+0x26c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00e      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a5f      	ldr	r2, [pc, #380]	@ (8004ccc <DMA_SetConfig+0x270>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d009      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a5e      	ldr	r2, [pc, #376]	@ (8004cd0 <DMA_SetConfig+0x274>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d004      	beq.n	8004b66 <DMA_SetConfig+0x10a>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd4 <DMA_SetConfig+0x278>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <DMA_SetConfig+0x10e>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <DMA_SetConfig+0x110>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00d      	beq.n	8004b8c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b78:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b8a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a39      	ldr	r2, [pc, #228]	@ (8004c78 <DMA_SetConfig+0x21c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d04a      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a38      	ldr	r2, [pc, #224]	@ (8004c7c <DMA_SetConfig+0x220>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d045      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a36      	ldr	r2, [pc, #216]	@ (8004c80 <DMA_SetConfig+0x224>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d040      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a35      	ldr	r2, [pc, #212]	@ (8004c84 <DMA_SetConfig+0x228>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d03b      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a33      	ldr	r2, [pc, #204]	@ (8004c88 <DMA_SetConfig+0x22c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d036      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a32      	ldr	r2, [pc, #200]	@ (8004c8c <DMA_SetConfig+0x230>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d031      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a30      	ldr	r2, [pc, #192]	@ (8004c90 <DMA_SetConfig+0x234>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02c      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a2f      	ldr	r2, [pc, #188]	@ (8004c94 <DMA_SetConfig+0x238>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d027      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c98 <DMA_SetConfig+0x23c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d022      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2c      	ldr	r2, [pc, #176]	@ (8004c9c <DMA_SetConfig+0x240>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d01d      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca0 <DMA_SetConfig+0x244>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d018      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <DMA_SetConfig+0x248>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a27      	ldr	r2, [pc, #156]	@ (8004ca8 <DMA_SetConfig+0x24c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00e      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a26      	ldr	r2, [pc, #152]	@ (8004cac <DMA_SetConfig+0x250>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d009      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a24      	ldr	r2, [pc, #144]	@ (8004cb0 <DMA_SetConfig+0x254>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <DMA_SetConfig+0x1d0>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a23      	ldr	r2, [pc, #140]	@ (8004cb4 <DMA_SetConfig+0x258>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d101      	bne.n	8004c30 <DMA_SetConfig+0x1d4>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <DMA_SetConfig+0x1d6>
 8004c30:	2300      	movs	r3, #0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d059      	beq.n	8004cea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	223f      	movs	r2, #63	@ 0x3f
 8004c40:	409a      	lsls	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c54:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b40      	cmp	r3, #64	@ 0x40
 8004c64:	d138      	bne.n	8004cd8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c76:	e086      	b.n	8004d86 <DMA_SetConfig+0x32a>
 8004c78:	40020010 	.word	0x40020010
 8004c7c:	40020028 	.word	0x40020028
 8004c80:	40020040 	.word	0x40020040
 8004c84:	40020058 	.word	0x40020058
 8004c88:	40020070 	.word	0x40020070
 8004c8c:	40020088 	.word	0x40020088
 8004c90:	400200a0 	.word	0x400200a0
 8004c94:	400200b8 	.word	0x400200b8
 8004c98:	40020410 	.word	0x40020410
 8004c9c:	40020428 	.word	0x40020428
 8004ca0:	40020440 	.word	0x40020440
 8004ca4:	40020458 	.word	0x40020458
 8004ca8:	40020470 	.word	0x40020470
 8004cac:	40020488 	.word	0x40020488
 8004cb0:	400204a0 	.word	0x400204a0
 8004cb4:	400204b8 	.word	0x400204b8
 8004cb8:	58025408 	.word	0x58025408
 8004cbc:	5802541c 	.word	0x5802541c
 8004cc0:	58025430 	.word	0x58025430
 8004cc4:	58025444 	.word	0x58025444
 8004cc8:	58025458 	.word	0x58025458
 8004ccc:	5802546c 	.word	0x5802546c
 8004cd0:	58025480 	.word	0x58025480
 8004cd4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	60da      	str	r2, [r3, #12]
}
 8004ce8:	e04d      	b.n	8004d86 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a29      	ldr	r2, [pc, #164]	@ (8004d94 <DMA_SetConfig+0x338>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a27      	ldr	r2, [pc, #156]	@ (8004d98 <DMA_SetConfig+0x33c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01d      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a26      	ldr	r2, [pc, #152]	@ (8004d9c <DMA_SetConfig+0x340>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a24      	ldr	r2, [pc, #144]	@ (8004da0 <DMA_SetConfig+0x344>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a23      	ldr	r2, [pc, #140]	@ (8004da4 <DMA_SetConfig+0x348>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a21      	ldr	r2, [pc, #132]	@ (8004da8 <DMA_SetConfig+0x34c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a20      	ldr	r2, [pc, #128]	@ (8004dac <DMA_SetConfig+0x350>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <DMA_SetConfig+0x2de>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1e      	ldr	r2, [pc, #120]	@ (8004db0 <DMA_SetConfig+0x354>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <DMA_SetConfig+0x2e2>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <DMA_SetConfig+0x2e4>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	f003 031f 	and.w	r3, r3, #31
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	409a      	lsls	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b40      	cmp	r3, #64	@ 0x40
 8004d62:	d108      	bne.n	8004d76 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	60da      	str	r2, [r3, #12]
}
 8004d74:	e007      	b.n	8004d86 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	60da      	str	r2, [r3, #12]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	58025408 	.word	0x58025408
 8004d98:	5802541c 	.word	0x5802541c
 8004d9c:	58025430 	.word	0x58025430
 8004da0:	58025444 	.word	0x58025444
 8004da4:	58025458 	.word	0x58025458
 8004da8:	5802546c 	.word	0x5802546c
 8004dac:	58025480 	.word	0x58025480
 8004db0:	58025494 	.word	0x58025494

08004db4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a42      	ldr	r2, [pc, #264]	@ (8004ecc <DMA_CalcBaseAndBitshift+0x118>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d04a      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a41      	ldr	r2, [pc, #260]	@ (8004ed0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d045      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed4 <DMA_CalcBaseAndBitshift+0x120>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d040      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a3e      	ldr	r2, [pc, #248]	@ (8004ed8 <DMA_CalcBaseAndBitshift+0x124>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d03b      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a3c      	ldr	r2, [pc, #240]	@ (8004edc <DMA_CalcBaseAndBitshift+0x128>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d036      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ee0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d031      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a39      	ldr	r2, [pc, #228]	@ (8004ee4 <DMA_CalcBaseAndBitshift+0x130>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d02c      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a38      	ldr	r2, [pc, #224]	@ (8004ee8 <DMA_CalcBaseAndBitshift+0x134>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d027      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a36      	ldr	r2, [pc, #216]	@ (8004eec <DMA_CalcBaseAndBitshift+0x138>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d022      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a35      	ldr	r2, [pc, #212]	@ (8004ef0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d01d      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a33      	ldr	r2, [pc, #204]	@ (8004ef4 <DMA_CalcBaseAndBitshift+0x140>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d018      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a32      	ldr	r2, [pc, #200]	@ (8004ef8 <DMA_CalcBaseAndBitshift+0x144>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d013      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a30      	ldr	r2, [pc, #192]	@ (8004efc <DMA_CalcBaseAndBitshift+0x148>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00e      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2f      	ldr	r2, [pc, #188]	@ (8004f00 <DMA_CalcBaseAndBitshift+0x14c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d009      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8004f04 <DMA_CalcBaseAndBitshift+0x150>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d004      	beq.n	8004e5c <DMA_CalcBaseAndBitshift+0xa8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a2c      	ldr	r2, [pc, #176]	@ (8004f08 <DMA_CalcBaseAndBitshift+0x154>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <DMA_CalcBaseAndBitshift+0xac>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <DMA_CalcBaseAndBitshift+0xae>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d024      	beq.n	8004eb0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3b10      	subs	r3, #16
 8004e6e:	4a27      	ldr	r2, [pc, #156]	@ (8004f0c <DMA_CalcBaseAndBitshift+0x158>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	4a24      	ldr	r2, [pc, #144]	@ (8004f10 <DMA_CalcBaseAndBitshift+0x15c>)
 8004e80:	5cd3      	ldrb	r3, [r2, r3]
 8004e82:	461a      	mov	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d908      	bls.n	8004ea0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <DMA_CalcBaseAndBitshift+0x160>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	1d1a      	adds	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e9e:	e00d      	b.n	8004ebc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <DMA_CalcBaseAndBitshift+0x160>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eae:	e005      	b.n	8004ebc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40020010 	.word	0x40020010
 8004ed0:	40020028 	.word	0x40020028
 8004ed4:	40020040 	.word	0x40020040
 8004ed8:	40020058 	.word	0x40020058
 8004edc:	40020070 	.word	0x40020070
 8004ee0:	40020088 	.word	0x40020088
 8004ee4:	400200a0 	.word	0x400200a0
 8004ee8:	400200b8 	.word	0x400200b8
 8004eec:	40020410 	.word	0x40020410
 8004ef0:	40020428 	.word	0x40020428
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	40020458 	.word	0x40020458
 8004efc:	40020470 	.word	0x40020470
 8004f00:	40020488 	.word	0x40020488
 8004f04:	400204a0 	.word	0x400204a0
 8004f08:	400204b8 	.word	0x400204b8
 8004f0c:	aaaaaaab 	.word	0xaaaaaaab
 8004f10:	08012e38 	.word	0x08012e38
 8004f14:	fffffc00 	.word	0xfffffc00

08004f18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d120      	bne.n	8004f6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d858      	bhi.n	8004fe6 <DMA_CheckFifoParam+0xce>
 8004f34:	a201      	add	r2, pc, #4	@ (adr r2, 8004f3c <DMA_CheckFifoParam+0x24>)
 8004f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3a:	bf00      	nop
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f5f 	.word	0x08004f5f
 8004f44:	08004f4d 	.word	0x08004f4d
 8004f48:	08004fe7 	.word	0x08004fe7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d048      	beq.n	8004fea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f5c:	e045      	b.n	8004fea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f66:	d142      	bne.n	8004fee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f6c:	e03f      	b.n	8004fee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f76:	d123      	bne.n	8004fc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d838      	bhi.n	8004ff2 <DMA_CheckFifoParam+0xda>
 8004f80:	a201      	add	r2, pc, #4	@ (adr r2, 8004f88 <DMA_CheckFifoParam+0x70>)
 8004f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f86:	bf00      	nop
 8004f88:	08004f99 	.word	0x08004f99
 8004f8c:	08004f9f 	.word	0x08004f9f
 8004f90:	08004f99 	.word	0x08004f99
 8004f94:	08004fb1 	.word	0x08004fb1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	73fb      	strb	r3, [r7, #15]
        break;
 8004f9c:	e030      	b.n	8005000 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d025      	beq.n	8004ff6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fae:	e022      	b.n	8004ff6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fb8:	d11f      	bne.n	8004ffa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fbe:	e01c      	b.n	8004ffa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d902      	bls.n	8004fce <DMA_CheckFifoParam+0xb6>
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d003      	beq.n	8004fd4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004fcc:	e018      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004fd2:	e015      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00e      	beq.n	8004ffe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8004fe4:	e00b      	b.n	8004ffe <DMA_CheckFifoParam+0xe6>
        break;
 8004fe6:	bf00      	nop
 8004fe8:	e00a      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004fea:	bf00      	nop
 8004fec:	e008      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004fee:	bf00      	nop
 8004ff0:	e006      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004ff2:	bf00      	nop
 8004ff4:	e004      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004ff6:	bf00      	nop
 8004ff8:	e002      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
        break;
 8004ffa:	bf00      	nop
 8004ffc:	e000      	b.n	8005000 <DMA_CheckFifoParam+0xe8>
    break;
 8004ffe:	bf00      	nop
    }
  }

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop

08005010 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a38      	ldr	r2, [pc, #224]	@ (8005104 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d022      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a36      	ldr	r2, [pc, #216]	@ (8005108 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d01d      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a35      	ldr	r2, [pc, #212]	@ (800510c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d018      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a33      	ldr	r2, [pc, #204]	@ (8005110 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a32      	ldr	r2, [pc, #200]	@ (8005114 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00e      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a30      	ldr	r2, [pc, #192]	@ (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d009      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2f      	ldr	r2, [pc, #188]	@ (800511c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d004      	beq.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a2d      	ldr	r2, [pc, #180]	@ (8005120 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d101      	bne.n	8005072 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01a      	beq.n	80050ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	3b08      	subs	r3, #8
 8005080:	4a28      	ldr	r2, [pc, #160]	@ (8005124 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4b26      	ldr	r3, [pc, #152]	@ (8005128 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a24      	ldr	r2, [pc, #144]	@ (800512c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800509c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	2201      	movs	r2, #1
 80050a6:	409a      	lsls	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80050ac:	e024      	b.n	80050f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	3b10      	subs	r3, #16
 80050b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80050b8:	fba2 2303 	umull	r2, r3, r2, r3
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4a1c      	ldr	r2, [pc, #112]	@ (8005134 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d806      	bhi.n	80050d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005138 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d902      	bls.n	80050d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3308      	adds	r3, #8
 80050d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4b18      	ldr	r3, [pc, #96]	@ (800513c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	461a      	mov	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80050e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050f8:	bf00      	nop
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	58025408 	.word	0x58025408
 8005108:	5802541c 	.word	0x5802541c
 800510c:	58025430 	.word	0x58025430
 8005110:	58025444 	.word	0x58025444
 8005114:	58025458 	.word	0x58025458
 8005118:	5802546c 	.word	0x5802546c
 800511c:	58025480 	.word	0x58025480
 8005120:	58025494 	.word	0x58025494
 8005124:	cccccccd 	.word	0xcccccccd
 8005128:	16009600 	.word	0x16009600
 800512c:	58025880 	.word	0x58025880
 8005130:	aaaaaaab 	.word	0xaaaaaaab
 8005134:	400204b8 	.word	0x400204b8
 8005138:	4002040f 	.word	0x4002040f
 800513c:	10008200 	.word	0x10008200
 8005140:	40020880 	.word	0x40020880

08005144 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d04a      	beq.n	80051f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d847      	bhi.n	80051f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a25      	ldr	r2, [pc, #148]	@ (80051fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a24      	ldr	r2, [pc, #144]	@ (8005200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d01d      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a22      	ldr	r2, [pc, #136]	@ (8005204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d018      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a21      	ldr	r2, [pc, #132]	@ (8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1f      	ldr	r2, [pc, #124]	@ (800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1e      	ldr	r2, [pc, #120]	@ (8005210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051b4:	2300      	movs	r3, #0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4b17      	ldr	r3, [pc, #92]	@ (800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	461a      	mov	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a15      	ldr	r2, [pc, #84]	@ (8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80051cc:	671a      	str	r2, [r3, #112]	@ 0x70
 80051ce:	e009      	b.n	80051e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4b14      	ldr	r3, [pc, #80]	@ (8005224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	461a      	mov	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a11      	ldr	r2, [pc, #68]	@ (8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80051e2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	2201      	movs	r2, #1
 80051ea:	409a      	lsls	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	58025408 	.word	0x58025408
 8005200:	5802541c 	.word	0x5802541c
 8005204:	58025430 	.word	0x58025430
 8005208:	58025444 	.word	0x58025444
 800520c:	58025458 	.word	0x58025458
 8005210:	5802546c 	.word	0x5802546c
 8005214:	58025480 	.word	0x58025480
 8005218:	58025494 	.word	0x58025494
 800521c:	1600963f 	.word	0x1600963f
 8005220:	58025940 	.word	0x58025940
 8005224:	1000823f 	.word	0x1000823f
 8005228:	40020940 	.word	0x40020940

0800522c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800522c:	b480      	push	{r7}
 800522e:	b089      	sub	sp, #36	@ 0x24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800523a:	4b89      	ldr	r3, [pc, #548]	@ (8005460 <HAL_GPIO_Init+0x234>)
 800523c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800523e:	e194      	b.n	800556a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	2101      	movs	r1, #1
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	fa01 f303 	lsl.w	r3, r1, r3
 800524c:	4013      	ands	r3, r2
 800524e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8186 	beq.w	8005564 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d005      	beq.n	8005270 <HAL_GPIO_Init+0x44>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d130      	bne.n	80052d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	2203      	movs	r2, #3
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	4313      	orrs	r3, r2
 8005298:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052a6:	2201      	movs	r2, #1
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43db      	mvns	r3, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4013      	ands	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	f003 0201 	and.w	r2, r3, #1
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	fa02 f303 	lsl.w	r3, r2, r3
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d017      	beq.n	800530e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	2203      	movs	r2, #3
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43db      	mvns	r3, r3
 80052f0:	69ba      	ldr	r2, [r7, #24]
 80052f2:	4013      	ands	r3, r2
 80052f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4313      	orrs	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d123      	bne.n	8005362 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	08da      	lsrs	r2, r3, #3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3208      	adds	r2, #8
 8005322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	220f      	movs	r2, #15
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43db      	mvns	r3, r3
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	4013      	ands	r3, r2
 800533c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	4313      	orrs	r3, r2
 8005352:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	08da      	lsrs	r2, r3, #3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3208      	adds	r2, #8
 800535c:	69b9      	ldr	r1, [r7, #24]
 800535e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	2203      	movs	r2, #3
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43db      	mvns	r3, r3
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	4013      	ands	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 0203 	and.w	r2, r3, #3
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80e0 	beq.w	8005564 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005464 <HAL_GPIO_Init+0x238>)
 80053a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005464 <HAL_GPIO_Init+0x238>)
 80053ac:	f043 0302 	orr.w	r3, r3, #2
 80053b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80053b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005464 <HAL_GPIO_Init+0x238>)
 80053b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053c2:	4a29      	ldr	r2, [pc, #164]	@ (8005468 <HAL_GPIO_Init+0x23c>)
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	089b      	lsrs	r3, r3, #2
 80053c8:	3302      	adds	r3, #2
 80053ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	220f      	movs	r2, #15
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a20      	ldr	r2, [pc, #128]	@ (800546c <HAL_GPIO_Init+0x240>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d052      	beq.n	8005494 <HAL_GPIO_Init+0x268>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005470 <HAL_GPIO_Init+0x244>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d031      	beq.n	800545a <HAL_GPIO_Init+0x22e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005474 <HAL_GPIO_Init+0x248>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d02b      	beq.n	8005456 <HAL_GPIO_Init+0x22a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a1d      	ldr	r2, [pc, #116]	@ (8005478 <HAL_GPIO_Init+0x24c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d025      	beq.n	8005452 <HAL_GPIO_Init+0x226>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a1c      	ldr	r2, [pc, #112]	@ (800547c <HAL_GPIO_Init+0x250>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01f      	beq.n	800544e <HAL_GPIO_Init+0x222>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a1b      	ldr	r2, [pc, #108]	@ (8005480 <HAL_GPIO_Init+0x254>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d019      	beq.n	800544a <HAL_GPIO_Init+0x21e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a1a      	ldr	r2, [pc, #104]	@ (8005484 <HAL_GPIO_Init+0x258>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d013      	beq.n	8005446 <HAL_GPIO_Init+0x21a>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a19      	ldr	r2, [pc, #100]	@ (8005488 <HAL_GPIO_Init+0x25c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d00d      	beq.n	8005442 <HAL_GPIO_Init+0x216>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a18      	ldr	r2, [pc, #96]	@ (800548c <HAL_GPIO_Init+0x260>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d007      	beq.n	800543e <HAL_GPIO_Init+0x212>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a17      	ldr	r2, [pc, #92]	@ (8005490 <HAL_GPIO_Init+0x264>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_GPIO_Init+0x20e>
 8005436:	2309      	movs	r3, #9
 8005438:	e02d      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 800543a:	230a      	movs	r3, #10
 800543c:	e02b      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 800543e:	2308      	movs	r3, #8
 8005440:	e029      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 8005442:	2307      	movs	r3, #7
 8005444:	e027      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 8005446:	2306      	movs	r3, #6
 8005448:	e025      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 800544a:	2305      	movs	r3, #5
 800544c:	e023      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 800544e:	2304      	movs	r3, #4
 8005450:	e021      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 8005452:	2303      	movs	r3, #3
 8005454:	e01f      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 8005456:	2302      	movs	r3, #2
 8005458:	e01d      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 800545a:	2301      	movs	r3, #1
 800545c:	e01b      	b.n	8005496 <HAL_GPIO_Init+0x26a>
 800545e:	bf00      	nop
 8005460:	58000080 	.word	0x58000080
 8005464:	58024400 	.word	0x58024400
 8005468:	58000400 	.word	0x58000400
 800546c:	58020000 	.word	0x58020000
 8005470:	58020400 	.word	0x58020400
 8005474:	58020800 	.word	0x58020800
 8005478:	58020c00 	.word	0x58020c00
 800547c:	58021000 	.word	0x58021000
 8005480:	58021400 	.word	0x58021400
 8005484:	58021800 	.word	0x58021800
 8005488:	58021c00 	.word	0x58021c00
 800548c:	58022000 	.word	0x58022000
 8005490:	58022400 	.word	0x58022400
 8005494:	2300      	movs	r3, #0
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	f002 0203 	and.w	r2, r2, #3
 800549c:	0092      	lsls	r2, r2, #2
 800549e:	4093      	lsls	r3, r2
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054a6:	4938      	ldr	r1, [pc, #224]	@ (8005588 <HAL_GPIO_Init+0x35c>)
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	3302      	adds	r3, #2
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80054da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	43db      	mvns	r3, r3
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4013      	ands	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005508:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	fa22 f303 	lsr.w	r3, r2, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f ae63 	bne.w	8005240 <HAL_GPIO_Init+0x14>
  }
}
 800557a:	bf00      	nop
 800557c:	bf00      	nop
 800557e:	3724      	adds	r7, #36	@ 0x24
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	58000400 	.word	0x58000400

0800558c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	460b      	mov	r3, r1
 8005596:	807b      	strh	r3, [r7, #2]
 8005598:	4613      	mov	r3, r2
 800559a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800559c:	787b      	ldrb	r3, [r7, #1]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055a2:	887a      	ldrh	r2, [r7, #2]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80055a8:	e003      	b.n	80055b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80055aa:	887b      	ldrh	r3, [r7, #2]
 80055ac:	041a      	lsls	r2, r3, #16
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	619a      	str	r2, [r3, #24]
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b086      	sub	sp, #24
 80055c2:	af02      	add	r7, sp, #8
 80055c4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0fe      	b.n	80057ce <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d106      	bne.n	80055ea <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f009 fc15 	bl	800ee14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2203      	movs	r2, #3
 80055ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f006 f83b 	bl	800b672 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	7c1a      	ldrb	r2, [r3, #16]
 8005604:	f88d 2000 	strb.w	r2, [sp]
 8005608:	3304      	adds	r3, #4
 800560a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800560c:	f005 ff0c 	bl	800b428 <USB_CoreInit>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d005      	beq.n	8005622 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e0d5      	b.n	80057ce <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f006 f833 	bl	800b694 <USB_SetCurrentMode>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0c6      	b.n	80057ce <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]
 8005644:	e04a      	b.n	80056dc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005646:	7bfa      	ldrb	r2, [r7, #15]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	00db      	lsls	r3, r3, #3
 800564e:	4413      	add	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	440b      	add	r3, r1
 8005654:	3315      	adds	r3, #21
 8005656:	2201      	movs	r2, #1
 8005658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800565a:	7bfa      	ldrb	r2, [r7, #15]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	3314      	adds	r3, #20
 800566a:	7bfa      	ldrb	r2, [r7, #15]
 800566c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800566e:	7bfa      	ldrb	r2, [r7, #15]
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	b298      	uxth	r0, r3
 8005674:	6879      	ldr	r1, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	332e      	adds	r3, #46	@ 0x2e
 8005682:	4602      	mov	r2, r0
 8005684:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005686:	7bfa      	ldrb	r2, [r7, #15]
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	440b      	add	r3, r1
 8005694:	3318      	adds	r3, #24
 8005696:	2200      	movs	r2, #0
 8005698:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800569a:	7bfa      	ldrb	r2, [r7, #15]
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	4613      	mov	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	331c      	adds	r3, #28
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056ae:	7bfa      	ldrb	r2, [r7, #15]
 80056b0:	6879      	ldr	r1, [r7, #4]
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	3320      	adds	r3, #32
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056c2:	7bfa      	ldrb	r2, [r7, #15]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	3324      	adds	r3, #36	@ 0x24
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
 80056d8:	3301      	adds	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	791b      	ldrb	r3, [r3, #4]
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d3af      	bcc.n	8005646 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056e6:	2300      	movs	r3, #0
 80056e8:	73fb      	strb	r3, [r7, #15]
 80056ea:	e044      	b.n	8005776 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056ec:	7bfa      	ldrb	r2, [r7, #15]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80056fe:	2200      	movs	r2, #0
 8005700:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	440b      	add	r3, r1
 8005710:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005718:	7bfa      	ldrb	r2, [r7, #15]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800572e:	7bfa      	ldrb	r2, [r7, #15]
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005744:	7bfa      	ldrb	r2, [r7, #15]
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4413      	add	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800575a:	7bfa      	ldrb	r2, [r7, #15]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	3301      	adds	r3, #1
 8005774:	73fb      	strb	r3, [r7, #15]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	791b      	ldrb	r3, [r3, #4]
 800577a:	7bfa      	ldrb	r2, [r7, #15]
 800577c:	429a      	cmp	r2, r3
 800577e:	d3b5      	bcc.n	80056ec <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	7c1a      	ldrb	r2, [r3, #16]
 8005788:	f88d 2000 	strb.w	r2, [sp]
 800578c:	3304      	adds	r3, #4
 800578e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005790:	f005 ffcc 	bl	800b72c <USB_DevInit>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e013      	b.n	80057ce <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	7b1b      	ldrb	r3, [r3, #12]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d102      	bne.n	80057c2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f96f 	bl	8006aa0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f007 f80f 	bl	800c7ea <USB_DevDisconnect>

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_PCD_Start+0x1c>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e022      	b.n	8005838 <HAL_PCD_Start+0x62>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800580a:	2b01      	cmp	r3, #1
 800580c:	d105      	bne.n	800581a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005812:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f005 ff16 	bl	800b650 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f006 ffbd 	bl	800c7a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005840:	b590      	push	{r4, r7, lr}
 8005842:	b08d      	sub	sp, #52	@ 0x34
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f007 f87b 	bl	800c952 <USB_GetMode>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 84b9 	bne.w	80061d6 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f006 ffdf 	bl	800c82c <USB_ReadInterrupts>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 84af 	beq.w	80061d4 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	0a1b      	lsrs	r3, r3, #8
 8005880:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f006 ffcc 	bl	800c82c <USB_ReadInterrupts>
 8005894:	4603      	mov	r3, r0
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d107      	bne.n	80058ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695a      	ldr	r2, [r3, #20]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f002 0202 	and.w	r2, r2, #2
 80058ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f006 ffba 	bl	800c82c <USB_ReadInterrupts>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b10      	cmp	r3, #16
 80058c0:	d161      	bne.n	8005986 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0210 	bic.w	r2, r2, #16
 80058d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f003 020f 	and.w	r2, r3, #15
 80058de:	4613      	mov	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	3304      	adds	r3, #4
 80058f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80058f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058fc:	d124      	bne.n	8005948 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d035      	beq.n	8005976 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	091b      	lsrs	r3, r3, #4
 8005912:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005914:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005918:	b29b      	uxth	r3, r3
 800591a:	461a      	mov	r2, r3
 800591c:	6a38      	ldr	r0, [r7, #32]
 800591e:	f006 fdf1 	bl	800c504 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	091b      	lsrs	r3, r3, #4
 800592a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800592e:	441a      	add	r2, r3
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	091b      	lsrs	r3, r3, #4
 800593c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005940:	441a      	add	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	615a      	str	r2, [r3, #20]
 8005946:	e016      	b.n	8005976 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800594e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005952:	d110      	bne.n	8005976 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800595a:	2208      	movs	r2, #8
 800595c:	4619      	mov	r1, r3
 800595e:	6a38      	ldr	r0, [r7, #32]
 8005960:	f006 fdd0 	bl	800c504 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	695a      	ldr	r2, [r3, #20]
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	091b      	lsrs	r3, r3, #4
 800596c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005970:	441a      	add	r2, r3
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0210 	orr.w	r2, r2, #16
 8005984:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f006 ff4e 	bl	800c82c <USB_ReadInterrupts>
 8005990:	4603      	mov	r3, r0
 8005992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005996:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800599a:	f040 80a7 	bne.w	8005aec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f006 ff53 	bl	800c852 <USB_ReadDevAllOutEpInterrupt>
 80059ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80059ae:	e099      	b.n	8005ae4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 808e 	beq.w	8005ad8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f006 ff77 	bl	800c8ba <USB_ReadDevOutEPInterrupt>
 80059cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e4:	461a      	mov	r2, r3
 80059e6:	2301      	movs	r3, #1
 80059e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fed1 	bl	8006794 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00c      	beq.n	8005a16 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2308      	movs	r3, #8
 8005a0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 ffa7 	bl	8006964 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2310      	movs	r3, #16
 8005a30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d030      	beq.n	8005a9e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a44:	2b80      	cmp	r3, #128	@ 0x80
 8005a46:	d109      	bne.n	8005a5c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	69fa      	ldr	r2, [r7, #28]
 8005a52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a5a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5e:	4613      	mov	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	3304      	adds	r3, #4
 8005a70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	78db      	ldrb	r3, [r3, #3]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d108      	bne.n	8005a8c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f009 faea 	bl	800f060 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a98:	461a      	mov	r2, r3
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	2320      	movs	r3, #32
 8005ab8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d009      	beq.n	8005ad8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ad6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	3301      	adds	r3, #1
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae0:	085b      	lsrs	r3, r3, #1
 8005ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f47f af62 	bne.w	80059b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f006 fe9b 	bl	800c82c <USB_ReadInterrupts>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005afc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b00:	f040 80db 	bne.w	8005cba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f006 febc 	bl	800c886 <USB_ReadDevAllInEpInterrupt>
 8005b0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005b14:	e0cd      	b.n	8005cb2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80c2 	beq.w	8005ca6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f006 fee2 	bl	800c8f6 <USB_ReadDevInEPInterrupt>
 8005b32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d057      	beq.n	8005bee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	2201      	movs	r2, #1
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	43db      	mvns	r3, r3
 8005b58:	69f9      	ldr	r1, [r7, #28]
 8005b5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b5e:	4013      	ands	r3, r2
 8005b60:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6e:	461a      	mov	r2, r3
 8005b70:	2301      	movs	r3, #1
 8005b72:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	799b      	ldrb	r3, [r3, #6]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d132      	bne.n	8005be2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b80:	4613      	mov	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	3320      	adds	r3, #32
 8005b8c:	6819      	ldr	r1, [r3, #0]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b92:	4613      	mov	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4413      	add	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4403      	add	r3, r0
 8005b9c:	331c      	adds	r3, #28
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4419      	add	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4403      	add	r3, r0
 8005bb0:	3320      	adds	r3, #32
 8005bb2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d113      	bne.n	8005be2 <HAL_PCD_IRQHandler+0x3a2>
 8005bba:	6879      	ldr	r1, [r7, #4]
 8005bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3324      	adds	r3, #36	@ 0x24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d108      	bne.n	8005be2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6818      	ldr	r0, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bda:	461a      	mov	r2, r3
 8005bdc:	2101      	movs	r1, #1
 8005bde:	f006 feeb 	bl	800c9b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	4619      	mov	r1, r3
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f009 f9b4 	bl	800ef56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c04:	461a      	mov	r2, r3
 8005c06:	2308      	movs	r3, #8
 8005c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c20:	461a      	mov	r2, r3
 8005c22:	2310      	movs	r3, #16
 8005c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2340      	movs	r3, #64	@ 0x40
 8005c40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d023      	beq.n	8005c94 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c4e:	6a38      	ldr	r0, [r7, #32]
 8005c50:	f005 feca 	bl	800b9e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c56:	4613      	mov	r3, r2
 8005c58:	00db      	lsls	r3, r3, #3
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	3310      	adds	r3, #16
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	3304      	adds	r3, #4
 8005c66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	78db      	ldrb	r3, [r3, #3]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d108      	bne.n	8005c82 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2200      	movs	r2, #0
 8005c74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f009 fa01 	bl	800f084 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2302      	movs	r3, #2
 8005c92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fcea 	bl	800667a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	3301      	adds	r3, #1
 8005caa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af2e 	bne.w	8005b16 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f006 fdb4 	bl	800c82c <USB_ReadInterrupts>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cce:	d122      	bne.n	8005d16 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cde:	f023 0301 	bic.w	r3, r3, #1
 8005ce2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d108      	bne.n	8005d00 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fef5 	bl	8006ae8 <HAL_PCDEx_LPM_Callback>
 8005cfe:	e002      	b.n	8005d06 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f009 f99f 	bl	800f044 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695a      	ldr	r2, [r3, #20]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f006 fd86 	bl	800c82c <USB_ReadInterrupts>
 8005d20:	4603      	mov	r3, r0
 8005d22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d2a:	d112      	bne.n	8005d52 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d102      	bne.n	8005d42 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f009 f95b 	bl	800eff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695a      	ldr	r2, [r3, #20]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005d50:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f006 fd68 	bl	800c82c <USB_ReadInterrupts>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d66:	d121      	bne.n	8005dac <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	695a      	ldr	r2, [r3, #20]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005d76:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d111      	bne.n	8005da6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d90:	089b      	lsrs	r3, r3, #2
 8005d92:	f003 020f 	and.w	r2, r3, #15
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fea2 	bl	8006ae8 <HAL_PCDEx_LPM_Callback>
 8005da4:	e002      	b.n	8005dac <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f009 f926 	bl	800eff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f006 fd3b 	bl	800c82c <USB_ReadInterrupts>
 8005db6:	4603      	mov	r3, r0
 8005db8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dc0:	f040 80b7 	bne.w	8005f32 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dd2:	f023 0301 	bic.w	r3, r3, #1
 8005dd6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2110      	movs	r1, #16
 8005dde:	4618      	mov	r0, r3
 8005de0:	f005 fe02 	bl	800b9e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005de4:	2300      	movs	r3, #0
 8005de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005de8:	e046      	b.n	8005e78 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df6:	461a      	mov	r2, r3
 8005df8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005dfc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e42:	0151      	lsls	r1, r2, #5
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	440a      	add	r2, r1
 8005e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e62:	0151      	lsls	r1, r2, #5
 8005e64:	69fa      	ldr	r2, [r7, #28]
 8005e66:	440a      	add	r2, r1
 8005e68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e74:	3301      	adds	r3, #1
 8005e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	791b      	ldrb	r3, [r3, #4]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d3b2      	bcc.n	8005dea <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e92:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005e96:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	7bdb      	ldrb	r3, [r3, #15]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d016      	beq.n	8005ece <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eb0:	f043 030b 	orr.w	r3, r3, #11
 8005eb4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ec6:	f043 030b 	orr.w	r3, r3, #11
 8005eca:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ecc:	e015      	b.n	8005efa <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed4:	695a      	ldr	r2, [r3, #20]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005edc:	4619      	mov	r1, r3
 8005ede:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ef4:	f043 030b 	orr.w	r3, r3, #11
 8005ef8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f08:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	f006 fd4b 	bl	800c9b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005f30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f006 fc78 	bl	800c82c <USB_ReadInterrupts>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f46:	d123      	bne.n	8005f90 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f006 fd0f 	bl	800c970 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f005 fdbf 	bl	800bada <USB_GetDevSpeed>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	461a      	mov	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681c      	ldr	r4, [r3, #0]
 8005f68:	f001 fd9e 	bl	8007aa8 <HAL_RCC_GetHCLKFreq>
 8005f6c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f72:	461a      	mov	r2, r3
 8005f74:	4620      	mov	r0, r4
 8005f76:	f005 fac9 	bl	800b50c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f009 f813 	bl	800efa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005f8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f006 fc49 	bl	800c82c <USB_ReadInterrupts>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b08      	cmp	r3, #8
 8005fa2:	d10a      	bne.n	8005fba <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f008 fff0 	bl	800ef8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695a      	ldr	r2, [r3, #20]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f002 0208 	and.w	r2, r2, #8
 8005fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f006 fc34 	bl	800c82c <USB_ReadInterrupts>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fca:	2b80      	cmp	r3, #128	@ 0x80
 8005fcc:	d123      	bne.n	8006016 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fda:	2301      	movs	r3, #1
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fde:	e014      	b.n	800600a <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d105      	bne.n	8006004 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fb0a 	bl	8006618 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006006:	3301      	adds	r3, #1
 8006008:	627b      	str	r3, [r7, #36]	@ 0x24
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	791b      	ldrb	r3, [r3, #4]
 800600e:	461a      	mov	r2, r3
 8006010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006012:	4293      	cmp	r3, r2
 8006014:	d3e4      	bcc.n	8005fe0 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f006 fc06 	bl	800c82c <USB_ReadInterrupts>
 8006020:	4603      	mov	r3, r0
 8006022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800602a:	d13c      	bne.n	80060a6 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800602c:	2301      	movs	r3, #1
 800602e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006030:	e02b      	b.n	800608a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006046:	4613      	mov	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	3318      	adds	r3, #24
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d115      	bne.n	8006084 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006058:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800605a:	2b00      	cmp	r3, #0
 800605c:	da12      	bge.n	8006084 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	3317      	adds	r3, #23
 800606e:	2201      	movs	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800607a:	b2db      	uxtb	r3, r3
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 faca 	bl	8006618 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	3301      	adds	r3, #1
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	791b      	ldrb	r3, [r3, #4]
 800608e:	461a      	mov	r2, r3
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	4293      	cmp	r3, r2
 8006094:	d3cd      	bcc.n	8006032 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	695a      	ldr	r2, [r3, #20]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80060a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f006 fbbe 	bl	800c82c <USB_ReadInterrupts>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060ba:	d156      	bne.n	800616a <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060bc:	2301      	movs	r3, #1
 80060be:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c0:	e045      	b.n	800614e <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80060c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	440b      	add	r3, r1
 80060e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d12e      	bne.n	8006148 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	da2b      	bge.n	8006148 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	0c1a      	lsrs	r2, r3, #16
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80060fa:	4053      	eors	r3, r2
 80060fc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006100:	2b00      	cmp	r3, #0
 8006102:	d121      	bne.n	8006148 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006108:	4613      	mov	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006144:	6053      	str	r3, [r2, #4]
            break;
 8006146:	e008      	b.n	800615a <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	3301      	adds	r3, #1
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	791b      	ldrb	r3, [r3, #4]
 8006152:	461a      	mov	r2, r3
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	4293      	cmp	r3, r2
 8006158:	d3b3      	bcc.n	80060c2 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f006 fb5c 	bl	800c82c <USB_ReadInterrupts>
 8006174:	4603      	mov	r3, r0
 8006176:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617e:	d10a      	bne.n	8006196 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f008 ff91 	bl	800f0a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695a      	ldr	r2, [r3, #20]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f006 fb46 	bl	800c82c <USB_ReadInterrupts>
 80061a0:	4603      	mov	r3, r0
 80061a2:	f003 0304 	and.w	r3, r3, #4
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d115      	bne.n	80061d6 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f008 ff81 	bl	800f0c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6859      	ldr	r1, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	e000      	b.n	80061d6 <HAL_PCD_IRQHandler+0x996>
      return;
 80061d4:	bf00      	nop
    }
  }
}
 80061d6:	3734      	adds	r7, #52	@ 0x34
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd90      	pop	{r4, r7, pc}

080061dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_PCD_SetAddress+0x1a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e012      	b.n	800621c <HAL_PCD_SetAddress+0x40>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	4611      	mov	r1, r2
 800620c:	4618      	mov	r0, r3
 800620e:	f006 faa5 	bl	800c75c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3708      	adds	r7, #8
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	4603      	mov	r3, r0
 8006234:	70fb      	strb	r3, [r7, #3]
 8006236:	460b      	mov	r3, r1
 8006238:	803b      	strh	r3, [r7, #0]
 800623a:	4613      	mov	r3, r2
 800623c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006242:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006246:	2b00      	cmp	r3, #0
 8006248:	da0f      	bge.n	800626a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	4613      	mov	r3, r2
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	3310      	adds	r3, #16
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	4413      	add	r3, r2
 800625e:	3304      	adds	r3, #4
 8006260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	705a      	strb	r2, [r3, #1]
 8006268:	e00f      	b.n	800628a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800626a:	78fb      	ldrb	r3, [r7, #3]
 800626c:	f003 020f 	and.w	r2, r3, #15
 8006270:	4613      	mov	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4413      	add	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	4413      	add	r3, r2
 8006280:	3304      	adds	r3, #4
 8006282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	f003 030f 	and.w	r3, r3, #15
 8006290:	b2da      	uxtb	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006296:	883b      	ldrh	r3, [r7, #0]
 8006298:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	78ba      	ldrb	r2, [r7, #2]
 80062a4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d004      	beq.n	80062b8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062b8:	78bb      	ldrb	r3, [r7, #2]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d102      	bne.n	80062c4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_PCD_EP_Open+0xae>
 80062ce:	2302      	movs	r3, #2
 80062d0:	e00e      	b.n	80062f0 <HAL_PCD_EP_Open+0xcc>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f005 fc1f 	bl	800bb24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80062ee:	7afb      	ldrb	r3, [r7, #11]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006308:	2b00      	cmp	r3, #0
 800630a:	da0f      	bge.n	800632c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	f003 020f 	and.w	r2, r3, #15
 8006312:	4613      	mov	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	3310      	adds	r3, #16
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	4413      	add	r3, r2
 8006320:	3304      	adds	r3, #4
 8006322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	705a      	strb	r2, [r3, #1]
 800632a:	e00f      	b.n	800634c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	f003 020f 	and.w	r2, r3, #15
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4413      	add	r3, r2
 8006342:	3304      	adds	r3, #4
 8006344:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_PCD_EP_Close+0x6e>
 8006362:	2302      	movs	r3, #2
 8006364:	e00e      	b.n	8006384 <HAL_PCD_EP_Close+0x8c>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68f9      	ldr	r1, [r7, #12]
 8006374:	4618      	mov	r0, r3
 8006376:	f005 fc5d 	bl	800bc34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	460b      	mov	r3, r1
 800639a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800639c:	7afb      	ldrb	r3, [r7, #11]
 800639e:	f003 020f 	and.w	r2, r3, #15
 80063a2:	4613      	mov	r3, r2
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	3304      	adds	r3, #4
 80063b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2200      	movs	r2, #0
 80063c6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2200      	movs	r2, #0
 80063cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ce:	7afb      	ldrb	r3, [r7, #11]
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	799b      	ldrb	r3, [r3, #6]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d102      	bne.n	80063e8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	799b      	ldrb	r3, [r3, #6]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6979      	ldr	r1, [r7, #20]
 80063f4:	f005 fcfa 	bl	800bdec <USB_EPStartXfer>

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	f003 020f 	and.w	r2, r3, #15
 8006414:	6879      	ldr	r1, [r7, #4]
 8006416:	4613      	mov	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006424:	681b      	ldr	r3, [r3, #0]
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b086      	sub	sp, #24
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	607a      	str	r2, [r7, #4]
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	460b      	mov	r3, r1
 8006440:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006442:	7afb      	ldrb	r3, [r7, #11]
 8006444:	f003 020f 	and.w	r2, r3, #15
 8006448:	4613      	mov	r3, r2
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	4413      	add	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	3310      	adds	r3, #16
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	3304      	adds	r3, #4
 8006458:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2200      	movs	r2, #0
 800646a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	2201      	movs	r2, #1
 8006470:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	b2da      	uxtb	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	799b      	ldrb	r3, [r3, #6]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d102      	bne.n	800648c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	799b      	ldrb	r3, [r3, #6]
 8006494:	461a      	mov	r2, r3
 8006496:	6979      	ldr	r1, [r7, #20]
 8006498:	f005 fca8 	bl	800bdec <USB_EPStartXfer>

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	f003 030f 	and.w	r3, r3, #15
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	7912      	ldrb	r2, [r2, #4]
 80064bc:	4293      	cmp	r3, r2
 80064be:	d901      	bls.n	80064c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e04f      	b.n	8006564 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	da0f      	bge.n	80064ec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	f003 020f 	and.w	r2, r3, #15
 80064d2:	4613      	mov	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	3310      	adds	r3, #16
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	3304      	adds	r3, #4
 80064e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2201      	movs	r2, #1
 80064e8:	705a      	strb	r2, [r3, #1]
 80064ea:	e00d      	b.n	8006508 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	4613      	mov	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	4413      	add	r3, r2
 80064fe:	3304      	adds	r3, #4
 8006500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	b2da      	uxtb	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_PCD_EP_SetStall+0x82>
 8006524:	2302      	movs	r3, #2
 8006526:	e01d      	b.n	8006564 <HAL_PCD_EP_SetStall+0xbe>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	4618      	mov	r0, r3
 8006538:	f006 f83c 	bl	800c5b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	7999      	ldrb	r1, [r3, #6]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006554:	461a      	mov	r2, r3
 8006556:	f006 fa2f 	bl	800c9b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	f003 030f 	and.w	r3, r3, #15
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	7912      	ldrb	r2, [r2, #4]
 8006582:	4293      	cmp	r3, r2
 8006584:	d901      	bls.n	800658a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e042      	b.n	8006610 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800658a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800658e:	2b00      	cmp	r3, #0
 8006590:	da0f      	bge.n	80065b2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006592:	78fb      	ldrb	r3, [r7, #3]
 8006594:	f003 020f 	and.w	r2, r3, #15
 8006598:	4613      	mov	r3, r2
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	3310      	adds	r3, #16
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	3304      	adds	r3, #4
 80065a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	705a      	strb	r2, [r3, #1]
 80065b0:	e00f      	b.n	80065d2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	f003 020f 	and.w	r2, r3, #15
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4413      	add	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4413      	add	r3, r2
 80065c8:	3304      	adds	r3, #4
 80065ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_PCD_EP_ClrStall+0x86>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e00e      	b.n	8006610 <HAL_PCD_EP_ClrStall+0xa4>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	4618      	mov	r0, r3
 8006602:	f006 f845 	bl	800c690 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006624:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006628:	2b00      	cmp	r3, #0
 800662a:	da0c      	bge.n	8006646 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800662c:	78fb      	ldrb	r3, [r7, #3]
 800662e:	f003 020f 	and.w	r2, r3, #15
 8006632:	4613      	mov	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	3310      	adds	r3, #16
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	3304      	adds	r3, #4
 8006642:	60fb      	str	r3, [r7, #12]
 8006644:	e00c      	b.n	8006660 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	f003 020f 	and.w	r2, r3, #15
 800664c:	4613      	mov	r3, r2
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	3304      	adds	r3, #4
 800665e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68f9      	ldr	r1, [r7, #12]
 8006666:	4618      	mov	r0, r3
 8006668:	f005 fe64 	bl	800c334 <USB_EPStopXfer>
 800666c:	4603      	mov	r3, r0
 800666e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006670:	7afb      	ldrb	r3, [r7, #11]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b08a      	sub	sp, #40	@ 0x28
 800667e:	af02      	add	r7, sp, #8
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	4613      	mov	r3, r2
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	4413      	add	r3, r2
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	3310      	adds	r3, #16
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	3304      	adds	r3, #4
 80066a0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	695a      	ldr	r2, [r3, #20]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d901      	bls.n	80066b2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e06b      	b.n	800678a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	691a      	ldr	r2, [r3, #16]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	695b      	ldr	r3, [r3, #20]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	69fa      	ldr	r2, [r7, #28]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d902      	bls.n	80066ce <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	3303      	adds	r3, #3
 80066d2:	089b      	lsrs	r3, r3, #2
 80066d4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066d6:	e02a      	b.n	800672e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d902      	bls.n	80066f4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	3303      	adds	r3, #3
 80066f8:	089b      	lsrs	r3, r3, #2
 80066fa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	68d9      	ldr	r1, [r3, #12]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4603      	mov	r3, r0
 8006710:	6978      	ldr	r0, [r7, #20]
 8006712:	f005 feb9 	bl	800c488 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	441a      	add	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	441a      	add	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	429a      	cmp	r2, r3
 8006742:	d809      	bhi.n	8006758 <PCD_WriteEmptyTxFifo+0xde>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	695a      	ldr	r2, [r3, #20]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800674c:	429a      	cmp	r2, r3
 800674e:	d203      	bcs.n	8006758 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1bf      	bne.n	80066d8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	429a      	cmp	r2, r3
 8006762:	d811      	bhi.n	8006788 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	f003 030f 	and.w	r3, r3, #15
 800676a:	2201      	movs	r2, #1
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	43db      	mvns	r3, r3
 800677e:	6939      	ldr	r1, [r7, #16]
 8006780:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006784:	4013      	ands	r3, r2
 8006786:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3720      	adds	r7, #32
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	333c      	adds	r3, #60	@ 0x3c
 80067ac:	3304      	adds	r3, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	799b      	ldrb	r3, [r3, #6]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d17b      	bne.n	80068c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d015      	beq.n	8006800 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	4a61      	ldr	r2, [pc, #388]	@ (800695c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	f240 80b9 	bls.w	8006950 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 80b3 	beq.w	8006950 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f6:	461a      	mov	r2, r3
 80067f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067fc:	6093      	str	r3, [r2, #8]
 80067fe:	e0a7      	b.n	8006950 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	461a      	mov	r2, r3
 8006818:	2320      	movs	r3, #32
 800681a:	6093      	str	r3, [r2, #8]
 800681c:	e098      	b.n	8006950 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006824:	2b00      	cmp	r3, #0
 8006826:	f040 8093 	bne.w	8006950 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	4a4b      	ldr	r2, [pc, #300]	@ (800695c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d90f      	bls.n	8006852 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006848:	461a      	mov	r2, r3
 800684a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800684e:	6093      	str	r3, [r2, #8]
 8006850:	e07e      	b.n	8006950 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4413      	add	r3, r2
 8006864:	3304      	adds	r3, #4
 8006866:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	0159      	lsls	r1, r3, #5
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	440b      	add	r3, r1
 8006874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d114      	bne.n	80068b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6818      	ldr	r0, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800689c:	461a      	mov	r2, r3
 800689e:	2101      	movs	r1, #1
 80068a0:	f006 f88a 	bl	800c9b8 <USB_EP0_OutStart>
 80068a4:	e006      	b.n	80068b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	441a      	add	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f008 fb30 	bl	800ef20 <HAL_PCD_DataOutStageCallback>
 80068c0:	e046      	b.n	8006950 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	4a26      	ldr	r2, [pc, #152]	@ (8006960 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d124      	bne.n	8006914 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e0:	461a      	mov	r2, r3
 80068e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e6:	6093      	str	r3, [r2, #8]
 80068e8:	e032      	b.n	8006950 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d008      	beq.n	8006906 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006900:	461a      	mov	r2, r3
 8006902:	2320      	movs	r3, #32
 8006904:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f008 fb07 	bl	800ef20 <HAL_PCD_DataOutStageCallback>
 8006912:	e01d      	b.n	8006950 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d114      	bne.n	8006944 <PCD_EP_OutXfrComplete_int+0x1b0>
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	4613      	mov	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	440b      	add	r3, r1
 8006928:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d108      	bne.n	8006944 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6818      	ldr	r0, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800693c:	461a      	mov	r2, r3
 800693e:	2100      	movs	r1, #0
 8006940:	f006 f83a 	bl	800c9b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	4619      	mov	r1, r3
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f008 fae8 	bl	800ef20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	4f54300a 	.word	0x4f54300a
 8006960:	4f54310a 	.word	0x4f54310a

08006964 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	333c      	adds	r3, #60	@ 0x3c
 800697c:	3304      	adds	r3, #4
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a15      	ldr	r2, [pc, #84]	@ (80069ec <PCD_EP_OutSetupPacket_int+0x88>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d90e      	bls.n	80069b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d009      	beq.n	80069b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b0:	461a      	mov	r2, r3
 80069b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f008 fa9f 	bl	800eefc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4a0a      	ldr	r2, [pc, #40]	@ (80069ec <PCD_EP_OutSetupPacket_int+0x88>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d90c      	bls.n	80069e0 <PCD_EP_OutSetupPacket_int+0x7c>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	799b      	ldrb	r3, [r3, #6]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d108      	bne.n	80069e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069d8:	461a      	mov	r2, r3
 80069da:	2101      	movs	r1, #1
 80069dc:	f005 ffec 	bl	800c9b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	4f54300a 	.word	0x4f54300a

080069f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	70fb      	strb	r3, [r7, #3]
 80069fc:	4613      	mov	r3, r2
 80069fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d107      	bne.n	8006a1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a0e:	883b      	ldrh	r3, [r7, #0]
 8006a10:	0419      	lsls	r1, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a1c:	e028      	b.n	8006a70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	4413      	add	r3, r2
 8006a2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
 8006a30:	e00d      	b.n	8006a4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
 8006a38:	3340      	adds	r3, #64	@ 0x40
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a48:	7bfb      	ldrb	r3, [r7, #15]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
 8006a4e:	7bfa      	ldrb	r2, [r7, #15]
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3ec      	bcc.n	8006a32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a58:	883b      	ldrh	r3, [r7, #0]
 8006a5a:	0418      	lsls	r0, r3, #16
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	4302      	orrs	r2, r0
 8006a68:	3340      	adds	r3, #64	@ 0x40
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	440b      	add	r3, r1
 8006a6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	887a      	ldrh	r2, [r7, #2]
 8006a90:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ace:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <HAL_PCDEx_ActivateLPM+0x44>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	10000003 	.word	0x10000003

08006ae8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b08:	4b19      	ldr	r3, [pc, #100]	@ (8006b70 <HAL_PWREx_ConfigSupply+0x70>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d00a      	beq.n	8006b2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b14:	4b16      	ldr	r3, [pc, #88]	@ (8006b70 <HAL_PWREx_ConfigSupply+0x70>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d001      	beq.n	8006b26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e01f      	b.n	8006b66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e01d      	b.n	8006b66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b2a:	4b11      	ldr	r3, [pc, #68]	@ (8006b70 <HAL_PWREx_ConfigSupply+0x70>)
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f023 0207 	bic.w	r2, r3, #7
 8006b32:	490f      	ldr	r1, [pc, #60]	@ (8006b70 <HAL_PWREx_ConfigSupply+0x70>)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b3a:	f7fb fbe3 	bl	8002304 <HAL_GetTick>
 8006b3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b40:	e009      	b.n	8006b56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b42:	f7fb fbdf 	bl	8002304 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b50:	d901      	bls.n	8006b56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e007      	b.n	8006b66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b56:	4b06      	ldr	r3, [pc, #24]	@ (8006b70 <HAL_PWREx_ConfigSupply+0x70>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b62:	d1ee      	bne.n	8006b42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	58024800 	.word	0x58024800

08006b74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006b78:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	4a04      	ldr	r2, [pc, #16]	@ (8006b90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b82:	60d3      	str	r3, [r2, #12]
}
 8006b84:	bf00      	nop
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	58024800 	.word	0x58024800

08006b94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	@ 0x30
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d102      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f000 bc48 	b.w	8007438 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f000 8088 	beq.w	8006cc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bb6:	4b99      	ldr	r3, [pc, #612]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bc0:	4b96      	ldr	r3, [pc, #600]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d007      	beq.n	8006bdc <HAL_RCC_OscConfig+0x48>
 8006bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bce:	2b18      	cmp	r3, #24
 8006bd0:	d111      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x62>
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d10c      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bdc:	4b8f      	ldr	r3, [pc, #572]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d06d      	beq.n	8006cc4 <HAL_RCC_OscConfig+0x130>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d169      	bne.n	8006cc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f000 bc21 	b.w	8007438 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bfe:	d106      	bne.n	8006c0e <HAL_RCC_OscConfig+0x7a>
 8006c00:	4b86      	ldr	r3, [pc, #536]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a85      	ldr	r2, [pc, #532]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	e02e      	b.n	8006c6c <HAL_RCC_OscConfig+0xd8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10c      	bne.n	8006c30 <HAL_RCC_OscConfig+0x9c>
 8006c16:	4b81      	ldr	r3, [pc, #516]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a80      	ldr	r2, [pc, #512]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	4b7e      	ldr	r3, [pc, #504]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a7d      	ldr	r2, [pc, #500]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c28:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	e01d      	b.n	8006c6c <HAL_RCC_OscConfig+0xd8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c38:	d10c      	bne.n	8006c54 <HAL_RCC_OscConfig+0xc0>
 8006c3a:	4b78      	ldr	r3, [pc, #480]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a77      	ldr	r2, [pc, #476]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	4b75      	ldr	r3, [pc, #468]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a74      	ldr	r2, [pc, #464]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e00b      	b.n	8006c6c <HAL_RCC_OscConfig+0xd8>
 8006c54:	4b71      	ldr	r3, [pc, #452]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a70      	ldr	r2, [pc, #448]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	4b6e      	ldr	r3, [pc, #440]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a6d      	ldr	r2, [pc, #436]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d013      	beq.n	8006c9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c74:	f7fb fb46 	bl	8002304 <HAL_GetTick>
 8006c78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c7c:	f7fb fb42 	bl	8002304 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b64      	cmp	r3, #100	@ 0x64
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e3d4      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006c8e:	4b63      	ldr	r3, [pc, #396]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f0      	beq.n	8006c7c <HAL_RCC_OscConfig+0xe8>
 8006c9a:	e014      	b.n	8006cc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c9c:	f7fb fb32 	bl	8002304 <HAL_GetTick>
 8006ca0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ca2:	e008      	b.n	8006cb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ca4:	f7fb fb2e 	bl	8002304 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	2b64      	cmp	r3, #100	@ 0x64
 8006cb0:	d901      	bls.n	8006cb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	e3c0      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006cb6:	4b59      	ldr	r3, [pc, #356]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1f0      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x110>
 8006cc2:	e000      	b.n	8006cc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 80ca 	beq.w	8006e68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cd4:	4b51      	ldr	r3, [pc, #324]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cdc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006cde:	4b4f      	ldr	r3, [pc, #316]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <HAL_RCC_OscConfig+0x166>
 8006cea:	6a3b      	ldr	r3, [r7, #32]
 8006cec:	2b18      	cmp	r3, #24
 8006cee:	d156      	bne.n	8006d9e <HAL_RCC_OscConfig+0x20a>
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d151      	bne.n	8006d9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cfa:	4b48      	ldr	r3, [pc, #288]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0304 	and.w	r3, r3, #4
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_RCC_OscConfig+0x17e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e392      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006d12:	4b42      	ldr	r3, [pc, #264]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f023 0219 	bic.w	r2, r3, #25
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	493f      	ldr	r1, [pc, #252]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d24:	f7fb faee 	bl	8002304 <HAL_GetTick>
 8006d28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d2c:	f7fb faea 	bl	8002304 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e37c      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d3e:	4b37      	ldr	r3, [pc, #220]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0304 	and.w	r3, r3, #4
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d0f0      	beq.n	8006d2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d4a:	f7fb fb0b 	bl	8002364 <HAL_GetREVID>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d817      	bhi.n	8006d88 <HAL_RCC_OscConfig+0x1f4>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b40      	cmp	r3, #64	@ 0x40
 8006d5e:	d108      	bne.n	8006d72 <HAL_RCC_OscConfig+0x1de>
 8006d60:	4b2e      	ldr	r3, [pc, #184]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006d68:	4a2c      	ldr	r2, [pc, #176]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d70:	e07a      	b.n	8006e68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d72:	4b2a      	ldr	r3, [pc, #168]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	031b      	lsls	r3, r3, #12
 8006d80:	4926      	ldr	r1, [pc, #152]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d86:	e06f      	b.n	8006e68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d88:	4b24      	ldr	r3, [pc, #144]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	061b      	lsls	r3, r3, #24
 8006d96:	4921      	ldr	r1, [pc, #132]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d9c:	e064      	b.n	8006e68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d047      	beq.n	8006e36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006da6:	4b1d      	ldr	r3, [pc, #116]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f023 0219 	bic.w	r2, r3, #25
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	491a      	ldr	r1, [pc, #104]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db8:	f7fb faa4 	bl	8002304 <HAL_GetTick>
 8006dbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006dc0:	f7fb faa0 	bl	8002304 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e332      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dd2:	4b12      	ldr	r3, [pc, #72]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0304 	and.w	r3, r3, #4
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0f0      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dde:	f7fb fac1 	bl	8002364 <HAL_GetREVID>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d819      	bhi.n	8006e20 <HAL_RCC_OscConfig+0x28c>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	2b40      	cmp	r3, #64	@ 0x40
 8006df2:	d108      	bne.n	8006e06 <HAL_RCC_OscConfig+0x272>
 8006df4:	4b09      	ldr	r3, [pc, #36]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006dfc:	4a07      	ldr	r2, [pc, #28]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006dfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e02:	6053      	str	r3, [r2, #4]
 8006e04:	e030      	b.n	8006e68 <HAL_RCC_OscConfig+0x2d4>
 8006e06:	4b05      	ldr	r3, [pc, #20]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	031b      	lsls	r3, r3, #12
 8006e14:	4901      	ldr	r1, [pc, #4]	@ (8006e1c <HAL_RCC_OscConfig+0x288>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	604b      	str	r3, [r1, #4]
 8006e1a:	e025      	b.n	8006e68 <HAL_RCC_OscConfig+0x2d4>
 8006e1c:	58024400 	.word	0x58024400
 8006e20:	4b9a      	ldr	r3, [pc, #616]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	061b      	lsls	r3, r3, #24
 8006e2e:	4997      	ldr	r1, [pc, #604]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	604b      	str	r3, [r1, #4]
 8006e34:	e018      	b.n	8006e68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e36:	4b95      	ldr	r3, [pc, #596]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a94      	ldr	r2, [pc, #592]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e42:	f7fb fa5f 	bl	8002304 <HAL_GetTick>
 8006e46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e48:	e008      	b.n	8006e5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e4a:	f7fb fa5b 	bl	8002304 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d901      	bls.n	8006e5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e2ed      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006e5c:	4b8b      	ldr	r3, [pc, #556]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d1f0      	bne.n	8006e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 80a9 	beq.w	8006fc8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e76:	4b85      	ldr	r3, [pc, #532]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e80:	4b82      	ldr	r3, [pc, #520]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d007      	beq.n	8006e9c <HAL_RCC_OscConfig+0x308>
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b18      	cmp	r3, #24
 8006e90:	d13a      	bne.n	8006f08 <HAL_RCC_OscConfig+0x374>
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f003 0303 	and.w	r3, r3, #3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d135      	bne.n	8006f08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e9c:	4b7b      	ldr	r3, [pc, #492]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x320>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	69db      	ldr	r3, [r3, #28]
 8006eac:	2b80      	cmp	r3, #128	@ 0x80
 8006eae:	d001      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e2c1      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006eb4:	f7fb fa56 	bl	8002364 <HAL_GetREVID>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d817      	bhi.n	8006ef2 <HAL_RCC_OscConfig+0x35e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d108      	bne.n	8006edc <HAL_RCC_OscConfig+0x348>
 8006eca:	4b70      	ldr	r3, [pc, #448]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006ed2:	4a6e      	ldr	r2, [pc, #440]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006ed4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ed8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006eda:	e075      	b.n	8006fc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006edc:	4b6b      	ldr	r3, [pc, #428]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	069b      	lsls	r3, r3, #26
 8006eea:	4968      	ldr	r1, [pc, #416]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ef0:	e06a      	b.n	8006fc8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006ef2:	4b66      	ldr	r3, [pc, #408]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	061b      	lsls	r3, r3, #24
 8006f00:	4962      	ldr	r1, [pc, #392]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006f06:	e05f      	b.n	8006fc8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d042      	beq.n	8006f96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006f10:	4b5e      	ldr	r3, [pc, #376]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a5d      	ldr	r2, [pc, #372]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1c:	f7fb f9f2 	bl	8002304 <HAL_GetTick>
 8006f20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006f24:	f7fb f9ee 	bl	8002304 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e280      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f36:	4b55      	ldr	r3, [pc, #340]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006f42:	f7fb fa0f 	bl	8002364 <HAL_GetREVID>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d817      	bhi.n	8006f80 <HAL_RCC_OscConfig+0x3ec>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	2b20      	cmp	r3, #32
 8006f56:	d108      	bne.n	8006f6a <HAL_RCC_OscConfig+0x3d6>
 8006f58:	4b4c      	ldr	r3, [pc, #304]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006f60:	4a4a      	ldr	r2, [pc, #296]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f66:	6053      	str	r3, [r2, #4]
 8006f68:	e02e      	b.n	8006fc8 <HAL_RCC_OscConfig+0x434>
 8006f6a:	4b48      	ldr	r3, [pc, #288]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	069b      	lsls	r3, r3, #26
 8006f78:	4944      	ldr	r1, [pc, #272]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	604b      	str	r3, [r1, #4]
 8006f7e:	e023      	b.n	8006fc8 <HAL_RCC_OscConfig+0x434>
 8006f80:	4b42      	ldr	r3, [pc, #264]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	061b      	lsls	r3, r3, #24
 8006f8e:	493f      	ldr	r1, [pc, #252]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60cb      	str	r3, [r1, #12]
 8006f94:	e018      	b.n	8006fc8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006f96:	4b3d      	ldr	r3, [pc, #244]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a3c      	ldr	r2, [pc, #240]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa2:	f7fb f9af 	bl	8002304 <HAL_GetTick>
 8006fa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006faa:	f7fb f9ab 	bl	8002304 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e23d      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006fbc:	4b33      	ldr	r3, [pc, #204]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1f0      	bne.n	8006faa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0308 	and.w	r3, r3, #8
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d036      	beq.n	8007042 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	695b      	ldr	r3, [r3, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d019      	beq.n	8007010 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fe0:	4a2a      	ldr	r2, [pc, #168]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8006fe2:	f043 0301 	orr.w	r3, r3, #1
 8006fe6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe8:	f7fb f98c 	bl	8002304 <HAL_GetTick>
 8006fec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ff0:	f7fb f988 	bl	8002304 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e21a      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007002:	4b22      	ldr	r3, [pc, #136]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8007004:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f0      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x45c>
 800700e:	e018      	b.n	8007042 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007010:	4b1e      	ldr	r3, [pc, #120]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8007012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007014:	4a1d      	ldr	r2, [pc, #116]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8007016:	f023 0301 	bic.w	r3, r3, #1
 800701a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800701c:	f7fb f972 	bl	8002304 <HAL_GetTick>
 8007020:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007024:	f7fb f96e 	bl	8002304 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e200      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007036:	4b15      	ldr	r3, [pc, #84]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8007038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0320 	and.w	r3, r3, #32
 800704a:	2b00      	cmp	r3, #0
 800704c:	d039      	beq.n	80070c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d01c      	beq.n	8007090 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007056:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a0c      	ldr	r2, [pc, #48]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 800705c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007060:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007062:	f7fb f94f 	bl	8002304 <HAL_GetTick>
 8007066:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800706a:	f7fb f94b 	bl	8002304 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e1dd      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800707c:	4b03      	ldr	r3, [pc, #12]	@ (800708c <HAL_RCC_OscConfig+0x4f8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f0      	beq.n	800706a <HAL_RCC_OscConfig+0x4d6>
 8007088:	e01b      	b.n	80070c2 <HAL_RCC_OscConfig+0x52e>
 800708a:	bf00      	nop
 800708c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007090:	4b9b      	ldr	r3, [pc, #620]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a9a      	ldr	r2, [pc, #616]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007096:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800709a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800709c:	f7fb f932 	bl	8002304 <HAL_GetTick>
 80070a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070a2:	e008      	b.n	80070b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070a4:	f7fb f92e 	bl	8002304 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e1c0      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80070b6:	4b92      	ldr	r3, [pc, #584]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1f0      	bne.n	80070a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 8081 	beq.w	80071d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007304 <HAL_RCC_OscConfig+0x770>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a8b      	ldr	r2, [pc, #556]	@ (8007304 <HAL_RCC_OscConfig+0x770>)
 80070d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070dc:	f7fb f912 	bl	8002304 <HAL_GetTick>
 80070e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070e4:	f7fb f90e 	bl	8002304 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b64      	cmp	r3, #100	@ 0x64
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e1a0      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070f6:	4b83      	ldr	r3, [pc, #524]	@ (8007304 <HAL_RCC_OscConfig+0x770>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d106      	bne.n	8007118 <HAL_RCC_OscConfig+0x584>
 800710a:	4b7d      	ldr	r3, [pc, #500]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800710e:	4a7c      	ldr	r2, [pc, #496]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007110:	f043 0301 	orr.w	r3, r3, #1
 8007114:	6713      	str	r3, [r2, #112]	@ 0x70
 8007116:	e02d      	b.n	8007174 <HAL_RCC_OscConfig+0x5e0>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10c      	bne.n	800713a <HAL_RCC_OscConfig+0x5a6>
 8007120:	4b77      	ldr	r3, [pc, #476]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007122:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007124:	4a76      	ldr	r2, [pc, #472]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007126:	f023 0301 	bic.w	r3, r3, #1
 800712a:	6713      	str	r3, [r2, #112]	@ 0x70
 800712c:	4b74      	ldr	r3, [pc, #464]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 800712e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007130:	4a73      	ldr	r2, [pc, #460]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007132:	f023 0304 	bic.w	r3, r3, #4
 8007136:	6713      	str	r3, [r2, #112]	@ 0x70
 8007138:	e01c      	b.n	8007174 <HAL_RCC_OscConfig+0x5e0>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	2b05      	cmp	r3, #5
 8007140:	d10c      	bne.n	800715c <HAL_RCC_OscConfig+0x5c8>
 8007142:	4b6f      	ldr	r3, [pc, #444]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007146:	4a6e      	ldr	r2, [pc, #440]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007148:	f043 0304 	orr.w	r3, r3, #4
 800714c:	6713      	str	r3, [r2, #112]	@ 0x70
 800714e:	4b6c      	ldr	r3, [pc, #432]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007152:	4a6b      	ldr	r2, [pc, #428]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007154:	f043 0301 	orr.w	r3, r3, #1
 8007158:	6713      	str	r3, [r2, #112]	@ 0x70
 800715a:	e00b      	b.n	8007174 <HAL_RCC_OscConfig+0x5e0>
 800715c:	4b68      	ldr	r3, [pc, #416]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 800715e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007160:	4a67      	ldr	r2, [pc, #412]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007162:	f023 0301 	bic.w	r3, r3, #1
 8007166:	6713      	str	r3, [r2, #112]	@ 0x70
 8007168:	4b65      	ldr	r3, [pc, #404]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 800716a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800716c:	4a64      	ldr	r2, [pc, #400]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 800716e:	f023 0304 	bic.w	r3, r3, #4
 8007172:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d015      	beq.n	80071a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800717c:	f7fb f8c2 	bl	8002304 <HAL_GetTick>
 8007180:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007182:	e00a      	b.n	800719a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007184:	f7fb f8be 	bl	8002304 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007192:	4293      	cmp	r3, r2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e14e      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800719a:	4b59      	ldr	r3, [pc, #356]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 800719c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800719e:	f003 0302 	and.w	r3, r3, #2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0ee      	beq.n	8007184 <HAL_RCC_OscConfig+0x5f0>
 80071a6:	e014      	b.n	80071d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a8:	f7fb f8ac 	bl	8002304 <HAL_GetTick>
 80071ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071ae:	e00a      	b.n	80071c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071b0:	f7fb f8a8 	bl	8002304 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071be:	4293      	cmp	r3, r2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e138      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80071c6:	4b4e      	ldr	r3, [pc, #312]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80071c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1ee      	bne.n	80071b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 812d 	beq.w	8007436 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80071dc:	4b48      	ldr	r3, [pc, #288]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80071e4:	2b18      	cmp	r3, #24
 80071e6:	f000 80bd 	beq.w	8007364 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	f040 809e 	bne.w	8007330 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f4:	4b42      	ldr	r3, [pc, #264]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a41      	ldr	r2, [pc, #260]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80071fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007200:	f7fb f880 	bl	8002304 <HAL_GetTick>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007208:	f7fb f87c 	bl	8002304 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e10e      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800721a:	4b39      	ldr	r3, [pc, #228]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1f0      	bne.n	8007208 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007226:	4b36      	ldr	r3, [pc, #216]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007228:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800722a:	4b37      	ldr	r3, [pc, #220]	@ (8007308 <HAL_RCC_OscConfig+0x774>)
 800722c:	4013      	ands	r3, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007236:	0112      	lsls	r2, r2, #4
 8007238:	430a      	orrs	r2, r1
 800723a:	4931      	ldr	r1, [pc, #196]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 800723c:	4313      	orrs	r3, r2
 800723e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007244:	3b01      	subs	r3, #1
 8007246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800724e:	3b01      	subs	r3, #1
 8007250:	025b      	lsls	r3, r3, #9
 8007252:	b29b      	uxth	r3, r3
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725a:	3b01      	subs	r3, #1
 800725c:	041b      	lsls	r3, r3, #16
 800725e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007268:	3b01      	subs	r3, #1
 800726a:	061b      	lsls	r3, r3, #24
 800726c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007270:	4923      	ldr	r1, [pc, #140]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007272:	4313      	orrs	r3, r2
 8007274:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007276:	4b22      	ldr	r3, [pc, #136]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	4a21      	ldr	r2, [pc, #132]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007282:	4b1f      	ldr	r3, [pc, #124]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007286:	4b21      	ldr	r3, [pc, #132]	@ (800730c <HAL_RCC_OscConfig+0x778>)
 8007288:	4013      	ands	r3, r2
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800728e:	00d2      	lsls	r2, r2, #3
 8007290:	491b      	ldr	r1, [pc, #108]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007292:	4313      	orrs	r3, r2
 8007294:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007296:	4b1a      	ldr	r3, [pc, #104]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 8007298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729a:	f023 020c 	bic.w	r2, r3, #12
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	4917      	ldr	r1, [pc, #92]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80072a8:	4b15      	ldr	r3, [pc, #84]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ac:	f023 0202 	bic.w	r2, r3, #2
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072b4:	4912      	ldr	r1, [pc, #72]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80072ba:	4b11      	ldr	r3, [pc, #68]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	4a10      	ldr	r2, [pc, #64]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80072d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80072de:	4b08      	ldr	r3, [pc, #32]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e2:	4a07      	ldr	r2, [pc, #28]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072ea:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a04      	ldr	r2, [pc, #16]	@ (8007300 <HAL_RCC_OscConfig+0x76c>)
 80072f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f6:	f7fb f805 	bl	8002304 <HAL_GetTick>
 80072fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80072fc:	e011      	b.n	8007322 <HAL_RCC_OscConfig+0x78e>
 80072fe:	bf00      	nop
 8007300:	58024400 	.word	0x58024400
 8007304:	58024800 	.word	0x58024800
 8007308:	fffffc0c 	.word	0xfffffc0c
 800730c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007310:	f7fa fff8 	bl	8002304 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b02      	cmp	r3, #2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e08a      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007322:	4b47      	ldr	r3, [pc, #284]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0f0      	beq.n	8007310 <HAL_RCC_OscConfig+0x77c>
 800732e:	e082      	b.n	8007436 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007330:	4b43      	ldr	r3, [pc, #268]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a42      	ldr	r2, [pc, #264]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 8007336:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800733a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800733c:	f7fa ffe2 	bl	8002304 <HAL_GetTick>
 8007340:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007344:	f7fa ffde 	bl	8002304 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e070      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007356:	4b3a      	ldr	r3, [pc, #232]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f0      	bne.n	8007344 <HAL_RCC_OscConfig+0x7b0>
 8007362:	e068      	b.n	8007436 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007364:	4b36      	ldr	r3, [pc, #216]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 8007366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007368:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800736a:	4b35      	ldr	r3, [pc, #212]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 800736c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007374:	2b01      	cmp	r3, #1
 8007376:	d031      	beq.n	80073dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f003 0203 	and.w	r2, r3, #3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007382:	429a      	cmp	r2, r3
 8007384:	d12a      	bne.n	80073dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	091b      	lsrs	r3, r3, #4
 800738a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007392:	429a      	cmp	r2, r3
 8007394:	d122      	bne.n	80073dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d11a      	bne.n	80073dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	0a5b      	lsrs	r3, r3, #9
 80073aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d111      	bne.n	80073dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	0c1b      	lsrs	r3, r3, #16
 80073bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d108      	bne.n	80073dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	0e1b      	lsrs	r3, r3, #24
 80073ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80073d8:	429a      	cmp	r2, r3
 80073da:	d001      	beq.n	80073e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e02b      	b.n	8007438 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80073e0:	4b17      	ldr	r3, [pc, #92]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 80073e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e4:	08db      	lsrs	r3, r3, #3
 80073e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d01f      	beq.n	8007436 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80073f6:	4b12      	ldr	r3, [pc, #72]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 80073f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073fa:	4a11      	ldr	r2, [pc, #68]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 80073fc:	f023 0301 	bic.w	r3, r3, #1
 8007400:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007402:	f7fa ff7f 	bl	8002304 <HAL_GetTick>
 8007406:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007408:	bf00      	nop
 800740a:	f7fa ff7b 	bl	8002304 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	4293      	cmp	r3, r2
 8007414:	d0f9      	beq.n	800740a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007416:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 8007418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800741a:	4b0a      	ldr	r3, [pc, #40]	@ (8007444 <HAL_RCC_OscConfig+0x8b0>)
 800741c:	4013      	ands	r3, r2
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007422:	00d2      	lsls	r2, r2, #3
 8007424:	4906      	ldr	r1, [pc, #24]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 8007426:	4313      	orrs	r3, r2
 8007428:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800742a:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	4a04      	ldr	r2, [pc, #16]	@ (8007440 <HAL_RCC_OscConfig+0x8ac>)
 8007430:	f043 0301 	orr.w	r3, r3, #1
 8007434:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3730      	adds	r7, #48	@ 0x30
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	58024400 	.word	0x58024400
 8007444:	ffff0007 	.word	0xffff0007

08007448 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e19c      	b.n	8007796 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800745c:	4b8a      	ldr	r3, [pc, #552]	@ (8007688 <HAL_RCC_ClockConfig+0x240>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 030f 	and.w	r3, r3, #15
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	429a      	cmp	r2, r3
 8007468:	d910      	bls.n	800748c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800746a:	4b87      	ldr	r3, [pc, #540]	@ (8007688 <HAL_RCC_ClockConfig+0x240>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f023 020f 	bic.w	r2, r3, #15
 8007472:	4985      	ldr	r1, [pc, #532]	@ (8007688 <HAL_RCC_ClockConfig+0x240>)
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	4313      	orrs	r3, r2
 8007478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800747a:	4b83      	ldr	r3, [pc, #524]	@ (8007688 <HAL_RCC_ClockConfig+0x240>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d001      	beq.n	800748c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e184      	b.n	8007796 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d010      	beq.n	80074ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	4b7b      	ldr	r3, [pc, #492]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d908      	bls.n	80074ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80074a8:	4b78      	ldr	r3, [pc, #480]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	4975      	ldr	r1, [pc, #468]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0308 	and.w	r3, r3, #8
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d010      	beq.n	80074e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	695a      	ldr	r2, [r3, #20]
 80074ca:	4b70      	ldr	r3, [pc, #448]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d908      	bls.n	80074e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80074d6:	4b6d      	ldr	r3, [pc, #436]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	496a      	ldr	r1, [pc, #424]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0310 	and.w	r3, r3, #16
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d010      	beq.n	8007516 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	699a      	ldr	r2, [r3, #24]
 80074f8:	4b64      	ldr	r3, [pc, #400]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007500:	429a      	cmp	r2, r3
 8007502:	d908      	bls.n	8007516 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007504:	4b61      	ldr	r3, [pc, #388]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	495e      	ldr	r1, [pc, #376]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007512:	4313      	orrs	r3, r2
 8007514:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d010      	beq.n	8007544 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69da      	ldr	r2, [r3, #28]
 8007526:	4b59      	ldr	r3, [pc, #356]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800752e:	429a      	cmp	r2, r3
 8007530:	d908      	bls.n	8007544 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007532:	4b56      	ldr	r3, [pc, #344]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	4953      	ldr	r1, [pc, #332]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007540:	4313      	orrs	r3, r2
 8007542:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d010      	beq.n	8007572 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	4b4d      	ldr	r3, [pc, #308]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	f003 030f 	and.w	r3, r3, #15
 800755c:	429a      	cmp	r2, r3
 800755e:	d908      	bls.n	8007572 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007560:	4b4a      	ldr	r3, [pc, #296]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	f023 020f 	bic.w	r2, r3, #15
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4947      	ldr	r1, [pc, #284]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 800756e:	4313      	orrs	r3, r2
 8007570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d055      	beq.n	800762a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800757e:	4b43      	ldr	r3, [pc, #268]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	4940      	ldr	r1, [pc, #256]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 800758c:	4313      	orrs	r3, r2
 800758e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d107      	bne.n	80075a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007598:	4b3c      	ldr	r3, [pc, #240]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d121      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0f6      	b.n	8007796 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d107      	bne.n	80075c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075b0:	4b36      	ldr	r3, [pc, #216]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d115      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0ea      	b.n	8007796 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d107      	bne.n	80075d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80075c8:	4b30      	ldr	r3, [pc, #192]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d109      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0de      	b.n	8007796 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075d8:	4b2c      	ldr	r3, [pc, #176]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0d6      	b.n	8007796 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075e8:	4b28      	ldr	r3, [pc, #160]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f023 0207 	bic.w	r2, r3, #7
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	4925      	ldr	r1, [pc, #148]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075fa:	f7fa fe83 	bl	8002304 <HAL_GetTick>
 80075fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007600:	e00a      	b.n	8007618 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007602:	f7fa fe7f 	bl	8002304 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007610:	4293      	cmp	r3, r2
 8007612:	d901      	bls.n	8007618 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e0be      	b.n	8007796 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007618:	4b1c      	ldr	r3, [pc, #112]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	00db      	lsls	r3, r3, #3
 8007626:	429a      	cmp	r2, r3
 8007628:	d1eb      	bne.n	8007602 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d010      	beq.n	8007658 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	4b14      	ldr	r3, [pc, #80]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	429a      	cmp	r2, r3
 8007644:	d208      	bcs.n	8007658 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007646:	4b11      	ldr	r3, [pc, #68]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	f023 020f 	bic.w	r2, r3, #15
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	490e      	ldr	r1, [pc, #56]	@ (800768c <HAL_RCC_ClockConfig+0x244>)
 8007654:	4313      	orrs	r3, r2
 8007656:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007658:	4b0b      	ldr	r3, [pc, #44]	@ (8007688 <HAL_RCC_ClockConfig+0x240>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	429a      	cmp	r2, r3
 8007664:	d214      	bcs.n	8007690 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007666:	4b08      	ldr	r3, [pc, #32]	@ (8007688 <HAL_RCC_ClockConfig+0x240>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f023 020f 	bic.w	r2, r3, #15
 800766e:	4906      	ldr	r1, [pc, #24]	@ (8007688 <HAL_RCC_ClockConfig+0x240>)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	4313      	orrs	r3, r2
 8007674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007676:	4b04      	ldr	r3, [pc, #16]	@ (8007688 <HAL_RCC_ClockConfig+0x240>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d005      	beq.n	8007690 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e086      	b.n	8007796 <HAL_RCC_ClockConfig+0x34e>
 8007688:	52002000 	.word	0x52002000
 800768c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0304 	and.w	r3, r3, #4
 8007698:	2b00      	cmp	r3, #0
 800769a:	d010      	beq.n	80076be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	4b3f      	ldr	r3, [pc, #252]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d208      	bcs.n	80076be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076ac:	4b3c      	ldr	r3, [pc, #240]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	4939      	ldr	r1, [pc, #228]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d010      	beq.n	80076ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695a      	ldr	r2, [r3, #20]
 80076ce:	4b34      	ldr	r3, [pc, #208]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d208      	bcs.n	80076ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076da:	4b31      	ldr	r3, [pc, #196]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	492e      	ldr	r1, [pc, #184]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d010      	beq.n	800771a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	699a      	ldr	r2, [r3, #24]
 80076fc:	4b28      	ldr	r3, [pc, #160]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007704:	429a      	cmp	r2, r3
 8007706:	d208      	bcs.n	800771a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007708:	4b25      	ldr	r3, [pc, #148]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	699b      	ldr	r3, [r3, #24]
 8007714:	4922      	ldr	r1, [pc, #136]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 8007716:	4313      	orrs	r3, r2
 8007718:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b00      	cmp	r3, #0
 8007724:	d010      	beq.n	8007748 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69da      	ldr	r2, [r3, #28]
 800772a:	4b1d      	ldr	r3, [pc, #116]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007732:	429a      	cmp	r2, r3
 8007734:	d208      	bcs.n	8007748 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007736:	4b1a      	ldr	r3, [pc, #104]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	4917      	ldr	r1, [pc, #92]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 8007744:	4313      	orrs	r3, r2
 8007746:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007748:	f000 f834 	bl	80077b4 <HAL_RCC_GetSysClockFreq>
 800774c:	4602      	mov	r2, r0
 800774e:	4b14      	ldr	r3, [pc, #80]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	4912      	ldr	r1, [pc, #72]	@ (80077a4 <HAL_RCC_ClockConfig+0x35c>)
 800775a:	5ccb      	ldrb	r3, [r1, r3]
 800775c:	f003 031f 	and.w	r3, r3, #31
 8007760:	fa22 f303 	lsr.w	r3, r2, r3
 8007764:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007766:	4b0e      	ldr	r3, [pc, #56]	@ (80077a0 <HAL_RCC_ClockConfig+0x358>)
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	4a0d      	ldr	r2, [pc, #52]	@ (80077a4 <HAL_RCC_ClockConfig+0x35c>)
 8007770:	5cd3      	ldrb	r3, [r2, r3]
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
 800777c:	4a0a      	ldr	r2, [pc, #40]	@ (80077a8 <HAL_RCC_ClockConfig+0x360>)
 800777e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007780:	4a0a      	ldr	r2, [pc, #40]	@ (80077ac <HAL_RCC_ClockConfig+0x364>)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007786:	4b0a      	ldr	r3, [pc, #40]	@ (80077b0 <HAL_RCC_ClockConfig+0x368>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f7fa fd70 	bl	8002270 <HAL_InitTick>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	58024400 	.word	0x58024400
 80077a4:	08012e28 	.word	0x08012e28
 80077a8:	2400000c 	.word	0x2400000c
 80077ac:	24000008 	.word	0x24000008
 80077b0:	24000010 	.word	0x24000010

080077b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b089      	sub	sp, #36	@ 0x24
 80077b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077ba:	4bb3      	ldr	r3, [pc, #716]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077c2:	2b18      	cmp	r3, #24
 80077c4:	f200 8155 	bhi.w	8007a72 <HAL_RCC_GetSysClockFreq+0x2be>
 80077c8:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	08007835 	.word	0x08007835
 80077d4:	08007a73 	.word	0x08007a73
 80077d8:	08007a73 	.word	0x08007a73
 80077dc:	08007a73 	.word	0x08007a73
 80077e0:	08007a73 	.word	0x08007a73
 80077e4:	08007a73 	.word	0x08007a73
 80077e8:	08007a73 	.word	0x08007a73
 80077ec:	08007a73 	.word	0x08007a73
 80077f0:	0800785b 	.word	0x0800785b
 80077f4:	08007a73 	.word	0x08007a73
 80077f8:	08007a73 	.word	0x08007a73
 80077fc:	08007a73 	.word	0x08007a73
 8007800:	08007a73 	.word	0x08007a73
 8007804:	08007a73 	.word	0x08007a73
 8007808:	08007a73 	.word	0x08007a73
 800780c:	08007a73 	.word	0x08007a73
 8007810:	08007861 	.word	0x08007861
 8007814:	08007a73 	.word	0x08007a73
 8007818:	08007a73 	.word	0x08007a73
 800781c:	08007a73 	.word	0x08007a73
 8007820:	08007a73 	.word	0x08007a73
 8007824:	08007a73 	.word	0x08007a73
 8007828:	08007a73 	.word	0x08007a73
 800782c:	08007a73 	.word	0x08007a73
 8007830:	08007867 	.word	0x08007867
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007834:	4b94      	ldr	r3, [pc, #592]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007840:	4b91      	ldr	r3, [pc, #580]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	08db      	lsrs	r3, r3, #3
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	4a90      	ldr	r2, [pc, #576]	@ (8007a8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800784c:	fa22 f303 	lsr.w	r3, r2, r3
 8007850:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007852:	e111      	b.n	8007a78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007854:	4b8d      	ldr	r3, [pc, #564]	@ (8007a8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007856:	61bb      	str	r3, [r7, #24]
      break;
 8007858:	e10e      	b.n	8007a78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800785a:	4b8d      	ldr	r3, [pc, #564]	@ (8007a90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800785c:	61bb      	str	r3, [r7, #24]
      break;
 800785e:	e10b      	b.n	8007a78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007860:	4b8c      	ldr	r3, [pc, #560]	@ (8007a94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007862:	61bb      	str	r3, [r7, #24]
      break;
 8007864:	e108      	b.n	8007a78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007866:	4b88      	ldr	r3, [pc, #544]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007870:	4b85      	ldr	r3, [pc, #532]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007874:	091b      	lsrs	r3, r3, #4
 8007876:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800787a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800787c:	4b82      	ldr	r3, [pc, #520]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800787e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007886:	4b80      	ldr	r3, [pc, #512]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800788a:	08db      	lsrs	r3, r3, #3
 800788c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	fb02 f303 	mul.w	r3, r2, r3
 8007896:	ee07 3a90 	vmov	s15, r3
 800789a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80e1 	beq.w	8007a6c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	f000 8083 	beq.w	80079b8 <HAL_RCC_GetSysClockFreq+0x204>
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	f200 80a1 	bhi.w	80079fc <HAL_RCC_GetSysClockFreq+0x248>
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_RCC_GetSysClockFreq+0x114>
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d056      	beq.n	8007974 <HAL_RCC_GetSysClockFreq+0x1c0>
 80078c6:	e099      	b.n	80079fc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c8:	4b6f      	ldr	r3, [pc, #444]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0320 	and.w	r3, r3, #32
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d02d      	beq.n	8007930 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078d4:	4b6c      	ldr	r3, [pc, #432]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	08db      	lsrs	r3, r3, #3
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	4a6b      	ldr	r2, [pc, #428]	@ (8007a8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80078e0:	fa22 f303 	lsr.w	r3, r2, r3
 80078e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	ee07 3a90 	vmov	s15, r3
 80078ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fe:	4b62      	ldr	r3, [pc, #392]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007906:	ee07 3a90 	vmov	s15, r3
 800790a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007912:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800792e:	e087      	b.n	8007a40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007a9c <HAL_RCC_GetSysClockFreq+0x2e8>
 800793e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007942:	4b51      	ldr	r3, [pc, #324]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794a:	ee07 3a90 	vmov	s15, r3
 800794e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007952:	ed97 6a02 	vldr	s12, [r7, #8]
 8007956:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800795a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007962:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007972:	e065      	b.n	8007a40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	ee07 3a90 	vmov	s15, r3
 800797a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007aa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007986:	4b40      	ldr	r3, [pc, #256]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007996:	ed97 6a02 	vldr	s12, [r7, #8]
 800799a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 800799e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079b6:	e043      	b.n	8007a40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	ee07 3a90 	vmov	s15, r3
 80079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007aa4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80079c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079da:	ed97 6a02 	vldr	s12, [r7, #8]
 80079de:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 80079e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80079fa:	e021      	b.n	8007a40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	ee07 3a90 	vmov	s15, r3
 8007a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007aa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a16:	ee07 3a90 	vmov	s15, r3
 8007a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007a98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007a3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007a40:	4b11      	ldr	r3, [pc, #68]	@ (8007a88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a44:	0a5b      	lsrs	r3, r3, #9
 8007a46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	ee07 3a90 	vmov	s15, r3
 8007a54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a58:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a64:	ee17 3a90 	vmov	r3, s15
 8007a68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007a6a:	e005      	b.n	8007a78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	61bb      	str	r3, [r7, #24]
      break;
 8007a70:	e002      	b.n	8007a78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007a72:	4b07      	ldr	r3, [pc, #28]	@ (8007a90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a74:	61bb      	str	r3, [r7, #24]
      break;
 8007a76:	bf00      	nop
  }

  return sysclockfreq;
 8007a78:	69bb      	ldr	r3, [r7, #24]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3724      	adds	r7, #36	@ 0x24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	03d09000 	.word	0x03d09000
 8007a90:	003d0900 	.word	0x003d0900
 8007a94:	007a1200 	.word	0x007a1200
 8007a98:	46000000 	.word	0x46000000
 8007a9c:	4c742400 	.word	0x4c742400
 8007aa0:	4a742400 	.word	0x4a742400
 8007aa4:	4af42400 	.word	0x4af42400

08007aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007aae:	f7ff fe81 	bl	80077b4 <HAL_RCC_GetSysClockFreq>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	4b10      	ldr	r3, [pc, #64]	@ (8007af8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	0a1b      	lsrs	r3, r3, #8
 8007aba:	f003 030f 	and.w	r3, r3, #15
 8007abe:	490f      	ldr	r1, [pc, #60]	@ (8007afc <HAL_RCC_GetHCLKFreq+0x54>)
 8007ac0:	5ccb      	ldrb	r3, [r1, r3]
 8007ac2:	f003 031f 	and.w	r3, r3, #31
 8007ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007acc:	4b0a      	ldr	r3, [pc, #40]	@ (8007af8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	f003 030f 	and.w	r3, r3, #15
 8007ad4:	4a09      	ldr	r2, [pc, #36]	@ (8007afc <HAL_RCC_GetHCLKFreq+0x54>)
 8007ad6:	5cd3      	ldrb	r3, [r2, r3]
 8007ad8:	f003 031f 	and.w	r3, r3, #31
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae2:	4a07      	ldr	r2, [pc, #28]	@ (8007b00 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ae4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ae6:	4a07      	ldr	r2, [pc, #28]	@ (8007b04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007aec:	4b04      	ldr	r3, [pc, #16]	@ (8007b00 <HAL_RCC_GetHCLKFreq+0x58>)
 8007aee:	681b      	ldr	r3, [r3, #0]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	58024400 	.word	0x58024400
 8007afc:	08012e28 	.word	0x08012e28
 8007b00:	2400000c 	.word	0x2400000c
 8007b04:	24000008 	.word	0x24000008

08007b08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b0c:	b0ca      	sub	sp, #296	@ 0x128
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007b14:	2300      	movs	r3, #0
 8007b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007b2c:	2500      	movs	r5, #0
 8007b2e:	ea54 0305 	orrs.w	r3, r4, r5
 8007b32:	d049      	beq.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b3a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b3e:	d02f      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007b40:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b44:	d828      	bhi.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b4a:	d01a      	beq.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007b4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b50:	d822      	bhi.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007b56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b5a:	d007      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007b5c:	e01c      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b5e:	4bb8      	ldr	r3, [pc, #736]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b62:	4ab7      	ldr	r2, [pc, #732]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b6a:	e01a      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b70:	3308      	adds	r3, #8
 8007b72:	2102      	movs	r1, #2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f001 f9d1 	bl	8008f1c <RCCEx_PLL2_Config>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b80:	e00f      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	3328      	adds	r3, #40	@ 0x28
 8007b88:	2102      	movs	r1, #2
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 fa78 	bl	8009080 <RCCEx_PLL3_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007b96:	e004      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b9e:	e000      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ba2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007baa:	4ba5      	ldr	r3, [pc, #660]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007bb8:	4aa1      	ldr	r2, [pc, #644]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bbe:	e003      	b.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007bd4:	f04f 0900 	mov.w	r9, #0
 8007bd8:	ea58 0309 	orrs.w	r3, r8, r9
 8007bdc:	d047      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d82a      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007be8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c05 	.word	0x08007c05
 8007bf4:	08007c13 	.word	0x08007c13
 8007bf8:	08007c29 	.word	0x08007c29
 8007bfc:	08007c47 	.word	0x08007c47
 8007c00:	08007c47 	.word	0x08007c47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c04:	4b8e      	ldr	r3, [pc, #568]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c08:	4a8d      	ldr	r2, [pc, #564]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c10:	e01a      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c16:	3308      	adds	r3, #8
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f001 f97e 	bl	8008f1c <RCCEx_PLL2_Config>
 8007c20:	4603      	mov	r3, r0
 8007c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c26:	e00f      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2c:	3328      	adds	r3, #40	@ 0x28
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 fa25 	bl	8009080 <RCCEx_PLL3_Config>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007c3c:	e004      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c44:	e000      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d10a      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c50:	4b7b      	ldr	r3, [pc, #492]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c54:	f023 0107 	bic.w	r1, r3, #7
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c5e:	4a78      	ldr	r2, [pc, #480]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007c60:	430b      	orrs	r3, r1
 8007c62:	6513      	str	r3, [r2, #80]	@ 0x50
 8007c64:	e003      	b.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007c7a:	f04f 0b00 	mov.w	fp, #0
 8007c7e:	ea5a 030b 	orrs.w	r3, sl, fp
 8007c82:	d04c      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c8e:	d030      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007c90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c94:	d829      	bhi.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c96:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c98:	d02d      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c9c:	d825      	bhi.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007c9e:	2b80      	cmp	r3, #128	@ 0x80
 8007ca0:	d018      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007ca2:	2b80      	cmp	r3, #128	@ 0x80
 8007ca4:	d821      	bhi.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007caa:	2b40      	cmp	r3, #64	@ 0x40
 8007cac:	d007      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007cae:	e01c      	b.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cb0:	4b63      	ldr	r3, [pc, #396]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb4:	4a62      	ldr	r2, [pc, #392]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007cbc:	e01c      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f001 f928 	bl	8008f1c <RCCEx_PLL2_Config>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007cd2:	e011      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd8:	3328      	adds	r3, #40	@ 0x28
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 f9cf 	bl	8009080 <RCCEx_PLL3_Config>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ce8:	e006      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cf0:	e002      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007cf2:	bf00      	nop
 8007cf4:	e000      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007d00:	4b4f      	ldr	r3, [pc, #316]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d0e:	4a4c      	ldr	r2, [pc, #304]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d10:	430b      	orrs	r3, r1
 8007d12:	6513      	str	r3, [r2, #80]	@ 0x50
 8007d14:	e003      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007d2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007d34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	d053      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d4a:	d035      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007d4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007d50:	d82e      	bhi.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007d56:	d031      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007d58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007d5c:	d828      	bhi.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d62:	d01a      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007d64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007d68:	d822      	bhi.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d003      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007d6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d72:	d007      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007d74:	e01c      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d76:	4b32      	ldr	r3, [pc, #200]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d7a:	4a31      	ldr	r2, [pc, #196]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007d82:	e01c      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d88:	3308      	adds	r3, #8
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f001 f8c5 	bl	8008f1c <RCCEx_PLL2_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007d98:	e011      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9e:	3328      	adds	r3, #40	@ 0x28
 8007da0:	2100      	movs	r1, #0
 8007da2:	4618      	mov	r0, r3
 8007da4:	f001 f96c 	bl	8009080 <RCCEx_PLL3_Config>
 8007da8:	4603      	mov	r3, r0
 8007daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007dae:	e006      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007db6:	e002      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007db8:	bf00      	nop
 8007dba:	e000      	b.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10b      	bne.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ddc:	e003      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007df2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007df6:	2300      	movs	r3, #0
 8007df8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007dfc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007e00:	460b      	mov	r3, r1
 8007e02:	4313      	orrs	r3, r2
 8007e04:	d056      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007e0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e12:	d038      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007e14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007e18:	d831      	bhi.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e1e:	d034      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007e20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007e24:	d82b      	bhi.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e2a:	d01d      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e30:	d825      	bhi.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d006      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e3a:	d00a      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007e3c:	e01f      	b.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007e3e:	bf00      	nop
 8007e40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e44:	4ba2      	ldr	r3, [pc, #648]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	4aa1      	ldr	r2, [pc, #644]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e50:	e01c      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e56:	3308      	adds	r3, #8
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 f85e 	bl	8008f1c <RCCEx_PLL2_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007e66:	e011      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6c:	3328      	adds	r3, #40	@ 0x28
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 f905 	bl	8009080 <RCCEx_PLL3_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e7c:	e006      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e84:	e002      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007e86:	bf00      	nop
 8007e88:	e000      	b.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10b      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007e94:	4b8e      	ldr	r3, [pc, #568]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007ea4:	4a8a      	ldr	r2, [pc, #552]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ea6:	430b      	orrs	r3, r1
 8007ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007eaa:	e003      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ebc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007ec0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007eca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	d03a      	beq.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eda:	2b30      	cmp	r3, #48	@ 0x30
 8007edc:	d01f      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007ede:	2b30      	cmp	r3, #48	@ 0x30
 8007ee0:	d819      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d00c      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007ee6:	2b20      	cmp	r3, #32
 8007ee8:	d815      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d019      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007eee:	2b10      	cmp	r3, #16
 8007ef0:	d111      	bne.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef2:	4b77      	ldr	r3, [pc, #476]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef6:	4a76      	ldr	r2, [pc, #472]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007efc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007efe:	e011      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f04:	3308      	adds	r3, #8
 8007f06:	2102      	movs	r1, #2
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 f807 	bl	8008f1c <RCCEx_PLL2_Config>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007f14:	e006      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f1c:	e002      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f1e:	bf00      	nop
 8007f20:	e000      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10a      	bne.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007f2c:	4b68      	ldr	r3, [pc, #416]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f3a:	4a65      	ldr	r2, [pc, #404]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007f3c:	430b      	orrs	r3, r1
 8007f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007f40:	e003      	b.n	8007f4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007f56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007f60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4313      	orrs	r3, r2
 8007f68:	d051      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f74:	d035      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007f76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f7a:	d82e      	bhi.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f80:	d031      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007f82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007f86:	d828      	bhi.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f8c:	d01a      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007f8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f92:	d822      	bhi.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f9c:	d007      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007f9e:	e01c      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa4:	4a4a      	ldr	r2, [pc, #296]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007fac:	e01c      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 ffb0 	bl	8008f1c <RCCEx_PLL2_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007fc2:	e011      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc8:	3328      	adds	r3, #40	@ 0x28
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 f857 	bl	8009080 <RCCEx_PLL3_Config>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007fd8:	e006      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fe0:	e002      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007fe2:	bf00      	nop
 8007fe4:	e000      	b.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ff0:	4b37      	ldr	r3, [pc, #220]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ffe:	4a34      	ldr	r2, [pc, #208]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008000:	430b      	orrs	r3, r1
 8008002:	6513      	str	r3, [r2, #80]	@ 0x50
 8008004:	e003      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800800a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800801a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800801e:	2300      	movs	r3, #0
 8008020:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008024:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008028:	460b      	mov	r3, r1
 800802a:	4313      	orrs	r3, r2
 800802c:	d056      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800802e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008034:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008038:	d033      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800803a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800803e:	d82c      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008040:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008044:	d02f      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008046:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800804a:	d826      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800804c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008050:	d02b      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008052:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008056:	d820      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800805c:	d012      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800805e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008062:	d81a      	bhi.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008064:	2b00      	cmp	r3, #0
 8008066:	d022      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800806c:	d115      	bne.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	3308      	adds	r3, #8
 8008074:	2101      	movs	r1, #1
 8008076:	4618      	mov	r0, r3
 8008078:	f000 ff50 	bl	8008f1c <RCCEx_PLL2_Config>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008082:	e015      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008088:	3328      	adds	r3, #40	@ 0x28
 800808a:	2101      	movs	r1, #1
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fff7 	bl	8009080 <RCCEx_PLL3_Config>
 8008092:	4603      	mov	r3, r0
 8008094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008098:	e00a      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080a0:	e006      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080a2:	bf00      	nop
 80080a4:	e004      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080a6:	bf00      	nop
 80080a8:	e002      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080aa:	bf00      	nop
 80080ac:	e000      	b.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80080ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10d      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80080b8:	4b05      	ldr	r3, [pc, #20]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080bc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80080c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080c6:	4a02      	ldr	r2, [pc, #8]	@ (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80080cc:	e006      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80080ce:	bf00      	nop
 80080d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80080dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80080e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80080ec:	2300      	movs	r3, #0
 80080ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4313      	orrs	r3, r2
 80080fa:	d055      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80080fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008100:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008104:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008108:	d033      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800810a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800810e:	d82c      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008114:	d02f      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800811a:	d826      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800811c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008120:	d02b      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008122:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008126:	d820      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800812c:	d012      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800812e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008132:	d81a      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d022      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008138:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800813c:	d115      	bne.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008142:	3308      	adds	r3, #8
 8008144:	2101      	movs	r1, #1
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fee8 	bl	8008f1c <RCCEx_PLL2_Config>
 800814c:	4603      	mov	r3, r0
 800814e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008152:	e015      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008158:	3328      	adds	r3, #40	@ 0x28
 800815a:	2101      	movs	r1, #1
 800815c:	4618      	mov	r0, r3
 800815e:	f000 ff8f 	bl	8009080 <RCCEx_PLL3_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008168:	e00a      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008170:	e006      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008172:	bf00      	nop
 8008174:	e004      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008176:	bf00      	nop
 8008178:	e002      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800817a:	bf00      	nop
 800817c:	e000      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800817e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10b      	bne.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008188:	4ba3      	ldr	r3, [pc, #652]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800818a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800818c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008194:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008198:	4a9f      	ldr	r2, [pc, #636]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800819a:	430b      	orrs	r3, r1
 800819c:	6593      	str	r3, [r2, #88]	@ 0x58
 800819e:	e003      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80081b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80081b8:	2300      	movs	r3, #0
 80081ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80081be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80081c2:	460b      	mov	r3, r1
 80081c4:	4313      	orrs	r3, r2
 80081c6:	d037      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80081c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081d2:	d00e      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80081d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081d8:	d816      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d018      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80081de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081e2:	d111      	bne.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e4:	4b8c      	ldr	r3, [pc, #560]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e8:	4a8b      	ldr	r2, [pc, #556]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80081ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80081f0:	e00f      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f6:	3308      	adds	r3, #8
 80081f8:	2101      	movs	r1, #1
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fe8e 	bl	8008f1c <RCCEx_PLL2_Config>
 8008200:	4603      	mov	r3, r0
 8008202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008206:	e004      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800820e:	e000      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800821a:	4b7f      	ldr	r3, [pc, #508]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800821c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008228:	4a7b      	ldr	r2, [pc, #492]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800822a:	430b      	orrs	r3, r1
 800822c:	6513      	str	r3, [r2, #80]	@ 0x50
 800822e:	e003      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008248:	2300      	movs	r3, #0
 800824a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800824e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008252:	460b      	mov	r3, r1
 8008254:	4313      	orrs	r3, r2
 8008256:	d039      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800825e:	2b03      	cmp	r3, #3
 8008260:	d81c      	bhi.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008262:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	080082a5 	.word	0x080082a5
 800826c:	08008279 	.word	0x08008279
 8008270:	08008287 	.word	0x08008287
 8008274:	080082a5 	.word	0x080082a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008278:	4b67      	ldr	r3, [pc, #412]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800827a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827c:	4a66      	ldr	r2, [pc, #408]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800827e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008284:	e00f      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828a:	3308      	adds	r3, #8
 800828c:	2102      	movs	r1, #2
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fe44 	bl	8008f1c <RCCEx_PLL2_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800829a:	e004      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082a2:	e000      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80082a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80082ae:	4b5a      	ldr	r3, [pc, #360]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b2:	f023 0103 	bic.w	r1, r3, #3
 80082b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082bc:	4a56      	ldr	r2, [pc, #344]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80082be:	430b      	orrs	r3, r1
 80082c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082c2:	e003      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80082d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80082dc:	2300      	movs	r3, #0
 80082de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80082e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80082e6:	460b      	mov	r3, r1
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f000 809f 	beq.w	800842c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082ee:	4b4b      	ldr	r3, [pc, #300]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a4a      	ldr	r2, [pc, #296]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80082f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082fa:	f7fa f803 	bl	8002304 <HAL_GetTick>
 80082fe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008302:	e00b      	b.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008304:	f7f9 fffe 	bl	8002304 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b64      	cmp	r3, #100	@ 0x64
 8008312:	d903      	bls.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800831a:	e005      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800831c:	4b3f      	ldr	r3, [pc, #252]	@ (800841c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008324:	2b00      	cmp	r3, #0
 8008326:	d0ed      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832c:	2b00      	cmp	r3, #0
 800832e:	d179      	bne.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008330:	4b39      	ldr	r3, [pc, #228]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008332:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008338:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800833c:	4053      	eors	r3, r2
 800833e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008342:	2b00      	cmp	r3, #0
 8008344:	d015      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008346:	4b34      	ldr	r3, [pc, #208]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800834a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800834e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008352:	4b31      	ldr	r3, [pc, #196]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008356:	4a30      	ldr	r2, [pc, #192]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800835c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800835e:	4b2e      	ldr	r3, [pc, #184]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008362:	4a2d      	ldr	r2, [pc, #180]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008368:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800836a:	4a2b      	ldr	r2, [pc, #172]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800836c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8008370:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800837a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800837e:	d118      	bne.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008380:	f7f9 ffc0 	bl	8002304 <HAL_GetTick>
 8008384:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008388:	e00d      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800838a:	f7f9 ffbb 	bl	8002304 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008394:	1ad2      	subs	r2, r2, r3
 8008396:	f241 3388 	movw	r3, #5000	@ 0x1388
 800839a:	429a      	cmp	r2, r3
 800839c:	d903      	bls.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80083a4:	e005      	b.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083a6:	4b1c      	ldr	r3, [pc, #112]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0eb      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80083b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d129      	bne.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083ca:	d10e      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80083cc:	4b12      	ldr	r3, [pc, #72]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80083d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80083dc:	091a      	lsrs	r2, r3, #4
 80083de:	4b10      	ldr	r3, [pc, #64]	@ (8008420 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80083e0:	4013      	ands	r3, r2
 80083e2:	4a0d      	ldr	r2, [pc, #52]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083e4:	430b      	orrs	r3, r1
 80083e6:	6113      	str	r3, [r2, #16]
 80083e8:	e005      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80083ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80083f4:	6113      	str	r3, [r2, #16]
 80083f6:	4b08      	ldr	r3, [pc, #32]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80083fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008406:	4a04      	ldr	r2, [pc, #16]	@ (8008418 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008408:	430b      	orrs	r3, r1
 800840a:	6713      	str	r3, [r2, #112]	@ 0x70
 800840c:	e00e      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800840e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008416:	e009      	b.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008418:	58024400 	.word	0x58024400
 800841c:	58024800 	.word	0x58024800
 8008420:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800842c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f002 0301 	and.w	r3, r2, #1
 8008438:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800843c:	2300      	movs	r3, #0
 800843e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008442:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008446:	460b      	mov	r3, r1
 8008448:	4313      	orrs	r3, r2
 800844a:	f000 8089 	beq.w	8008560 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800844e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008452:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008454:	2b28      	cmp	r3, #40	@ 0x28
 8008456:	d86b      	bhi.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008458:	a201      	add	r2, pc, #4	@ (adr r2, 8008460 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800845a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845e:	bf00      	nop
 8008460:	08008539 	.word	0x08008539
 8008464:	08008531 	.word	0x08008531
 8008468:	08008531 	.word	0x08008531
 800846c:	08008531 	.word	0x08008531
 8008470:	08008531 	.word	0x08008531
 8008474:	08008531 	.word	0x08008531
 8008478:	08008531 	.word	0x08008531
 800847c:	08008531 	.word	0x08008531
 8008480:	08008505 	.word	0x08008505
 8008484:	08008531 	.word	0x08008531
 8008488:	08008531 	.word	0x08008531
 800848c:	08008531 	.word	0x08008531
 8008490:	08008531 	.word	0x08008531
 8008494:	08008531 	.word	0x08008531
 8008498:	08008531 	.word	0x08008531
 800849c:	08008531 	.word	0x08008531
 80084a0:	0800851b 	.word	0x0800851b
 80084a4:	08008531 	.word	0x08008531
 80084a8:	08008531 	.word	0x08008531
 80084ac:	08008531 	.word	0x08008531
 80084b0:	08008531 	.word	0x08008531
 80084b4:	08008531 	.word	0x08008531
 80084b8:	08008531 	.word	0x08008531
 80084bc:	08008531 	.word	0x08008531
 80084c0:	08008539 	.word	0x08008539
 80084c4:	08008531 	.word	0x08008531
 80084c8:	08008531 	.word	0x08008531
 80084cc:	08008531 	.word	0x08008531
 80084d0:	08008531 	.word	0x08008531
 80084d4:	08008531 	.word	0x08008531
 80084d8:	08008531 	.word	0x08008531
 80084dc:	08008531 	.word	0x08008531
 80084e0:	08008539 	.word	0x08008539
 80084e4:	08008531 	.word	0x08008531
 80084e8:	08008531 	.word	0x08008531
 80084ec:	08008531 	.word	0x08008531
 80084f0:	08008531 	.word	0x08008531
 80084f4:	08008531 	.word	0x08008531
 80084f8:	08008531 	.word	0x08008531
 80084fc:	08008531 	.word	0x08008531
 8008500:	08008539 	.word	0x08008539
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008508:	3308      	adds	r3, #8
 800850a:	2101      	movs	r1, #1
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fd05 	bl	8008f1c <RCCEx_PLL2_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008518:	e00f      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800851a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851e:	3328      	adds	r3, #40	@ 0x28
 8008520:	2101      	movs	r1, #1
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fdac 	bl	8009080 <RCCEx_PLL3_Config>
 8008528:	4603      	mov	r3, r0
 800852a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800852e:	e004      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008536:	e000      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800853a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10a      	bne.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008542:	4bbf      	ldr	r3, [pc, #764]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008546:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008550:	4abb      	ldr	r2, [pc, #748]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008552:	430b      	orrs	r3, r1
 8008554:	6553      	str	r3, [r2, #84]	@ 0x54
 8008556:	e003      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800855c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	f002 0302 	and.w	r3, r2, #2
 800856c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008570:	2300      	movs	r3, #0
 8008572:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008576:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800857a:	460b      	mov	r3, r1
 800857c:	4313      	orrs	r3, r2
 800857e:	d041      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008586:	2b05      	cmp	r3, #5
 8008588:	d824      	bhi.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800858a:	a201      	add	r2, pc, #4	@ (adr r2, 8008590 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	080085dd 	.word	0x080085dd
 8008594:	080085a9 	.word	0x080085a9
 8008598:	080085bf 	.word	0x080085bf
 800859c:	080085dd 	.word	0x080085dd
 80085a0:	080085dd 	.word	0x080085dd
 80085a4:	080085dd 	.word	0x080085dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ac:	3308      	adds	r3, #8
 80085ae:	2101      	movs	r1, #1
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fcb3 	bl	8008f1c <RCCEx_PLL2_Config>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80085bc:	e00f      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c2:	3328      	adds	r3, #40	@ 0x28
 80085c4:	2101      	movs	r1, #1
 80085c6:	4618      	mov	r0, r3
 80085c8:	f000 fd5a 	bl	8009080 <RCCEx_PLL3_Config>
 80085cc:	4603      	mov	r3, r0
 80085ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80085d2:	e004      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085da:	e000      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80085dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10a      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80085e6:	4b96      	ldr	r3, [pc, #600]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ea:	f023 0107 	bic.w	r1, r3, #7
 80085ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085f4:	4a92      	ldr	r2, [pc, #584]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80085f6:	430b      	orrs	r3, r1
 80085f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80085fa:	e003      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008600:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f002 0304 	and.w	r3, r2, #4
 8008610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008614:	2300      	movs	r3, #0
 8008616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800861a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800861e:	460b      	mov	r3, r1
 8008620:	4313      	orrs	r3, r2
 8008622:	d044      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800862c:	2b05      	cmp	r3, #5
 800862e:	d825      	bhi.n	800867c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008630:	a201      	add	r2, pc, #4	@ (adr r2, 8008638 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008636:	bf00      	nop
 8008638:	08008685 	.word	0x08008685
 800863c:	08008651 	.word	0x08008651
 8008640:	08008667 	.word	0x08008667
 8008644:	08008685 	.word	0x08008685
 8008648:	08008685 	.word	0x08008685
 800864c:	08008685 	.word	0x08008685
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008654:	3308      	adds	r3, #8
 8008656:	2101      	movs	r1, #1
 8008658:	4618      	mov	r0, r3
 800865a:	f000 fc5f 	bl	8008f1c <RCCEx_PLL2_Config>
 800865e:	4603      	mov	r3, r0
 8008660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008664:	e00f      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866a:	3328      	adds	r3, #40	@ 0x28
 800866c:	2101      	movs	r1, #1
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fd06 	bl	8009080 <RCCEx_PLL3_Config>
 8008674:	4603      	mov	r3, r0
 8008676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800867a:	e004      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008682:	e000      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8008684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10b      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800868e:	4b6c      	ldr	r3, [pc, #432]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008692:	f023 0107 	bic.w	r1, r3, #7
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800869e:	4a68      	ldr	r2, [pc, #416]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80086a0:	430b      	orrs	r3, r1
 80086a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80086a4:	e003      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f002 0320 	and.w	r3, r2, #32
 80086ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80086be:	2300      	movs	r3, #0
 80086c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80086c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80086c8:	460b      	mov	r3, r1
 80086ca:	4313      	orrs	r3, r2
 80086cc:	d055      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80086ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086da:	d033      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80086dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086e0:	d82c      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80086e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e6:	d02f      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80086e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ec:	d826      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80086ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80086f2:	d02b      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80086f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80086f8:	d820      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80086fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086fe:	d012      	beq.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008704:	d81a      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d022      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800870a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800870e:	d115      	bne.n	800873c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008714:	3308      	adds	r3, #8
 8008716:	2100      	movs	r1, #0
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fbff 	bl	8008f1c <RCCEx_PLL2_Config>
 800871e:	4603      	mov	r3, r0
 8008720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008724:	e015      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800872a:	3328      	adds	r3, #40	@ 0x28
 800872c:	2102      	movs	r1, #2
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fca6 	bl	8009080 <RCCEx_PLL3_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800873a:	e00a      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008742:	e006      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008744:	bf00      	nop
 8008746:	e004      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008748:	bf00      	nop
 800874a:	e002      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800874c:	bf00      	nop
 800874e:	e000      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008750:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10b      	bne.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800875a:	4b39      	ldr	r3, [pc, #228]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800875c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800875e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876a:	4a35      	ldr	r2, [pc, #212]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800876c:	430b      	orrs	r3, r1
 800876e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008770:	e003      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008776:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800877e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008782:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008786:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800878a:	2300      	movs	r3, #0
 800878c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008790:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008794:	460b      	mov	r3, r1
 8008796:	4313      	orrs	r3, r2
 8008798:	d058      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800879a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087a6:	d033      	beq.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80087a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80087ac:	d82c      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087b2:	d02f      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80087b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087b8:	d826      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087be:	d02b      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80087c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087c4:	d820      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087ca:	d012      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80087cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087d0:	d81a      	bhi.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d022      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80087d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087da:	d115      	bne.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087e0:	3308      	adds	r3, #8
 80087e2:	2100      	movs	r1, #0
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fb99 	bl	8008f1c <RCCEx_PLL2_Config>
 80087ea:	4603      	mov	r3, r0
 80087ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80087f0:	e015      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f6:	3328      	adds	r3, #40	@ 0x28
 80087f8:	2102      	movs	r1, #2
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 fc40 	bl	8009080 <RCCEx_PLL3_Config>
 8008800:	4603      	mov	r3, r0
 8008802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008806:	e00a      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800880e:	e006      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008810:	bf00      	nop
 8008812:	e004      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008814:	bf00      	nop
 8008816:	e002      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008818:	bf00      	nop
 800881a:	e000      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800881c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800881e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10e      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008826:	4b06      	ldr	r3, [pc, #24]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800882a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800882e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008832:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008836:	4a02      	ldr	r2, [pc, #8]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008838:	430b      	orrs	r3, r1
 800883a:	6593      	str	r3, [r2, #88]	@ 0x58
 800883c:	e006      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800883e:	bf00      	nop
 8008840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800884c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800885c:	2300      	movs	r3, #0
 800885e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008862:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008866:	460b      	mov	r3, r1
 8008868:	4313      	orrs	r3, r2
 800886a:	d055      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800886c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008870:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008874:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008878:	d033      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800887a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800887e:	d82c      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008884:	d02f      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800888a:	d826      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800888c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008890:	d02b      	beq.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008892:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008896:	d820      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008898:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800889c:	d012      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800889e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088a2:	d81a      	bhi.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d022      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80088a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ac:	d115      	bne.n	80088da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b2:	3308      	adds	r3, #8
 80088b4:	2100      	movs	r1, #0
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fb30 	bl	8008f1c <RCCEx_PLL2_Config>
 80088bc:	4603      	mov	r3, r0
 80088be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80088c2:	e015      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c8:	3328      	adds	r3, #40	@ 0x28
 80088ca:	2102      	movs	r1, #2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 fbd7 	bl	8009080 <RCCEx_PLL3_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80088d8:	e00a      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088e0:	e006      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80088e2:	bf00      	nop
 80088e4:	e004      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80088e6:	bf00      	nop
 80088e8:	e002      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80088ea:	bf00      	nop
 80088ec:	e000      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80088ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10b      	bne.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80088f8:	4ba1      	ldr	r3, [pc, #644]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80088fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008904:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008908:	4a9d      	ldr	r2, [pc, #628]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800890a:	430b      	orrs	r3, r1
 800890c:	6593      	str	r3, [r2, #88]	@ 0x58
 800890e:	e003      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008914:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f002 0308 	and.w	r3, r2, #8
 8008924:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008928:	2300      	movs	r3, #0
 800892a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800892e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008932:	460b      	mov	r3, r1
 8008934:	4313      	orrs	r3, r2
 8008936:	d01e      	beq.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008944:	d10c      	bne.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800894a:	3328      	adds	r3, #40	@ 0x28
 800894c:	2102      	movs	r1, #2
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fb96 	bl	8009080 <RCCEx_PLL3_Config>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008960:	4b87      	ldr	r3, [pc, #540]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008964:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800896c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008970:	4a83      	ldr	r2, [pc, #524]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008972:	430b      	orrs	r3, r1
 8008974:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f002 0310 	and.w	r3, r2, #16
 8008982:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008986:	2300      	movs	r3, #0
 8008988:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800898c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008990:	460b      	mov	r3, r1
 8008992:	4313      	orrs	r3, r2
 8008994:	d01e      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800899a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800899e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089a2:	d10c      	bne.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089a8:	3328      	adds	r3, #40	@ 0x28
 80089aa:	2102      	movs	r1, #2
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 fb67 	bl	8009080 <RCCEx_PLL3_Config>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089be:	4b70      	ldr	r3, [pc, #448]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80089c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089ce:	4a6c      	ldr	r2, [pc, #432]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80089d0:	430b      	orrs	r3, r1
 80089d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80089e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089e4:	2300      	movs	r3, #0
 80089e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80089ee:	460b      	mov	r3, r1
 80089f0:	4313      	orrs	r3, r2
 80089f2:	d03e      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80089f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80089fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a00:	d022      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008a02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a06:	d81b      	bhi.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a10:	d00b      	beq.n	8008a2a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008a12:	e015      	b.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a18:	3308      	adds	r3, #8
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fa7d 	bl	8008f1c <RCCEx_PLL2_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a28:	e00f      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2e:	3328      	adds	r3, #40	@ 0x28
 8008a30:	2102      	movs	r1, #2
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 fb24 	bl	8009080 <RCCEx_PLL3_Config>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008a3e:	e004      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a46:	e000      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008a48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a52:	4b4b      	ldr	r3, [pc, #300]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a56:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a62:	4a47      	ldr	r2, [pc, #284]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008a64:	430b      	orrs	r3, r1
 8008a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a68:	e003      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008a7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a80:	2300      	movs	r3, #0
 8008a82:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	d03b      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a9a:	d01f      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008a9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008aa0:	d818      	bhi.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008aa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008aa6:	d003      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008aa8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008aac:	d007      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008aae:	e011      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab0:	4b33      	ldr	r3, [pc, #204]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab4:	4a32      	ldr	r2, [pc, #200]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ab6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008abc:	e00f      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac2:	3328      	adds	r3, #40	@ 0x28
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fada 	bl	8009080 <RCCEx_PLL3_Config>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008ad2:	e004      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ada:	e000      	b.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10b      	bne.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ae6:	4b26      	ldr	r3, [pc, #152]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af6:	4a22      	ldr	r2, [pc, #136]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008af8:	430b      	orrs	r3, r1
 8008afa:	6553      	str	r3, [r2, #84]	@ 0x54
 8008afc:	e003      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008b12:	673b      	str	r3, [r7, #112]	@ 0x70
 8008b14:	2300      	movs	r3, #0
 8008b16:	677b      	str	r3, [r7, #116]	@ 0x74
 8008b18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	d034      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b30:	d007      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008b32:	e011      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b34:	4b12      	ldr	r3, [pc, #72]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	4a11      	ldr	r2, [pc, #68]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b40:	e00e      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b46:	3308      	adds	r3, #8
 8008b48:	2102      	movs	r1, #2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f9e6 	bl	8008f1c <RCCEx_PLL2_Config>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008b56:	e003      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10d      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008b68:	4b05      	ldr	r3, [pc, #20]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b6c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b76:	4a02      	ldr	r2, [pc, #8]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008b7c:	e006      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008b7e:	bf00      	nop
 8008b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008b98:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	d00c      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bac:	3328      	adds	r3, #40	@ 0x28
 8008bae:	2102      	movs	r1, #2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f000 fa65 	bl	8009080 <RCCEx_PLL3_Config>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008bce:	663b      	str	r3, [r7, #96]	@ 0x60
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008bd4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	d038      	beq.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008be6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bea:	d018      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008bec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bf0:	d811      	bhi.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bf6:	d014      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bfc:	d80b      	bhi.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d011      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c06:	d106      	bne.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c08:	4bc3      	ldr	r3, [pc, #780]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0c:	4ac2      	ldr	r2, [pc, #776]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008c14:	e008      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c1c:	e004      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c1e:	bf00      	nop
 8008c20:	e002      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c22:	bf00      	nop
 8008c24:	e000      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10b      	bne.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c30:	4bb9      	ldr	r3, [pc, #740]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c40:	4ab5      	ldr	r2, [pc, #724]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c42:	430b      	orrs	r3, r1
 8008c44:	6553      	str	r3, [r2, #84]	@ 0x54
 8008c46:	e003      	b.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008c5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c5e:	2300      	movs	r3, #0
 8008c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008c66:	460b      	mov	r3, r1
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	d009      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008c6c:	4baa      	ldr	r3, [pc, #680]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c7a:	4aa7      	ldr	r2, [pc, #668]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008c8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c8e:	2300      	movs	r3, #0
 8008c90:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008c96:	460b      	mov	r3, r1
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	d00a      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008c9c:	4b9e      	ldr	r3, [pc, #632]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008cac:	4a9a      	ldr	r2, [pc, #616]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cc4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008cc8:	460b      	mov	r3, r1
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	d009      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008cce:	4b92      	ldr	r3, [pc, #584]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cd2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cdc:	4a8e      	ldr	r2, [pc, #568]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008cde:	430b      	orrs	r3, r1
 8008ce0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008cee:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cf4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	d00e      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008cfe:	4b86      	ldr	r3, [pc, #536]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	4a85      	ldr	r2, [pc, #532]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008d08:	6113      	str	r3, [r2, #16]
 8008d0a:	4b83      	ldr	r3, [pc, #524]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d0c:	6919      	ldr	r1, [r3, #16]
 8008d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d16:	4a80      	ldr	r2, [pc, #512]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008d28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008d32:	460b      	mov	r3, r1
 8008d34:	4313      	orrs	r3, r2
 8008d36:	d009      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d38:	4b77      	ldr	r3, [pc, #476]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d46:	4a74      	ldr	r2, [pc, #464]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d48:	430b      	orrs	r3, r1
 8008d4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008d58:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008d62:	460b      	mov	r3, r1
 8008d64:	4313      	orrs	r3, r2
 8008d66:	d00a      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d68:	4b6b      	ldr	r3, [pc, #428]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d78:	4a67      	ldr	r2, [pc, #412]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008d7a:	430b      	orrs	r3, r1
 8008d7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	2100      	movs	r1, #0
 8008d88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008d8a:	f003 0301 	and.w	r3, r3, #1
 8008d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008d94:	460b      	mov	r3, r1
 8008d96:	4313      	orrs	r3, r2
 8008d98:	d011      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9e:	3308      	adds	r3, #8
 8008da0:	2100      	movs	r1, #0
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 f8ba 	bl	8008f1c <RCCEx_PLL2_Config>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	6239      	str	r1, [r7, #32]
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dd0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	d011      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dde:	3308      	adds	r3, #8
 8008de0:	2101      	movs	r1, #1
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f89a 	bl	8008f1c <RCCEx_PLL2_Config>
 8008de8:	4603      	mov	r3, r0
 8008dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e06:	2100      	movs	r1, #0
 8008e08:	61b9      	str	r1, [r7, #24]
 8008e0a:	f003 0304 	and.w	r3, r3, #4
 8008e0e:	61fb      	str	r3, [r7, #28]
 8008e10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008e14:	460b      	mov	r3, r1
 8008e16:	4313      	orrs	r3, r2
 8008e18:	d011      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e1e:	3308      	adds	r3, #8
 8008e20:	2102      	movs	r1, #2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f87a 	bl	8008f1c <RCCEx_PLL2_Config>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	2100      	movs	r1, #0
 8008e48:	6139      	str	r1, [r7, #16]
 8008e4a:	f003 0308 	and.w	r3, r3, #8
 8008e4e:	617b      	str	r3, [r7, #20]
 8008e50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008e54:	460b      	mov	r3, r1
 8008e56:	4313      	orrs	r3, r2
 8008e58:	d011      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e5e:	3328      	adds	r3, #40	@ 0x28
 8008e60:	2100      	movs	r1, #0
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 f90c 	bl	8009080 <RCCEx_PLL3_Config>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e86:	2100      	movs	r1, #0
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	f003 0310 	and.w	r3, r3, #16
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008e94:	460b      	mov	r3, r1
 8008e96:	4313      	orrs	r3, r2
 8008e98:	d011      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e9e:	3328      	adds	r3, #40	@ 0x28
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f000 f8ec 	bl	8009080 <RCCEx_PLL3_Config>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	6039      	str	r1, [r7, #0]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	607b      	str	r3, [r7, #4]
 8008ed0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	d011      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ede:	3328      	adds	r3, #40	@ 0x28
 8008ee0:	2102      	movs	r1, #2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 f8cc 	bl	8009080 <RCCEx_PLL3_Config>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008efa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008efe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	e000      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008f12:	46bd      	mov	sp, r7
 8008f14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f18:	58024400 	.word	0x58024400

08008f1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008f2a:	4b53      	ldr	r3, [pc, #332]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2e:	f003 0303 	and.w	r3, r3, #3
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d101      	bne.n	8008f3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e099      	b.n	800906e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008f40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f46:	f7f9 f9dd 	bl	8002304 <HAL_GetTick>
 8008f4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f4c:	e008      	b.n	8008f60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f4e:	f7f9 f9d9 	bl	8002304 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d901      	bls.n	8008f60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e086      	b.n	800906e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008f60:	4b45      	ldr	r3, [pc, #276]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1f0      	bne.n	8008f4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008f6c:	4b42      	ldr	r3, [pc, #264]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	031b      	lsls	r3, r3, #12
 8008f7a:	493f      	ldr	r1, [pc, #252]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	025b      	lsls	r3, r3, #9
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	431a      	orrs	r2, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	041b      	lsls	r3, r3, #16
 8008f9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	061b      	lsls	r3, r3, #24
 8008fac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008fb0:	4931      	ldr	r1, [pc, #196]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008fb6:	4b30      	ldr	r3, [pc, #192]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	492d      	ldr	r1, [pc, #180]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fcc:	f023 0220 	bic.w	r2, r3, #32
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	4928      	ldr	r1, [pc, #160]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008fda:	4b27      	ldr	r3, [pc, #156]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fde:	4a26      	ldr	r2, [pc, #152]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008fe0:	f023 0310 	bic.w	r3, r3, #16
 8008fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008fe6:	4b24      	ldr	r3, [pc, #144]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008fea:	4b24      	ldr	r3, [pc, #144]	@ (800907c <RCCEx_PLL2_Config+0x160>)
 8008fec:	4013      	ands	r3, r2
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	69d2      	ldr	r2, [r2, #28]
 8008ff2:	00d2      	lsls	r2, r2, #3
 8008ff4:	4920      	ldr	r1, [pc, #128]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8009000:	f043 0310 	orr.w	r3, r3, #16
 8009004:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d106      	bne.n	800901a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800900c:	4b1a      	ldr	r3, [pc, #104]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 800900e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009010:	4a19      	ldr	r2, [pc, #100]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8009012:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009016:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009018:	e00f      	b.n	800903a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d106      	bne.n	800902e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009020:	4b15      	ldr	r3, [pc, #84]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8009022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009024:	4a14      	ldr	r2, [pc, #80]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8009026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800902a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800902c:	e005      	b.n	800903a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800902e:	4b12      	ldr	r3, [pc, #72]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8009030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009032:	4a11      	ldr	r2, [pc, #68]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8009034:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009038:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800903a:	4b0f      	ldr	r3, [pc, #60]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a0e      	ldr	r2, [pc, #56]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8009040:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009046:	f7f9 f95d 	bl	8002304 <HAL_GetTick>
 800904a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800904c:	e008      	b.n	8009060 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800904e:	f7f9 f959 	bl	8002304 <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d901      	bls.n	8009060 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e006      	b.n	800906e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009060:	4b05      	ldr	r3, [pc, #20]	@ (8009078 <RCCEx_PLL2_Config+0x15c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009068:	2b00      	cmp	r3, #0
 800906a:	d0f0      	beq.n	800904e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800906c:	7bfb      	ldrb	r3, [r7, #15]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	58024400 	.word	0x58024400
 800907c:	ffff0007 	.word	0xffff0007

08009080 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800908e:	4b53      	ldr	r3, [pc, #332]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	2b03      	cmp	r3, #3
 8009098:	d101      	bne.n	800909e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e099      	b.n	80091d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800909e:	4b4f      	ldr	r3, [pc, #316]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a4e      	ldr	r2, [pc, #312]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 80090a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090aa:	f7f9 f92b 	bl	8002304 <HAL_GetTick>
 80090ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090b0:	e008      	b.n	80090c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80090b2:	f7f9 f927 	bl	8002304 <HAL_GetTick>
 80090b6:	4602      	mov	r2, r0
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	1ad3      	subs	r3, r2, r3
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d901      	bls.n	80090c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e086      	b.n	80091d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80090c4:	4b45      	ldr	r3, [pc, #276]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1f0      	bne.n	80090b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80090d0:	4b42      	ldr	r3, [pc, #264]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 80090d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	051b      	lsls	r3, r3, #20
 80090de:	493f      	ldr	r1, [pc, #252]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 80090e0:	4313      	orrs	r3, r2
 80090e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	3b01      	subs	r3, #1
 80090ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	025b      	lsls	r3, r3, #9
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	431a      	orrs	r2, r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	3b01      	subs	r3, #1
 8009100:	041b      	lsls	r3, r3, #16
 8009102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	3b01      	subs	r3, #1
 800910e:	061b      	lsls	r3, r3, #24
 8009110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009114:	4931      	ldr	r1, [pc, #196]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009116:	4313      	orrs	r3, r2
 8009118:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800911a:	4b30      	ldr	r3, [pc, #192]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 800911c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	492d      	ldr	r1, [pc, #180]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009128:	4313      	orrs	r3, r2
 800912a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800912c:	4b2b      	ldr	r3, [pc, #172]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 800912e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009130:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	4928      	ldr	r1, [pc, #160]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 800913a:	4313      	orrs	r3, r2
 800913c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800913e:	4b27      	ldr	r3, [pc, #156]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009142:	4a26      	ldr	r2, [pc, #152]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800914a:	4b24      	ldr	r3, [pc, #144]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 800914c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800914e:	4b24      	ldr	r3, [pc, #144]	@ (80091e0 <RCCEx_PLL3_Config+0x160>)
 8009150:	4013      	ands	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	69d2      	ldr	r2, [r2, #28]
 8009156:	00d2      	lsls	r2, r2, #3
 8009158:	4920      	ldr	r1, [pc, #128]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 800915a:	4313      	orrs	r3, r2
 800915c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800915e:	4b1f      	ldr	r3, [pc, #124]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009162:	4a1e      	ldr	r2, [pc, #120]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009168:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d106      	bne.n	800917e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009170:	4b1a      	ldr	r3, [pc, #104]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009174:	4a19      	ldr	r2, [pc, #100]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009176:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800917a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800917c:	e00f      	b.n	800919e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d106      	bne.n	8009192 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009184:	4b15      	ldr	r3, [pc, #84]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009188:	4a14      	ldr	r2, [pc, #80]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 800918a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800918e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009190:	e005      	b.n	800919e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009192:	4b12      	ldr	r3, [pc, #72]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009196:	4a11      	ldr	r2, [pc, #68]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 8009198:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800919c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800919e:	4b0f      	ldr	r3, [pc, #60]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a0e      	ldr	r2, [pc, #56]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 80091a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091aa:	f7f9 f8ab 	bl	8002304 <HAL_GetTick>
 80091ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091b0:	e008      	b.n	80091c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80091b2:	f7f9 f8a7 	bl	8002304 <HAL_GetTick>
 80091b6:	4602      	mov	r2, r0
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	1ad3      	subs	r3, r2, r3
 80091bc:	2b02      	cmp	r3, #2
 80091be:	d901      	bls.n	80091c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80091c0:	2303      	movs	r3, #3
 80091c2:	e006      	b.n	80091d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80091c4:	4b05      	ldr	r3, [pc, #20]	@ (80091dc <RCCEx_PLL3_Config+0x15c>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d0f0      	beq.n	80091b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	58024400 	.word	0x58024400
 80091e0:	ffff0007 	.word	0xffff0007

080091e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e10f      	b.n	8009416 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a87      	ldr	r2, [pc, #540]	@ (8009420 <HAL_SPI_Init+0x23c>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d00f      	beq.n	8009226 <HAL_SPI_Init+0x42>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a86      	ldr	r2, [pc, #536]	@ (8009424 <HAL_SPI_Init+0x240>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d00a      	beq.n	8009226 <HAL_SPI_Init+0x42>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a84      	ldr	r2, [pc, #528]	@ (8009428 <HAL_SPI_Init+0x244>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d005      	beq.n	8009226 <HAL_SPI_Init+0x42>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	2b0f      	cmp	r3, #15
 8009220:	d901      	bls.n	8009226 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e0f7      	b.n	8009416 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 ff3a 	bl	800a0a0 <SPI_GetPacketSize>
 800922c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a7b      	ldr	r2, [pc, #492]	@ (8009420 <HAL_SPI_Init+0x23c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00c      	beq.n	8009252 <HAL_SPI_Init+0x6e>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a79      	ldr	r2, [pc, #484]	@ (8009424 <HAL_SPI_Init+0x240>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d007      	beq.n	8009252 <HAL_SPI_Init+0x6e>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a78      	ldr	r2, [pc, #480]	@ (8009428 <HAL_SPI_Init+0x244>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d002      	beq.n	8009252 <HAL_SPI_Init+0x6e>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b08      	cmp	r3, #8
 8009250:	d811      	bhi.n	8009276 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009256:	4a72      	ldr	r2, [pc, #456]	@ (8009420 <HAL_SPI_Init+0x23c>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d009      	beq.n	8009270 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a70      	ldr	r2, [pc, #448]	@ (8009424 <HAL_SPI_Init+0x240>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d004      	beq.n	8009270 <HAL_SPI_Init+0x8c>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a6f      	ldr	r2, [pc, #444]	@ (8009428 <HAL_SPI_Init+0x244>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d104      	bne.n	800927a <HAL_SPI_Init+0x96>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b10      	cmp	r3, #16
 8009274:	d901      	bls.n	800927a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e0cd      	b.n	8009416 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009280:	b2db      	uxtb	r3, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	d106      	bne.n	8009294 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f7f8 f9fa 	bl	8001688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 0201 	bic.w	r2, r2, #1
 80092aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80092b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80092c0:	d119      	bne.n	80092f6 <HAL_SPI_Init+0x112>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092ca:	d103      	bne.n	80092d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d008      	beq.n	80092e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10c      	bne.n	80092f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80092e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092e4:	d107      	bne.n	80092f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00f      	beq.n	8009322 <HAL_SPI_Init+0x13e>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	2b06      	cmp	r3, #6
 8009308:	d90b      	bls.n	8009322 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	601a      	str	r2, [r3, #0]
 8009320:	e007      	b.n	8009332 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009330:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	69da      	ldr	r2, [r3, #28]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933a:	431a      	orrs	r2, r3
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	431a      	orrs	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009344:	ea42 0103 	orr.w	r1, r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	430a      	orrs	r2, r1
 8009352:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	431a      	orrs	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	695b      	ldr	r3, [r3, #20]
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	431a      	orrs	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	431a      	orrs	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009392:	ea42 0103 	orr.w	r1, r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d113      	bne.n	80093d2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80093d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0201 	bic.w	r2, r2, #1
 80093e0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d00a      	beq.n	8009404 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	40013000 	.word	0x40013000
 8009424:	40003800 	.word	0x40003800
 8009428:	40003c00 	.word	0x40003c00

0800942c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b01      	cmp	r3, #1
 8009444:	d001      	beq.n	800944a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009446:	2302      	movs	r3, #2
 8009448:	e126      	b.n	8009698 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <HAL_SPI_Transmit_DMA+0x2a>
 8009450:	88fb      	ldrh	r3, [r7, #6]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e11e      	b.n	8009698 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009460:	2b01      	cmp	r3, #1
 8009462:	d101      	bne.n	8009468 <HAL_SPI_Transmit_DMA+0x3c>
 8009464:	2302      	movs	r3, #2
 8009466:	e117      	b.n	8009698 <HAL_SPI_Transmit_DMA+0x26c>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2203      	movs	r2, #3
 8009474:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	88fa      	ldrh	r2, [r7, #6]
 800948a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	88fa      	ldrh	r2, [r7, #6]
 8009492:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80094c0:	d108      	bne.n	80094d4 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	e009      	b.n	80094e8 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80094e6:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	2b0f      	cmp	r3, #15
 80094ee:	d905      	bls.n	80094fc <HAL_SPI_Transmit_DMA+0xd0>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094fa:	d10f      	bne.n	800951c <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8009500:	2b07      	cmp	r3, #7
 8009502:	d911      	bls.n	8009528 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800950e:	d00b      	beq.n	8009528 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009514:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800951a:	d005      	beq.n	8009528 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e0b7      	b.n	8009698 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b07      	cmp	r3, #7
 800952e:	d820      	bhi.n	8009572 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800953a:	d109      	bne.n	8009550 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009542:	b29b      	uxth	r3, r3
 8009544:	3301      	adds	r3, #1
 8009546:	105b      	asrs	r3, r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800955a:	d11e      	bne.n	800959a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009562:	b29b      	uxth	r3, r3
 8009564:	3303      	adds	r3, #3
 8009566:	109b      	asrs	r3, r3, #2
 8009568:	b29a      	uxth	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009570:	e013      	b.n	800959a <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	2b0f      	cmp	r3, #15
 8009578:	d80f      	bhi.n	800959a <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009584:	d109      	bne.n	800959a <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800958c:	b29b      	uxth	r3, r3
 800958e:	3301      	adds	r3, #1
 8009590:	105b      	asrs	r3, r3, #1
 8009592:	b29a      	uxth	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800959e:	4a40      	ldr	r2, [pc, #256]	@ (80096a0 <HAL_SPI_Transmit_DMA+0x274>)
 80095a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095a6:	4a3f      	ldr	r2, [pc, #252]	@ (80096a4 <HAL_SPI_Transmit_DMA+0x278>)
 80095a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095ae:	4a3e      	ldr	r2, [pc, #248]	@ (80096a8 <HAL_SPI_Transmit_DMA+0x27c>)
 80095b0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095b6:	2200      	movs	r2, #0
 80095b8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80095c8:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095d2:	4619      	mov	r1, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3320      	adds	r3, #32
 80095da:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80095e4:	f7f9 fb36 	bl	8002c54 <HAL_DMA_Start_IT>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d011      	beq.n	8009612 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80095f4:	f043 0210 	orr.w	r2, r3, #16
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e042      	b.n	8009698 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009616:	69db      	ldr	r3, [r3, #28]
 8009618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800961c:	d108      	bne.n	8009630 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6859      	ldr	r1, [r3, #4]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681a      	ldr	r2, [r3, #0]
 8009628:	4b20      	ldr	r3, [pc, #128]	@ (80096ac <HAL_SPI_Transmit_DMA+0x280>)
 800962a:	400b      	ands	r3, r1
 800962c:	6053      	str	r3, [r2, #4]
 800962e:	e009      	b.n	8009644 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685a      	ldr	r2, [r3, #4]
 8009636:	4b1d      	ldr	r3, [pc, #116]	@ (80096ac <HAL_SPI_Transmit_DMA+0x280>)
 8009638:	4013      	ands	r3, r2
 800963a:	88f9      	ldrh	r1, [r7, #6]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	6812      	ldr	r2, [r2, #0]
 8009640:	430b      	orrs	r3, r1
 8009642:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009652:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8009662:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800967c:	d107      	bne.n	800968e <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800968c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	08009ead 	.word	0x08009ead
 80096a4:	08009e21 	.word	0x08009e21
 80096a8:	08009ee5 	.word	0x08009ee5
 80096ac:	ffff0000 	.word	0xffff0000

080096b0 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d001      	beq.n	80096ce <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 80096ca:	2302      	movs	r3, #2
 80096cc:	e19c      	b.n	8009a08 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <HAL_SPI_TransmitReceive_DMA+0x30>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d002      	beq.n	80096e0 <HAL_SPI_TransmitReceive_DMA+0x30>
 80096da:	887b      	ldrh	r3, [r7, #2]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d101      	bne.n	80096e4 <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e191      	b.n	8009a08 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_SPI_TransmitReceive_DMA+0x42>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e18a      	b.n	8009a08 <HAL_SPI_TransmitReceive_DMA+0x358>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2205      	movs	r2, #5
 80096fe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	887a      	ldrh	r2, [r7, #2]
 8009714:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	887a      	ldrh	r2, [r7, #2]
 800971c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	887a      	ldrh	r2, [r7, #2]
 800972a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	887a      	ldrh	r2, [r7, #2]
 8009732:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009750:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009760:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	2b0f      	cmp	r3, #15
 8009768:	d90b      	bls.n	8009782 <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800976e:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8009770:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009774:	d121      	bne.n	80097ba <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800977a:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 800977c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009780:	d11b      	bne.n	80097ba <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 8009786:	2b07      	cmp	r3, #7
 8009788:	d91d      	bls.n	80097c6 <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800978e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8009790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009794:	d005      	beq.n	80097a2 <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800979a:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800979c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097a0:	d10b      	bne.n	80097ba <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097a6:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 80097a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097ac:	d00b      	beq.n	80097c6 <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097b2:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80097b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097b8:	d005      	beq.n	80097c6 <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e120      	b.n	8009a08 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	2b07      	cmp	r3, #7
 80097cc:	d840      	bhi.n	8009850 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097d8:	d109      	bne.n	80097ee <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	3301      	adds	r3, #1
 80097e4:	105b      	asrs	r3, r3, #1
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097f8:	d109      	bne.n	800980e <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009800:	b29b      	uxth	r3, r3
 8009802:	3303      	adds	r3, #3
 8009804:	109b      	asrs	r3, r3, #2
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009818:	d109      	bne.n	800982e <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009820:	b29b      	uxth	r3, r3
 8009822:	3301      	adds	r3, #1
 8009824:	105b      	asrs	r3, r3, #1
 8009826:	b29a      	uxth	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009838:	d12e      	bne.n	8009898 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009840:	b29b      	uxth	r3, r3
 8009842:	3303      	adds	r3, #3
 8009844:	109b      	asrs	r3, r3, #2
 8009846:	b29a      	uxth	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800984e:	e023      	b.n	8009898 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	2b0f      	cmp	r3, #15
 8009856:	d81f      	bhi.n	8009898 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009862:	d109      	bne.n	8009878 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800986a:	b29b      	uxth	r3, r3
 800986c:	3301      	adds	r3, #1
 800986e:	105b      	asrs	r3, r3, #1
 8009870:	b29a      	uxth	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009882:	d109      	bne.n	8009898 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800988a:	b29b      	uxth	r3, r3
 800988c:	3301      	adds	r3, #1
 800988e:	105b      	asrs	r3, r3, #1
 8009890:	b29a      	uxth	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800989c:	4a5c      	ldr	r2, [pc, #368]	@ (8009a10 <HAL_SPI_TransmitReceive_DMA+0x360>)
 800989e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098a4:	4a5b      	ldr	r2, [pc, #364]	@ (8009a14 <HAL_SPI_TransmitReceive_DMA+0x364>)
 80098a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098ac:	4a5a      	ldr	r2, [pc, #360]	@ (8009a18 <HAL_SPI_TransmitReceive_DMA+0x368>)
 80098ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80098b4:	2200      	movs	r2, #0
 80098b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3330      	adds	r3, #48	@ 0x30
 80098c2:	4619      	mov	r1, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80098d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 80098d2:	f7f9 f9bf 	bl	8002c54 <HAL_DMA_Start_IT>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d011      	beq.n	8009900 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098e2:	f043 0210 	orr.w	r2, r3, #16
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e083      	b.n	8009a08 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	689a      	ldr	r2, [r3, #8]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800990e:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009914:	2200      	movs	r2, #0
 8009916:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800991c:	2200      	movs	r2, #0
 800991e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009924:	2200      	movs	r2, #0
 8009926:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800992c:	4a3a      	ldr	r2, [pc, #232]	@ (8009a18 <HAL_SPI_TransmitReceive_DMA+0x368>)
 800992e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009938:	4619      	mov	r1, r3
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3320      	adds	r3, #32
 8009940:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009948:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800994a:	f7f9 f983 	bl	8002c54 <HAL_DMA_Start_IT>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d016      	beq.n	8009982 <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009958:	4618      	mov	r0, r3
 800995a:	f7f9 fbe5 	bl	8003128 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009964:	f043 0210 	orr.w	r2, r3, #16
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e042      	b.n	8009a08 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800998c:	d108      	bne.n	80099a0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6859      	ldr	r1, [r3, #4]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	4b20      	ldr	r3, [pc, #128]	@ (8009a1c <HAL_SPI_TransmitReceive_DMA+0x36c>)
 800999a:	400b      	ands	r3, r1
 800999c:	6053      	str	r3, [r2, #4]
 800999e:	e009      	b.n	80099b4 <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a1c <HAL_SPI_TransmitReceive_DMA+0x36c>)
 80099a8:	4013      	ands	r3, r2
 80099aa:	8879      	ldrh	r1, [r7, #2]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	6812      	ldr	r2, [r2, #0]
 80099b0:	430b      	orrs	r3, r1
 80099b2:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80099c2:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	691a      	ldr	r2, [r3, #16]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 80099d2:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f042 0201 	orr.w	r2, r2, #1
 80099e2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80099ec:	d107      	bne.n	80099fe <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80099fc:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	08009ec9 	.word	0x08009ec9
 8009a14:	08009e67 	.word	0x08009e67
 8009a18:	08009ee5 	.word	0x08009ee5
 8009a1c:	ffff0000 	.word	0xffff0000

08009a20 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08a      	sub	sp, #40	@ 0x28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009a38:	6a3a      	ldr	r2, [r7, #32]
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a52:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	3330      	adds	r3, #48	@ 0x30
 8009a5a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d010      	beq.n	8009a88 <HAL_SPI_IRQHandler+0x68>
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	f003 0308 	and.w	r3, r3, #8
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00b      	beq.n	8009a88 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699a      	ldr	r2, [r3, #24]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a7e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f9c3 	bl	8009e0c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8009a86:	e192      	b.n	8009dae <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d113      	bne.n	8009aba <HAL_SPI_IRQHandler+0x9a>
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	f003 0320 	and.w	r3, r3, #32
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10e      	bne.n	8009aba <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d009      	beq.n	8009aba <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	4798      	blx	r3
    handled = 1UL;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10f      	bne.n	8009ae4 <HAL_SPI_IRQHandler+0xc4>
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d105      	bne.n	8009ae4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	4798      	blx	r3
    handled = 1UL;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009ae4:	69bb      	ldr	r3, [r7, #24]
 8009ae6:	f003 0320 	and.w	r3, r3, #32
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10f      	bne.n	8009b0e <HAL_SPI_IRQHandler+0xee>
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	f003 0302 	and.w	r3, r3, #2
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d105      	bne.n	8009b0e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	4798      	blx	r3
    handled = 1UL;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f040 8147 	bne.w	8009da4 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8009b16:	69bb      	ldr	r3, [r7, #24]
 8009b18:	f003 0308 	and.w	r3, r3, #8
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 808b 	beq.w	8009c38 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	699a      	ldr	r2, [r3, #24]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f042 0208 	orr.w	r2, r2, #8
 8009b30:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	699a      	ldr	r2, [r3, #24]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f042 0210 	orr.w	r2, r2, #16
 8009b40:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	699a      	ldr	r2, [r3, #24]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b50:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	691a      	ldr	r2, [r3, #16]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 0208 	bic.w	r2, r2, #8
 8009b60:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d13d      	bne.n	8009bec <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009b70:	e036      	b.n	8009be0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d90b      	bls.n	8009b92 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009b84:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b8a:	1d1a      	adds	r2, r3, #4
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	665a      	str	r2, [r3, #100]	@ 0x64
 8009b90:	e01d      	b.n	8009bce <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	2b07      	cmp	r3, #7
 8009b98:	d90b      	bls.n	8009bb2 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	8812      	ldrh	r2, [r2, #0]
 8009ba2:	b292      	uxth	r2, r2
 8009ba4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009baa:	1c9a      	adds	r2, r3, #2
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	665a      	str	r2, [r3, #100]	@ 0x64
 8009bb0:	e00d      	b.n	8009bce <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bbe:	7812      	ldrb	r2, [r2, #0]
 8009bc0:	b2d2      	uxtb	r2, r2
 8009bc2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1c2      	bne.n	8009b72 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f9b7 	bl	8009f60 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d003      	beq.n	8009c0c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 f8f7 	bl	8009df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009c0a:	e0d0      	b.n	8009dae <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8009c0c:	7cfb      	ldrb	r3, [r7, #19]
 8009c0e:	2b05      	cmp	r3, #5
 8009c10:	d103      	bne.n	8009c1a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7f6 ff1c 	bl	8000a50 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8009c18:	e0c6      	b.n	8009da8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8009c1a:	7cfb      	ldrb	r3, [r7, #19]
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d103      	bne.n	8009c28 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 f8cb 	bl	8009dbc <HAL_SPI_RxCpltCallback>
    return;
 8009c26:	e0bf      	b.n	8009da8 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8009c28:	7cfb      	ldrb	r3, [r7, #19]
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	f040 80bc 	bne.w	8009da8 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7f6 fef5 	bl	8000a20 <HAL_SPI_TxCpltCallback>
    return;
 8009c36:	e0b7      	b.n	8009da8 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 80b5 	beq.w	8009dae <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00f      	beq.n	8009c6e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c54:	f043 0204 	orr.w	r2, r3, #4
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	699a      	ldr	r2, [r3, #24]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c6c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00f      	beq.n	8009c98 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c7e:	f043 0201 	orr.w	r2, r3, #1
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	699a      	ldr	r2, [r3, #24]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009c96:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00f      	beq.n	8009cc2 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ca8:	f043 0208 	orr.w	r2, r3, #8
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009cc0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	f003 0320 	and.w	r3, r3, #32
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00f      	beq.n	8009cec <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cd2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	699a      	ldr	r2, [r3, #24]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f042 0220 	orr.w	r2, r2, #32
 8009cea:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d05a      	beq.n	8009dac <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f022 0201 	bic.w	r2, r2, #1
 8009d04:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6919      	ldr	r1, [r3, #16]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	4b28      	ldr	r3, [pc, #160]	@ (8009db4 <HAL_SPI_IRQHandler+0x394>)
 8009d12:	400b      	ands	r3, r1
 8009d14:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009d1c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009d20:	d138      	bne.n	8009d94 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689a      	ldr	r2, [r3, #8]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d30:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d013      	beq.n	8009d62 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8009db8 <HAL_SPI_IRQHandler+0x398>)
 8009d40:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7f9 fd0c 	bl	8003764 <HAL_DMA_Abort_IT>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d007      	beq.n	8009d62 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d58:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d020      	beq.n	8009dac <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d6e:	4a12      	ldr	r2, [pc, #72]	@ (8009db8 <HAL_SPI_IRQHandler+0x398>)
 8009d70:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7f9 fcf4 	bl	8003764 <HAL_DMA_Abort_IT>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d014      	beq.n	8009dac <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009d92:	e00b      	b.n	8009dac <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 f82b 	bl	8009df8 <HAL_SPI_ErrorCallback>
    return;
 8009da2:	e003      	b.n	8009dac <HAL_SPI_IRQHandler+0x38c>
    return;
 8009da4:	bf00      	nop
 8009da6:	e002      	b.n	8009dae <HAL_SPI_IRQHandler+0x38e>
    return;
 8009da8:	bf00      	nop
 8009daa:	e000      	b.n	8009dae <HAL_SPI_IRQHandler+0x38e>
    return;
 8009dac:	bf00      	nop
  }
}
 8009dae:	3728      	adds	r7, #40	@ 0x28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	fffffc94 	.word	0xfffffc94
 8009db8:	08009f2b 	.word	0x08009f2b

08009dbc <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009de4:	b480      	push	{r7}
 8009de6:	b083      	sub	sp, #12
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009dec:	bf00      	nop
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009e14:	bf00      	nop
 8009e16:	370c      	adds	r7, #12
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	2b07      	cmp	r3, #7
 8009e38:	d011      	beq.n	8009e5e <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e3e:	69db      	ldr	r3, [r3, #28]
 8009e40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e44:	d103      	bne.n	8009e4e <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f7f6 fdea 	bl	8000a20 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009e4c:	e007      	b.n	8009e5e <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	691a      	ldr	r2, [r3, #16]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f042 0208 	orr.w	r2, r2, #8
 8009e5c:	611a      	str	r2, [r3, #16]
}
 8009e5e:	bf00      	nop
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}

08009e66 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e72:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b07      	cmp	r3, #7
 8009e7e:	d011      	beq.n	8009ea4 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e8a:	d103      	bne.n	8009e94 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7f6 fddf 	bl	8000a50 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009e92:	e007      	b.n	8009ea4 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691a      	ldr	r2, [r3, #16]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f042 0208 	orr.w	r2, r2, #8
 8009ea2:	611a      	str	r2, [r3, #16]
}
 8009ea4:	bf00      	nop
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb8:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f7ff ff88 	bl	8009dd0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009ec0:	bf00      	nop
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed4:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7ff ff84 	bl	8009de4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f7fa fda6 	bl	8004a44 <HAL_DMA_GetError>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d011      	beq.n	8009f22 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 f82e 	bl	8009f60 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f0a:	f043 0210 	orr.w	r2, r3, #16
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff ff6b 	bl	8009df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f36:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7ff ff51 	bl	8009df8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
	...

08009f60 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	695b      	ldr	r3, [r3, #20]
 8009f6e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	699a      	ldr	r2, [r3, #24]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f042 0208 	orr.w	r2, r2, #8
 8009f7e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	699a      	ldr	r2, [r3, #24]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f042 0210 	orr.w	r2, r2, #16
 8009f8e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f022 0201 	bic.w	r2, r2, #1
 8009f9e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6919      	ldr	r1, [r3, #16]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	4b3c      	ldr	r3, [pc, #240]	@ (800a09c <SPI_CloseTransfer+0x13c>)
 8009fac:	400b      	ands	r3, r1
 8009fae:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689a      	ldr	r2, [r3, #8]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009fbe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	d014      	beq.n	8009ff6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f003 0320 	and.w	r3, r3, #32
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00f      	beq.n	8009ff6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fdc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	699a      	ldr	r2, [r3, #24]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f042 0220 	orr.w	r2, r2, #32
 8009ff4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	2b03      	cmp	r3, #3
 800a000:	d014      	beq.n	800a02c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00f      	beq.n	800a02c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a012:	f043 0204 	orr.w	r2, r3, #4
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	699a      	ldr	r2, [r3, #24]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a02a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00f      	beq.n	800a056 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a03c:	f043 0201 	orr.w	r2, r3, #1
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	699a      	ldr	r2, [r3, #24]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a054:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00f      	beq.n	800a080 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a066:	f043 0208 	orr.w	r2, r3, #8
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	699a      	ldr	r2, [r3, #24]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a07e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a090:	bf00      	nop
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	fffffc90 	.word	0xfffffc90

0800a0a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ac:	095b      	lsrs	r3, r3, #5
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	3307      	adds	r3, #7
 800a0be:	08db      	lsrs	r3, r3, #3
 800a0c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	fb02 f303 	mul.w	r3, r2, r3
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3714      	adds	r7, #20
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e049      	b.n	800a17c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d106      	bne.n	800a102 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7f7 ff09 	bl	8001f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2202      	movs	r2, #2
 800a106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3304      	adds	r3, #4
 800a112:	4619      	mov	r1, r3
 800a114:	4610      	mov	r0, r2
 800a116:	f000 fc49 	bl	800a9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b01      	cmp	r3, #1
 800a196:	d001      	beq.n	800a19c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e054      	b.n	800a246 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68da      	ldr	r2, [r3, #12]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f042 0201 	orr.w	r2, r2, #1
 800a1b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a26      	ldr	r2, [pc, #152]	@ (800a254 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d022      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1c6:	d01d      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a22      	ldr	r2, [pc, #136]	@ (800a258 <HAL_TIM_Base_Start_IT+0xd4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d018      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a21      	ldr	r2, [pc, #132]	@ (800a25c <HAL_TIM_Base_Start_IT+0xd8>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d013      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1f      	ldr	r2, [pc, #124]	@ (800a260 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d00e      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a1e      	ldr	r2, [pc, #120]	@ (800a264 <HAL_TIM_Base_Start_IT+0xe0>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d009      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a268 <HAL_TIM_Base_Start_IT+0xe4>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d004      	beq.n	800a204 <HAL_TIM_Base_Start_IT+0x80>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a1b      	ldr	r2, [pc, #108]	@ (800a26c <HAL_TIM_Base_Start_IT+0xe8>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d115      	bne.n	800a230 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689a      	ldr	r2, [r3, #8]
 800a20a:	4b19      	ldr	r3, [pc, #100]	@ (800a270 <HAL_TIM_Base_Start_IT+0xec>)
 800a20c:	4013      	ands	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2b06      	cmp	r3, #6
 800a214:	d015      	beq.n	800a242 <HAL_TIM_Base_Start_IT+0xbe>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a21c:	d011      	beq.n	800a242 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f042 0201 	orr.w	r2, r2, #1
 800a22c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a22e:	e008      	b.n	800a242 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f042 0201 	orr.w	r2, r2, #1
 800a23e:	601a      	str	r2, [r3, #0]
 800a240:	e000      	b.n	800a244 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3714      	adds	r7, #20
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	40010000 	.word	0x40010000
 800a258:	40000400 	.word	0x40000400
 800a25c:	40000800 	.word	0x40000800
 800a260:	40000c00 	.word	0x40000c00
 800a264:	40010400 	.word	0x40010400
 800a268:	40001800 	.word	0x40001800
 800a26c:	40014000 	.word	0x40014000
 800a270:	00010007 	.word	0x00010007

0800a274 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d101      	bne.n	800a286 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	e049      	b.n	800a31a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d106      	bne.n	800a2a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f841 	bl	800a322 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	f000 fb7a 	bl	800a9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f003 0302 	and.w	r3, r3, #2
 800a354:	2b00      	cmp	r3, #0
 800a356:	d020      	beq.n	800a39a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f003 0302 	and.w	r3, r3, #2
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d01b      	beq.n	800a39a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f06f 0202 	mvn.w	r2, #2
 800a36a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2201      	movs	r2, #1
 800a370:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	f003 0303 	and.w	r3, r3, #3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 faf5 	bl	800a970 <HAL_TIM_IC_CaptureCallback>
 800a386:	e005      	b.n	800a394 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fae7 	bl	800a95c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 faf8 	bl	800a984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d020      	beq.n	800a3e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d01b      	beq.n	800a3e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f06f 0204 	mvn.w	r2, #4
 800a3b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 facf 	bl	800a970 <HAL_TIM_IC_CaptureCallback>
 800a3d2:	e005      	b.n	800a3e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fac1 	bl	800a95c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fad2 	bl	800a984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	f003 0308 	and.w	r3, r3, #8
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d020      	beq.n	800a432 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f003 0308 	and.w	r3, r3, #8
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d01b      	beq.n	800a432 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f06f 0208 	mvn.w	r2, #8
 800a402:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2204      	movs	r2, #4
 800a408:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69db      	ldr	r3, [r3, #28]
 800a410:	f003 0303 	and.w	r3, r3, #3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d003      	beq.n	800a420 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 faa9 	bl	800a970 <HAL_TIM_IC_CaptureCallback>
 800a41e:	e005      	b.n	800a42c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fa9b 	bl	800a95c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 faac 	bl	800a984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f003 0310 	and.w	r3, r3, #16
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d020      	beq.n	800a47e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f003 0310 	and.w	r3, r3, #16
 800a442:	2b00      	cmp	r3, #0
 800a444:	d01b      	beq.n	800a47e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f06f 0210 	mvn.w	r2, #16
 800a44e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2208      	movs	r2, #8
 800a454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fa83 	bl	800a970 <HAL_TIM_IC_CaptureCallback>
 800a46a:	e005      	b.n	800a478 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fa75 	bl	800a95c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fa86 	bl	800a984 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f003 0301 	and.w	r3, r3, #1
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00c      	beq.n	800a4a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d007      	beq.n	800a4a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f06f 0201 	mvn.w	r2, #1
 800a49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7f6 faef 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d104      	bne.n	800a4b6 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00c      	beq.n	800a4d0 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d007      	beq.n	800a4d0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a4c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 ff98 	bl	800b400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00c      	beq.n	800a4f4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d007      	beq.n	800a4f4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 ff90 	bl	800b414 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00c      	beq.n	800a518 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a504:	2b00      	cmp	r3, #0
 800a506:	d007      	beq.n	800a518 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fa40 	bl	800a998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f003 0320 	and.w	r3, r3, #32
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00c      	beq.n	800a53c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f003 0320 	and.w	r3, r3, #32
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d007      	beq.n	800a53c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f06f 0220 	mvn.w	r2, #32
 800a534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 ff58 	bl	800b3ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a53c:	bf00      	nop
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d101      	bne.n	800a562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a55e:	2302      	movs	r3, #2
 800a560:	e0ff      	b.n	800a762 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2b14      	cmp	r3, #20
 800a56e:	f200 80f0 	bhi.w	800a752 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a572:	a201      	add	r2, pc, #4	@ (adr r2, 800a578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a5cd 	.word	0x0800a5cd
 800a57c:	0800a753 	.word	0x0800a753
 800a580:	0800a753 	.word	0x0800a753
 800a584:	0800a753 	.word	0x0800a753
 800a588:	0800a60d 	.word	0x0800a60d
 800a58c:	0800a753 	.word	0x0800a753
 800a590:	0800a753 	.word	0x0800a753
 800a594:	0800a753 	.word	0x0800a753
 800a598:	0800a64f 	.word	0x0800a64f
 800a59c:	0800a753 	.word	0x0800a753
 800a5a0:	0800a753 	.word	0x0800a753
 800a5a4:	0800a753 	.word	0x0800a753
 800a5a8:	0800a68f 	.word	0x0800a68f
 800a5ac:	0800a753 	.word	0x0800a753
 800a5b0:	0800a753 	.word	0x0800a753
 800a5b4:	0800a753 	.word	0x0800a753
 800a5b8:	0800a6d1 	.word	0x0800a6d1
 800a5bc:	0800a753 	.word	0x0800a753
 800a5c0:	0800a753 	.word	0x0800a753
 800a5c4:	0800a753 	.word	0x0800a753
 800a5c8:	0800a711 	.word	0x0800a711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68b9      	ldr	r1, [r7, #8]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 fa8a 	bl	800aaec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	699a      	ldr	r2, [r3, #24]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0208 	orr.w	r2, r2, #8
 800a5e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	699a      	ldr	r2, [r3, #24]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 0204 	bic.w	r2, r2, #4
 800a5f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6999      	ldr	r1, [r3, #24]
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	691a      	ldr	r2, [r3, #16]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	619a      	str	r2, [r3, #24]
      break;
 800a60a:	e0a5      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	4618      	mov	r0, r3
 800a614:	f000 fafa 	bl	800ac0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	699a      	ldr	r2, [r3, #24]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6999      	ldr	r1, [r3, #24]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	021a      	lsls	r2, r3, #8
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	430a      	orrs	r2, r1
 800a64a:	619a      	str	r2, [r3, #24]
      break;
 800a64c:	e084      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68b9      	ldr	r1, [r7, #8]
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fb63 	bl	800ad20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69da      	ldr	r2, [r3, #28]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f042 0208 	orr.w	r2, r2, #8
 800a668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	69da      	ldr	r2, [r3, #28]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f022 0204 	bic.w	r2, r2, #4
 800a678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	69d9      	ldr	r1, [r3, #28]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	691a      	ldr	r2, [r3, #16]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	430a      	orrs	r2, r1
 800a68a:	61da      	str	r2, [r3, #28]
      break;
 800a68c:	e064      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fbcb 	bl	800ae30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	69da      	ldr	r2, [r3, #28]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	69da      	ldr	r2, [r3, #28]
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	69d9      	ldr	r1, [r3, #28]
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	021a      	lsls	r2, r3, #8
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	61da      	str	r2, [r3, #28]
      break;
 800a6ce:	e043      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68b9      	ldr	r1, [r7, #8]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 fc14 	bl	800af04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f042 0208 	orr.w	r2, r2, #8
 800a6ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f022 0204 	bic.w	r2, r2, #4
 800a6fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	691a      	ldr	r2, [r3, #16]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	430a      	orrs	r2, r1
 800a70c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a70e:	e023      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68b9      	ldr	r1, [r7, #8]
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fc58 	bl	800afcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a72a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a73a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	021a      	lsls	r2, r3, #8
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	430a      	orrs	r2, r1
 800a74e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a750:	e002      	b.n	800a758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	75fb      	strb	r3, [r7, #23]
      break;
 800a756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a760:	7dfb      	ldrb	r3, [r7, #23]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop

0800a76c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a780:	2b01      	cmp	r3, #1
 800a782:	d101      	bne.n	800a788 <HAL_TIM_ConfigClockSource+0x1c>
 800a784:	2302      	movs	r3, #2
 800a786:	e0dc      	b.n	800a942 <HAL_TIM_ConfigClockSource+0x1d6>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2202      	movs	r2, #2
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	4b6a      	ldr	r3, [pc, #424]	@ (800a94c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	68ba      	ldr	r2, [r7, #8]
 800a7b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a64      	ldr	r2, [pc, #400]	@ (800a950 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	f000 80a9 	beq.w	800a916 <HAL_TIM_ConfigClockSource+0x1aa>
 800a7c4:	4a62      	ldr	r2, [pc, #392]	@ (800a950 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	f200 80ae 	bhi.w	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7cc:	4a61      	ldr	r2, [pc, #388]	@ (800a954 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	f000 80a1 	beq.w	800a916 <HAL_TIM_ConfigClockSource+0x1aa>
 800a7d4:	4a5f      	ldr	r2, [pc, #380]	@ (800a954 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	f200 80a6 	bhi.w	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7dc:	4a5e      	ldr	r2, [pc, #376]	@ (800a958 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	f000 8099 	beq.w	800a916 <HAL_TIM_ConfigClockSource+0x1aa>
 800a7e4:	4a5c      	ldr	r2, [pc, #368]	@ (800a958 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	f200 809e 	bhi.w	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a7f0:	f000 8091 	beq.w	800a916 <HAL_TIM_ConfigClockSource+0x1aa>
 800a7f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a7f8:	f200 8096 	bhi.w	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a7fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a800:	f000 8089 	beq.w	800a916 <HAL_TIM_ConfigClockSource+0x1aa>
 800a804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a808:	f200 808e 	bhi.w	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a80c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a810:	d03e      	beq.n	800a890 <HAL_TIM_ConfigClockSource+0x124>
 800a812:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a816:	f200 8087 	bhi.w	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a81a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a81e:	f000 8086 	beq.w	800a92e <HAL_TIM_ConfigClockSource+0x1c2>
 800a822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a826:	d87f      	bhi.n	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a828:	2b70      	cmp	r3, #112	@ 0x70
 800a82a:	d01a      	beq.n	800a862 <HAL_TIM_ConfigClockSource+0xf6>
 800a82c:	2b70      	cmp	r3, #112	@ 0x70
 800a82e:	d87b      	bhi.n	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a830:	2b60      	cmp	r3, #96	@ 0x60
 800a832:	d050      	beq.n	800a8d6 <HAL_TIM_ConfigClockSource+0x16a>
 800a834:	2b60      	cmp	r3, #96	@ 0x60
 800a836:	d877      	bhi.n	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a838:	2b50      	cmp	r3, #80	@ 0x50
 800a83a:	d03c      	beq.n	800a8b6 <HAL_TIM_ConfigClockSource+0x14a>
 800a83c:	2b50      	cmp	r3, #80	@ 0x50
 800a83e:	d873      	bhi.n	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a840:	2b40      	cmp	r3, #64	@ 0x40
 800a842:	d058      	beq.n	800a8f6 <HAL_TIM_ConfigClockSource+0x18a>
 800a844:	2b40      	cmp	r3, #64	@ 0x40
 800a846:	d86f      	bhi.n	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a848:	2b30      	cmp	r3, #48	@ 0x30
 800a84a:	d064      	beq.n	800a916 <HAL_TIM_ConfigClockSource+0x1aa>
 800a84c:	2b30      	cmp	r3, #48	@ 0x30
 800a84e:	d86b      	bhi.n	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a850:	2b20      	cmp	r3, #32
 800a852:	d060      	beq.n	800a916 <HAL_TIM_ConfigClockSource+0x1aa>
 800a854:	2b20      	cmp	r3, #32
 800a856:	d867      	bhi.n	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d05c      	beq.n	800a916 <HAL_TIM_ConfigClockSource+0x1aa>
 800a85c:	2b10      	cmp	r3, #16
 800a85e:	d05a      	beq.n	800a916 <HAL_TIM_ConfigClockSource+0x1aa>
 800a860:	e062      	b.n	800a928 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a872:	f000 fc8f 	bl	800b194 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a884:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	609a      	str	r2, [r3, #8]
      break;
 800a88e:	e04f      	b.n	800a930 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8a0:	f000 fc78 	bl	800b194 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	689a      	ldr	r2, [r3, #8]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8b2:	609a      	str	r2, [r3, #8]
      break;
 800a8b4:	e03c      	b.n	800a930 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	f000 fbe8 	bl	800b098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2150      	movs	r1, #80	@ 0x50
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 fc42 	bl	800b158 <TIM_ITRx_SetConfig>
      break;
 800a8d4:	e02c      	b.n	800a930 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f000 fc07 	bl	800b0f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2160      	movs	r1, #96	@ 0x60
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 fc32 	bl	800b158 <TIM_ITRx_SetConfig>
      break;
 800a8f4:	e01c      	b.n	800a930 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a902:	461a      	mov	r2, r3
 800a904:	f000 fbc8 	bl	800b098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	2140      	movs	r1, #64	@ 0x40
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 fc22 	bl	800b158 <TIM_ITRx_SetConfig>
      break;
 800a914:	e00c      	b.n	800a930 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4619      	mov	r1, r3
 800a920:	4610      	mov	r0, r2
 800a922:	f000 fc19 	bl	800b158 <TIM_ITRx_SetConfig>
      break;
 800a926:	e003      	b.n	800a930 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	73fb      	strb	r3, [r7, #15]
      break;
 800a92c:	e000      	b.n	800a930 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a92e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a940:	7bfb      	ldrb	r3, [r7, #15]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	ffceff88 	.word	0xffceff88
 800a950:	00100040 	.word	0x00100040
 800a954:	00100030 	.word	0x00100030
 800a958:	00100020 	.word	0x00100020

0800a95c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a43      	ldr	r2, [pc, #268]	@ (800aacc <TIM_Base_SetConfig+0x120>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d013      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ca:	d00f      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a40      	ldr	r2, [pc, #256]	@ (800aad0 <TIM_Base_SetConfig+0x124>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d00b      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a3f      	ldr	r2, [pc, #252]	@ (800aad4 <TIM_Base_SetConfig+0x128>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d007      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a3e      	ldr	r2, [pc, #248]	@ (800aad8 <TIM_Base_SetConfig+0x12c>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d003      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a3d      	ldr	r2, [pc, #244]	@ (800aadc <TIM_Base_SetConfig+0x130>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d108      	bne.n	800a9fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a32      	ldr	r2, [pc, #200]	@ (800aacc <TIM_Base_SetConfig+0x120>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d01f      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa0c:	d01b      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a2f      	ldr	r2, [pc, #188]	@ (800aad0 <TIM_Base_SetConfig+0x124>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d017      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a2e      	ldr	r2, [pc, #184]	@ (800aad4 <TIM_Base_SetConfig+0x128>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d013      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a2d      	ldr	r2, [pc, #180]	@ (800aad8 <TIM_Base_SetConfig+0x12c>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d00f      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a2c      	ldr	r2, [pc, #176]	@ (800aadc <TIM_Base_SetConfig+0x130>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00b      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a2b      	ldr	r2, [pc, #172]	@ (800aae0 <TIM_Base_SetConfig+0x134>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d007      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a2a      	ldr	r2, [pc, #168]	@ (800aae4 <TIM_Base_SetConfig+0x138>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d003      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a29      	ldr	r2, [pc, #164]	@ (800aae8 <TIM_Base_SetConfig+0x13c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d108      	bne.n	800aa58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	689a      	ldr	r2, [r3, #8]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a14      	ldr	r2, [pc, #80]	@ (800aacc <TIM_Base_SetConfig+0x120>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d00f      	beq.n	800aa9e <TIM_Base_SetConfig+0xf2>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a16      	ldr	r2, [pc, #88]	@ (800aadc <TIM_Base_SetConfig+0x130>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d00b      	beq.n	800aa9e <TIM_Base_SetConfig+0xf2>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4a15      	ldr	r2, [pc, #84]	@ (800aae0 <TIM_Base_SetConfig+0x134>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d007      	beq.n	800aa9e <TIM_Base_SetConfig+0xf2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a14      	ldr	r2, [pc, #80]	@ (800aae4 <TIM_Base_SetConfig+0x138>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d003      	beq.n	800aa9e <TIM_Base_SetConfig+0xf2>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a13      	ldr	r2, [pc, #76]	@ (800aae8 <TIM_Base_SetConfig+0x13c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d103      	bne.n	800aaa6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	691a      	ldr	r2, [r3, #16]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f043 0204 	orr.w	r2, r3, #4
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	601a      	str	r2, [r3, #0]
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	40010000 	.word	0x40010000
 800aad0:	40000400 	.word	0x40000400
 800aad4:	40000800 	.word	0x40000800
 800aad8:	40000c00 	.word	0x40000c00
 800aadc:	40010400 	.word	0x40010400
 800aae0:	40014000 	.word	0x40014000
 800aae4:	40014400 	.word	0x40014400
 800aae8:	40014800 	.word	0x40014800

0800aaec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	f023 0201 	bic.w	r2, r3, #1
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	4b37      	ldr	r3, [pc, #220]	@ (800abf4 <TIM_OC1_SetConfig+0x108>)
 800ab18:	4013      	ands	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f023 0303 	bic.w	r3, r3, #3
 800ab22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f023 0302 	bic.w	r3, r3, #2
 800ab34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	697a      	ldr	r2, [r7, #20]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	4a2d      	ldr	r2, [pc, #180]	@ (800abf8 <TIM_OC1_SetConfig+0x10c>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d00f      	beq.n	800ab68 <TIM_OC1_SetConfig+0x7c>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a2c      	ldr	r2, [pc, #176]	@ (800abfc <TIM_OC1_SetConfig+0x110>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d00b      	beq.n	800ab68 <TIM_OC1_SetConfig+0x7c>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a2b      	ldr	r2, [pc, #172]	@ (800ac00 <TIM_OC1_SetConfig+0x114>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d007      	beq.n	800ab68 <TIM_OC1_SetConfig+0x7c>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a2a      	ldr	r2, [pc, #168]	@ (800ac04 <TIM_OC1_SetConfig+0x118>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d003      	beq.n	800ab68 <TIM_OC1_SetConfig+0x7c>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a29      	ldr	r2, [pc, #164]	@ (800ac08 <TIM_OC1_SetConfig+0x11c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d10c      	bne.n	800ab82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f023 0308 	bic.w	r3, r3, #8
 800ab6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f023 0304 	bic.w	r3, r3, #4
 800ab80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a1c      	ldr	r2, [pc, #112]	@ (800abf8 <TIM_OC1_SetConfig+0x10c>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d00f      	beq.n	800abaa <TIM_OC1_SetConfig+0xbe>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a1b      	ldr	r2, [pc, #108]	@ (800abfc <TIM_OC1_SetConfig+0x110>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00b      	beq.n	800abaa <TIM_OC1_SetConfig+0xbe>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a1a      	ldr	r2, [pc, #104]	@ (800ac00 <TIM_OC1_SetConfig+0x114>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d007      	beq.n	800abaa <TIM_OC1_SetConfig+0xbe>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a19      	ldr	r2, [pc, #100]	@ (800ac04 <TIM_OC1_SetConfig+0x118>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d003      	beq.n	800abaa <TIM_OC1_SetConfig+0xbe>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a18      	ldr	r2, [pc, #96]	@ (800ac08 <TIM_OC1_SetConfig+0x11c>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d111      	bne.n	800abce <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800abb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800abb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	4313      	orrs	r3, r2
 800abc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685a      	ldr	r2, [r3, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	621a      	str	r2, [r3, #32]
}
 800abe8:	bf00      	nop
 800abea:	371c      	adds	r7, #28
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	fffeff8f 	.word	0xfffeff8f
 800abf8:	40010000 	.word	0x40010000
 800abfc:	40010400 	.word	0x40010400
 800ac00:	40014000 	.word	0x40014000
 800ac04:	40014400 	.word	0x40014400
 800ac08:	40014800 	.word	0x40014800

0800ac0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b087      	sub	sp, #28
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	f023 0210 	bic.w	r2, r3, #16
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	4b34      	ldr	r3, [pc, #208]	@ (800ad08 <TIM_OC2_SetConfig+0xfc>)
 800ac38:	4013      	ands	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	021b      	lsls	r3, r3, #8
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	f023 0320 	bic.w	r3, r3, #32
 800ac56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	011b      	lsls	r3, r3, #4
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a29      	ldr	r2, [pc, #164]	@ (800ad0c <TIM_OC2_SetConfig+0x100>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d003      	beq.n	800ac74 <TIM_OC2_SetConfig+0x68>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a28      	ldr	r2, [pc, #160]	@ (800ad10 <TIM_OC2_SetConfig+0x104>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d10d      	bne.n	800ac90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	011b      	lsls	r3, r3, #4
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a1e      	ldr	r2, [pc, #120]	@ (800ad0c <TIM_OC2_SetConfig+0x100>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d00f      	beq.n	800acb8 <TIM_OC2_SetConfig+0xac>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	4a1d      	ldr	r2, [pc, #116]	@ (800ad10 <TIM_OC2_SetConfig+0x104>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d00b      	beq.n	800acb8 <TIM_OC2_SetConfig+0xac>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a1c      	ldr	r2, [pc, #112]	@ (800ad14 <TIM_OC2_SetConfig+0x108>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d007      	beq.n	800acb8 <TIM_OC2_SetConfig+0xac>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a1b      	ldr	r2, [pc, #108]	@ (800ad18 <TIM_OC2_SetConfig+0x10c>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d003      	beq.n	800acb8 <TIM_OC2_SetConfig+0xac>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a1a      	ldr	r2, [pc, #104]	@ (800ad1c <TIM_OC2_SetConfig+0x110>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d113      	bne.n	800ace0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800acbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800acc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	693a      	ldr	r2, [r7, #16]
 800acd0:	4313      	orrs	r3, r2
 800acd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	4313      	orrs	r3, r2
 800acde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685a      	ldr	r2, [r3, #4]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	621a      	str	r2, [r3, #32]
}
 800acfa:	bf00      	nop
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	feff8fff 	.word	0xfeff8fff
 800ad0c:	40010000 	.word	0x40010000
 800ad10:	40010400 	.word	0x40010400
 800ad14:	40014000 	.word	0x40014000
 800ad18:	40014400 	.word	0x40014400
 800ad1c:	40014800 	.word	0x40014800

0800ad20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b087      	sub	sp, #28
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	69db      	ldr	r3, [r3, #28]
 800ad46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad48:	68fa      	ldr	r2, [r7, #12]
 800ad4a:	4b33      	ldr	r3, [pc, #204]	@ (800ae18 <TIM_OC3_SetConfig+0xf8>)
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ad68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	021b      	lsls	r3, r3, #8
 800ad70:	697a      	ldr	r2, [r7, #20]
 800ad72:	4313      	orrs	r3, r2
 800ad74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a28      	ldr	r2, [pc, #160]	@ (800ae1c <TIM_OC3_SetConfig+0xfc>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d003      	beq.n	800ad86 <TIM_OC3_SetConfig+0x66>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a27      	ldr	r2, [pc, #156]	@ (800ae20 <TIM_OC3_SetConfig+0x100>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d10d      	bne.n	800ada2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ad8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	021b      	lsls	r3, r3, #8
 800ad94:	697a      	ldr	r2, [r7, #20]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ada0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae1c <TIM_OC3_SetConfig+0xfc>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d00f      	beq.n	800adca <TIM_OC3_SetConfig+0xaa>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a1c      	ldr	r2, [pc, #112]	@ (800ae20 <TIM_OC3_SetConfig+0x100>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d00b      	beq.n	800adca <TIM_OC3_SetConfig+0xaa>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae24 <TIM_OC3_SetConfig+0x104>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d007      	beq.n	800adca <TIM_OC3_SetConfig+0xaa>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a1a      	ldr	r2, [pc, #104]	@ (800ae28 <TIM_OC3_SetConfig+0x108>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d003      	beq.n	800adca <TIM_OC3_SetConfig+0xaa>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4a19      	ldr	r2, [pc, #100]	@ (800ae2c <TIM_OC3_SetConfig+0x10c>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d113      	bne.n	800adf2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800add0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800add8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	695b      	ldr	r3, [r3, #20]
 800adde:	011b      	lsls	r3, r3, #4
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	4313      	orrs	r3, r2
 800ade4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	4313      	orrs	r3, r2
 800adf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	685a      	ldr	r2, [r3, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	697a      	ldr	r2, [r7, #20]
 800ae0a:	621a      	str	r2, [r3, #32]
}
 800ae0c:	bf00      	nop
 800ae0e:	371c      	adds	r7, #28
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr
 800ae18:	fffeff8f 	.word	0xfffeff8f
 800ae1c:	40010000 	.word	0x40010000
 800ae20:	40010400 	.word	0x40010400
 800ae24:	40014000 	.word	0x40014000
 800ae28:	40014400 	.word	0x40014400
 800ae2c:	40014800 	.word	0x40014800

0800ae30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b087      	sub	sp, #28
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a1b      	ldr	r3, [r3, #32]
 800ae3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a1b      	ldr	r3, [r3, #32]
 800ae44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ae58:	68fa      	ldr	r2, [r7, #12]
 800ae5a:	4b24      	ldr	r3, [pc, #144]	@ (800aeec <TIM_OC4_SetConfig+0xbc>)
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ae66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	68fa      	ldr	r2, [r7, #12]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ae7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	031b      	lsls	r3, r3, #12
 800ae82:	693a      	ldr	r2, [r7, #16]
 800ae84:	4313      	orrs	r3, r2
 800ae86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a19      	ldr	r2, [pc, #100]	@ (800aef0 <TIM_OC4_SetConfig+0xc0>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d00f      	beq.n	800aeb0 <TIM_OC4_SetConfig+0x80>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a18      	ldr	r2, [pc, #96]	@ (800aef4 <TIM_OC4_SetConfig+0xc4>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d00b      	beq.n	800aeb0 <TIM_OC4_SetConfig+0x80>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4a17      	ldr	r2, [pc, #92]	@ (800aef8 <TIM_OC4_SetConfig+0xc8>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d007      	beq.n	800aeb0 <TIM_OC4_SetConfig+0x80>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4a16      	ldr	r2, [pc, #88]	@ (800aefc <TIM_OC4_SetConfig+0xcc>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d003      	beq.n	800aeb0 <TIM_OC4_SetConfig+0x80>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a15      	ldr	r2, [pc, #84]	@ (800af00 <TIM_OC4_SetConfig+0xd0>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d109      	bne.n	800aec4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aeb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	019b      	lsls	r3, r3, #6
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	4313      	orrs	r3, r2
 800aec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	621a      	str	r2, [r3, #32]
}
 800aede:	bf00      	nop
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	feff8fff 	.word	0xfeff8fff
 800aef0:	40010000 	.word	0x40010000
 800aef4:	40010400 	.word	0x40010400
 800aef8:	40014000 	.word	0x40014000
 800aefc:	40014400 	.word	0x40014400
 800af00:	40014800 	.word	0x40014800

0800af04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800af04:	b480      	push	{r7}
 800af06:	b087      	sub	sp, #28
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a1b      	ldr	r3, [r3, #32]
 800af18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	685b      	ldr	r3, [r3, #4]
 800af24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	4b21      	ldr	r3, [pc, #132]	@ (800afb4 <TIM_OC5_SetConfig+0xb0>)
 800af30:	4013      	ands	r3, r2
 800af32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800af44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	041b      	lsls	r3, r3, #16
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	4313      	orrs	r3, r2
 800af50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4a18      	ldr	r2, [pc, #96]	@ (800afb8 <TIM_OC5_SetConfig+0xb4>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d00f      	beq.n	800af7a <TIM_OC5_SetConfig+0x76>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a17      	ldr	r2, [pc, #92]	@ (800afbc <TIM_OC5_SetConfig+0xb8>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d00b      	beq.n	800af7a <TIM_OC5_SetConfig+0x76>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4a16      	ldr	r2, [pc, #88]	@ (800afc0 <TIM_OC5_SetConfig+0xbc>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d007      	beq.n	800af7a <TIM_OC5_SetConfig+0x76>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a15      	ldr	r2, [pc, #84]	@ (800afc4 <TIM_OC5_SetConfig+0xc0>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d003      	beq.n	800af7a <TIM_OC5_SetConfig+0x76>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a14      	ldr	r2, [pc, #80]	@ (800afc8 <TIM_OC5_SetConfig+0xc4>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d109      	bne.n	800af8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	695b      	ldr	r3, [r3, #20]
 800af86:	021b      	lsls	r3, r3, #8
 800af88:	697a      	ldr	r2, [r7, #20]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685a      	ldr	r2, [r3, #4]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	621a      	str	r2, [r3, #32]
}
 800afa8:	bf00      	nop
 800afaa:	371c      	adds	r7, #28
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	fffeff8f 	.word	0xfffeff8f
 800afb8:	40010000 	.word	0x40010000
 800afbc:	40010400 	.word	0x40010400
 800afc0:	40014000 	.word	0x40014000
 800afc4:	40014400 	.word	0x40014400
 800afc8:	40014800 	.word	0x40014800

0800afcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4b22      	ldr	r3, [pc, #136]	@ (800b080 <TIM_OC6_SetConfig+0xb4>)
 800aff8:	4013      	ands	r3, r2
 800affa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	021b      	lsls	r3, r3, #8
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b00e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	051b      	lsls	r3, r3, #20
 800b016:	693a      	ldr	r2, [r7, #16]
 800b018:	4313      	orrs	r3, r2
 800b01a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a19      	ldr	r2, [pc, #100]	@ (800b084 <TIM_OC6_SetConfig+0xb8>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d00f      	beq.n	800b044 <TIM_OC6_SetConfig+0x78>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a18      	ldr	r2, [pc, #96]	@ (800b088 <TIM_OC6_SetConfig+0xbc>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d00b      	beq.n	800b044 <TIM_OC6_SetConfig+0x78>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a17      	ldr	r2, [pc, #92]	@ (800b08c <TIM_OC6_SetConfig+0xc0>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d007      	beq.n	800b044 <TIM_OC6_SetConfig+0x78>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	4a16      	ldr	r2, [pc, #88]	@ (800b090 <TIM_OC6_SetConfig+0xc4>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d003      	beq.n	800b044 <TIM_OC6_SetConfig+0x78>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4a15      	ldr	r2, [pc, #84]	@ (800b094 <TIM_OC6_SetConfig+0xc8>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d109      	bne.n	800b058 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b04a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	695b      	ldr	r3, [r3, #20]
 800b050:	029b      	lsls	r3, r3, #10
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	4313      	orrs	r3, r2
 800b056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	697a      	ldr	r2, [r7, #20]
 800b05c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68fa      	ldr	r2, [r7, #12]
 800b062:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	685a      	ldr	r2, [r3, #4]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	621a      	str	r2, [r3, #32]
}
 800b072:	bf00      	nop
 800b074:	371c      	adds	r7, #28
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr
 800b07e:	bf00      	nop
 800b080:	feff8fff 	.word	0xfeff8fff
 800b084:	40010000 	.word	0x40010000
 800b088:	40010400 	.word	0x40010400
 800b08c:	40014000 	.word	0x40014000
 800b090:	40014400 	.word	0x40014400
 800b094:	40014800 	.word	0x40014800

0800b098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b098:	b480      	push	{r7}
 800b09a:	b087      	sub	sp, #28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	f023 0201 	bic.w	r2, r3, #1
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b0c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f023 030a 	bic.w	r3, r3, #10
 800b0d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0d6:	697a      	ldr	r2, [r7, #20]
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	621a      	str	r2, [r3, #32]
}
 800b0ea:	bf00      	nop
 800b0ec:	371c      	adds	r7, #28
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b087      	sub	sp, #28
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	60f8      	str	r0, [r7, #12]
 800b0fe:	60b9      	str	r1, [r7, #8]
 800b100:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	f023 0210 	bic.w	r2, r3, #16
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	031b      	lsls	r3, r3, #12
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b132:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	011b      	lsls	r3, r3, #4
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	621a      	str	r2, [r3, #32]
}
 800b14a:	bf00      	nop
 800b14c:	371c      	adds	r7, #28
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
	...

0800b158 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	4b09      	ldr	r3, [pc, #36]	@ (800b190 <TIM_ITRx_SetConfig+0x38>)
 800b16c:	4013      	ands	r3, r2
 800b16e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	f043 0307 	orr.w	r3, r3, #7
 800b17a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	609a      	str	r2, [r3, #8]
}
 800b182:	bf00      	nop
 800b184:	3714      	adds	r7, #20
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr
 800b18e:	bf00      	nop
 800b190:	ffcfff8f 	.word	0xffcfff8f

0800b194 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b194:	b480      	push	{r7}
 800b196:	b087      	sub	sp, #28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b1ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	021a      	lsls	r2, r3, #8
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	609a      	str	r2, [r3, #8]
}
 800b1c8:	bf00      	nop
 800b1ca:	371c      	adds	r7, #28
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b085      	sub	sp, #20
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d101      	bne.n	800b1ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	e06d      	b.n	800b2c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2202      	movs	r2, #2
 800b1f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a30      	ldr	r2, [pc, #192]	@ (800b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d004      	beq.n	800b220 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a2f      	ldr	r2, [pc, #188]	@ (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d108      	bne.n	800b232 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b226:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	4313      	orrs	r3, r2
 800b230:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b238:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	68fa      	ldr	r2, [r7, #12]
 800b240:	4313      	orrs	r3, r2
 800b242:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a20      	ldr	r2, [pc, #128]	@ (800b2d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d022      	beq.n	800b29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b25e:	d01d      	beq.n	800b29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a1d      	ldr	r2, [pc, #116]	@ (800b2dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d018      	beq.n	800b29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a1c      	ldr	r2, [pc, #112]	@ (800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d013      	beq.n	800b29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a1a      	ldr	r2, [pc, #104]	@ (800b2e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00e      	beq.n	800b29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a15      	ldr	r2, [pc, #84]	@ (800b2d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d009      	beq.n	800b29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a16      	ldr	r2, [pc, #88]	@ (800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d004      	beq.n	800b29c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a15      	ldr	r2, [pc, #84]	@ (800b2ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d10c      	bne.n	800b2b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr
 800b2d4:	40010000 	.word	0x40010000
 800b2d8:	40010400 	.word	0x40010400
 800b2dc:	40000400 	.word	0x40000400
 800b2e0:	40000800 	.word	0x40000800
 800b2e4:	40000c00 	.word	0x40000c00
 800b2e8:	40001800 	.word	0x40001800
 800b2ec:	40014000 	.word	0x40014000

0800b2f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b085      	sub	sp, #20
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b304:	2b01      	cmp	r3, #1
 800b306:	d101      	bne.n	800b30c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b308:	2302      	movs	r3, #2
 800b30a:	e065      	b.n	800b3d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	4313      	orrs	r3, r2
 800b320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4313      	orrs	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	695b      	ldr	r3, [r3, #20]
 800b364:	4313      	orrs	r3, r2
 800b366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	041b      	lsls	r3, r3, #16
 800b382:	4313      	orrs	r3, r2
 800b384:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a16      	ldr	r2, [pc, #88]	@ (800b3e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d004      	beq.n	800b39a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a14      	ldr	r2, [pc, #80]	@ (800b3e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d115      	bne.n	800b3c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a4:	051b      	lsls	r3, r3, #20
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	40010000 	.word	0x40010000
 800b3e8:	40010400 	.word	0x40010400

0800b3ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b428:	b084      	sub	sp, #16
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	f107 001c 	add.w	r0, r7, #28
 800b436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b43a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d121      	bne.n	800b486 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b446:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68da      	ldr	r2, [r3, #12]
 800b452:	4b2c      	ldr	r3, [pc, #176]	@ (800b504 <USB_CoreInit+0xdc>)
 800b454:	4013      	ands	r3, r2
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b466:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d105      	bne.n	800b47a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f001 fafa 	bl	800ca74 <USB_CoreReset>
 800b480:	4603      	mov	r3, r0
 800b482:	73fb      	strb	r3, [r7, #15]
 800b484:	e01b      	b.n	800b4be <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f001 faee 	bl	800ca74 <USB_CoreReset>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b49c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	639a      	str	r2, [r3, #56]	@ 0x38
 800b4b0:	e005      	b.n	800b4be <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b4be:	7fbb      	ldrb	r3, [r7, #30]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d116      	bne.n	800b4f2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b508 <USB_CoreInit+0xe0>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f043 0206 	orr.w	r2, r3, #6
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f043 0220 	orr.w	r2, r3, #32
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4fe:	b004      	add	sp, #16
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	ffbdffbf 	.word	0xffbdffbf
 800b508:	03ee0000 	.word	0x03ee0000

0800b50c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	4613      	mov	r3, r2
 800b518:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b51a:	79fb      	ldrb	r3, [r7, #7]
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d165      	bne.n	800b5ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	4a41      	ldr	r2, [pc, #260]	@ (800b628 <USB_SetTurnaroundTime+0x11c>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d906      	bls.n	800b536 <USB_SetTurnaroundTime+0x2a>
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	4a40      	ldr	r2, [pc, #256]	@ (800b62c <USB_SetTurnaroundTime+0x120>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d202      	bcs.n	800b536 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b530:	230f      	movs	r3, #15
 800b532:	617b      	str	r3, [r7, #20]
 800b534:	e062      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	4a3c      	ldr	r2, [pc, #240]	@ (800b62c <USB_SetTurnaroundTime+0x120>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d306      	bcc.n	800b54c <USB_SetTurnaroundTime+0x40>
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	4a3b      	ldr	r2, [pc, #236]	@ (800b630 <USB_SetTurnaroundTime+0x124>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d202      	bcs.n	800b54c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b546:	230e      	movs	r3, #14
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	e057      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	4a38      	ldr	r2, [pc, #224]	@ (800b630 <USB_SetTurnaroundTime+0x124>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d306      	bcc.n	800b562 <USB_SetTurnaroundTime+0x56>
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	4a37      	ldr	r2, [pc, #220]	@ (800b634 <USB_SetTurnaroundTime+0x128>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d202      	bcs.n	800b562 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b55c:	230d      	movs	r3, #13
 800b55e:	617b      	str	r3, [r7, #20]
 800b560:	e04c      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	4a33      	ldr	r2, [pc, #204]	@ (800b634 <USB_SetTurnaroundTime+0x128>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d306      	bcc.n	800b578 <USB_SetTurnaroundTime+0x6c>
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	4a32      	ldr	r2, [pc, #200]	@ (800b638 <USB_SetTurnaroundTime+0x12c>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d802      	bhi.n	800b578 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b572:	230c      	movs	r3, #12
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	e041      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	4a2f      	ldr	r2, [pc, #188]	@ (800b638 <USB_SetTurnaroundTime+0x12c>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d906      	bls.n	800b58e <USB_SetTurnaroundTime+0x82>
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4a2e      	ldr	r2, [pc, #184]	@ (800b63c <USB_SetTurnaroundTime+0x130>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d802      	bhi.n	800b58e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b588:	230b      	movs	r3, #11
 800b58a:	617b      	str	r3, [r7, #20]
 800b58c:	e036      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	4a2a      	ldr	r2, [pc, #168]	@ (800b63c <USB_SetTurnaroundTime+0x130>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d906      	bls.n	800b5a4 <USB_SetTurnaroundTime+0x98>
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4a29      	ldr	r2, [pc, #164]	@ (800b640 <USB_SetTurnaroundTime+0x134>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d802      	bhi.n	800b5a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b59e:	230a      	movs	r3, #10
 800b5a0:	617b      	str	r3, [r7, #20]
 800b5a2:	e02b      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	4a26      	ldr	r2, [pc, #152]	@ (800b640 <USB_SetTurnaroundTime+0x134>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d906      	bls.n	800b5ba <USB_SetTurnaroundTime+0xae>
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	4a25      	ldr	r2, [pc, #148]	@ (800b644 <USB_SetTurnaroundTime+0x138>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d202      	bcs.n	800b5ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b5b4:	2309      	movs	r3, #9
 800b5b6:	617b      	str	r3, [r7, #20]
 800b5b8:	e020      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	4a21      	ldr	r2, [pc, #132]	@ (800b644 <USB_SetTurnaroundTime+0x138>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d306      	bcc.n	800b5d0 <USB_SetTurnaroundTime+0xc4>
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	4a20      	ldr	r2, [pc, #128]	@ (800b648 <USB_SetTurnaroundTime+0x13c>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d802      	bhi.n	800b5d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b5ca:	2308      	movs	r3, #8
 800b5cc:	617b      	str	r3, [r7, #20]
 800b5ce:	e015      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	4a1d      	ldr	r2, [pc, #116]	@ (800b648 <USB_SetTurnaroundTime+0x13c>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d906      	bls.n	800b5e6 <USB_SetTurnaroundTime+0xda>
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	4a1c      	ldr	r2, [pc, #112]	@ (800b64c <USB_SetTurnaroundTime+0x140>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d202      	bcs.n	800b5e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b5e0:	2307      	movs	r3, #7
 800b5e2:	617b      	str	r3, [r7, #20]
 800b5e4:	e00a      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b5e6:	2306      	movs	r3, #6
 800b5e8:	617b      	str	r3, [r7, #20]
 800b5ea:	e007      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b5ec:	79fb      	ldrb	r3, [r7, #7]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d102      	bne.n	800b5f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b5f2:	2309      	movs	r3, #9
 800b5f4:	617b      	str	r3, [r7, #20]
 800b5f6:	e001      	b.n	800b5fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b5f8:	2309      	movs	r3, #9
 800b5fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	68da      	ldr	r2, [r3, #12]
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	029b      	lsls	r3, r3, #10
 800b610:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b614:	431a      	orrs	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b61a:	2300      	movs	r3, #0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	371c      	adds	r7, #28
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	00d8acbf 	.word	0x00d8acbf
 800b62c:	00e4e1c0 	.word	0x00e4e1c0
 800b630:	00f42400 	.word	0x00f42400
 800b634:	01067380 	.word	0x01067380
 800b638:	011a499f 	.word	0x011a499f
 800b63c:	01312cff 	.word	0x01312cff
 800b640:	014ca43f 	.word	0x014ca43f
 800b644:	016e3600 	.word	0x016e3600
 800b648:	01a6ab1f 	.word	0x01a6ab1f
 800b64c:	01e84800 	.word	0x01e84800

0800b650 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	f043 0201 	orr.w	r2, r3, #1
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b672:	b480      	push	{r7}
 800b674:	b083      	sub	sp, #12
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	f023 0201 	bic.w	r2, r3, #1
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	460b      	mov	r3, r1
 800b69e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b6b0:	78fb      	ldrb	r3, [r7, #3]
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d115      	bne.n	800b6e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	68db      	ldr	r3, [r3, #12]
 800b6ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b6c2:	200a      	movs	r0, #10
 800b6c4:	f7f6 fe2a 	bl	800231c <HAL_Delay>
      ms += 10U;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	330a      	adds	r3, #10
 800b6cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f001 f93f 	bl	800c952 <USB_GetMode>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d01e      	beq.n	800b718 <USB_SetCurrentMode+0x84>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2bc7      	cmp	r3, #199	@ 0xc7
 800b6de:	d9f0      	bls.n	800b6c2 <USB_SetCurrentMode+0x2e>
 800b6e0:	e01a      	b.n	800b718 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6e2:	78fb      	ldrb	r3, [r7, #3]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d115      	bne.n	800b714 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b6f4:	200a      	movs	r0, #10
 800b6f6:	f7f6 fe11 	bl	800231c <HAL_Delay>
      ms += 10U;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	330a      	adds	r3, #10
 800b6fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f001 f926 	bl	800c952 <USB_GetMode>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d005      	beq.n	800b718 <USB_SetCurrentMode+0x84>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2bc7      	cmp	r3, #199	@ 0xc7
 800b710:	d9f0      	bls.n	800b6f4 <USB_SetCurrentMode+0x60>
 800b712:	e001      	b.n	800b718 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	e005      	b.n	800b724 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2bc8      	cmp	r3, #200	@ 0xc8
 800b71c:	d101      	bne.n	800b722 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e000      	b.n	800b724 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b72c:	b084      	sub	sp, #16
 800b72e:	b580      	push	{r7, lr}
 800b730:	b086      	sub	sp, #24
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
 800b736:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b73a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b746:	2300      	movs	r3, #0
 800b748:	613b      	str	r3, [r7, #16]
 800b74a:	e009      	b.n	800b760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	3340      	adds	r3, #64	@ 0x40
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4413      	add	r3, r2
 800b756:	2200      	movs	r2, #0
 800b758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	3301      	adds	r3, #1
 800b75e:	613b      	str	r3, [r7, #16]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	2b0e      	cmp	r3, #14
 800b764:	d9f2      	bls.n	800b74c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b766:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d11c      	bne.n	800b7a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b77c:	f043 0302 	orr.w	r3, r3, #2
 800b780:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b786:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	e005      	b.n	800b7b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	2300      	movs	r3, #0
 800b7be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d10d      	bne.n	800b7e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d104      	bne.n	800b7da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f968 	bl	800baa8 <USB_SetDevSpeed>
 800b7d8:	e008      	b.n	800b7ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b7da:	2101      	movs	r1, #1
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f963 	bl	800baa8 <USB_SetDevSpeed>
 800b7e2:	e003      	b.n	800b7ec <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b7e4:	2103      	movs	r1, #3
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f95e 	bl	800baa8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b7ec:	2110      	movs	r1, #16
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f000 f8fa 	bl	800b9e8 <USB_FlushTxFifo>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d001      	beq.n	800b7fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f924 	bl	800ba4c <USB_FlushRxFifo>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b814:	461a      	mov	r2, r3
 800b816:	2300      	movs	r3, #0
 800b818:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b820:	461a      	mov	r2, r3
 800b822:	2300      	movs	r3, #0
 800b824:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b82c:	461a      	mov	r2, r3
 800b82e:	2300      	movs	r3, #0
 800b830:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b832:	2300      	movs	r3, #0
 800b834:	613b      	str	r3, [r7, #16]
 800b836:	e043      	b.n	800b8c0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b84a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b84e:	d118      	bne.n	800b882 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10a      	bne.n	800b86c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b862:	461a      	mov	r2, r3
 800b864:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b868:	6013      	str	r3, [r2, #0]
 800b86a:	e013      	b.n	800b894 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	015a      	lsls	r2, r3, #5
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	4413      	add	r3, r2
 800b874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b878:	461a      	mov	r2, r3
 800b87a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b87e:	6013      	str	r3, [r2, #0]
 800b880:	e008      	b.n	800b894 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	015a      	lsls	r2, r3, #5
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	4413      	add	r3, r2
 800b88a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b88e:	461a      	mov	r2, r3
 800b890:	2300      	movs	r3, #0
 800b892:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	015a      	lsls	r2, r3, #5
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b8b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	613b      	str	r3, [r7, #16]
 800b8c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d3b5      	bcc.n	800b838 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	613b      	str	r3, [r7, #16]
 800b8d0:	e043      	b.n	800b95a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8e8:	d118      	bne.n	800b91c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10a      	bne.n	800b906 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	015a      	lsls	r2, r3, #5
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b902:	6013      	str	r3, [r2, #0]
 800b904:	e013      	b.n	800b92e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	015a      	lsls	r2, r3, #5
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	4413      	add	r3, r2
 800b90e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b912:	461a      	mov	r2, r3
 800b914:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	e008      	b.n	800b92e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	015a      	lsls	r2, r3, #5
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4413      	add	r3, r2
 800b924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b928:	461a      	mov	r2, r3
 800b92a:	2300      	movs	r3, #0
 800b92c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	4413      	add	r3, r2
 800b936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b93a:	461a      	mov	r2, r3
 800b93c:	2300      	movs	r3, #0
 800b93e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b94c:	461a      	mov	r2, r3
 800b94e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	3301      	adds	r3, #1
 800b958:	613b      	str	r3, [r7, #16]
 800b95a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b95e:	461a      	mov	r2, r3
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	4293      	cmp	r3, r2
 800b964:	d3b5      	bcc.n	800b8d2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b978:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b986:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d105      	bne.n	800b99c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	f043 0210 	orr.w	r2, r3, #16
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	699a      	ldr	r2, [r3, #24]
 800b9a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e0 <USB_DevInit+0x2b4>)
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b9a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d005      	beq.n	800b9bc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	f043 0208 	orr.w	r2, r3, #8
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b9bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d105      	bne.n	800b9d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	699a      	ldr	r2, [r3, #24]
 800b9c8:	4b06      	ldr	r3, [pc, #24]	@ (800b9e4 <USB_DevInit+0x2b8>)
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9dc:	b004      	add	sp, #16
 800b9de:	4770      	bx	lr
 800b9e0:	803c3800 	.word	0x803c3800
 800b9e4:	40000004 	.word	0x40000004

0800b9e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba02:	d901      	bls.n	800ba08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ba04:	2303      	movs	r3, #3
 800ba06:	e01b      	b.n	800ba40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	daf2      	bge.n	800b9f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ba10:	2300      	movs	r3, #0
 800ba12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	019b      	lsls	r3, r3, #6
 800ba18:	f043 0220 	orr.w	r2, r3, #32
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	3301      	adds	r3, #1
 800ba24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba2c:	d901      	bls.n	800ba32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ba2e:	2303      	movs	r3, #3
 800ba30:	e006      	b.n	800ba40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	f003 0320 	and.w	r3, r3, #32
 800ba3a:	2b20      	cmp	r3, #32
 800ba3c:	d0f0      	beq.n	800ba20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba54:	2300      	movs	r3, #0
 800ba56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba64:	d901      	bls.n	800ba6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ba66:	2303      	movs	r3, #3
 800ba68:	e018      	b.n	800ba9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	daf2      	bge.n	800ba58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ba72:	2300      	movs	r3, #0
 800ba74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2210      	movs	r2, #16
 800ba7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ba88:	d901      	bls.n	800ba8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	e006      	b.n	800ba9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	f003 0310 	and.w	r3, r3, #16
 800ba96:	2b10      	cmp	r3, #16
 800ba98:	d0f0      	beq.n	800ba7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	78fb      	ldrb	r3, [r7, #3]
 800bac2:	68f9      	ldr	r1, [r7, #12]
 800bac4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bac8:	4313      	orrs	r3, r2
 800baca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800bada:	b480      	push	{r7}
 800badc:	b087      	sub	sp, #28
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	f003 0306 	and.w	r3, r3, #6
 800baf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d102      	bne.n	800bb00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bafa:	2300      	movs	r3, #0
 800bafc:	75fb      	strb	r3, [r7, #23]
 800bafe:	e00a      	b.n	800bb16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d002      	beq.n	800bb0c <USB_GetDevSpeed+0x32>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b06      	cmp	r3, #6
 800bb0a:	d102      	bne.n	800bb12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	75fb      	strb	r3, [r7, #23]
 800bb10:	e001      	b.n	800bb16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bb12:	230f      	movs	r3, #15
 800bb14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bb16:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	371c      	adds	r7, #28
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	785b      	ldrb	r3, [r3, #1]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d139      	bne.n	800bbb4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb46:	69da      	ldr	r2, [r3, #28]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	f003 030f 	and.w	r3, r3, #15
 800bb50:	2101      	movs	r1, #1
 800bb52:	fa01 f303 	lsl.w	r3, r1, r3
 800bb56:	b29b      	uxth	r3, r3
 800bb58:	68f9      	ldr	r1, [r7, #12]
 800bb5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	015a      	lsls	r2, r3, #5
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d153      	bne.n	800bc20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	015a      	lsls	r2, r3, #5
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	4413      	add	r3, r2
 800bb80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	791b      	ldrb	r3, [r3, #4]
 800bb92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	059b      	lsls	r3, r3, #22
 800bb9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb9c:	431a      	orrs	r2, r3
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	0159      	lsls	r1, r3, #5
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	440b      	add	r3, r1
 800bba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4b20      	ldr	r3, [pc, #128]	@ (800bc30 <USB_ActivateEndpoint+0x10c>)
 800bbae:	4313      	orrs	r3, r2
 800bbb0:	600b      	str	r3, [r1, #0]
 800bbb2:	e035      	b.n	800bc20 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbba:	69da      	ldr	r2, [r3, #28]
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	f003 030f 	and.w	r3, r3, #15
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	fa01 f303 	lsl.w	r3, r1, r3
 800bbca:	041b      	lsls	r3, r3, #16
 800bbcc:	68f9      	ldr	r1, [r7, #12]
 800bbce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	015a      	lsls	r2, r3, #5
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	4413      	add	r3, r2
 800bbde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d119      	bne.n	800bc20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	015a      	lsls	r2, r3, #5
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	791b      	ldrb	r3, [r3, #4]
 800bc06:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc08:	430b      	orrs	r3, r1
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	0159      	lsls	r1, r3, #5
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	440b      	add	r3, r1
 800bc14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4b05      	ldr	r3, [pc, #20]	@ (800bc30 <USB_ActivateEndpoint+0x10c>)
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	10008000 	.word	0x10008000

0800bc34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	785b      	ldrb	r3, [r3, #1]
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d161      	bne.n	800bd14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	015a      	lsls	r2, r3, #5
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4413      	add	r3, r2
 800bc58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc66:	d11f      	bne.n	800bca8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	0151      	lsls	r1, r2, #5
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	440a      	add	r2, r1
 800bc7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bc86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	015a      	lsls	r2, r3, #5
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	4413      	add	r3, r2
 800bc90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	0151      	lsls	r1, r2, #5
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	440a      	add	r2, r1
 800bc9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bca2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bca6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f003 030f 	and.w	r3, r3, #15
 800bcb8:	2101      	movs	r1, #1
 800bcba:	fa01 f303 	lsl.w	r3, r1, r3
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	43db      	mvns	r3, r3
 800bcc2:	68f9      	ldr	r1, [r7, #12]
 800bcc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bcc8:	4013      	ands	r3, r2
 800bcca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcd2:	69da      	ldr	r2, [r3, #28]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f003 030f 	and.w	r3, r3, #15
 800bcdc:	2101      	movs	r1, #1
 800bcde:	fa01 f303 	lsl.w	r3, r1, r3
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	43db      	mvns	r3, r3
 800bce6:	68f9      	ldr	r1, [r7, #12]
 800bce8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bcec:	4013      	ands	r3, r2
 800bcee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	015a      	lsls	r2, r3, #5
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	0159      	lsls	r1, r3, #5
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	440b      	add	r3, r1
 800bd06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	4b35      	ldr	r3, [pc, #212]	@ (800bde4 <USB_DeactivateEndpoint+0x1b0>)
 800bd0e:	4013      	ands	r3, r2
 800bd10:	600b      	str	r3, [r1, #0]
 800bd12:	e060      	b.n	800bdd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	015a      	lsls	r2, r3, #5
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd2a:	d11f      	bne.n	800bd6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	015a      	lsls	r2, r3, #5
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	4413      	add	r3, r2
 800bd34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	0151      	lsls	r1, r2, #5
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	440a      	add	r2, r1
 800bd42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bd4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	015a      	lsls	r2, r3, #5
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	4413      	add	r3, r2
 800bd54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	0151      	lsls	r1, r2, #5
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	440a      	add	r2, r1
 800bd62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	f003 030f 	and.w	r3, r3, #15
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd82:	041b      	lsls	r3, r3, #16
 800bd84:	43db      	mvns	r3, r3
 800bd86:	68f9      	ldr	r1, [r7, #12]
 800bd88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd96:	69da      	ldr	r2, [r3, #28]
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	f003 030f 	and.w	r3, r3, #15
 800bda0:	2101      	movs	r1, #1
 800bda2:	fa01 f303 	lsl.w	r3, r1, r3
 800bda6:	041b      	lsls	r3, r3, #16
 800bda8:	43db      	mvns	r3, r3
 800bdaa:	68f9      	ldr	r1, [r7, #12]
 800bdac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	0159      	lsls	r1, r3, #5
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	440b      	add	r3, r1
 800bdca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdce:	4619      	mov	r1, r3
 800bdd0:	4b05      	ldr	r3, [pc, #20]	@ (800bde8 <USB_DeactivateEndpoint+0x1b4>)
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	ec337800 	.word	0xec337800
 800bde8:	eff37800 	.word	0xeff37800

0800bdec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b08a      	sub	sp, #40	@ 0x28
 800bdf0:	af02      	add	r7, sp, #8
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	785b      	ldrb	r3, [r3, #1]
 800be08:	2b01      	cmp	r3, #1
 800be0a:	f040 8185 	bne.w	800c118 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d132      	bne.n	800be7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	015a      	lsls	r2, r3, #5
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	4413      	add	r3, r2
 800be1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be22:	691a      	ldr	r2, [r3, #16]
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	0159      	lsls	r1, r3, #5
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	440b      	add	r3, r1
 800be2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be30:	4619      	mov	r1, r3
 800be32:	4ba7      	ldr	r3, [pc, #668]	@ (800c0d0 <USB_EPStartXfer+0x2e4>)
 800be34:	4013      	ands	r3, r2
 800be36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	015a      	lsls	r2, r3, #5
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	4413      	add	r3, r2
 800be40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	69ba      	ldr	r2, [r7, #24]
 800be48:	0151      	lsls	r1, r2, #5
 800be4a:	69fa      	ldr	r2, [r7, #28]
 800be4c:	440a      	add	r2, r1
 800be4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800be56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	0159      	lsls	r1, r3, #5
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	440b      	add	r3, r1
 800be6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be72:	4619      	mov	r1, r3
 800be74:	4b97      	ldr	r3, [pc, #604]	@ (800c0d4 <USB_EPStartXfer+0x2e8>)
 800be76:	4013      	ands	r3, r2
 800be78:	610b      	str	r3, [r1, #16]
 800be7a:	e097      	b.n	800bfac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	015a      	lsls	r2, r3, #5
 800be80:	69fb      	ldr	r3, [r7, #28]
 800be82:	4413      	add	r3, r2
 800be84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be88:	691a      	ldr	r2, [r3, #16]
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	0159      	lsls	r1, r3, #5
 800be8e:	69fb      	ldr	r3, [r7, #28]
 800be90:	440b      	add	r3, r1
 800be92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be96:	4619      	mov	r1, r3
 800be98:	4b8e      	ldr	r3, [pc, #568]	@ (800c0d4 <USB_EPStartXfer+0x2e8>)
 800be9a:	4013      	ands	r3, r2
 800be9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	015a      	lsls	r2, r3, #5
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	4413      	add	r3, r2
 800bea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beaa:	691a      	ldr	r2, [r3, #16]
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	0159      	lsls	r1, r3, #5
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	440b      	add	r3, r1
 800beb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beb8:	4619      	mov	r1, r3
 800beba:	4b85      	ldr	r3, [pc, #532]	@ (800c0d0 <USB_EPStartXfer+0x2e4>)
 800bebc:	4013      	ands	r3, r2
 800bebe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d11a      	bne.n	800befc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	691a      	ldr	r2, [r3, #16]
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d903      	bls.n	800beda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	689a      	ldr	r2, [r3, #8]
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	015a      	lsls	r2, r3, #5
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	4413      	add	r3, r2
 800bee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	0151      	lsls	r1, r2, #5
 800beec:	69fa      	ldr	r2, [r7, #28]
 800beee:	440a      	add	r2, r1
 800bef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bef4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bef8:	6113      	str	r3, [r2, #16]
 800befa:	e044      	b.n	800bf86 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	691a      	ldr	r2, [r3, #16]
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	4413      	add	r3, r2
 800bf06:	1e5a      	subs	r2, r3, #1
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf10:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800bf12:	69bb      	ldr	r3, [r7, #24]
 800bf14:	015a      	lsls	r2, r3, #5
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	4413      	add	r3, r2
 800bf1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf1e:	691a      	ldr	r2, [r3, #16]
 800bf20:	8afb      	ldrh	r3, [r7, #22]
 800bf22:	04d9      	lsls	r1, r3, #19
 800bf24:	4b6c      	ldr	r3, [pc, #432]	@ (800c0d8 <USB_EPStartXfer+0x2ec>)
 800bf26:	400b      	ands	r3, r1
 800bf28:	69b9      	ldr	r1, [r7, #24]
 800bf2a:	0148      	lsls	r0, r1, #5
 800bf2c:	69f9      	ldr	r1, [r7, #28]
 800bf2e:	4401      	add	r1, r0
 800bf30:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bf34:	4313      	orrs	r3, r2
 800bf36:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	791b      	ldrb	r3, [r3, #4]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d122      	bne.n	800bf86 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	015a      	lsls	r2, r3, #5
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	4413      	add	r3, r2
 800bf48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf4c:	691b      	ldr	r3, [r3, #16]
 800bf4e:	69ba      	ldr	r2, [r7, #24]
 800bf50:	0151      	lsls	r1, r2, #5
 800bf52:	69fa      	ldr	r2, [r7, #28]
 800bf54:	440a      	add	r2, r1
 800bf56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf5a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800bf5e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	015a      	lsls	r2, r3, #5
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	4413      	add	r3, r2
 800bf68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf6c:	691a      	ldr	r2, [r3, #16]
 800bf6e:	8afb      	ldrh	r3, [r7, #22]
 800bf70:	075b      	lsls	r3, r3, #29
 800bf72:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800bf76:	69b9      	ldr	r1, [r7, #24]
 800bf78:	0148      	lsls	r0, r1, #5
 800bf7a:	69f9      	ldr	r1, [r7, #28]
 800bf7c:	4401      	add	r1, r0
 800bf7e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bf82:	4313      	orrs	r3, r2
 800bf84:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	015a      	lsls	r2, r3, #5
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf92:	691a      	ldr	r2, [r3, #16]
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf9c:	69b9      	ldr	r1, [r7, #24]
 800bf9e:	0148      	lsls	r0, r1, #5
 800bfa0:	69f9      	ldr	r1, [r7, #28]
 800bfa2:	4401      	add	r1, r0
 800bfa4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bfac:	79fb      	ldrb	r3, [r7, #7]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d14b      	bne.n	800c04a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d009      	beq.n	800bfce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	015a      	lsls	r2, r3, #5
 800bfbe:	69fb      	ldr	r3, [r7, #28]
 800bfc0:	4413      	add	r3, r2
 800bfc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	791b      	ldrb	r3, [r3, #4]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d128      	bne.n	800c028 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d110      	bne.n	800c008 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	69fb      	ldr	r3, [r7, #28]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	69ba      	ldr	r2, [r7, #24]
 800bff6:	0151      	lsls	r1, r2, #5
 800bff8:	69fa      	ldr	r2, [r7, #28]
 800bffa:	440a      	add	r2, r1
 800bffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c000:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c004:	6013      	str	r3, [r2, #0]
 800c006:	e00f      	b.n	800c028 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	015a      	lsls	r2, r3, #5
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	4413      	add	r3, r2
 800c010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	69ba      	ldr	r2, [r7, #24]
 800c018:	0151      	lsls	r1, r2, #5
 800c01a:	69fa      	ldr	r2, [r7, #28]
 800c01c:	440a      	add	r2, r1
 800c01e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c026:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	015a      	lsls	r2, r3, #5
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	4413      	add	r3, r2
 800c030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	69ba      	ldr	r2, [r7, #24]
 800c038:	0151      	lsls	r1, r2, #5
 800c03a:	69fa      	ldr	r2, [r7, #28]
 800c03c:	440a      	add	r2, r1
 800c03e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c042:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c046:	6013      	str	r3, [r2, #0]
 800c048:	e169      	b.n	800c31e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	015a      	lsls	r2, r3, #5
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	4413      	add	r3, r2
 800c052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	69ba      	ldr	r2, [r7, #24]
 800c05a:	0151      	lsls	r1, r2, #5
 800c05c:	69fa      	ldr	r2, [r7, #28]
 800c05e:	440a      	add	r2, r1
 800c060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c064:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c068:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	791b      	ldrb	r3, [r3, #4]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d015      	beq.n	800c09e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 8151 	beq.w	800c31e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	f003 030f 	and.w	r3, r3, #15
 800c08c:	2101      	movs	r1, #1
 800c08e:	fa01 f303 	lsl.w	r3, r1, r3
 800c092:	69f9      	ldr	r1, [r7, #28]
 800c094:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c098:	4313      	orrs	r3, r2
 800c09a:	634b      	str	r3, [r1, #52]	@ 0x34
 800c09c:	e13f      	b.n	800c31e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d116      	bne.n	800c0dc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	015a      	lsls	r2, r3, #5
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	69ba      	ldr	r2, [r7, #24]
 800c0be:	0151      	lsls	r1, r2, #5
 800c0c0:	69fa      	ldr	r2, [r7, #28]
 800c0c2:	440a      	add	r2, r1
 800c0c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c0cc:	6013      	str	r3, [r2, #0]
 800c0ce:	e015      	b.n	800c0fc <USB_EPStartXfer+0x310>
 800c0d0:	e007ffff 	.word	0xe007ffff
 800c0d4:	fff80000 	.word	0xfff80000
 800c0d8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	015a      	lsls	r2, r3, #5
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	69ba      	ldr	r2, [r7, #24]
 800c0ec:	0151      	lsls	r1, r2, #5
 800c0ee:	69fa      	ldr	r2, [r7, #28]
 800c0f0:	440a      	add	r2, r1
 800c0f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	68d9      	ldr	r1, [r3, #12]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	781a      	ldrb	r2, [r3, #0]
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	691b      	ldr	r3, [r3, #16]
 800c108:	b298      	uxth	r0, r3
 800c10a:	79fb      	ldrb	r3, [r7, #7]
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	4603      	mov	r3, r0
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	f000 f9b9 	bl	800c488 <USB_WritePacket>
 800c116:	e102      	b.n	800c31e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c124:	691a      	ldr	r2, [r3, #16]
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	0159      	lsls	r1, r3, #5
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	440b      	add	r3, r1
 800c12e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c132:	4619      	mov	r1, r3
 800c134:	4b7c      	ldr	r3, [pc, #496]	@ (800c328 <USB_EPStartXfer+0x53c>)
 800c136:	4013      	ands	r3, r2
 800c138:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	015a      	lsls	r2, r3, #5
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	4413      	add	r3, r2
 800c142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c146:	691a      	ldr	r2, [r3, #16]
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	0159      	lsls	r1, r3, #5
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	440b      	add	r3, r1
 800c150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c154:	4619      	mov	r1, r3
 800c156:	4b75      	ldr	r3, [pc, #468]	@ (800c32c <USB_EPStartXfer+0x540>)
 800c158:	4013      	ands	r3, r2
 800c15a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d12f      	bne.n	800c1c2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	689a      	ldr	r2, [r3, #8]
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	689a      	ldr	r2, [r3, #8]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c186:	691a      	ldr	r2, [r3, #16]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	6a1b      	ldr	r3, [r3, #32]
 800c18c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c190:	69b9      	ldr	r1, [r7, #24]
 800c192:	0148      	lsls	r0, r1, #5
 800c194:	69f9      	ldr	r1, [r7, #28]
 800c196:	4401      	add	r1, r0
 800c198:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c19c:	4313      	orrs	r3, r2
 800c19e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	0151      	lsls	r1, r2, #5
 800c1b2:	69fa      	ldr	r2, [r7, #28]
 800c1b4:	440a      	add	r2, r1
 800c1b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c1be:	6113      	str	r3, [r2, #16]
 800c1c0:	e05f      	b.n	800c282 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d123      	bne.n	800c212 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	015a      	lsls	r2, r3, #5
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1d6:	691a      	ldr	r2, [r3, #16]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1e0:	69b9      	ldr	r1, [r7, #24]
 800c1e2:	0148      	lsls	r0, r1, #5
 800c1e4:	69f9      	ldr	r1, [r7, #28]
 800c1e6:	4401      	add	r1, r0
 800c1e8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1fc:	691b      	ldr	r3, [r3, #16]
 800c1fe:	69ba      	ldr	r2, [r7, #24]
 800c200:	0151      	lsls	r1, r2, #5
 800c202:	69fa      	ldr	r2, [r7, #28]
 800c204:	440a      	add	r2, r1
 800c206:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c20a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c20e:	6113      	str	r3, [r2, #16]
 800c210:	e037      	b.n	800c282 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	691a      	ldr	r2, [r3, #16]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	4413      	add	r3, r2
 800c21c:	1e5a      	subs	r2, r3, #1
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	fbb2 f3f3 	udiv	r3, r2, r3
 800c226:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	8afa      	ldrh	r2, [r7, #22]
 800c22e:	fb03 f202 	mul.w	r2, r3, r2
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c236:	69bb      	ldr	r3, [r7, #24]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	69fb      	ldr	r3, [r7, #28]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c242:	691a      	ldr	r2, [r3, #16]
 800c244:	8afb      	ldrh	r3, [r7, #22]
 800c246:	04d9      	lsls	r1, r3, #19
 800c248:	4b39      	ldr	r3, [pc, #228]	@ (800c330 <USB_EPStartXfer+0x544>)
 800c24a:	400b      	ands	r3, r1
 800c24c:	69b9      	ldr	r1, [r7, #24]
 800c24e:	0148      	lsls	r0, r1, #5
 800c250:	69f9      	ldr	r1, [r7, #28]
 800c252:	4401      	add	r1, r0
 800c254:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c258:	4313      	orrs	r3, r2
 800c25a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	015a      	lsls	r2, r3, #5
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	4413      	add	r3, r2
 800c264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c268:	691a      	ldr	r2, [r3, #16]
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c272:	69b9      	ldr	r1, [r7, #24]
 800c274:	0148      	lsls	r0, r1, #5
 800c276:	69f9      	ldr	r1, [r7, #28]
 800c278:	4401      	add	r1, r0
 800c27a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c27e:	4313      	orrs	r3, r2
 800c280:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c282:	79fb      	ldrb	r3, [r7, #7]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d10d      	bne.n	800c2a4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d009      	beq.n	800c2a4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	68d9      	ldr	r1, [r3, #12]
 800c294:	69bb      	ldr	r3, [r7, #24]
 800c296:	015a      	lsls	r2, r3, #5
 800c298:	69fb      	ldr	r3, [r7, #28]
 800c29a:	4413      	add	r3, r2
 800c29c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2a0:	460a      	mov	r2, r1
 800c2a2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	791b      	ldrb	r3, [r3, #4]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d128      	bne.n	800c2fe <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d110      	bne.n	800c2de <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	69ba      	ldr	r2, [r7, #24]
 800c2cc:	0151      	lsls	r1, r2, #5
 800c2ce:	69fa      	ldr	r2, [r7, #28]
 800c2d0:	440a      	add	r2, r1
 800c2d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c2da:	6013      	str	r3, [r2, #0]
 800c2dc:	e00f      	b.n	800c2fe <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	015a      	lsls	r2, r3, #5
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	69ba      	ldr	r2, [r7, #24]
 800c2ee:	0151      	lsls	r1, r2, #5
 800c2f0:	69fa      	ldr	r2, [r7, #28]
 800c2f2:	440a      	add	r2, r1
 800c2f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c2fc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	015a      	lsls	r2, r3, #5
 800c302:	69fb      	ldr	r3, [r7, #28]
 800c304:	4413      	add	r3, r2
 800c306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	69ba      	ldr	r2, [r7, #24]
 800c30e:	0151      	lsls	r1, r2, #5
 800c310:	69fa      	ldr	r2, [r7, #28]
 800c312:	440a      	add	r2, r1
 800c314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c318:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c31c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3720      	adds	r7, #32
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	fff80000 	.word	0xfff80000
 800c32c:	e007ffff 	.word	0xe007ffff
 800c330:	1ff80000 	.word	0x1ff80000

0800c334 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c334:	b480      	push	{r7}
 800c336:	b087      	sub	sp, #28
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c33e:	2300      	movs	r3, #0
 800c340:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c342:	2300      	movs	r3, #0
 800c344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	785b      	ldrb	r3, [r3, #1]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d14a      	bne.n	800c3e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c366:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c36a:	f040 8086 	bne.w	800c47a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	781b      	ldrb	r3, [r3, #0]
 800c372:	015a      	lsls	r2, r3, #5
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	4413      	add	r3, r2
 800c378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	7812      	ldrb	r2, [r2, #0]
 800c382:	0151      	lsls	r1, r2, #5
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	440a      	add	r2, r1
 800c388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c38c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c390:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	7812      	ldrb	r2, [r2, #0]
 800c3a6:	0151      	lsls	r1, r2, #5
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	440a      	add	r2, r1
 800c3ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c3b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c3b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d902      	bls.n	800c3cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	75fb      	strb	r3, [r7, #23]
          break;
 800c3ca:	e056      	b.n	800c47a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	015a      	lsls	r2, r3, #5
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c3e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c3e4:	d0e7      	beq.n	800c3b6 <USB_EPStopXfer+0x82>
 800c3e6:	e048      	b.n	800c47a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	015a      	lsls	r2, r3, #5
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c3fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c400:	d13b      	bne.n	800c47a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	7812      	ldrb	r2, [r2, #0]
 800c416:	0151      	lsls	r1, r2, #5
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	440a      	add	r2, r1
 800c41c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c420:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c424:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	7812      	ldrb	r2, [r2, #0]
 800c43a:	0151      	lsls	r1, r2, #5
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	440a      	add	r2, r1
 800c440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c444:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c448:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	3301      	adds	r3, #1
 800c44e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c456:	4293      	cmp	r3, r2
 800c458:	d902      	bls.n	800c460 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	75fb      	strb	r3, [r7, #23]
          break;
 800c45e:	e00c      	b.n	800c47a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	015a      	lsls	r2, r3, #5
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	4413      	add	r3, r2
 800c46a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c474:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c478:	d0e7      	beq.n	800c44a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	371c      	adds	r7, #28
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c488:	b480      	push	{r7}
 800c48a:	b089      	sub	sp, #36	@ 0x24
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	4611      	mov	r1, r2
 800c494:	461a      	mov	r2, r3
 800c496:	460b      	mov	r3, r1
 800c498:	71fb      	strb	r3, [r7, #7]
 800c49a:	4613      	mov	r3, r2
 800c49c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c4a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d123      	bne.n	800c4f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c4ae:	88bb      	ldrh	r3, [r7, #4]
 800c4b0:	3303      	adds	r3, #3
 800c4b2:	089b      	lsrs	r3, r3, #2
 800c4b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	e018      	b.n	800c4ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c4bc:	79fb      	ldrb	r3, [r7, #7]
 800c4be:	031a      	lsls	r2, r3, #12
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	3301      	adds	r3, #1
 800c4da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	61bb      	str	r3, [r7, #24]
 800c4ee:	69ba      	ldr	r2, [r7, #24]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d3e2      	bcc.n	800c4bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3724      	adds	r7, #36	@ 0x24
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c504:	b480      	push	{r7}
 800c506:	b08b      	sub	sp, #44	@ 0x2c
 800c508:	af00      	add	r7, sp, #0
 800c50a:	60f8      	str	r0, [r7, #12]
 800c50c:	60b9      	str	r1, [r7, #8]
 800c50e:	4613      	mov	r3, r2
 800c510:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c51a:	88fb      	ldrh	r3, [r7, #6]
 800c51c:	089b      	lsrs	r3, r3, #2
 800c51e:	b29b      	uxth	r3, r3
 800c520:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c522:	88fb      	ldrh	r3, [r7, #6]
 800c524:	f003 0303 	and.w	r3, r3, #3
 800c528:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c52a:	2300      	movs	r3, #0
 800c52c:	623b      	str	r3, [r7, #32]
 800c52e:	e014      	b.n	800c55a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53a:	601a      	str	r2, [r3, #0]
    pDest++;
 800c53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53e:	3301      	adds	r3, #1
 800c540:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c544:	3301      	adds	r3, #1
 800c546:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54a:	3301      	adds	r3, #1
 800c54c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c550:	3301      	adds	r3, #1
 800c552:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	3301      	adds	r3, #1
 800c558:	623b      	str	r3, [r7, #32]
 800c55a:	6a3a      	ldr	r2, [r7, #32]
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	429a      	cmp	r2, r3
 800c560:	d3e6      	bcc.n	800c530 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c562:	8bfb      	ldrh	r3, [r7, #30]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01e      	beq.n	800c5a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c568:	2300      	movs	r3, #0
 800c56a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c572:	461a      	mov	r2, r3
 800c574:	f107 0310 	add.w	r3, r7, #16
 800c578:	6812      	ldr	r2, [r2, #0]
 800c57a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c57c:	693a      	ldr	r2, [r7, #16]
 800c57e:	6a3b      	ldr	r3, [r7, #32]
 800c580:	b2db      	uxtb	r3, r3
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	fa22 f303 	lsr.w	r3, r2, r3
 800c588:	b2da      	uxtb	r2, r3
 800c58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58c:	701a      	strb	r2, [r3, #0]
      i++;
 800c58e:	6a3b      	ldr	r3, [r7, #32]
 800c590:	3301      	adds	r3, #1
 800c592:	623b      	str	r3, [r7, #32]
      pDest++;
 800c594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c596:	3301      	adds	r3, #1
 800c598:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c59a:	8bfb      	ldrh	r3, [r7, #30]
 800c59c:	3b01      	subs	r3, #1
 800c59e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c5a0:	8bfb      	ldrh	r3, [r7, #30]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1ea      	bne.n	800c57c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	372c      	adds	r7, #44	@ 0x2c
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	785b      	ldrb	r3, [r3, #1]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d12c      	bne.n	800c62a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	015a      	lsls	r2, r3, #5
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	db12      	blt.n	800c608 <USB_EPSetStall+0x54>
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00f      	beq.n	800c608 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	68ba      	ldr	r2, [r7, #8]
 800c5f8:	0151      	lsls	r1, r2, #5
 800c5fa:	68fa      	ldr	r2, [r7, #12]
 800c5fc:	440a      	add	r2, r1
 800c5fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c602:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c606:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	015a      	lsls	r2, r3, #5
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	4413      	add	r3, r2
 800c610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	0151      	lsls	r1, r2, #5
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	440a      	add	r2, r1
 800c61e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c622:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c626:	6013      	str	r3, [r2, #0]
 800c628:	e02b      	b.n	800c682 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	015a      	lsls	r2, r3, #5
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	4413      	add	r3, r2
 800c632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	db12      	blt.n	800c662 <USB_EPSetStall+0xae>
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00f      	beq.n	800c662 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	015a      	lsls	r2, r3, #5
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	4413      	add	r3, r2
 800c64a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	68ba      	ldr	r2, [r7, #8]
 800c652:	0151      	lsls	r1, r2, #5
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	440a      	add	r2, r1
 800c658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c65c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c660:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	015a      	lsls	r2, r3, #5
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	4413      	add	r3, r2
 800c66a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	0151      	lsls	r1, r2, #5
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	440a      	add	r2, r1
 800c678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c67c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c680:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3714      	adds	r7, #20
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	785b      	ldrb	r3, [r3, #1]
 800c6a8:	2b01      	cmp	r3, #1
 800c6aa:	d128      	bne.n	800c6fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	015a      	lsls	r2, r3, #5
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	0151      	lsls	r1, r2, #5
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	440a      	add	r2, r1
 800c6c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	791b      	ldrb	r3, [r3, #4]
 800c6d0:	2b03      	cmp	r3, #3
 800c6d2:	d003      	beq.n	800c6dc <USB_EPClearStall+0x4c>
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	791b      	ldrb	r3, [r3, #4]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d138      	bne.n	800c74e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	015a      	lsls	r2, r3, #5
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	0151      	lsls	r1, r2, #5
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	440a      	add	r2, r1
 800c6f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c6f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c6fa:	6013      	str	r3, [r2, #0]
 800c6fc:	e027      	b.n	800c74e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	0151      	lsls	r1, r2, #5
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	440a      	add	r2, r1
 800c714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c718:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c71c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	791b      	ldrb	r3, [r3, #4]
 800c722:	2b03      	cmp	r3, #3
 800c724:	d003      	beq.n	800c72e <USB_EPClearStall+0x9e>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	791b      	ldrb	r3, [r3, #4]
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d10f      	bne.n	800c74e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	015a      	lsls	r2, r3, #5
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	4413      	add	r3, r2
 800c736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	0151      	lsls	r1, r2, #5
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	440a      	add	r2, r1
 800c744:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c74c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c77a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c77e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	78fb      	ldrb	r3, [r7, #3]
 800c78a:	011b      	lsls	r3, r3, #4
 800c78c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c790:	68f9      	ldr	r1, [r7, #12]
 800c792:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c796:	4313      	orrs	r3, r2
 800c798:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c7c2:	f023 0303 	bic.w	r3, r3, #3
 800c7c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7d6:	f023 0302 	bic.w	r3, r3, #2
 800c7da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	68fa      	ldr	r2, [r7, #12]
 800c800:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c804:	f023 0303 	bic.w	r3, r3, #3
 800c808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c818:	f043 0302 	orr.w	r3, r3, #2
 800c81c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	695b      	ldr	r3, [r3, #20]
 800c838:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	4013      	ands	r3, r2
 800c842:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c844:	68fb      	ldr	r3, [r7, #12]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c852:	b480      	push	{r7}
 800c854:	b085      	sub	sp, #20
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c86e:	69db      	ldr	r3, [r3, #28]
 800c870:	68ba      	ldr	r2, [r7, #8]
 800c872:	4013      	ands	r3, r2
 800c874:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	0c1b      	lsrs	r3, r3, #16
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c886:	b480      	push	{r7}
 800c888:	b085      	sub	sp, #20
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8a2:	69db      	ldr	r3, [r3, #28]
 800c8a4:	68ba      	ldr	r2, [r7, #8]
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	b29b      	uxth	r3, r3
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3714      	adds	r7, #20
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr

0800c8ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c8ba:	b480      	push	{r7}
 800c8bc:	b085      	sub	sp, #20
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c8ca:	78fb      	ldrb	r3, [r7, #3]
 800c8cc:	015a      	lsls	r2, r3, #5
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c8e8:	68bb      	ldr	r3, [r7, #8]
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3714      	adds	r7, #20
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f4:	4770      	bx	lr

0800c8f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c8f6:	b480      	push	{r7}
 800c8f8:	b087      	sub	sp, #28
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	460b      	mov	r3, r1
 800c900:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c918:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c91a:	78fb      	ldrb	r3, [r7, #3]
 800c91c:	f003 030f 	and.w	r3, r3, #15
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	fa22 f303 	lsr.w	r3, r2, r3
 800c926:	01db      	lsls	r3, r3, #7
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	015a      	lsls	r2, r3, #5
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	4413      	add	r3, r2
 800c938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	4013      	ands	r3, r2
 800c942:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c944:	68bb      	ldr	r3, [r7, #8]
}
 800c946:	4618      	mov	r0, r3
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	695b      	ldr	r3, [r3, #20]
 800c95e:	f003 0301 	and.w	r3, r3, #1
}
 800c962:	4618      	mov	r0, r3
 800c964:	370c      	adds	r7, #12
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
	...

0800c970 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c98a:	4619      	mov	r1, r3
 800c98c:	4b09      	ldr	r3, [pc, #36]	@ (800c9b4 <USB_ActivateSetup+0x44>)
 800c98e:	4013      	ands	r3, r2
 800c990:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c9a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c9a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c9a6:	2300      	movs	r3, #0
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	fffff800 	.word	0xfffff800

0800c9b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	333c      	adds	r3, #60	@ 0x3c
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	4a26      	ldr	r2, [pc, #152]	@ (800ca70 <USB_EP0_OutStart+0xb8>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d90a      	bls.n	800c9f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c9e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c9ec:	d101      	bne.n	800c9f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	e037      	b.n	800ca62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	697a      	ldr	r2, [r7, #20]
 800ca08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ca10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca20:	f043 0318 	orr.w	r3, r3, #24
 800ca24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca34:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ca38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ca3a:	7afb      	ldrb	r3, [r7, #11]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d10f      	bne.n	800ca60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca46:	461a      	mov	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	697a      	ldr	r2, [r7, #20]
 800ca56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ca5a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ca5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	371c      	adds	r7, #28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	4f54300a 	.word	0x4f54300a

0800ca74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	3301      	adds	r3, #1
 800ca84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ca8c:	d901      	bls.n	800ca92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e01b      	b.n	800caca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	daf2      	bge.n	800ca80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	691b      	ldr	r3, [r3, #16]
 800caa2:	f043 0201 	orr.w	r2, r3, #1
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	3301      	adds	r3, #1
 800caae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cab6:	d901      	bls.n	800cabc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cab8:	2303      	movs	r3, #3
 800caba:	e006      	b.n	800caca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	691b      	ldr	r3, [r3, #16]
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d0f0      	beq.n	800caaa <USB_CoreReset+0x36>

  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
	...

0800cad8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	460b      	mov	r3, r1
 800cae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cae4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cae8:	f002 fc88 	bl	800f3fc <USBD_static_malloc>
 800caec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d109      	bne.n	800cb08 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	32b0      	adds	r2, #176	@ 0xb0
 800cafe:	2100      	movs	r1, #0
 800cb00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cb04:	2302      	movs	r3, #2
 800cb06:	e0d4      	b.n	800ccb2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cb08:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cb0c:	2100      	movs	r1, #0
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f003 fa03 	bl	800ff1a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	32b0      	adds	r2, #176	@ 0xb0
 800cb1e:	68f9      	ldr	r1, [r7, #12]
 800cb20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	32b0      	adds	r2, #176	@ 0xb0
 800cb2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7c1b      	ldrb	r3, [r3, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d138      	bne.n	800cbb2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cb40:	4b5e      	ldr	r3, [pc, #376]	@ (800ccbc <USBD_CDC_Init+0x1e4>)
 800cb42:	7819      	ldrb	r1, [r3, #0]
 800cb44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb48:	2202      	movs	r2, #2
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f002 fb33 	bl	800f1b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cb50:	4b5a      	ldr	r3, [pc, #360]	@ (800ccbc <USBD_CDC_Init+0x1e4>)
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	f003 020f 	and.w	r2, r3, #15
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	4413      	add	r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	440b      	add	r3, r1
 800cb64:	3324      	adds	r3, #36	@ 0x24
 800cb66:	2201      	movs	r2, #1
 800cb68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cb6a:	4b55      	ldr	r3, [pc, #340]	@ (800ccc0 <USBD_CDC_Init+0x1e8>)
 800cb6c:	7819      	ldrb	r1, [r3, #0]
 800cb6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb72:	2202      	movs	r2, #2
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f002 fb1e 	bl	800f1b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cb7a:	4b51      	ldr	r3, [pc, #324]	@ (800ccc0 <USBD_CDC_Init+0x1e8>)
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	f003 020f 	and.w	r2, r3, #15
 800cb82:	6879      	ldr	r1, [r7, #4]
 800cb84:	4613      	mov	r3, r2
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	4413      	add	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	440b      	add	r3, r1
 800cb8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cb92:	2201      	movs	r2, #1
 800cb94:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cb96:	4b4b      	ldr	r3, [pc, #300]	@ (800ccc4 <USBD_CDC_Init+0x1ec>)
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	f003 020f 	and.w	r2, r3, #15
 800cb9e:	6879      	ldr	r1, [r7, #4]
 800cba0:	4613      	mov	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	440b      	add	r3, r1
 800cbaa:	3326      	adds	r3, #38	@ 0x26
 800cbac:	2210      	movs	r2, #16
 800cbae:	801a      	strh	r2, [r3, #0]
 800cbb0:	e035      	b.n	800cc1e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cbb2:	4b42      	ldr	r3, [pc, #264]	@ (800ccbc <USBD_CDC_Init+0x1e4>)
 800cbb4:	7819      	ldrb	r1, [r3, #0]
 800cbb6:	2340      	movs	r3, #64	@ 0x40
 800cbb8:	2202      	movs	r2, #2
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f002 fafb 	bl	800f1b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cbc0:	4b3e      	ldr	r3, [pc, #248]	@ (800ccbc <USBD_CDC_Init+0x1e4>)
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	f003 020f 	and.w	r2, r3, #15
 800cbc8:	6879      	ldr	r1, [r7, #4]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4413      	add	r3, r2
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	440b      	add	r3, r1
 800cbd4:	3324      	adds	r3, #36	@ 0x24
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cbda:	4b39      	ldr	r3, [pc, #228]	@ (800ccc0 <USBD_CDC_Init+0x1e8>)
 800cbdc:	7819      	ldrb	r1, [r3, #0]
 800cbde:	2340      	movs	r3, #64	@ 0x40
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f002 fae7 	bl	800f1b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cbe8:	4b35      	ldr	r3, [pc, #212]	@ (800ccc0 <USBD_CDC_Init+0x1e8>)
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	f003 020f 	and.w	r2, r3, #15
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	4613      	mov	r3, r2
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4413      	add	r3, r2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	440b      	add	r3, r1
 800cbfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc00:	2201      	movs	r2, #1
 800cc02:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cc04:	4b2f      	ldr	r3, [pc, #188]	@ (800ccc4 <USBD_CDC_Init+0x1ec>)
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	f003 020f 	and.w	r2, r3, #15
 800cc0c:	6879      	ldr	r1, [r7, #4]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4413      	add	r3, r2
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	440b      	add	r3, r1
 800cc18:	3326      	adds	r3, #38	@ 0x26
 800cc1a:	2210      	movs	r2, #16
 800cc1c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cc1e:	4b29      	ldr	r3, [pc, #164]	@ (800ccc4 <USBD_CDC_Init+0x1ec>)
 800cc20:	7819      	ldrb	r1, [r3, #0]
 800cc22:	2308      	movs	r3, #8
 800cc24:	2203      	movs	r2, #3
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f002 fac5 	bl	800f1b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cc2c:	4b25      	ldr	r3, [pc, #148]	@ (800ccc4 <USBD_CDC_Init+0x1ec>)
 800cc2e:	781b      	ldrb	r3, [r3, #0]
 800cc30:	f003 020f 	and.w	r2, r3, #15
 800cc34:	6879      	ldr	r1, [r7, #4]
 800cc36:	4613      	mov	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4413      	add	r3, r2
 800cc3c:	009b      	lsls	r3, r3, #2
 800cc3e:	440b      	add	r3, r1
 800cc40:	3324      	adds	r3, #36	@ 0x24
 800cc42:	2201      	movs	r2, #1
 800cc44:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2200      	movs	r2, #0
 800cc4a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	33b0      	adds	r3, #176	@ 0xb0
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4413      	add	r3, r2
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d101      	bne.n	800cc80 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cc7c:	2302      	movs	r3, #2
 800cc7e:	e018      	b.n	800ccb2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	7c1b      	ldrb	r3, [r3, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10a      	bne.n	800cc9e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc88:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc0 <USBD_CDC_Init+0x1e8>)
 800cc8a:	7819      	ldrb	r1, [r3, #0]
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cc92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f002 fb7c 	bl	800f394 <USBD_LL_PrepareReceive>
 800cc9c:	e008      	b.n	800ccb0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc9e:	4b08      	ldr	r3, [pc, #32]	@ (800ccc0 <USBD_CDC_Init+0x1e8>)
 800cca0:	7819      	ldrb	r1, [r3, #0]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cca8:	2340      	movs	r3, #64	@ 0x40
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f002 fb72 	bl	800f394 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccb0:	2300      	movs	r3, #0
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	2400009f 	.word	0x2400009f
 800ccc0:	240000a0 	.word	0x240000a0
 800ccc4:	240000a1 	.word	0x240000a1

0800ccc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ccd4:	4b3a      	ldr	r3, [pc, #232]	@ (800cdc0 <USBD_CDC_DeInit+0xf8>)
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	4619      	mov	r1, r3
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f002 fa91 	bl	800f202 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cce0:	4b37      	ldr	r3, [pc, #220]	@ (800cdc0 <USBD_CDC_DeInit+0xf8>)
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	f003 020f 	and.w	r2, r3, #15
 800cce8:	6879      	ldr	r1, [r7, #4]
 800ccea:	4613      	mov	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	440b      	add	r3, r1
 800ccf4:	3324      	adds	r3, #36	@ 0x24
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ccfa:	4b32      	ldr	r3, [pc, #200]	@ (800cdc4 <USBD_CDC_DeInit+0xfc>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f002 fa7e 	bl	800f202 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cd06:	4b2f      	ldr	r3, [pc, #188]	@ (800cdc4 <USBD_CDC_DeInit+0xfc>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	f003 020f 	and.w	r2, r3, #15
 800cd0e:	6879      	ldr	r1, [r7, #4]
 800cd10:	4613      	mov	r3, r2
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	4413      	add	r3, r2
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	440b      	add	r3, r1
 800cd1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd1e:	2200      	movs	r2, #0
 800cd20:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cd22:	4b29      	ldr	r3, [pc, #164]	@ (800cdc8 <USBD_CDC_DeInit+0x100>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	4619      	mov	r1, r3
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f002 fa6a 	bl	800f202 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cd2e:	4b26      	ldr	r3, [pc, #152]	@ (800cdc8 <USBD_CDC_DeInit+0x100>)
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	f003 020f 	and.w	r2, r3, #15
 800cd36:	6879      	ldr	r1, [r7, #4]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	4413      	add	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	440b      	add	r3, r1
 800cd42:	3324      	adds	r3, #36	@ 0x24
 800cd44:	2200      	movs	r2, #0
 800cd46:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cd48:	4b1f      	ldr	r3, [pc, #124]	@ (800cdc8 <USBD_CDC_DeInit+0x100>)
 800cd4a:	781b      	ldrb	r3, [r3, #0]
 800cd4c:	f003 020f 	and.w	r2, r3, #15
 800cd50:	6879      	ldr	r1, [r7, #4]
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	009b      	lsls	r3, r3, #2
 800cd5a:	440b      	add	r3, r1
 800cd5c:	3326      	adds	r3, #38	@ 0x26
 800cd5e:	2200      	movs	r2, #0
 800cd60:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	32b0      	adds	r2, #176	@ 0xb0
 800cd6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d01f      	beq.n	800cdb4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	33b0      	adds	r3, #176	@ 0xb0
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4413      	add	r3, r2
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	32b0      	adds	r2, #176	@ 0xb0
 800cd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f002 fb3e 	bl	800f418 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	32b0      	adds	r2, #176	@ 0xb0
 800cda6:	2100      	movs	r1, #0
 800cda8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	2400009f 	.word	0x2400009f
 800cdc4:	240000a0 	.word	0x240000a0
 800cdc8:	240000a1 	.word	0x240000a1

0800cdcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	32b0      	adds	r2, #176	@ 0xb0
 800cde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cde6:	2300      	movs	r3, #0
 800cde8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cdea:	2300      	movs	r3, #0
 800cdec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d101      	bne.n	800cdfc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	e0bf      	b.n	800cf7c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d050      	beq.n	800ceaa <USBD_CDC_Setup+0xde>
 800ce08:	2b20      	cmp	r3, #32
 800ce0a:	f040 80af 	bne.w	800cf6c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	88db      	ldrh	r3, [r3, #6]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d03a      	beq.n	800ce8c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	b25b      	sxtb	r3, r3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	da1b      	bge.n	800ce58 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	33b0      	adds	r3, #176	@ 0xb0
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ce36:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce38:	683a      	ldr	r2, [r7, #0]
 800ce3a:	88d2      	ldrh	r2, [r2, #6]
 800ce3c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	88db      	ldrh	r3, [r3, #6]
 800ce42:	2b07      	cmp	r3, #7
 800ce44:	bf28      	it	cs
 800ce46:	2307      	movcs	r3, #7
 800ce48:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	89fa      	ldrh	r2, [r7, #14]
 800ce4e:	4619      	mov	r1, r3
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f001 fd7d 	bl	800e950 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ce56:	e090      	b.n	800cf7a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	785a      	ldrb	r2, [r3, #1]
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	88db      	ldrh	r3, [r3, #6]
 800ce66:	2b3f      	cmp	r3, #63	@ 0x3f
 800ce68:	d803      	bhi.n	800ce72 <USBD_CDC_Setup+0xa6>
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	88db      	ldrh	r3, [r3, #6]
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	e000      	b.n	800ce74 <USBD_CDC_Setup+0xa8>
 800ce72:	2240      	movs	r2, #64	@ 0x40
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ce7a:	6939      	ldr	r1, [r7, #16]
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ce82:	461a      	mov	r2, r3
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f001 fd8f 	bl	800e9a8 <USBD_CtlPrepareRx>
      break;
 800ce8a:	e076      	b.n	800cf7a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	33b0      	adds	r3, #176	@ 0xb0
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4413      	add	r3, r2
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	7850      	ldrb	r0, [r2, #1]
 800cea2:	2200      	movs	r2, #0
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	4798      	blx	r3
      break;
 800cea8:	e067      	b.n	800cf7a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	785b      	ldrb	r3, [r3, #1]
 800ceae:	2b0b      	cmp	r3, #11
 800ceb0:	d851      	bhi.n	800cf56 <USBD_CDC_Setup+0x18a>
 800ceb2:	a201      	add	r2, pc, #4	@ (adr r2, 800ceb8 <USBD_CDC_Setup+0xec>)
 800ceb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb8:	0800cee9 	.word	0x0800cee9
 800cebc:	0800cf65 	.word	0x0800cf65
 800cec0:	0800cf57 	.word	0x0800cf57
 800cec4:	0800cf57 	.word	0x0800cf57
 800cec8:	0800cf57 	.word	0x0800cf57
 800cecc:	0800cf57 	.word	0x0800cf57
 800ced0:	0800cf57 	.word	0x0800cf57
 800ced4:	0800cf57 	.word	0x0800cf57
 800ced8:	0800cf57 	.word	0x0800cf57
 800cedc:	0800cf57 	.word	0x0800cf57
 800cee0:	0800cf13 	.word	0x0800cf13
 800cee4:	0800cf3d 	.word	0x0800cf3d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	d107      	bne.n	800cf04 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cef4:	f107 030a 	add.w	r3, r7, #10
 800cef8:	2202      	movs	r2, #2
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f001 fd27 	bl	800e950 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf02:	e032      	b.n	800cf6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cf04:	6839      	ldr	r1, [r7, #0]
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f001 fca5 	bl	800e856 <USBD_CtlError>
            ret = USBD_FAIL;
 800cf0c:	2303      	movs	r3, #3
 800cf0e:	75fb      	strb	r3, [r7, #23]
          break;
 800cf10:	e02b      	b.n	800cf6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	2b03      	cmp	r3, #3
 800cf1c:	d107      	bne.n	800cf2e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cf1e:	f107 030d 	add.w	r3, r7, #13
 800cf22:	2201      	movs	r2, #1
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f001 fd12 	bl	800e950 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf2c:	e01d      	b.n	800cf6a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cf2e:	6839      	ldr	r1, [r7, #0]
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f001 fc90 	bl	800e856 <USBD_CtlError>
            ret = USBD_FAIL;
 800cf36:	2303      	movs	r3, #3
 800cf38:	75fb      	strb	r3, [r7, #23]
          break;
 800cf3a:	e016      	b.n	800cf6a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	2b03      	cmp	r3, #3
 800cf46:	d00f      	beq.n	800cf68 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f001 fc83 	bl	800e856 <USBD_CtlError>
            ret = USBD_FAIL;
 800cf50:	2303      	movs	r3, #3
 800cf52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cf54:	e008      	b.n	800cf68 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cf56:	6839      	ldr	r1, [r7, #0]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f001 fc7c 	bl	800e856 <USBD_CtlError>
          ret = USBD_FAIL;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	75fb      	strb	r3, [r7, #23]
          break;
 800cf62:	e002      	b.n	800cf6a <USBD_CDC_Setup+0x19e>
          break;
 800cf64:	bf00      	nop
 800cf66:	e008      	b.n	800cf7a <USBD_CDC_Setup+0x1ae>
          break;
 800cf68:	bf00      	nop
      }
      break;
 800cf6a:	e006      	b.n	800cf7a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f001 fc71 	bl	800e856 <USBD_CtlError>
      ret = USBD_FAIL;
 800cf74:	2303      	movs	r3, #3
 800cf76:	75fb      	strb	r3, [r7, #23]
      break;
 800cf78:	bf00      	nop
  }

  return (uint8_t)ret;
 800cf7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3718      	adds	r7, #24
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	32b0      	adds	r2, #176	@ 0xb0
 800cfa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d101      	bne.n	800cfae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	e065      	b.n	800d07a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	32b0      	adds	r2, #176	@ 0xb0
 800cfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfbc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cfbe:	78fb      	ldrb	r3, [r7, #3]
 800cfc0:	f003 020f 	and.w	r2, r3, #15
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	440b      	add	r3, r1
 800cfd0:	3318      	adds	r3, #24
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d02f      	beq.n	800d038 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cfd8:	78fb      	ldrb	r3, [r7, #3]
 800cfda:	f003 020f 	and.w	r2, r3, #15
 800cfde:	6879      	ldr	r1, [r7, #4]
 800cfe0:	4613      	mov	r3, r2
 800cfe2:	009b      	lsls	r3, r3, #2
 800cfe4:	4413      	add	r3, r2
 800cfe6:	009b      	lsls	r3, r3, #2
 800cfe8:	440b      	add	r3, r1
 800cfea:	3318      	adds	r3, #24
 800cfec:	681a      	ldr	r2, [r3, #0]
 800cfee:	78fb      	ldrb	r3, [r7, #3]
 800cff0:	f003 010f 	and.w	r1, r3, #15
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	460b      	mov	r3, r1
 800cff8:	00db      	lsls	r3, r3, #3
 800cffa:	440b      	add	r3, r1
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	4403      	add	r3, r0
 800d000:	331c      	adds	r3, #28
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	fbb2 f1f3 	udiv	r1, r2, r3
 800d008:	fb01 f303 	mul.w	r3, r1, r3
 800d00c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d112      	bne.n	800d038 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d012:	78fb      	ldrb	r3, [r7, #3]
 800d014:	f003 020f 	and.w	r2, r3, #15
 800d018:	6879      	ldr	r1, [r7, #4]
 800d01a:	4613      	mov	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4413      	add	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	440b      	add	r3, r1
 800d024:	3318      	adds	r3, #24
 800d026:	2200      	movs	r2, #0
 800d028:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d02a:	78f9      	ldrb	r1, [r7, #3]
 800d02c:	2300      	movs	r3, #0
 800d02e:	2200      	movs	r2, #0
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f002 f98e 	bl	800f352 <USBD_LL_Transmit>
 800d036:	e01f      	b.n	800d078 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	2200      	movs	r2, #0
 800d03c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	33b0      	adds	r3, #176	@ 0xb0
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	4413      	add	r3, r2
 800d04e:	685b      	ldr	r3, [r3, #4]
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d010      	beq.n	800d078 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	33b0      	adds	r3, #176	@ 0xb0
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	4413      	add	r3, r2
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	691b      	ldr	r3, [r3, #16]
 800d068:	68ba      	ldr	r2, [r7, #8]
 800d06a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d074:	78fa      	ldrb	r2, [r7, #3]
 800d076:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	460b      	mov	r3, r1
 800d08c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	32b0      	adds	r2, #176	@ 0xb0
 800d098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d09c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	32b0      	adds	r2, #176	@ 0xb0
 800d0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d101      	bne.n	800d0b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	e01a      	b.n	800d0ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d0b4:	78fb      	ldrb	r3, [r7, #3]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f002 f98c 	bl	800f3d6 <USBD_LL_GetRxDataSize>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	33b0      	adds	r3, #176	@ 0xb0
 800d0d0:	009b      	lsls	r3, r3, #2
 800d0d2:	4413      	add	r3, r2
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	68fa      	ldr	r2, [r7, #12]
 800d0da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d0e4:	4611      	mov	r1, r2
 800d0e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b084      	sub	sp, #16
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	32b0      	adds	r2, #176	@ 0xb0
 800d104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d108:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d101      	bne.n	800d114 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d110:	2303      	movs	r3, #3
 800d112:	e024      	b.n	800d15e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	33b0      	adds	r3, #176	@ 0xb0
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4413      	add	r3, r2
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d019      	beq.n	800d15c <USBD_CDC_EP0_RxReady+0x6a>
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d12e:	2bff      	cmp	r3, #255	@ 0xff
 800d130:	d014      	beq.n	800d15c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	33b0      	adds	r3, #176	@ 0xb0
 800d13c:	009b      	lsls	r3, r3, #2
 800d13e:	4413      	add	r3, r2
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d14a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d152:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	22ff      	movs	r2, #255	@ 0xff
 800d158:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
	...

0800d168 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d170:	2182      	movs	r1, #130	@ 0x82
 800d172:	4818      	ldr	r0, [pc, #96]	@ (800d1d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d174:	f000 fd0f 	bl	800db96 <USBD_GetEpDesc>
 800d178:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d17a:	2101      	movs	r1, #1
 800d17c:	4815      	ldr	r0, [pc, #84]	@ (800d1d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d17e:	f000 fd0a 	bl	800db96 <USBD_GetEpDesc>
 800d182:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d184:	2181      	movs	r1, #129	@ 0x81
 800d186:	4813      	ldr	r0, [pc, #76]	@ (800d1d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d188:	f000 fd05 	bl	800db96 <USBD_GetEpDesc>
 800d18c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	2210      	movs	r2, #16
 800d198:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d006      	beq.n	800d1ae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1a8:	711a      	strb	r2, [r3, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1bc:	711a      	strb	r2, [r3, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2243      	movs	r2, #67	@ 0x43
 800d1c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d1c8:	4b02      	ldr	r3, [pc, #8]	@ (800d1d4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3718      	adds	r7, #24
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	2400005c 	.word	0x2400005c

0800d1d8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d1e0:	2182      	movs	r1, #130	@ 0x82
 800d1e2:	4818      	ldr	r0, [pc, #96]	@ (800d244 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d1e4:	f000 fcd7 	bl	800db96 <USBD_GetEpDesc>
 800d1e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d1ea:	2101      	movs	r1, #1
 800d1ec:	4815      	ldr	r0, [pc, #84]	@ (800d244 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d1ee:	f000 fcd2 	bl	800db96 <USBD_GetEpDesc>
 800d1f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d1f4:	2181      	movs	r1, #129	@ 0x81
 800d1f6:	4813      	ldr	r0, [pc, #76]	@ (800d244 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d1f8:	f000 fccd 	bl	800db96 <USBD_GetEpDesc>
 800d1fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	2210      	movs	r2, #16
 800d208:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d006      	beq.n	800d21e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	2200      	movs	r2, #0
 800d214:	711a      	strb	r2, [r3, #4]
 800d216:	2200      	movs	r2, #0
 800d218:	f042 0202 	orr.w	r2, r2, #2
 800d21c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d006      	beq.n	800d232 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2200      	movs	r2, #0
 800d228:	711a      	strb	r2, [r3, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f042 0202 	orr.w	r2, r2, #2
 800d230:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2243      	movs	r2, #67	@ 0x43
 800d236:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d238:	4b02      	ldr	r3, [pc, #8]	@ (800d244 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3718      	adds	r7, #24
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	2400005c 	.word	0x2400005c

0800d248 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d250:	2182      	movs	r1, #130	@ 0x82
 800d252:	4818      	ldr	r0, [pc, #96]	@ (800d2b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d254:	f000 fc9f 	bl	800db96 <USBD_GetEpDesc>
 800d258:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d25a:	2101      	movs	r1, #1
 800d25c:	4815      	ldr	r0, [pc, #84]	@ (800d2b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d25e:	f000 fc9a 	bl	800db96 <USBD_GetEpDesc>
 800d262:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d264:	2181      	movs	r1, #129	@ 0x81
 800d266:	4813      	ldr	r0, [pc, #76]	@ (800d2b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d268:	f000 fc95 	bl	800db96 <USBD_GetEpDesc>
 800d26c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	2210      	movs	r2, #16
 800d278:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d006      	beq.n	800d28e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	2200      	movs	r2, #0
 800d284:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d288:	711a      	strb	r2, [r3, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d006      	beq.n	800d2a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d29c:	711a      	strb	r2, [r3, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2243      	movs	r2, #67	@ 0x43
 800d2a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d2a8:	4b02      	ldr	r3, [pc, #8]	@ (800d2b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	2400005c 	.word	0x2400005c

0800d2b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	220a      	movs	r2, #10
 800d2c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d2c6:	4b03      	ldr	r3, [pc, #12]	@ (800d2d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr
 800d2d4:	24000018 	.word	0x24000018

0800d2d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d101      	bne.n	800d2ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e009      	b.n	800d300 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	33b0      	adds	r3, #176	@ 0xb0
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4413      	add	r3, r2
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b087      	sub	sp, #28
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	32b0      	adds	r2, #176	@ 0xb0
 800d322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d326:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d32e:	2303      	movs	r3, #3
 800d330:	e008      	b.n	800d344 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	68ba      	ldr	r2, [r7, #8]
 800d336:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	371c      	adds	r7, #28
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	32b0      	adds	r2, #176	@ 0xb0
 800d364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d368:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d101      	bne.n	800d374 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d370:	2303      	movs	r3, #3
 800d372:	e004      	b.n	800d37e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
	...

0800d38c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	32b0      	adds	r2, #176	@ 0xb0
 800d39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	32b0      	adds	r2, #176	@ 0xb0
 800d3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d101      	bne.n	800d3ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d3b6:	2303      	movs	r3, #3
 800d3b8:	e018      	b.n	800d3ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	7c1b      	ldrb	r3, [r3, #16]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10a      	bne.n	800d3d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d3c2:	4b0c      	ldr	r3, [pc, #48]	@ (800d3f4 <USBD_CDC_ReceivePacket+0x68>)
 800d3c4:	7819      	ldrb	r1, [r3, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d3cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f001 ffdf 	bl	800f394 <USBD_LL_PrepareReceive>
 800d3d6:	e008      	b.n	800d3ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d3d8:	4b06      	ldr	r3, [pc, #24]	@ (800d3f4 <USBD_CDC_ReceivePacket+0x68>)
 800d3da:	7819      	ldrb	r1, [r3, #0]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d3e2:	2340      	movs	r3, #64	@ 0x40
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f001 ffd5 	bl	800f394 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3710      	adds	r7, #16
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	240000a0 	.word	0x240000a0

0800d3f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	4613      	mov	r3, r2
 800d404:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d101      	bne.n	800d410 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d40c:	2303      	movs	r3, #3
 800d40e:	e01f      	b.n	800d450 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2200      	movs	r2, #0
 800d414:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2200      	movs	r2, #0
 800d41c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d003      	beq.n	800d436 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	2201      	movs	r2, #1
 800d43a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	79fa      	ldrb	r2, [r7, #7]
 800d442:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f001 fe4b 	bl	800f0e0 <USBD_LL_Init>
 800d44a:	4603      	mov	r3, r0
 800d44c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d462:	2300      	movs	r3, #0
 800d464:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d101      	bne.n	800d470 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d46c:	2303      	movs	r3, #3
 800d46e:	e025      	b.n	800d4bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	32ae      	adds	r2, #174	@ 0xae
 800d482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00f      	beq.n	800d4ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	32ae      	adds	r2, #174	@ 0xae
 800d496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d49c:	f107 020e 	add.w	r2, r7, #14
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	4798      	blx	r3
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d4ba:	2300      	movs	r3, #0
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3710      	adds	r7, #16
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f001 fe57 	bl	800f180 <USBD_LL_Start>
 800d4d2:	4603      	mov	r3, r0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b083      	sub	sp, #12
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d4e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	370c      	adds	r7, #12
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr

0800d4f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b084      	sub	sp, #16
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d009      	beq.n	800d520 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	78fa      	ldrb	r2, [r7, #3]
 800d516:	4611      	mov	r1, r2
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	4798      	blx	r3
 800d51c:	4603      	mov	r3, r0
 800d51e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d520:	7bfb      	ldrb	r3, [r7, #15]
}
 800d522:	4618      	mov	r0, r3
 800d524:	3710      	adds	r7, #16
 800d526:	46bd      	mov	sp, r7
 800d528:	bd80      	pop	{r7, pc}

0800d52a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d52a:	b580      	push	{r7, lr}
 800d52c:	b084      	sub	sp, #16
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
 800d532:	460b      	mov	r3, r1
 800d534:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d536:	2300      	movs	r3, #0
 800d538:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	78fa      	ldrb	r2, [r7, #3]
 800d544:	4611      	mov	r1, r2
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	4798      	blx	r3
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d001      	beq.n	800d554 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d550:	2303      	movs	r3, #3
 800d552:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d554:	7bfb      	ldrb	r3, [r7, #15]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b084      	sub	sp, #16
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
 800d566:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d56e:	6839      	ldr	r1, [r7, #0]
 800d570:	4618      	mov	r0, r3
 800d572:	f001 f936 	bl	800e7e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d584:	461a      	mov	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d592:	f003 031f 	and.w	r3, r3, #31
 800d596:	2b02      	cmp	r3, #2
 800d598:	d01a      	beq.n	800d5d0 <USBD_LL_SetupStage+0x72>
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d822      	bhi.n	800d5e4 <USBD_LL_SetupStage+0x86>
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d002      	beq.n	800d5a8 <USBD_LL_SetupStage+0x4a>
 800d5a2:	2b01      	cmp	r3, #1
 800d5a4:	d00a      	beq.n	800d5bc <USBD_LL_SetupStage+0x5e>
 800d5a6:	e01d      	b.n	800d5e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 fb63 	bl	800dc7c <USBD_StdDevReq>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ba:	e020      	b.n	800d5fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 fbcb 	bl	800dd60 <USBD_StdItfReq>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ce:	e016      	b.n	800d5fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 fc2d 	bl	800de38 <USBD_StdEPReq>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	73fb      	strb	r3, [r7, #15]
      break;
 800d5e2:	e00c      	b.n	800d5fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d5ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f001 fe24 	bl	800f240 <USBD_LL_StallEP>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	73fb      	strb	r3, [r7, #15]
      break;
 800d5fc:	bf00      	nop
  }

  return ret;
 800d5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b086      	sub	sp, #24
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	60f8      	str	r0, [r7, #12]
 800d610:	460b      	mov	r3, r1
 800d612:	607a      	str	r2, [r7, #4]
 800d614:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d616:	2300      	movs	r3, #0
 800d618:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d61a:	7afb      	ldrb	r3, [r7, #11]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d16e      	bne.n	800d6fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d626:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d62e:	2b03      	cmp	r3, #3
 800d630:	f040 8098 	bne.w	800d764 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	689a      	ldr	r2, [r3, #8]
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	68db      	ldr	r3, [r3, #12]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d913      	bls.n	800d668 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	689a      	ldr	r2, [r3, #8]
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	1ad2      	subs	r2, r2, r3
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	68da      	ldr	r2, [r3, #12]
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	4293      	cmp	r3, r2
 800d658:	bf28      	it	cs
 800d65a:	4613      	movcs	r3, r2
 800d65c:	461a      	mov	r2, r3
 800d65e:	6879      	ldr	r1, [r7, #4]
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f001 f9be 	bl	800e9e2 <USBD_CtlContinueRx>
 800d666:	e07d      	b.n	800d764 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d66e:	f003 031f 	and.w	r3, r3, #31
 800d672:	2b02      	cmp	r3, #2
 800d674:	d014      	beq.n	800d6a0 <USBD_LL_DataOutStage+0x98>
 800d676:	2b02      	cmp	r3, #2
 800d678:	d81d      	bhi.n	800d6b6 <USBD_LL_DataOutStage+0xae>
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d002      	beq.n	800d684 <USBD_LL_DataOutStage+0x7c>
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d003      	beq.n	800d68a <USBD_LL_DataOutStage+0x82>
 800d682:	e018      	b.n	800d6b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d684:	2300      	movs	r3, #0
 800d686:	75bb      	strb	r3, [r7, #22]
            break;
 800d688:	e018      	b.n	800d6bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d690:	b2db      	uxtb	r3, r3
 800d692:	4619      	mov	r1, r3
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f000 fa64 	bl	800db62 <USBD_CoreFindIF>
 800d69a:	4603      	mov	r3, r0
 800d69c:	75bb      	strb	r3, [r7, #22]
            break;
 800d69e:	e00d      	b.n	800d6bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f000 fa66 	bl	800db7c <USBD_CoreFindEP>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	75bb      	strb	r3, [r7, #22]
            break;
 800d6b4:	e002      	b.n	800d6bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	75bb      	strb	r3, [r7, #22]
            break;
 800d6ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d6bc:	7dbb      	ldrb	r3, [r7, #22]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d119      	bne.n	800d6f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	d113      	bne.n	800d6f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d6ce:	7dba      	ldrb	r2, [r7, #22]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	32ae      	adds	r2, #174	@ 0xae
 800d6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6d8:	691b      	ldr	r3, [r3, #16]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00b      	beq.n	800d6f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d6de:	7dba      	ldrb	r2, [r7, #22]
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d6e6:	7dba      	ldrb	r2, [r7, #22]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	32ae      	adds	r2, #174	@ 0xae
 800d6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f0:	691b      	ldr	r3, [r3, #16]
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f001 f984 	bl	800ea04 <USBD_CtlSendStatus>
 800d6fc:	e032      	b.n	800d764 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d6fe:	7afb      	ldrb	r3, [r7, #11]
 800d700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d704:	b2db      	uxtb	r3, r3
 800d706:	4619      	mov	r1, r3
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f000 fa37 	bl	800db7c <USBD_CoreFindEP>
 800d70e:	4603      	mov	r3, r0
 800d710:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d712:	7dbb      	ldrb	r3, [r7, #22]
 800d714:	2bff      	cmp	r3, #255	@ 0xff
 800d716:	d025      	beq.n	800d764 <USBD_LL_DataOutStage+0x15c>
 800d718:	7dbb      	ldrb	r3, [r7, #22]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d122      	bne.n	800d764 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d724:	b2db      	uxtb	r3, r3
 800d726:	2b03      	cmp	r3, #3
 800d728:	d117      	bne.n	800d75a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d72a:	7dba      	ldrb	r2, [r7, #22]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	32ae      	adds	r2, #174	@ 0xae
 800d730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d734:	699b      	ldr	r3, [r3, #24]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00f      	beq.n	800d75a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d73a:	7dba      	ldrb	r2, [r7, #22]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d742:	7dba      	ldrb	r2, [r7, #22]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	32ae      	adds	r2, #174	@ 0xae
 800d748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74c:	699b      	ldr	r3, [r3, #24]
 800d74e:	7afa      	ldrb	r2, [r7, #11]
 800d750:	4611      	mov	r1, r2
 800d752:	68f8      	ldr	r0, [r7, #12]
 800d754:	4798      	blx	r3
 800d756:	4603      	mov	r3, r0
 800d758:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d75a:	7dfb      	ldrb	r3, [r7, #23]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d001      	beq.n	800d764 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d760:	7dfb      	ldrb	r3, [r7, #23]
 800d762:	e000      	b.n	800d766 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3718      	adds	r7, #24
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b086      	sub	sp, #24
 800d772:	af00      	add	r7, sp, #0
 800d774:	60f8      	str	r0, [r7, #12]
 800d776:	460b      	mov	r3, r1
 800d778:	607a      	str	r2, [r7, #4]
 800d77a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d77c:	7afb      	ldrb	r3, [r7, #11]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d16f      	bne.n	800d862 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3314      	adds	r3, #20
 800d786:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d15a      	bne.n	800d848 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	689a      	ldr	r2, [r3, #8]
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d914      	bls.n	800d7c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	689a      	ldr	r2, [r3, #8]
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	1ad2      	subs	r2, r2, r3
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	6879      	ldr	r1, [r7, #4]
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f001 f8e6 	bl	800e986 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	2200      	movs	r2, #0
 800d7be:	2100      	movs	r1, #0
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f001 fde7 	bl	800f394 <USBD_LL_PrepareReceive>
 800d7c6:	e03f      	b.n	800d848 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	68da      	ldr	r2, [r3, #12]
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	d11c      	bne.n	800d80e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d316      	bcc.n	800d80e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	685a      	ldr	r2, [r3, #4]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d20f      	bcs.n	800d80e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	f001 f8c7 	bl	800e986 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d800:	2300      	movs	r3, #0
 800d802:	2200      	movs	r2, #0
 800d804:	2100      	movs	r1, #0
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f001 fdc4 	bl	800f394 <USBD_LL_PrepareReceive>
 800d80c:	e01c      	b.n	800d848 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b03      	cmp	r3, #3
 800d818:	d10f      	bne.n	800d83a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d009      	beq.n	800d83a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2200      	movs	r2, #0
 800d82a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d83a:	2180      	movs	r1, #128	@ 0x80
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f001 fcff 	bl	800f240 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f001 f8f1 	bl	800ea2a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d03a      	beq.n	800d8c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f7ff fe42 	bl	800d4dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d860:	e032      	b.n	800d8c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d862:	7afb      	ldrb	r3, [r7, #11]
 800d864:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d868:	b2db      	uxtb	r3, r3
 800d86a:	4619      	mov	r1, r3
 800d86c:	68f8      	ldr	r0, [r7, #12]
 800d86e:	f000 f985 	bl	800db7c <USBD_CoreFindEP>
 800d872:	4603      	mov	r3, r0
 800d874:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d876:	7dfb      	ldrb	r3, [r7, #23]
 800d878:	2bff      	cmp	r3, #255	@ 0xff
 800d87a:	d025      	beq.n	800d8c8 <USBD_LL_DataInStage+0x15a>
 800d87c:	7dfb      	ldrb	r3, [r7, #23]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d122      	bne.n	800d8c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b03      	cmp	r3, #3
 800d88c:	d11c      	bne.n	800d8c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d88e:	7dfa      	ldrb	r2, [r7, #23]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	32ae      	adds	r2, #174	@ 0xae
 800d894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d014      	beq.n	800d8c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d89e:	7dfa      	ldrb	r2, [r7, #23]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d8a6:	7dfa      	ldrb	r2, [r7, #23]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	32ae      	adds	r2, #174	@ 0xae
 800d8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	7afa      	ldrb	r2, [r7, #11]
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	4798      	blx	r3
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d8be:	7dbb      	ldrb	r3, [r7, #22]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d8c4:	7dbb      	ldrb	r3, [r7, #22]
 800d8c6:	e000      	b.n	800d8ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b084      	sub	sp, #16
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2201      	movs	r2, #1
 800d8e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d014      	beq.n	800d938 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00e      	beq.n	800d938 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	6852      	ldr	r2, [r2, #4]
 800d926:	b2d2      	uxtb	r2, r2
 800d928:	4611      	mov	r1, r2
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	4798      	blx	r3
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d001      	beq.n	800d938 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d934:	2303      	movs	r3, #3
 800d936:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d938:	2340      	movs	r3, #64	@ 0x40
 800d93a:	2200      	movs	r2, #0
 800d93c:	2100      	movs	r1, #0
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f001 fc39 	bl	800f1b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2240      	movs	r2, #64	@ 0x40
 800d950:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d954:	2340      	movs	r3, #64	@ 0x40
 800d956:	2200      	movs	r2, #0
 800d958:	2180      	movs	r1, #128	@ 0x80
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f001 fc2b 	bl	800f1b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2240      	movs	r2, #64	@ 0x40
 800d96a:	621a      	str	r2, [r3, #32]

  return ret;
 800d96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3710      	adds	r7, #16
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d976:	b480      	push	{r7}
 800d978:	b083      	sub	sp, #12
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
 800d97e:	460b      	mov	r3, r1
 800d980:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	78fa      	ldrb	r2, [r7, #3]
 800d986:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d996:	b480      	push	{r7}
 800d998:	b083      	sub	sp, #12
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	2b04      	cmp	r3, #4
 800d9a8:	d006      	beq.n	800d9b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2204      	movs	r2, #4
 800d9bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d9c0:	2300      	movs	r3, #0
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr

0800d9ce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d9ce:	b480      	push	{r7}
 800d9d0:	b083      	sub	sp, #12
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	2b04      	cmp	r3, #4
 800d9e0:	d106      	bne.n	800d9f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	370c      	adds	r7, #12
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr

0800d9fe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b082      	sub	sp, #8
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b03      	cmp	r3, #3
 800da10:	d110      	bne.n	800da34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00b      	beq.n	800da34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da22:	69db      	ldr	r3, [r3, #28]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d005      	beq.n	800da34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da2e:	69db      	ldr	r3, [r3, #28]
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800da34:	2300      	movs	r3, #0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b082      	sub	sp, #8
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	460b      	mov	r3, r1
 800da48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	32ae      	adds	r2, #174	@ 0xae
 800da54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d101      	bne.n	800da60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800da5c:	2303      	movs	r3, #3
 800da5e:	e01c      	b.n	800da9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b03      	cmp	r3, #3
 800da6a:	d115      	bne.n	800da98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	32ae      	adds	r2, #174	@ 0xae
 800da76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da7a:	6a1b      	ldr	r3, [r3, #32]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00b      	beq.n	800da98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	32ae      	adds	r2, #174	@ 0xae
 800da8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da8e:	6a1b      	ldr	r3, [r3, #32]
 800da90:	78fa      	ldrb	r2, [r7, #3]
 800da92:	4611      	mov	r1, r2
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da98:	2300      	movs	r3, #0
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b082      	sub	sp, #8
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
 800daaa:	460b      	mov	r3, r1
 800daac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	32ae      	adds	r2, #174	@ 0xae
 800dab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d101      	bne.n	800dac4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dac0:	2303      	movs	r3, #3
 800dac2:	e01c      	b.n	800dafe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	2b03      	cmp	r3, #3
 800dace:	d115      	bne.n	800dafc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	32ae      	adds	r2, #174	@ 0xae
 800dada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00b      	beq.n	800dafc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	32ae      	adds	r2, #174	@ 0xae
 800daee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf4:	78fa      	ldrb	r2, [r7, #3]
 800daf6:	4611      	mov	r1, r2
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800db06:	b480      	push	{r7}
 800db08:	b083      	sub	sp, #12
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db0e:	2300      	movs	r3, #0
}
 800db10:	4618      	mov	r0, r3
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800db24:	2300      	movs	r3, #0
 800db26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00e      	beq.n	800db58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	6852      	ldr	r2, [r2, #4]
 800db46:	b2d2      	uxtb	r2, r2
 800db48:	4611      	mov	r1, r2
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	4798      	blx	r3
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d001      	beq.n	800db58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800db54:	2303      	movs	r3, #3
 800db56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db58:	7bfb      	ldrb	r3, [r7, #15]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db62:	b480      	push	{r7}
 800db64:	b083      	sub	sp, #12
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	460b      	mov	r3, r1
 800db6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db70:	4618      	mov	r0, r3
 800db72:	370c      	adds	r7, #12
 800db74:	46bd      	mov	sp, r7
 800db76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7a:	4770      	bx	lr

0800db7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db7c:	b480      	push	{r7}
 800db7e:	b083      	sub	sp, #12
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	460b      	mov	r3, r1
 800db86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	370c      	adds	r7, #12
 800db8e:	46bd      	mov	sp, r7
 800db90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db94:	4770      	bx	lr

0800db96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b086      	sub	sp, #24
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	460b      	mov	r3, r1
 800dba0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	885b      	ldrh	r3, [r3, #2]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	68fa      	ldr	r2, [r7, #12]
 800dbb6:	7812      	ldrb	r2, [r2, #0]
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d91f      	bls.n	800dbfc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dbc2:	e013      	b.n	800dbec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dbc4:	f107 030a 	add.w	r3, r7, #10
 800dbc8:	4619      	mov	r1, r3
 800dbca:	6978      	ldr	r0, [r7, #20]
 800dbcc:	f000 f81b 	bl	800dc06 <USBD_GetNextDesc>
 800dbd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	785b      	ldrb	r3, [r3, #1]
 800dbd6:	2b05      	cmp	r3, #5
 800dbd8:	d108      	bne.n	800dbec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	789b      	ldrb	r3, [r3, #2]
 800dbe2:	78fa      	ldrb	r2, [r7, #3]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d008      	beq.n	800dbfa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	885b      	ldrh	r3, [r3, #2]
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	897b      	ldrh	r3, [r7, #10]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d8e5      	bhi.n	800dbc4 <USBD_GetEpDesc+0x2e>
 800dbf8:	e000      	b.n	800dbfc <USBD_GetEpDesc+0x66>
          break;
 800dbfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dbfc:	693b      	ldr	r3, [r7, #16]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3718      	adds	r7, #24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dc06:	b480      	push	{r7}
 800dc08:	b085      	sub	sp, #20
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	881b      	ldrh	r3, [r3, #0]
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	7812      	ldrb	r2, [r2, #0]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	461a      	mov	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dc30:	68fb      	ldr	r3, [r7, #12]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr

0800dc3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dc3e:	b480      	push	{r7}
 800dc40:	b087      	sub	sp, #28
 800dc42:	af00      	add	r7, sp, #0
 800dc44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	3301      	adds	r3, #1
 800dc54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dc5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800dc60:	021b      	lsls	r3, r3, #8
 800dc62:	b21a      	sxth	r2, r3
 800dc64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	b21b      	sxth	r3, r3
 800dc6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc6e:	89fb      	ldrh	r3, [r7, #14]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	371c      	adds	r7, #28
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc86:	2300      	movs	r3, #0
 800dc88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dc92:	2b40      	cmp	r3, #64	@ 0x40
 800dc94:	d005      	beq.n	800dca2 <USBD_StdDevReq+0x26>
 800dc96:	2b40      	cmp	r3, #64	@ 0x40
 800dc98:	d857      	bhi.n	800dd4a <USBD_StdDevReq+0xce>
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d00f      	beq.n	800dcbe <USBD_StdDevReq+0x42>
 800dc9e:	2b20      	cmp	r3, #32
 800dca0:	d153      	bne.n	800dd4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	32ae      	adds	r2, #174	@ 0xae
 800dcac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcb0:	689b      	ldr	r3, [r3, #8]
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	4798      	blx	r3
 800dcb8:	4603      	mov	r3, r0
 800dcba:	73fb      	strb	r3, [r7, #15]
      break;
 800dcbc:	e04a      	b.n	800dd54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	785b      	ldrb	r3, [r3, #1]
 800dcc2:	2b09      	cmp	r3, #9
 800dcc4:	d83b      	bhi.n	800dd3e <USBD_StdDevReq+0xc2>
 800dcc6:	a201      	add	r2, pc, #4	@ (adr r2, 800dccc <USBD_StdDevReq+0x50>)
 800dcc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dccc:	0800dd21 	.word	0x0800dd21
 800dcd0:	0800dd35 	.word	0x0800dd35
 800dcd4:	0800dd3f 	.word	0x0800dd3f
 800dcd8:	0800dd2b 	.word	0x0800dd2b
 800dcdc:	0800dd3f 	.word	0x0800dd3f
 800dce0:	0800dcff 	.word	0x0800dcff
 800dce4:	0800dcf5 	.word	0x0800dcf5
 800dce8:	0800dd3f 	.word	0x0800dd3f
 800dcec:	0800dd17 	.word	0x0800dd17
 800dcf0:	0800dd09 	.word	0x0800dd09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dcf4:	6839      	ldr	r1, [r7, #0]
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 fa3c 	bl	800e174 <USBD_GetDescriptor>
          break;
 800dcfc:	e024      	b.n	800dd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dcfe:	6839      	ldr	r1, [r7, #0]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fbcb 	bl	800e49c <USBD_SetAddress>
          break;
 800dd06:	e01f      	b.n	800dd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fc0a 	bl	800e524 <USBD_SetConfig>
 800dd10:	4603      	mov	r3, r0
 800dd12:	73fb      	strb	r3, [r7, #15]
          break;
 800dd14:	e018      	b.n	800dd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dd16:	6839      	ldr	r1, [r7, #0]
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 fcad 	bl	800e678 <USBD_GetConfig>
          break;
 800dd1e:	e013      	b.n	800dd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dd20:	6839      	ldr	r1, [r7, #0]
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 fcde 	bl	800e6e4 <USBD_GetStatus>
          break;
 800dd28:	e00e      	b.n	800dd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dd2a:	6839      	ldr	r1, [r7, #0]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fd0d 	bl	800e74c <USBD_SetFeature>
          break;
 800dd32:	e009      	b.n	800dd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dd34:	6839      	ldr	r1, [r7, #0]
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 fd31 	bl	800e79e <USBD_ClrFeature>
          break;
 800dd3c:	e004      	b.n	800dd48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dd3e:	6839      	ldr	r1, [r7, #0]
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 fd88 	bl	800e856 <USBD_CtlError>
          break;
 800dd46:	bf00      	nop
      }
      break;
 800dd48:	e004      	b.n	800dd54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fd82 	bl	800e856 <USBD_CtlError>
      break;
 800dd52:	bf00      	nop
  }

  return ret;
 800dd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3710      	adds	r7, #16
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop

0800dd60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd76:	2b40      	cmp	r3, #64	@ 0x40
 800dd78:	d005      	beq.n	800dd86 <USBD_StdItfReq+0x26>
 800dd7a:	2b40      	cmp	r3, #64	@ 0x40
 800dd7c:	d852      	bhi.n	800de24 <USBD_StdItfReq+0xc4>
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <USBD_StdItfReq+0x26>
 800dd82:	2b20      	cmp	r3, #32
 800dd84:	d14e      	bne.n	800de24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	2b02      	cmp	r3, #2
 800dd92:	d840      	bhi.n	800de16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	889b      	ldrh	r3, [r3, #4]
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d836      	bhi.n	800de0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	889b      	ldrh	r3, [r3, #4]
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	4619      	mov	r1, r3
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7ff fedb 	bl	800db62 <USBD_CoreFindIF>
 800ddac:	4603      	mov	r3, r0
 800ddae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddb0:	7bbb      	ldrb	r3, [r7, #14]
 800ddb2:	2bff      	cmp	r3, #255	@ 0xff
 800ddb4:	d01d      	beq.n	800ddf2 <USBD_StdItfReq+0x92>
 800ddb6:	7bbb      	ldrb	r3, [r7, #14]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d11a      	bne.n	800ddf2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ddbc:	7bba      	ldrb	r2, [r7, #14]
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	32ae      	adds	r2, #174	@ 0xae
 800ddc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00f      	beq.n	800ddec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ddcc:	7bba      	ldrb	r2, [r7, #14]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ddd4:	7bba      	ldrb	r2, [r7, #14]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	32ae      	adds	r2, #174	@ 0xae
 800ddda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	4798      	blx	r3
 800dde6:	4603      	mov	r3, r0
 800dde8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ddea:	e004      	b.n	800ddf6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ddec:	2303      	movs	r3, #3
 800ddee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ddf0:	e001      	b.n	800ddf6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ddf2:	2303      	movs	r3, #3
 800ddf4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	88db      	ldrh	r3, [r3, #6]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d110      	bne.n	800de20 <USBD_StdItfReq+0xc0>
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10d      	bne.n	800de20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fdfd 	bl	800ea04 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800de0a:	e009      	b.n	800de20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fd21 	bl	800e856 <USBD_CtlError>
          break;
 800de14:	e004      	b.n	800de20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800de16:	6839      	ldr	r1, [r7, #0]
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 fd1c 	bl	800e856 <USBD_CtlError>
          break;
 800de1e:	e000      	b.n	800de22 <USBD_StdItfReq+0xc2>
          break;
 800de20:	bf00      	nop
      }
      break;
 800de22:	e004      	b.n	800de2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 fd15 	bl	800e856 <USBD_CtlError>
      break;
 800de2c:	bf00      	nop
  }

  return ret;
 800de2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3710      	adds	r7, #16
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800de42:	2300      	movs	r3, #0
 800de44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	889b      	ldrh	r3, [r3, #4]
 800de4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de54:	2b40      	cmp	r3, #64	@ 0x40
 800de56:	d007      	beq.n	800de68 <USBD_StdEPReq+0x30>
 800de58:	2b40      	cmp	r3, #64	@ 0x40
 800de5a:	f200 817f 	bhi.w	800e15c <USBD_StdEPReq+0x324>
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d02a      	beq.n	800deb8 <USBD_StdEPReq+0x80>
 800de62:	2b20      	cmp	r3, #32
 800de64:	f040 817a 	bne.w	800e15c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800de68:	7bbb      	ldrb	r3, [r7, #14]
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff fe85 	bl	800db7c <USBD_CoreFindEP>
 800de72:	4603      	mov	r3, r0
 800de74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de76:	7b7b      	ldrb	r3, [r7, #13]
 800de78:	2bff      	cmp	r3, #255	@ 0xff
 800de7a:	f000 8174 	beq.w	800e166 <USBD_StdEPReq+0x32e>
 800de7e:	7b7b      	ldrb	r3, [r7, #13]
 800de80:	2b00      	cmp	r3, #0
 800de82:	f040 8170 	bne.w	800e166 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800de86:	7b7a      	ldrb	r2, [r7, #13]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800de8e:	7b7a      	ldrb	r2, [r7, #13]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	32ae      	adds	r2, #174	@ 0xae
 800de94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 8163 	beq.w	800e166 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800dea0:	7b7a      	ldrb	r2, [r7, #13]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	32ae      	adds	r2, #174	@ 0xae
 800dea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	6839      	ldr	r1, [r7, #0]
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	4798      	blx	r3
 800deb2:	4603      	mov	r3, r0
 800deb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800deb6:	e156      	b.n	800e166 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	785b      	ldrb	r3, [r3, #1]
 800debc:	2b03      	cmp	r3, #3
 800debe:	d008      	beq.n	800ded2 <USBD_StdEPReq+0x9a>
 800dec0:	2b03      	cmp	r3, #3
 800dec2:	f300 8145 	bgt.w	800e150 <USBD_StdEPReq+0x318>
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	f000 809b 	beq.w	800e002 <USBD_StdEPReq+0x1ca>
 800decc:	2b01      	cmp	r3, #1
 800dece:	d03c      	beq.n	800df4a <USBD_StdEPReq+0x112>
 800ded0:	e13e      	b.n	800e150 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b02      	cmp	r3, #2
 800dedc:	d002      	beq.n	800dee4 <USBD_StdEPReq+0xac>
 800dede:	2b03      	cmp	r3, #3
 800dee0:	d016      	beq.n	800df10 <USBD_StdEPReq+0xd8>
 800dee2:	e02c      	b.n	800df3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dee4:	7bbb      	ldrb	r3, [r7, #14]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00d      	beq.n	800df06 <USBD_StdEPReq+0xce>
 800deea:	7bbb      	ldrb	r3, [r7, #14]
 800deec:	2b80      	cmp	r3, #128	@ 0x80
 800deee:	d00a      	beq.n	800df06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800def0:	7bbb      	ldrb	r3, [r7, #14]
 800def2:	4619      	mov	r1, r3
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f001 f9a3 	bl	800f240 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800defa:	2180      	movs	r1, #128	@ 0x80
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f001 f99f 	bl	800f240 <USBD_LL_StallEP>
 800df02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df04:	e020      	b.n	800df48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800df06:	6839      	ldr	r1, [r7, #0]
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fca4 	bl	800e856 <USBD_CtlError>
              break;
 800df0e:	e01b      	b.n	800df48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	885b      	ldrh	r3, [r3, #2]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d10e      	bne.n	800df36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800df18:	7bbb      	ldrb	r3, [r7, #14]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00b      	beq.n	800df36 <USBD_StdEPReq+0xfe>
 800df1e:	7bbb      	ldrb	r3, [r7, #14]
 800df20:	2b80      	cmp	r3, #128	@ 0x80
 800df22:	d008      	beq.n	800df36 <USBD_StdEPReq+0xfe>
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	88db      	ldrh	r3, [r3, #6]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d104      	bne.n	800df36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800df2c:	7bbb      	ldrb	r3, [r7, #14]
 800df2e:	4619      	mov	r1, r3
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f001 f985 	bl	800f240 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f000 fd64 	bl	800ea04 <USBD_CtlSendStatus>

              break;
 800df3c:	e004      	b.n	800df48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fc88 	bl	800e856 <USBD_CtlError>
              break;
 800df46:	bf00      	nop
          }
          break;
 800df48:	e107      	b.n	800e15a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b02      	cmp	r3, #2
 800df54:	d002      	beq.n	800df5c <USBD_StdEPReq+0x124>
 800df56:	2b03      	cmp	r3, #3
 800df58:	d016      	beq.n	800df88 <USBD_StdEPReq+0x150>
 800df5a:	e04b      	b.n	800dff4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d00d      	beq.n	800df7e <USBD_StdEPReq+0x146>
 800df62:	7bbb      	ldrb	r3, [r7, #14]
 800df64:	2b80      	cmp	r3, #128	@ 0x80
 800df66:	d00a      	beq.n	800df7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df68:	7bbb      	ldrb	r3, [r7, #14]
 800df6a:	4619      	mov	r1, r3
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f001 f967 	bl	800f240 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df72:	2180      	movs	r1, #128	@ 0x80
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f001 f963 	bl	800f240 <USBD_LL_StallEP>
 800df7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df7c:	e040      	b.n	800e000 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800df7e:	6839      	ldr	r1, [r7, #0]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 fc68 	bl	800e856 <USBD_CtlError>
              break;
 800df86:	e03b      	b.n	800e000 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	885b      	ldrh	r3, [r3, #2]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d136      	bne.n	800dffe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df90:	7bbb      	ldrb	r3, [r7, #14]
 800df92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df96:	2b00      	cmp	r3, #0
 800df98:	d004      	beq.n	800dfa4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df9a:	7bbb      	ldrb	r3, [r7, #14]
 800df9c:	4619      	mov	r1, r3
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f001 f96d 	bl	800f27e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fd2d 	bl	800ea04 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dfaa:	7bbb      	ldrb	r3, [r7, #14]
 800dfac:	4619      	mov	r1, r3
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff fde4 	bl	800db7c <USBD_CoreFindEP>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dfb8:	7b7b      	ldrb	r3, [r7, #13]
 800dfba:	2bff      	cmp	r3, #255	@ 0xff
 800dfbc:	d01f      	beq.n	800dffe <USBD_StdEPReq+0x1c6>
 800dfbe:	7b7b      	ldrb	r3, [r7, #13]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d11c      	bne.n	800dffe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dfc4:	7b7a      	ldrb	r2, [r7, #13]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dfcc:	7b7a      	ldrb	r2, [r7, #13]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	32ae      	adds	r2, #174	@ 0xae
 800dfd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d010      	beq.n	800dffe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dfdc:	7b7a      	ldrb	r2, [r7, #13]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	32ae      	adds	r2, #174	@ 0xae
 800dfe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	6839      	ldr	r1, [r7, #0]
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	4798      	blx	r3
 800dfee:	4603      	mov	r3, r0
 800dff0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dff2:	e004      	b.n	800dffe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dff4:	6839      	ldr	r1, [r7, #0]
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 fc2d 	bl	800e856 <USBD_CtlError>
              break;
 800dffc:	e000      	b.n	800e000 <USBD_StdEPReq+0x1c8>
              break;
 800dffe:	bf00      	nop
          }
          break;
 800e000:	e0ab      	b.n	800e15a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	d002      	beq.n	800e014 <USBD_StdEPReq+0x1dc>
 800e00e:	2b03      	cmp	r3, #3
 800e010:	d032      	beq.n	800e078 <USBD_StdEPReq+0x240>
 800e012:	e097      	b.n	800e144 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e014:	7bbb      	ldrb	r3, [r7, #14]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d007      	beq.n	800e02a <USBD_StdEPReq+0x1f2>
 800e01a:	7bbb      	ldrb	r3, [r7, #14]
 800e01c:	2b80      	cmp	r3, #128	@ 0x80
 800e01e:	d004      	beq.n	800e02a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e020:	6839      	ldr	r1, [r7, #0]
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f000 fc17 	bl	800e856 <USBD_CtlError>
                break;
 800e028:	e091      	b.n	800e14e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e02a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	da0b      	bge.n	800e04a <USBD_StdEPReq+0x212>
 800e032:	7bbb      	ldrb	r3, [r7, #14]
 800e034:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e038:	4613      	mov	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4413      	add	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	3310      	adds	r3, #16
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	4413      	add	r3, r2
 800e046:	3304      	adds	r3, #4
 800e048:	e00b      	b.n	800e062 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e04a:	7bbb      	ldrb	r3, [r7, #14]
 800e04c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e050:	4613      	mov	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4413      	add	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e05c:	687a      	ldr	r2, [r7, #4]
 800e05e:	4413      	add	r3, r2
 800e060:	3304      	adds	r3, #4
 800e062:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	2200      	movs	r2, #0
 800e068:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	2202      	movs	r2, #2
 800e06e:	4619      	mov	r1, r3
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 fc6d 	bl	800e950 <USBD_CtlSendData>
              break;
 800e076:	e06a      	b.n	800e14e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	da11      	bge.n	800e0a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e080:	7bbb      	ldrb	r3, [r7, #14]
 800e082:	f003 020f 	and.w	r2, r3, #15
 800e086:	6879      	ldr	r1, [r7, #4]
 800e088:	4613      	mov	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	440b      	add	r3, r1
 800e092:	3324      	adds	r3, #36	@ 0x24
 800e094:	881b      	ldrh	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d117      	bne.n	800e0ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e09a:	6839      	ldr	r1, [r7, #0]
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f000 fbda 	bl	800e856 <USBD_CtlError>
                  break;
 800e0a2:	e054      	b.n	800e14e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e0a4:	7bbb      	ldrb	r3, [r7, #14]
 800e0a6:	f003 020f 	and.w	r2, r3, #15
 800e0aa:	6879      	ldr	r1, [r7, #4]
 800e0ac:	4613      	mov	r3, r2
 800e0ae:	009b      	lsls	r3, r3, #2
 800e0b0:	4413      	add	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	440b      	add	r3, r1
 800e0b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e0ba:	881b      	ldrh	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d104      	bne.n	800e0ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fbc7 	bl	800e856 <USBD_CtlError>
                  break;
 800e0c8:	e041      	b.n	800e14e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	da0b      	bge.n	800e0ea <USBD_StdEPReq+0x2b2>
 800e0d2:	7bbb      	ldrb	r3, [r7, #14]
 800e0d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e0d8:	4613      	mov	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	4413      	add	r3, r2
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	3310      	adds	r3, #16
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	3304      	adds	r3, #4
 800e0e8:	e00b      	b.n	800e102 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e0ea:	7bbb      	ldrb	r3, [r7, #14]
 800e0ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0f0:	4613      	mov	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	4413      	add	r3, r2
 800e100:	3304      	adds	r3, #4
 800e102:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e104:	7bbb      	ldrb	r3, [r7, #14]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d002      	beq.n	800e110 <USBD_StdEPReq+0x2d8>
 800e10a:	7bbb      	ldrb	r3, [r7, #14]
 800e10c:	2b80      	cmp	r3, #128	@ 0x80
 800e10e:	d103      	bne.n	800e118 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	2200      	movs	r2, #0
 800e114:	601a      	str	r2, [r3, #0]
 800e116:	e00e      	b.n	800e136 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e118:	7bbb      	ldrb	r3, [r7, #14]
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f001 f8cd 	bl	800f2bc <USBD_LL_IsStallEP>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	2201      	movs	r2, #1
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	e002      	b.n	800e136 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	2200      	movs	r2, #0
 800e134:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	2202      	movs	r2, #2
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 fc07 	bl	800e950 <USBD_CtlSendData>
              break;
 800e142:	e004      	b.n	800e14e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e144:	6839      	ldr	r1, [r7, #0]
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f000 fb85 	bl	800e856 <USBD_CtlError>
              break;
 800e14c:	bf00      	nop
          }
          break;
 800e14e:	e004      	b.n	800e15a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e150:	6839      	ldr	r1, [r7, #0]
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 fb7f 	bl	800e856 <USBD_CtlError>
          break;
 800e158:	bf00      	nop
      }
      break;
 800e15a:	e005      	b.n	800e168 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fb79 	bl	800e856 <USBD_CtlError>
      break;
 800e164:	e000      	b.n	800e168 <USBD_StdEPReq+0x330>
      break;
 800e166:	bf00      	nop
  }

  return ret;
 800e168:	7bfb      	ldrb	r3, [r7, #15]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
	...

0800e174 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e17e:	2300      	movs	r3, #0
 800e180:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e182:	2300      	movs	r3, #0
 800e184:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e186:	2300      	movs	r3, #0
 800e188:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	885b      	ldrh	r3, [r3, #2]
 800e18e:	0a1b      	lsrs	r3, r3, #8
 800e190:	b29b      	uxth	r3, r3
 800e192:	3b01      	subs	r3, #1
 800e194:	2b0e      	cmp	r3, #14
 800e196:	f200 8152 	bhi.w	800e43e <USBD_GetDescriptor+0x2ca>
 800e19a:	a201      	add	r2, pc, #4	@ (adr r2, 800e1a0 <USBD_GetDescriptor+0x2c>)
 800e19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a0:	0800e211 	.word	0x0800e211
 800e1a4:	0800e229 	.word	0x0800e229
 800e1a8:	0800e269 	.word	0x0800e269
 800e1ac:	0800e43f 	.word	0x0800e43f
 800e1b0:	0800e43f 	.word	0x0800e43f
 800e1b4:	0800e3df 	.word	0x0800e3df
 800e1b8:	0800e40b 	.word	0x0800e40b
 800e1bc:	0800e43f 	.word	0x0800e43f
 800e1c0:	0800e43f 	.word	0x0800e43f
 800e1c4:	0800e43f 	.word	0x0800e43f
 800e1c8:	0800e43f 	.word	0x0800e43f
 800e1cc:	0800e43f 	.word	0x0800e43f
 800e1d0:	0800e43f 	.word	0x0800e43f
 800e1d4:	0800e43f 	.word	0x0800e43f
 800e1d8:	0800e1dd 	.word	0x0800e1dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1e2:	69db      	ldr	r3, [r3, #28]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00b      	beq.n	800e200 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	7c12      	ldrb	r2, [r2, #16]
 800e1f4:	f107 0108 	add.w	r1, r7, #8
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	4798      	blx	r3
 800e1fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1fe:	e126      	b.n	800e44e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 fb27 	bl	800e856 <USBD_CtlError>
        err++;
 800e208:	7afb      	ldrb	r3, [r7, #11]
 800e20a:	3301      	adds	r3, #1
 800e20c:	72fb      	strb	r3, [r7, #11]
      break;
 800e20e:	e11e      	b.n	800e44e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	7c12      	ldrb	r2, [r2, #16]
 800e21c:	f107 0108 	add.w	r1, r7, #8
 800e220:	4610      	mov	r0, r2
 800e222:	4798      	blx	r3
 800e224:	60f8      	str	r0, [r7, #12]
      break;
 800e226:	e112      	b.n	800e44e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	7c1b      	ldrb	r3, [r3, #16]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d10d      	bne.n	800e24c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e238:	f107 0208 	add.w	r2, r7, #8
 800e23c:	4610      	mov	r0, r2
 800e23e:	4798      	blx	r3
 800e240:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3301      	adds	r3, #1
 800e246:	2202      	movs	r2, #2
 800e248:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e24a:	e100      	b.n	800e44e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e254:	f107 0208 	add.w	r2, r7, #8
 800e258:	4610      	mov	r0, r2
 800e25a:	4798      	blx	r3
 800e25c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	3301      	adds	r3, #1
 800e262:	2202      	movs	r2, #2
 800e264:	701a      	strb	r2, [r3, #0]
      break;
 800e266:	e0f2      	b.n	800e44e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	885b      	ldrh	r3, [r3, #2]
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	2b05      	cmp	r3, #5
 800e270:	f200 80ac 	bhi.w	800e3cc <USBD_GetDescriptor+0x258>
 800e274:	a201      	add	r2, pc, #4	@ (adr r2, 800e27c <USBD_GetDescriptor+0x108>)
 800e276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e27a:	bf00      	nop
 800e27c:	0800e295 	.word	0x0800e295
 800e280:	0800e2c9 	.word	0x0800e2c9
 800e284:	0800e2fd 	.word	0x0800e2fd
 800e288:	0800e331 	.word	0x0800e331
 800e28c:	0800e365 	.word	0x0800e365
 800e290:	0800e399 	.word	0x0800e399
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00b      	beq.n	800e2b8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	7c12      	ldrb	r2, [r2, #16]
 800e2ac:	f107 0108 	add.w	r1, r7, #8
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	4798      	blx	r3
 800e2b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2b6:	e091      	b.n	800e3dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2b8:	6839      	ldr	r1, [r7, #0]
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 facb 	bl	800e856 <USBD_CtlError>
            err++;
 800e2c0:	7afb      	ldrb	r3, [r7, #11]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	72fb      	strb	r3, [r7, #11]
          break;
 800e2c6:	e089      	b.n	800e3dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00b      	beq.n	800e2ec <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2da:	689b      	ldr	r3, [r3, #8]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	7c12      	ldrb	r2, [r2, #16]
 800e2e0:	f107 0108 	add.w	r1, r7, #8
 800e2e4:	4610      	mov	r0, r2
 800e2e6:	4798      	blx	r3
 800e2e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2ea:	e077      	b.n	800e3dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fab1 	bl	800e856 <USBD_CtlError>
            err++;
 800e2f4:	7afb      	ldrb	r3, [r7, #11]
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2fa:	e06f      	b.n	800e3dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e302:	68db      	ldr	r3, [r3, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d00b      	beq.n	800e320 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	7c12      	ldrb	r2, [r2, #16]
 800e314:	f107 0108 	add.w	r1, r7, #8
 800e318:	4610      	mov	r0, r2
 800e31a:	4798      	blx	r3
 800e31c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e31e:	e05d      	b.n	800e3dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e320:	6839      	ldr	r1, [r7, #0]
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fa97 	bl	800e856 <USBD_CtlError>
            err++;
 800e328:	7afb      	ldrb	r3, [r7, #11]
 800e32a:	3301      	adds	r3, #1
 800e32c:	72fb      	strb	r3, [r7, #11]
          break;
 800e32e:	e055      	b.n	800e3dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e336:	691b      	ldr	r3, [r3, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d00b      	beq.n	800e354 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e342:	691b      	ldr	r3, [r3, #16]
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	7c12      	ldrb	r2, [r2, #16]
 800e348:	f107 0108 	add.w	r1, r7, #8
 800e34c:	4610      	mov	r0, r2
 800e34e:	4798      	blx	r3
 800e350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e352:	e043      	b.n	800e3dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e354:	6839      	ldr	r1, [r7, #0]
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 fa7d 	bl	800e856 <USBD_CtlError>
            err++;
 800e35c:	7afb      	ldrb	r3, [r7, #11]
 800e35e:	3301      	adds	r3, #1
 800e360:	72fb      	strb	r3, [r7, #11]
          break;
 800e362:	e03b      	b.n	800e3dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e36a:	695b      	ldr	r3, [r3, #20]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d00b      	beq.n	800e388 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	7c12      	ldrb	r2, [r2, #16]
 800e37c:	f107 0108 	add.w	r1, r7, #8
 800e380:	4610      	mov	r0, r2
 800e382:	4798      	blx	r3
 800e384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e386:	e029      	b.n	800e3dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e388:	6839      	ldr	r1, [r7, #0]
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fa63 	bl	800e856 <USBD_CtlError>
            err++;
 800e390:	7afb      	ldrb	r3, [r7, #11]
 800e392:	3301      	adds	r3, #1
 800e394:	72fb      	strb	r3, [r7, #11]
          break;
 800e396:	e021      	b.n	800e3dc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e39e:	699b      	ldr	r3, [r3, #24]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d00b      	beq.n	800e3bc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e3aa:	699b      	ldr	r3, [r3, #24]
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	7c12      	ldrb	r2, [r2, #16]
 800e3b0:	f107 0108 	add.w	r1, r7, #8
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	4798      	blx	r3
 800e3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3ba:	e00f      	b.n	800e3dc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 fa49 	bl	800e856 <USBD_CtlError>
            err++;
 800e3c4:	7afb      	ldrb	r3, [r7, #11]
 800e3c6:	3301      	adds	r3, #1
 800e3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e3ca:	e007      	b.n	800e3dc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e3cc:	6839      	ldr	r1, [r7, #0]
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 fa41 	bl	800e856 <USBD_CtlError>
          err++;
 800e3d4:	7afb      	ldrb	r3, [r7, #11]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e3da:	bf00      	nop
      }
      break;
 800e3dc:	e037      	b.n	800e44e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	7c1b      	ldrb	r3, [r3, #16]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d109      	bne.n	800e3fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3ee:	f107 0208 	add.w	r2, r7, #8
 800e3f2:	4610      	mov	r0, r2
 800e3f4:	4798      	blx	r3
 800e3f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3f8:	e029      	b.n	800e44e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3fa:	6839      	ldr	r1, [r7, #0]
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f000 fa2a 	bl	800e856 <USBD_CtlError>
        err++;
 800e402:	7afb      	ldrb	r3, [r7, #11]
 800e404:	3301      	adds	r3, #1
 800e406:	72fb      	strb	r3, [r7, #11]
      break;
 800e408:	e021      	b.n	800e44e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	7c1b      	ldrb	r3, [r3, #16]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10d      	bne.n	800e42e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e41a:	f107 0208 	add.w	r2, r7, #8
 800e41e:	4610      	mov	r0, r2
 800e420:	4798      	blx	r3
 800e422:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	3301      	adds	r3, #1
 800e428:	2207      	movs	r2, #7
 800e42a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e42c:	e00f      	b.n	800e44e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e42e:	6839      	ldr	r1, [r7, #0]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fa10 	bl	800e856 <USBD_CtlError>
        err++;
 800e436:	7afb      	ldrb	r3, [r7, #11]
 800e438:	3301      	adds	r3, #1
 800e43a:	72fb      	strb	r3, [r7, #11]
      break;
 800e43c:	e007      	b.n	800e44e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e43e:	6839      	ldr	r1, [r7, #0]
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 fa08 	bl	800e856 <USBD_CtlError>
      err++;
 800e446:	7afb      	ldrb	r3, [r7, #11]
 800e448:	3301      	adds	r3, #1
 800e44a:	72fb      	strb	r3, [r7, #11]
      break;
 800e44c:	bf00      	nop
  }

  if (err != 0U)
 800e44e:	7afb      	ldrb	r3, [r7, #11]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d11e      	bne.n	800e492 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	88db      	ldrh	r3, [r3, #6]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d016      	beq.n	800e48a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e45c:	893b      	ldrh	r3, [r7, #8]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00e      	beq.n	800e480 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	88da      	ldrh	r2, [r3, #6]
 800e466:	893b      	ldrh	r3, [r7, #8]
 800e468:	4293      	cmp	r3, r2
 800e46a:	bf28      	it	cs
 800e46c:	4613      	movcs	r3, r2
 800e46e:	b29b      	uxth	r3, r3
 800e470:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e472:	893b      	ldrh	r3, [r7, #8]
 800e474:	461a      	mov	r2, r3
 800e476:	68f9      	ldr	r1, [r7, #12]
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f000 fa69 	bl	800e950 <USBD_CtlSendData>
 800e47e:	e009      	b.n	800e494 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f000 f9e7 	bl	800e856 <USBD_CtlError>
 800e488:	e004      	b.n	800e494 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 faba 	bl	800ea04 <USBD_CtlSendStatus>
 800e490:	e000      	b.n	800e494 <USBD_GetDescriptor+0x320>
    return;
 800e492:	bf00      	nop
  }
}
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop

0800e49c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	889b      	ldrh	r3, [r3, #4]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d131      	bne.n	800e512 <USBD_SetAddress+0x76>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	88db      	ldrh	r3, [r3, #6]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d12d      	bne.n	800e512 <USBD_SetAddress+0x76>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	885b      	ldrh	r3, [r3, #2]
 800e4ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800e4bc:	d829      	bhi.n	800e512 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	885b      	ldrh	r3, [r3, #2]
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4d0:	b2db      	uxtb	r3, r3
 800e4d2:	2b03      	cmp	r3, #3
 800e4d4:	d104      	bne.n	800e4e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e4d6:	6839      	ldr	r1, [r7, #0]
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 f9bc 	bl	800e856 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4de:	e01d      	b.n	800e51c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	7bfa      	ldrb	r2, [r7, #15]
 800e4e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 ff11 	bl	800f314 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 fa86 	bl	800ea04 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e4f8:	7bfb      	ldrb	r3, [r7, #15]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d004      	beq.n	800e508 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2202      	movs	r2, #2
 800e502:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e506:	e009      	b.n	800e51c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2201      	movs	r2, #1
 800e50c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e510:	e004      	b.n	800e51c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e512:	6839      	ldr	r1, [r7, #0]
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 f99e 	bl	800e856 <USBD_CtlError>
  }
}
 800e51a:	bf00      	nop
 800e51c:	bf00      	nop
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e52e:	2300      	movs	r3, #0
 800e530:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	885b      	ldrh	r3, [r3, #2]
 800e536:	b2da      	uxtb	r2, r3
 800e538:	4b4e      	ldr	r3, [pc, #312]	@ (800e674 <USBD_SetConfig+0x150>)
 800e53a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e53c:	4b4d      	ldr	r3, [pc, #308]	@ (800e674 <USBD_SetConfig+0x150>)
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	2b01      	cmp	r3, #1
 800e542:	d905      	bls.n	800e550 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 f985 	bl	800e856 <USBD_CtlError>
    return USBD_FAIL;
 800e54c:	2303      	movs	r3, #3
 800e54e:	e08c      	b.n	800e66a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2b02      	cmp	r3, #2
 800e55a:	d002      	beq.n	800e562 <USBD_SetConfig+0x3e>
 800e55c:	2b03      	cmp	r3, #3
 800e55e:	d029      	beq.n	800e5b4 <USBD_SetConfig+0x90>
 800e560:	e075      	b.n	800e64e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e562:	4b44      	ldr	r3, [pc, #272]	@ (800e674 <USBD_SetConfig+0x150>)
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d020      	beq.n	800e5ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e56a:	4b42      	ldr	r3, [pc, #264]	@ (800e674 <USBD_SetConfig+0x150>)
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	461a      	mov	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e574:	4b3f      	ldr	r3, [pc, #252]	@ (800e674 <USBD_SetConfig+0x150>)
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	4619      	mov	r1, r3
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f7fe ffb9 	bl	800d4f2 <USBD_SetClassConfig>
 800e580:	4603      	mov	r3, r0
 800e582:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e584:	7bfb      	ldrb	r3, [r7, #15]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d008      	beq.n	800e59c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 f962 	bl	800e856 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2202      	movs	r2, #2
 800e596:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e59a:	e065      	b.n	800e668 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e59c:	6878      	ldr	r0, [r7, #4]
 800e59e:	f000 fa31 	bl	800ea04 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2203      	movs	r2, #3
 800e5a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e5aa:	e05d      	b.n	800e668 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 fa29 	bl	800ea04 <USBD_CtlSendStatus>
      break;
 800e5b2:	e059      	b.n	800e668 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e5b4:	4b2f      	ldr	r3, [pc, #188]	@ (800e674 <USBD_SetConfig+0x150>)
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d112      	bne.n	800e5e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2202      	movs	r2, #2
 800e5c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e5c4:	4b2b      	ldr	r3, [pc, #172]	@ (800e674 <USBD_SetConfig+0x150>)
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5ce:	4b29      	ldr	r3, [pc, #164]	@ (800e674 <USBD_SetConfig+0x150>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7fe ffa8 	bl	800d52a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 fa12 	bl	800ea04 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e5e0:	e042      	b.n	800e668 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e5e2:	4b24      	ldr	r3, [pc, #144]	@ (800e674 <USBD_SetConfig+0x150>)
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d02a      	beq.n	800e646 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	685b      	ldr	r3, [r3, #4]
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7fe ff96 	bl	800d52a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e5fe:	4b1d      	ldr	r3, [pc, #116]	@ (800e674 <USBD_SetConfig+0x150>)
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	461a      	mov	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e608:	4b1a      	ldr	r3, [pc, #104]	@ (800e674 <USBD_SetConfig+0x150>)
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7fe ff6f 	bl	800d4f2 <USBD_SetClassConfig>
 800e614:	4603      	mov	r3, r0
 800e616:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e618:	7bfb      	ldrb	r3, [r7, #15]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00f      	beq.n	800e63e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e61e:	6839      	ldr	r1, [r7, #0]
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f918 	bl	800e856 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	685b      	ldr	r3, [r3, #4]
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	4619      	mov	r1, r3
 800e62e:	6878      	ldr	r0, [r7, #4]
 800e630:	f7fe ff7b 	bl	800d52a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2202      	movs	r2, #2
 800e638:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e63c:	e014      	b.n	800e668 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f9e0 	bl	800ea04 <USBD_CtlSendStatus>
      break;
 800e644:	e010      	b.n	800e668 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f9dc 	bl	800ea04 <USBD_CtlSendStatus>
      break;
 800e64c:	e00c      	b.n	800e668 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e64e:	6839      	ldr	r1, [r7, #0]
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 f900 	bl	800e856 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e656:	4b07      	ldr	r3, [pc, #28]	@ (800e674 <USBD_SetConfig+0x150>)
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	4619      	mov	r1, r3
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f7fe ff64 	bl	800d52a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e662:	2303      	movs	r3, #3
 800e664:	73fb      	strb	r3, [r7, #15]
      break;
 800e666:	bf00      	nop
  }

  return ret;
 800e668:	7bfb      	ldrb	r3, [r7, #15]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	24000828 	.word	0x24000828

0800e678 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	88db      	ldrh	r3, [r3, #6]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d004      	beq.n	800e694 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 f8e2 	bl	800e856 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e692:	e023      	b.n	800e6dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	2b02      	cmp	r3, #2
 800e69e:	dc02      	bgt.n	800e6a6 <USBD_GetConfig+0x2e>
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	dc03      	bgt.n	800e6ac <USBD_GetConfig+0x34>
 800e6a4:	e015      	b.n	800e6d2 <USBD_GetConfig+0x5a>
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	d00b      	beq.n	800e6c2 <USBD_GetConfig+0x4a>
 800e6aa:	e012      	b.n	800e6d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 f948 	bl	800e950 <USBD_CtlSendData>
        break;
 800e6c0:	e00c      	b.n	800e6dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	3304      	adds	r3, #4
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 f940 	bl	800e950 <USBD_CtlSendData>
        break;
 800e6d0:	e004      	b.n	800e6dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e6d2:	6839      	ldr	r1, [r7, #0]
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 f8be 	bl	800e856 <USBD_CtlError>
        break;
 800e6da:	bf00      	nop
}
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6f4:	b2db      	uxtb	r3, r3
 800e6f6:	3b01      	subs	r3, #1
 800e6f8:	2b02      	cmp	r3, #2
 800e6fa:	d81e      	bhi.n	800e73a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	88db      	ldrh	r3, [r3, #6]
 800e700:	2b02      	cmp	r3, #2
 800e702:	d004      	beq.n	800e70e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f8a5 	bl	800e856 <USBD_CtlError>
        break;
 800e70c:	e01a      	b.n	800e744 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d005      	beq.n	800e72a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	f043 0202 	orr.w	r2, r3, #2
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	330c      	adds	r3, #12
 800e72e:	2202      	movs	r2, #2
 800e730:	4619      	mov	r1, r3
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 f90c 	bl	800e950 <USBD_CtlSendData>
      break;
 800e738:	e004      	b.n	800e744 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f88a 	bl	800e856 <USBD_CtlError>
      break;
 800e742:	bf00      	nop
  }
}
 800e744:	bf00      	nop
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	885b      	ldrh	r3, [r3, #2]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d107      	bne.n	800e76e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2201      	movs	r2, #1
 800e762:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 f94c 	bl	800ea04 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e76c:	e013      	b.n	800e796 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	885b      	ldrh	r3, [r3, #2]
 800e772:	2b02      	cmp	r3, #2
 800e774:	d10b      	bne.n	800e78e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	889b      	ldrh	r3, [r3, #4]
 800e77a:	0a1b      	lsrs	r3, r3, #8
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f93c 	bl	800ea04 <USBD_CtlSendStatus>
}
 800e78c:	e003      	b.n	800e796 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e78e:	6839      	ldr	r1, [r7, #0]
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 f860 	bl	800e856 <USBD_CtlError>
}
 800e796:	bf00      	nop
 800e798:	3708      	adds	r7, #8
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
 800e7a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d80b      	bhi.n	800e7ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	885b      	ldrh	r3, [r3, #2]
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d10c      	bne.n	800e7d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	f000 f91c 	bl	800ea04 <USBD_CtlSendStatus>
      }
      break;
 800e7cc:	e004      	b.n	800e7d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 f840 	bl	800e856 <USBD_CtlError>
      break;
 800e7d6:	e000      	b.n	800e7da <USBD_ClrFeature+0x3c>
      break;
 800e7d8:	bf00      	nop
  }
}
 800e7da:	bf00      	nop
 800e7dc:	3708      	adds	r7, #8
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b084      	sub	sp, #16
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	781a      	ldrb	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	781a      	ldrb	r2, [r3, #0]
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	3301      	adds	r3, #1
 800e80a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f7ff fa16 	bl	800dc3e <SWAPBYTE>
 800e812:	4603      	mov	r3, r0
 800e814:	461a      	mov	r2, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3301      	adds	r3, #1
 800e81e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	3301      	adds	r3, #1
 800e824:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f7ff fa09 	bl	800dc3e <SWAPBYTE>
 800e82c:	4603      	mov	r3, r0
 800e82e:	461a      	mov	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	3301      	adds	r3, #1
 800e838:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	3301      	adds	r3, #1
 800e83e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f7ff f9fc 	bl	800dc3e <SWAPBYTE>
 800e846:	4603      	mov	r3, r0
 800e848:	461a      	mov	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	80da      	strh	r2, [r3, #6]
}
 800e84e:	bf00      	nop
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b082      	sub	sp, #8
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e860:	2180      	movs	r1, #128	@ 0x80
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 fcec 	bl	800f240 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e868:	2100      	movs	r1, #0
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f000 fce8 	bl	800f240 <USBD_LL_StallEP>
}
 800e870:	bf00      	nop
 800e872:	3708      	adds	r7, #8
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e884:	2300      	movs	r3, #0
 800e886:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d042      	beq.n	800e914 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e892:	6938      	ldr	r0, [r7, #16]
 800e894:	f000 f842 	bl	800e91c <USBD_GetLen>
 800e898:	4603      	mov	r3, r0
 800e89a:	3301      	adds	r3, #1
 800e89c:	005b      	lsls	r3, r3, #1
 800e89e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e8a2:	d808      	bhi.n	800e8b6 <USBD_GetString+0x3e>
 800e8a4:	6938      	ldr	r0, [r7, #16]
 800e8a6:	f000 f839 	bl	800e91c <USBD_GetLen>
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	b29b      	uxth	r3, r3
 800e8b0:	005b      	lsls	r3, r3, #1
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	e001      	b.n	800e8ba <USBD_GetString+0x42>
 800e8b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e8be:	7dfb      	ldrb	r3, [r7, #23]
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	7812      	ldrb	r2, [r2, #0]
 800e8c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e8ca:	7dfb      	ldrb	r3, [r7, #23]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e8d0:	7dfb      	ldrb	r3, [r7, #23]
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	2203      	movs	r2, #3
 800e8d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e8da:	7dfb      	ldrb	r3, [r7, #23]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e8e0:	e013      	b.n	800e90a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e8e2:	7dfb      	ldrb	r3, [r7, #23]
 800e8e4:	68ba      	ldr	r2, [r7, #8]
 800e8e6:	4413      	add	r3, r2
 800e8e8:	693a      	ldr	r2, [r7, #16]
 800e8ea:	7812      	ldrb	r2, [r2, #0]
 800e8ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	613b      	str	r3, [r7, #16]
    idx++;
 800e8f4:	7dfb      	ldrb	r3, [r7, #23]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e8fa:	7dfb      	ldrb	r3, [r7, #23]
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	4413      	add	r3, r2
 800e900:	2200      	movs	r2, #0
 800e902:	701a      	strb	r2, [r3, #0]
    idx++;
 800e904:	7dfb      	ldrb	r3, [r7, #23]
 800e906:	3301      	adds	r3, #1
 800e908:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e7      	bne.n	800e8e2 <USBD_GetString+0x6a>
 800e912:	e000      	b.n	800e916 <USBD_GetString+0x9e>
    return;
 800e914:	bf00      	nop
  }
}
 800e916:	3718      	adds	r7, #24
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e924:	2300      	movs	r3, #0
 800e926:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e92c:	e005      	b.n	800e93a <USBD_GetLen+0x1e>
  {
    len++;
 800e92e:	7bfb      	ldrb	r3, [r7, #15]
 800e930:	3301      	adds	r3, #1
 800e932:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	3301      	adds	r3, #1
 800e938:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d1f5      	bne.n	800e92e <USBD_GetLen+0x12>
  }

  return len;
 800e942:	7bfb      	ldrb	r3, [r7, #15]
}
 800e944:	4618      	mov	r0, r3
 800e946:	3714      	adds	r7, #20
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2202      	movs	r2, #2
 800e960:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	687a      	ldr	r2, [r7, #4]
 800e96e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	68ba      	ldr	r2, [r7, #8]
 800e974:	2100      	movs	r1, #0
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f000 fceb 	bl	800f352 <USBD_LL_Transmit>

  return USBD_OK;
 800e97c:	2300      	movs	r3, #0
}
 800e97e:	4618      	mov	r0, r3
 800e980:	3710      	adds	r7, #16
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}

0800e986 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e986:	b580      	push	{r7, lr}
 800e988:	b084      	sub	sp, #16
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	60b9      	str	r1, [r7, #8]
 800e990:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	68ba      	ldr	r2, [r7, #8]
 800e996:	2100      	movs	r1, #0
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f000 fcda 	bl	800f352 <USBD_LL_Transmit>

  return USBD_OK;
 800e99e:	2300      	movs	r3, #0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b084      	sub	sp, #16
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2203      	movs	r2, #3
 800e9b8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	687a      	ldr	r2, [r7, #4]
 800e9c0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	2100      	movs	r1, #0
 800e9d2:	68f8      	ldr	r0, [r7, #12]
 800e9d4:	f000 fcde 	bl	800f394 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9d8:	2300      	movs	r3, #0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b084      	sub	sp, #16
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	60f8      	str	r0, [r7, #12]
 800e9ea:	60b9      	str	r1, [r7, #8]
 800e9ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	68ba      	ldr	r2, [r7, #8]
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f000 fccd 	bl	800f394 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9fa:	2300      	movs	r3, #0
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3710      	adds	r7, #16
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2204      	movs	r2, #4
 800ea10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ea14:	2300      	movs	r3, #0
 800ea16:	2200      	movs	r2, #0
 800ea18:	2100      	movs	r1, #0
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 fc99 	bl	800f352 <USBD_LL_Transmit>

  return USBD_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3708      	adds	r7, #8
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b082      	sub	sp, #8
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2205      	movs	r2, #5
 800ea36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	2100      	movs	r1, #0
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f000 fca7 	bl	800f394 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea46:	2300      	movs	r3, #0
}
 800ea48:	4618      	mov	r0, r3
 800ea4a:	3708      	adds	r7, #8
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bd80      	pop	{r7, pc}

0800ea50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ea54:	2200      	movs	r2, #0
 800ea56:	4913      	ldr	r1, [pc, #76]	@ (800eaa4 <MX_USB_DEVICE_Init+0x54>)
 800ea58:	4813      	ldr	r0, [pc, #76]	@ (800eaa8 <MX_USB_DEVICE_Init+0x58>)
 800ea5a:	f7fe fccd 	bl	800d3f8 <USBD_Init>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ea64:	f7f2 fb1a 	bl	800109c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ea68:	4910      	ldr	r1, [pc, #64]	@ (800eaac <MX_USB_DEVICE_Init+0x5c>)
 800ea6a:	480f      	ldr	r0, [pc, #60]	@ (800eaa8 <MX_USB_DEVICE_Init+0x58>)
 800ea6c:	f7fe fcf4 	bl	800d458 <USBD_RegisterClass>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d001      	beq.n	800ea7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ea76:	f7f2 fb11 	bl	800109c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ea7a:	490d      	ldr	r1, [pc, #52]	@ (800eab0 <MX_USB_DEVICE_Init+0x60>)
 800ea7c:	480a      	ldr	r0, [pc, #40]	@ (800eaa8 <MX_USB_DEVICE_Init+0x58>)
 800ea7e:	f7fe fc2b 	bl	800d2d8 <USBD_CDC_RegisterInterface>
 800ea82:	4603      	mov	r3, r0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d001      	beq.n	800ea8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ea88:	f7f2 fb08 	bl	800109c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ea8c:	4806      	ldr	r0, [pc, #24]	@ (800eaa8 <MX_USB_DEVICE_Init+0x58>)
 800ea8e:	f7fe fd19 	bl	800d4c4 <USBD_Start>
 800ea92:	4603      	mov	r3, r0
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d001      	beq.n	800ea9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ea98:	f7f2 fb00 	bl	800109c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ea9c:	f7f8 f86a 	bl	8006b74 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800eaa0:	bf00      	nop
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	240000b8 	.word	0x240000b8
 800eaa8:	2400082c 	.word	0x2400082c
 800eaac:	24000024 	.word	0x24000024
 800eab0:	240000a4 	.word	0x240000a4

0800eab4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800eab8:	2200      	movs	r2, #0
 800eaba:	4905      	ldr	r1, [pc, #20]	@ (800ead0 <CDC_Init_FS+0x1c>)
 800eabc:	4805      	ldr	r0, [pc, #20]	@ (800ead4 <CDC_Init_FS+0x20>)
 800eabe:	f7fe fc25 	bl	800d30c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800eac2:	4905      	ldr	r1, [pc, #20]	@ (800ead8 <CDC_Init_FS+0x24>)
 800eac4:	4803      	ldr	r0, [pc, #12]	@ (800ead4 <CDC_Init_FS+0x20>)
 800eac6:	f7fe fc43 	bl	800d350 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eaca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800eacc:	4618      	mov	r0, r3
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	24001308 	.word	0x24001308
 800ead4:	2400082c 	.word	0x2400082c
 800ead8:	24000b08 	.word	0x24000b08

0800eadc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800eadc:	b480      	push	{r7}
 800eade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eae0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	6039      	str	r1, [r7, #0]
 800eaf6:	71fb      	strb	r3, [r7, #7]
 800eaf8:	4613      	mov	r3, r2
 800eafa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eafc:	79fb      	ldrb	r3, [r7, #7]
 800eafe:	2b23      	cmp	r3, #35	@ 0x23
 800eb00:	d84a      	bhi.n	800eb98 <CDC_Control_FS+0xac>
 800eb02:	a201      	add	r2, pc, #4	@ (adr r2, 800eb08 <CDC_Control_FS+0x1c>)
 800eb04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb08:	0800eb99 	.word	0x0800eb99
 800eb0c:	0800eb99 	.word	0x0800eb99
 800eb10:	0800eb99 	.word	0x0800eb99
 800eb14:	0800eb99 	.word	0x0800eb99
 800eb18:	0800eb99 	.word	0x0800eb99
 800eb1c:	0800eb99 	.word	0x0800eb99
 800eb20:	0800eb99 	.word	0x0800eb99
 800eb24:	0800eb99 	.word	0x0800eb99
 800eb28:	0800eb99 	.word	0x0800eb99
 800eb2c:	0800eb99 	.word	0x0800eb99
 800eb30:	0800eb99 	.word	0x0800eb99
 800eb34:	0800eb99 	.word	0x0800eb99
 800eb38:	0800eb99 	.word	0x0800eb99
 800eb3c:	0800eb99 	.word	0x0800eb99
 800eb40:	0800eb99 	.word	0x0800eb99
 800eb44:	0800eb99 	.word	0x0800eb99
 800eb48:	0800eb99 	.word	0x0800eb99
 800eb4c:	0800eb99 	.word	0x0800eb99
 800eb50:	0800eb99 	.word	0x0800eb99
 800eb54:	0800eb99 	.word	0x0800eb99
 800eb58:	0800eb99 	.word	0x0800eb99
 800eb5c:	0800eb99 	.word	0x0800eb99
 800eb60:	0800eb99 	.word	0x0800eb99
 800eb64:	0800eb99 	.word	0x0800eb99
 800eb68:	0800eb99 	.word	0x0800eb99
 800eb6c:	0800eb99 	.word	0x0800eb99
 800eb70:	0800eb99 	.word	0x0800eb99
 800eb74:	0800eb99 	.word	0x0800eb99
 800eb78:	0800eb99 	.word	0x0800eb99
 800eb7c:	0800eb99 	.word	0x0800eb99
 800eb80:	0800eb99 	.word	0x0800eb99
 800eb84:	0800eb99 	.word	0x0800eb99
 800eb88:	0800eb99 	.word	0x0800eb99
 800eb8c:	0800eb99 	.word	0x0800eb99
 800eb90:	0800eb99 	.word	0x0800eb99
 800eb94:	0800eb99 	.word	0x0800eb99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eb98:	bf00      	nop
  }

  return (USBD_OK);
 800eb9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ebb2:	6879      	ldr	r1, [r7, #4]
 800ebb4:	4805      	ldr	r0, [pc, #20]	@ (800ebcc <CDC_Receive_FS+0x24>)
 800ebb6:	f7fe fbcb 	bl	800d350 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ebba:	4804      	ldr	r0, [pc, #16]	@ (800ebcc <CDC_Receive_FS+0x24>)
 800ebbc:	f7fe fbe6 	bl	800d38c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ebc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3708      	adds	r7, #8
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
 800ebca:	bf00      	nop
 800ebcc:	2400082c 	.word	0x2400082c

0800ebd0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b087      	sub	sp, #28
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	60f8      	str	r0, [r7, #12]
 800ebd8:	60b9      	str	r1, [r7, #8]
 800ebda:	4613      	mov	r3, r2
 800ebdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ebe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	371c      	adds	r7, #28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
	...

0800ebf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	6039      	str	r1, [r7, #0]
 800ebfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	2212      	movs	r2, #18
 800ec04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ec06:	4b03      	ldr	r3, [pc, #12]	@ (800ec14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr
 800ec14:	240000d8 	.word	0x240000d8

0800ec18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b083      	sub	sp, #12
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	4603      	mov	r3, r0
 800ec20:	6039      	str	r1, [r7, #0]
 800ec22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	2204      	movs	r2, #4
 800ec28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ec2a:	4b03      	ldr	r3, [pc, #12]	@ (800ec38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	370c      	adds	r7, #12
 800ec30:	46bd      	mov	sp, r7
 800ec32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec36:	4770      	bx	lr
 800ec38:	240000ec 	.word	0x240000ec

0800ec3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	4603      	mov	r3, r0
 800ec44:	6039      	str	r1, [r7, #0]
 800ec46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec48:	79fb      	ldrb	r3, [r7, #7]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d105      	bne.n	800ec5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec4e:	683a      	ldr	r2, [r7, #0]
 800ec50:	4907      	ldr	r1, [pc, #28]	@ (800ec70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ec52:	4808      	ldr	r0, [pc, #32]	@ (800ec74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ec54:	f7ff fe10 	bl	800e878 <USBD_GetString>
 800ec58:	e004      	b.n	800ec64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	4904      	ldr	r1, [pc, #16]	@ (800ec70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ec5e:	4805      	ldr	r0, [pc, #20]	@ (800ec74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ec60:	f7ff fe0a 	bl	800e878 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec64:	4b02      	ldr	r3, [pc, #8]	@ (800ec70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3708      	adds	r7, #8
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	24001b08 	.word	0x24001b08
 800ec74:	08012de0 	.word	0x08012de0

0800ec78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	4603      	mov	r3, r0
 800ec80:	6039      	str	r1, [r7, #0]
 800ec82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec84:	683a      	ldr	r2, [r7, #0]
 800ec86:	4904      	ldr	r1, [pc, #16]	@ (800ec98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ec88:	4804      	ldr	r0, [pc, #16]	@ (800ec9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ec8a:	f7ff fdf5 	bl	800e878 <USBD_GetString>
  return USBD_StrDesc;
 800ec8e:	4b02      	ldr	r3, [pc, #8]	@ (800ec98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	24001b08 	.word	0x24001b08
 800ec9c:	08012df8 	.word	0x08012df8

0800eca0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	4603      	mov	r3, r0
 800eca8:	6039      	str	r1, [r7, #0]
 800ecaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	221a      	movs	r2, #26
 800ecb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ecb2:	f000 f843 	bl	800ed3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ecb6:	4b02      	ldr	r3, [pc, #8]	@ (800ecc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	240000f0 	.word	0x240000f0

0800ecc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	4603      	mov	r3, r0
 800eccc:	6039      	str	r1, [r7, #0]
 800ecce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ecd0:	79fb      	ldrb	r3, [r7, #7]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d105      	bne.n	800ece2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	4907      	ldr	r1, [pc, #28]	@ (800ecf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ecda:	4808      	ldr	r0, [pc, #32]	@ (800ecfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ecdc:	f7ff fdcc 	bl	800e878 <USBD_GetString>
 800ece0:	e004      	b.n	800ecec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ece2:	683a      	ldr	r2, [r7, #0]
 800ece4:	4904      	ldr	r1, [pc, #16]	@ (800ecf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ece6:	4805      	ldr	r0, [pc, #20]	@ (800ecfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ece8:	f7ff fdc6 	bl	800e878 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecec:	4b02      	ldr	r3, [pc, #8]	@ (800ecf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3708      	adds	r7, #8
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	24001b08 	.word	0x24001b08
 800ecfc:	08012e0c 	.word	0x08012e0c

0800ed00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b082      	sub	sp, #8
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	4603      	mov	r3, r0
 800ed08:	6039      	str	r1, [r7, #0]
 800ed0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ed0c:	79fb      	ldrb	r3, [r7, #7]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d105      	bne.n	800ed1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	4907      	ldr	r1, [pc, #28]	@ (800ed34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ed16:	4808      	ldr	r0, [pc, #32]	@ (800ed38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ed18:	f7ff fdae 	bl	800e878 <USBD_GetString>
 800ed1c:	e004      	b.n	800ed28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	4904      	ldr	r1, [pc, #16]	@ (800ed34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ed22:	4805      	ldr	r0, [pc, #20]	@ (800ed38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ed24:	f7ff fda8 	bl	800e878 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed28:	4b02      	ldr	r3, [pc, #8]	@ (800ed34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3708      	adds	r7, #8
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	24001b08 	.word	0x24001b08
 800ed38:	08012e18 	.word	0x08012e18

0800ed3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b084      	sub	sp, #16
 800ed40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ed42:	4b0f      	ldr	r3, [pc, #60]	@ (800ed80 <Get_SerialNum+0x44>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed48:	4b0e      	ldr	r3, [pc, #56]	@ (800ed84 <Get_SerialNum+0x48>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ed4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ed88 <Get_SerialNum+0x4c>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ed54:	68fa      	ldr	r2, [r7, #12]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4413      	add	r3, r2
 800ed5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d009      	beq.n	800ed76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed62:	2208      	movs	r2, #8
 800ed64:	4909      	ldr	r1, [pc, #36]	@ (800ed8c <Get_SerialNum+0x50>)
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 f814 	bl	800ed94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed6c:	2204      	movs	r2, #4
 800ed6e:	4908      	ldr	r1, [pc, #32]	@ (800ed90 <Get_SerialNum+0x54>)
 800ed70:	68b8      	ldr	r0, [r7, #8]
 800ed72:	f000 f80f 	bl	800ed94 <IntToUnicode>
  }
}
 800ed76:	bf00      	nop
 800ed78:	3710      	adds	r7, #16
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	1ff1e800 	.word	0x1ff1e800
 800ed84:	1ff1e804 	.word	0x1ff1e804
 800ed88:	1ff1e808 	.word	0x1ff1e808
 800ed8c:	240000f2 	.word	0x240000f2
 800ed90:	24000102 	.word	0x24000102

0800ed94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b087      	sub	sp, #28
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eda2:	2300      	movs	r3, #0
 800eda4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eda6:	2300      	movs	r3, #0
 800eda8:	75fb      	strb	r3, [r7, #23]
 800edaa:	e027      	b.n	800edfc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	0f1b      	lsrs	r3, r3, #28
 800edb0:	2b09      	cmp	r3, #9
 800edb2:	d80b      	bhi.n	800edcc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	0f1b      	lsrs	r3, r3, #28
 800edb8:	b2da      	uxtb	r2, r3
 800edba:	7dfb      	ldrb	r3, [r7, #23]
 800edbc:	005b      	lsls	r3, r3, #1
 800edbe:	4619      	mov	r1, r3
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	440b      	add	r3, r1
 800edc4:	3230      	adds	r2, #48	@ 0x30
 800edc6:	b2d2      	uxtb	r2, r2
 800edc8:	701a      	strb	r2, [r3, #0]
 800edca:	e00a      	b.n	800ede2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	0f1b      	lsrs	r3, r3, #28
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	7dfb      	ldrb	r3, [r7, #23]
 800edd4:	005b      	lsls	r3, r3, #1
 800edd6:	4619      	mov	r1, r3
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	440b      	add	r3, r1
 800eddc:	3237      	adds	r2, #55	@ 0x37
 800edde:	b2d2      	uxtb	r2, r2
 800ede0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	011b      	lsls	r3, r3, #4
 800ede6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ede8:	7dfb      	ldrb	r3, [r7, #23]
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	3301      	adds	r3, #1
 800edee:	68ba      	ldr	r2, [r7, #8]
 800edf0:	4413      	add	r3, r2
 800edf2:	2200      	movs	r2, #0
 800edf4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800edf6:	7dfb      	ldrb	r3, [r7, #23]
 800edf8:	3301      	adds	r3, #1
 800edfa:	75fb      	strb	r3, [r7, #23]
 800edfc:	7dfa      	ldrb	r2, [r7, #23]
 800edfe:	79fb      	ldrb	r3, [r7, #7]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d3d3      	bcc.n	800edac <IntToUnicode+0x18>
  }
}
 800ee04:	bf00      	nop
 800ee06:	bf00      	nop
 800ee08:	371c      	adds	r7, #28
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
	...

0800ee14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b0ba      	sub	sp, #232	@ 0xe8
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ee20:	2200      	movs	r2, #0
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	605a      	str	r2, [r3, #4]
 800ee26:	609a      	str	r2, [r3, #8]
 800ee28:	60da      	str	r2, [r3, #12]
 800ee2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ee2c:	f107 0310 	add.w	r3, r7, #16
 800ee30:	22c0      	movs	r2, #192	@ 0xc0
 800ee32:	2100      	movs	r1, #0
 800ee34:	4618      	mov	r0, r3
 800ee36:	f001 f870 	bl	800ff1a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4a2c      	ldr	r2, [pc, #176]	@ (800eef0 <HAL_PCD_MspInit+0xdc>)
 800ee40:	4293      	cmp	r3, r2
 800ee42:	d151      	bne.n	800eee8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ee44:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ee48:	f04f 0300 	mov.w	r3, #0
 800ee4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800ee50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ee54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ee58:	f107 0310 	add.w	r3, r7, #16
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7f8 fe53 	bl	8007b08 <HAL_RCCEx_PeriphCLKConfig>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d001      	beq.n	800ee6c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800ee68:	f7f2 f918 	bl	800109c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ee6c:	f7f7 fe82 	bl	8006b74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee70:	4b20      	ldr	r3, [pc, #128]	@ (800eef4 <HAL_PCD_MspInit+0xe0>)
 800ee72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee76:	4a1f      	ldr	r2, [pc, #124]	@ (800eef4 <HAL_PCD_MspInit+0xe0>)
 800ee78:	f043 0301 	orr.w	r3, r3, #1
 800ee7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ee80:	4b1c      	ldr	r3, [pc, #112]	@ (800eef4 <HAL_PCD_MspInit+0xe0>)
 800ee82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee86:	f003 0301 	and.w	r3, r3, #1
 800ee8a:	60fb      	str	r3, [r7, #12]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ee8e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ee92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee96:	2302      	movs	r3, #2
 800ee98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eea2:	2300      	movs	r3, #0
 800eea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800eea8:	230a      	movs	r3, #10
 800eeaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eeae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	4810      	ldr	r0, [pc, #64]	@ (800eef8 <HAL_PCD_MspInit+0xe4>)
 800eeb6:	f7f6 f9b9 	bl	800522c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eeba:	4b0e      	ldr	r3, [pc, #56]	@ (800eef4 <HAL_PCD_MspInit+0xe0>)
 800eebc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800eec0:	4a0c      	ldr	r2, [pc, #48]	@ (800eef4 <HAL_PCD_MspInit+0xe0>)
 800eec2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800eec6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800eeca:	4b0a      	ldr	r3, [pc, #40]	@ (800eef4 <HAL_PCD_MspInit+0xe0>)
 800eecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800eed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eed4:	60bb      	str	r3, [r7, #8]
 800eed6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eed8:	2200      	movs	r2, #0
 800eeda:	2100      	movs	r1, #0
 800eedc:	2065      	movs	r0, #101	@ 0x65
 800eede:	f7f3 fb28 	bl	8002532 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eee2:	2065      	movs	r0, #101	@ 0x65
 800eee4:	f7f3 fb3f 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eee8:	bf00      	nop
 800eeea:	37e8      	adds	r7, #232	@ 0xe8
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}
 800eef0:	40080000 	.word	0x40080000
 800eef4:	58024400 	.word	0x58024400
 800eef8:	58020000 	.word	0x58020000

0800eefc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ef10:	4619      	mov	r1, r3
 800ef12:	4610      	mov	r0, r2
 800ef14:	f7fe fb23 	bl	800d55e <USBD_LL_SetupStage>
}
 800ef18:	bf00      	nop
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	460b      	mov	r3, r1
 800ef2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ef32:	78fa      	ldrb	r2, [r7, #3]
 800ef34:	6879      	ldr	r1, [r7, #4]
 800ef36:	4613      	mov	r3, r2
 800ef38:	00db      	lsls	r3, r3, #3
 800ef3a:	4413      	add	r3, r2
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	440b      	add	r3, r1
 800ef40:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	78fb      	ldrb	r3, [r7, #3]
 800ef48:	4619      	mov	r1, r3
 800ef4a:	f7fe fb5d 	bl	800d608 <USBD_LL_DataOutStage>
}
 800ef4e:	bf00      	nop
 800ef50:	3708      	adds	r7, #8
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b082      	sub	sp, #8
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	460b      	mov	r3, r1
 800ef60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ef68:	78fa      	ldrb	r2, [r7, #3]
 800ef6a:	6879      	ldr	r1, [r7, #4]
 800ef6c:	4613      	mov	r3, r2
 800ef6e:	00db      	lsls	r3, r3, #3
 800ef70:	4413      	add	r3, r2
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	440b      	add	r3, r1
 800ef76:	3320      	adds	r3, #32
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	78fb      	ldrb	r3, [r7, #3]
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	f7fe fbf6 	bl	800d76e <USBD_LL_DataInStage>
}
 800ef82:	bf00      	nop
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b082      	sub	sp, #8
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fe fd30 	bl	800d9fe <USBD_LL_SOF>
}
 800ef9e:	bf00      	nop
 800efa0:	3708      	adds	r7, #8
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b084      	sub	sp, #16
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800efae:	2301      	movs	r3, #1
 800efb0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	79db      	ldrb	r3, [r3, #7]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d102      	bne.n	800efc0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800efba:	2300      	movs	r3, #0
 800efbc:	73fb      	strb	r3, [r7, #15]
 800efbe:	e008      	b.n	800efd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	79db      	ldrb	r3, [r3, #7]
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d102      	bne.n	800efce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800efc8:	2301      	movs	r3, #1
 800efca:	73fb      	strb	r3, [r7, #15]
 800efcc:	e001      	b.n	800efd2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800efce:	f7f2 f865 	bl	800109c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800efd8:	7bfa      	ldrb	r2, [r7, #15]
 800efda:	4611      	mov	r1, r2
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fe fcca 	bl	800d976 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800efe8:	4618      	mov	r0, r3
 800efea:	f7fe fc72 	bl	800d8d2 <USBD_LL_Reset>
}
 800efee:	bf00      	nop
 800eff0:	3710      	adds	r7, #16
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}
	...

0800eff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f006:	4618      	mov	r0, r3
 800f008:	f7fe fcc5 	bl	800d996 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	6812      	ldr	r2, [r2, #0]
 800f01a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f01e:	f043 0301 	orr.w	r3, r3, #1
 800f022:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	7adb      	ldrb	r3, [r3, #11]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d005      	beq.n	800f038 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f02c:	4b04      	ldr	r3, [pc, #16]	@ (800f040 <HAL_PCD_SuspendCallback+0x48>)
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	4a03      	ldr	r2, [pc, #12]	@ (800f040 <HAL_PCD_SuspendCallback+0x48>)
 800f032:	f043 0306 	orr.w	r3, r3, #6
 800f036:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f038:	bf00      	nop
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	e000ed00 	.word	0xe000ed00

0800f044 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe fcbb 	bl	800d9ce <USBD_LL_Resume>
}
 800f058:	bf00      	nop
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	460b      	mov	r3, r1
 800f06a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f072:	78fa      	ldrb	r2, [r7, #3]
 800f074:	4611      	mov	r1, r2
 800f076:	4618      	mov	r0, r3
 800f078:	f7fe fd13 	bl	800daa2 <USBD_LL_IsoOUTIncomplete>
}
 800f07c:	bf00      	nop
 800f07e:	3708      	adds	r7, #8
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	460b      	mov	r3, r1
 800f08e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f096:	78fa      	ldrb	r2, [r7, #3]
 800f098:	4611      	mov	r1, r2
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe fccf 	bl	800da3e <USBD_LL_IsoINIncomplete>
}
 800f0a0:	bf00      	nop
 800f0a2:	3708      	adds	r7, #8
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fe fd25 	bl	800db06 <USBD_LL_DevConnected>
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fe fd22 	bl	800db1c <USBD_LL_DevDisconnected>
}
 800f0d8:	bf00      	nop
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d13e      	bne.n	800f16e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f0f0:	4a21      	ldr	r2, [pc, #132]	@ (800f178 <USBD_LL_Init+0x98>)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	4a1f      	ldr	r2, [pc, #124]	@ (800f178 <USBD_LL_Init+0x98>)
 800f0fc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f100:	4b1d      	ldr	r3, [pc, #116]	@ (800f178 <USBD_LL_Init+0x98>)
 800f102:	4a1e      	ldr	r2, [pc, #120]	@ (800f17c <USBD_LL_Init+0x9c>)
 800f104:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f106:	4b1c      	ldr	r3, [pc, #112]	@ (800f178 <USBD_LL_Init+0x98>)
 800f108:	2209      	movs	r2, #9
 800f10a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f10c:	4b1a      	ldr	r3, [pc, #104]	@ (800f178 <USBD_LL_Init+0x98>)
 800f10e:	2202      	movs	r2, #2
 800f110:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f112:	4b19      	ldr	r3, [pc, #100]	@ (800f178 <USBD_LL_Init+0x98>)
 800f114:	2200      	movs	r2, #0
 800f116:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f118:	4b17      	ldr	r3, [pc, #92]	@ (800f178 <USBD_LL_Init+0x98>)
 800f11a:	2202      	movs	r2, #2
 800f11c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f11e:	4b16      	ldr	r3, [pc, #88]	@ (800f178 <USBD_LL_Init+0x98>)
 800f120:	2200      	movs	r2, #0
 800f122:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f124:	4b14      	ldr	r3, [pc, #80]	@ (800f178 <USBD_LL_Init+0x98>)
 800f126:	2200      	movs	r2, #0
 800f128:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f12a:	4b13      	ldr	r3, [pc, #76]	@ (800f178 <USBD_LL_Init+0x98>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f130:	4b11      	ldr	r3, [pc, #68]	@ (800f178 <USBD_LL_Init+0x98>)
 800f132:	2200      	movs	r2, #0
 800f134:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f136:	4b10      	ldr	r3, [pc, #64]	@ (800f178 <USBD_LL_Init+0x98>)
 800f138:	2200      	movs	r2, #0
 800f13a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f13c:	4b0e      	ldr	r3, [pc, #56]	@ (800f178 <USBD_LL_Init+0x98>)
 800f13e:	2200      	movs	r2, #0
 800f140:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f142:	480d      	ldr	r0, [pc, #52]	@ (800f178 <USBD_LL_Init+0x98>)
 800f144:	f7f6 fa3b 	bl	80055be <HAL_PCD_Init>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d001      	beq.n	800f152 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f14e:	f7f1 ffa5 	bl	800109c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f152:	2180      	movs	r1, #128	@ 0x80
 800f154:	4808      	ldr	r0, [pc, #32]	@ (800f178 <USBD_LL_Init+0x98>)
 800f156:	f7f7 fc92 	bl	8006a7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f15a:	2240      	movs	r2, #64	@ 0x40
 800f15c:	2100      	movs	r1, #0
 800f15e:	4806      	ldr	r0, [pc, #24]	@ (800f178 <USBD_LL_Init+0x98>)
 800f160:	f7f7 fc46 	bl	80069f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f164:	2280      	movs	r2, #128	@ 0x80
 800f166:	2101      	movs	r1, #1
 800f168:	4803      	ldr	r0, [pc, #12]	@ (800f178 <USBD_LL_Init+0x98>)
 800f16a:	f7f7 fc41 	bl	80069f0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f16e:	2300      	movs	r3, #0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	24001d08 	.word	0x24001d08
 800f17c:	40080000 	.word	0x40080000

0800f180 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f188:	2300      	movs	r3, #0
 800f18a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f196:	4618      	mov	r0, r3
 800f198:	f7f6 fb1d 	bl	80057d6 <HAL_PCD_Start>
 800f19c:	4603      	mov	r3, r0
 800f19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 f942 	bl	800f42c <USBD_Get_USB_Status>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}

0800f1b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f1b6:	b580      	push	{r7, lr}
 800f1b8:	b084      	sub	sp, #16
 800f1ba:	af00      	add	r7, sp, #0
 800f1bc:	6078      	str	r0, [r7, #4]
 800f1be:	4608      	mov	r0, r1
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	461a      	mov	r2, r3
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	70fb      	strb	r3, [r7, #3]
 800f1c8:	460b      	mov	r3, r1
 800f1ca:	70bb      	strb	r3, [r7, #2]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f1de:	78bb      	ldrb	r3, [r7, #2]
 800f1e0:	883a      	ldrh	r2, [r7, #0]
 800f1e2:	78f9      	ldrb	r1, [r7, #3]
 800f1e4:	f7f7 f81e 	bl	8006224 <HAL_PCD_EP_Open>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1ec:	7bfb      	ldrb	r3, [r7, #15]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f000 f91c 	bl	800f42c <USBD_Get_USB_Status>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3710      	adds	r7, #16
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}

0800f202 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f202:	b580      	push	{r7, lr}
 800f204:	b084      	sub	sp, #16
 800f206:	af00      	add	r7, sp, #0
 800f208:	6078      	str	r0, [r7, #4]
 800f20a:	460b      	mov	r3, r1
 800f20c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f20e:	2300      	movs	r3, #0
 800f210:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f212:	2300      	movs	r3, #0
 800f214:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f21c:	78fa      	ldrb	r2, [r7, #3]
 800f21e:	4611      	mov	r1, r2
 800f220:	4618      	mov	r0, r3
 800f222:	f7f7 f869 	bl	80062f8 <HAL_PCD_EP_Close>
 800f226:	4603      	mov	r3, r0
 800f228:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f22a:	7bfb      	ldrb	r3, [r7, #15]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f000 f8fd 	bl	800f42c <USBD_Get_USB_Status>
 800f232:	4603      	mov	r3, r0
 800f234:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f236:	7bbb      	ldrb	r3, [r7, #14]
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3710      	adds	r7, #16
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b084      	sub	sp, #16
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	460b      	mov	r3, r1
 800f24a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f24c:	2300      	movs	r3, #0
 800f24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f25a:	78fa      	ldrb	r2, [r7, #3]
 800f25c:	4611      	mov	r1, r2
 800f25e:	4618      	mov	r0, r3
 800f260:	f7f7 f921 	bl	80064a6 <HAL_PCD_EP_SetStall>
 800f264:	4603      	mov	r3, r0
 800f266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f268:	7bfb      	ldrb	r3, [r7, #15]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f000 f8de 	bl	800f42c <USBD_Get_USB_Status>
 800f270:	4603      	mov	r3, r0
 800f272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f274:	7bbb      	ldrb	r3, [r7, #14]
}
 800f276:	4618      	mov	r0, r3
 800f278:	3710      	adds	r7, #16
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f27e:	b580      	push	{r7, lr}
 800f280:	b084      	sub	sp, #16
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
 800f286:	460b      	mov	r3, r1
 800f288:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f28a:	2300      	movs	r3, #0
 800f28c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f28e:	2300      	movs	r3, #0
 800f290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f298:	78fa      	ldrb	r2, [r7, #3]
 800f29a:	4611      	mov	r1, r2
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7f7 f965 	bl	800656c <HAL_PCD_EP_ClrStall>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2a6:	7bfb      	ldrb	r3, [r7, #15]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f000 f8bf 	bl	800f42c <USBD_Get_USB_Status>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3710      	adds	r7, #16
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f2ce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f2d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	da0b      	bge.n	800f2f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f2d8:	78fb      	ldrb	r3, [r7, #3]
 800f2da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f2de:	68f9      	ldr	r1, [r7, #12]
 800f2e0:	4613      	mov	r3, r2
 800f2e2:	00db      	lsls	r3, r3, #3
 800f2e4:	4413      	add	r3, r2
 800f2e6:	009b      	lsls	r3, r3, #2
 800f2e8:	440b      	add	r3, r1
 800f2ea:	3316      	adds	r3, #22
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	e00b      	b.n	800f308 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f2f0:	78fb      	ldrb	r3, [r7, #3]
 800f2f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f2f6:	68f9      	ldr	r1, [r7, #12]
 800f2f8:	4613      	mov	r3, r2
 800f2fa:	00db      	lsls	r3, r3, #3
 800f2fc:	4413      	add	r3, r2
 800f2fe:	009b      	lsls	r3, r3, #2
 800f300:	440b      	add	r3, r1
 800f302:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f306:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3714      	adds	r7, #20
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	460b      	mov	r3, r1
 800f31e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f320:	2300      	movs	r3, #0
 800f322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f324:	2300      	movs	r3, #0
 800f326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f32e:	78fa      	ldrb	r2, [r7, #3]
 800f330:	4611      	mov	r1, r2
 800f332:	4618      	mov	r0, r3
 800f334:	f7f6 ff52 	bl	80061dc <HAL_PCD_SetAddress>
 800f338:	4603      	mov	r3, r0
 800f33a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f33c:	7bfb      	ldrb	r3, [r7, #15]
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 f874 	bl	800f42c <USBD_Get_USB_Status>
 800f344:	4603      	mov	r3, r0
 800f346:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f348:	7bbb      	ldrb	r3, [r7, #14]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3710      	adds	r7, #16
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f352:	b580      	push	{r7, lr}
 800f354:	b086      	sub	sp, #24
 800f356:	af00      	add	r7, sp, #0
 800f358:	60f8      	str	r0, [r7, #12]
 800f35a:	607a      	str	r2, [r7, #4]
 800f35c:	603b      	str	r3, [r7, #0]
 800f35e:	460b      	mov	r3, r1
 800f360:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f362:	2300      	movs	r3, #0
 800f364:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f366:	2300      	movs	r3, #0
 800f368:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f370:	7af9      	ldrb	r1, [r7, #11]
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	f7f7 f85c 	bl	8006432 <HAL_PCD_EP_Transmit>
 800f37a:	4603      	mov	r3, r0
 800f37c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f37e:	7dfb      	ldrb	r3, [r7, #23]
 800f380:	4618      	mov	r0, r3
 800f382:	f000 f853 	bl	800f42c <USBD_Get_USB_Status>
 800f386:	4603      	mov	r3, r0
 800f388:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f38a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3718      	adds	r7, #24
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b086      	sub	sp, #24
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	607a      	str	r2, [r7, #4]
 800f39e:	603b      	str	r3, [r7, #0]
 800f3a0:	460b      	mov	r3, r1
 800f3a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f3b2:	7af9      	ldrb	r1, [r7, #11]
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	687a      	ldr	r2, [r7, #4]
 800f3b8:	f7f6 ffe8 	bl	800638c <HAL_PCD_EP_Receive>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3c0:	7dfb      	ldrb	r3, [r7, #23]
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f000 f832 	bl	800f42c <USBD_Get_USB_Status>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f3cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3718      	adds	r7, #24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}

0800f3d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b082      	sub	sp, #8
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
 800f3de:	460b      	mov	r3, r1
 800f3e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f3e8:	78fa      	ldrb	r2, [r7, #3]
 800f3ea:	4611      	mov	r1, r2
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7f7 f808 	bl	8006402 <HAL_PCD_EP_GetRxCount>
 800f3f2:	4603      	mov	r3, r0
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}

0800f3fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f404:	4b03      	ldr	r3, [pc, #12]	@ (800f414 <USBD_static_malloc+0x18>)
}
 800f406:	4618      	mov	r0, r3
 800f408:	370c      	adds	r7, #12
 800f40a:	46bd      	mov	sp, r7
 800f40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop
 800f414:	240021ec 	.word	0x240021ec

0800f418 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f420:	bf00      	nop
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b085      	sub	sp, #20
 800f430:	af00      	add	r7, sp, #0
 800f432:	4603      	mov	r3, r0
 800f434:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f436:	2300      	movs	r3, #0
 800f438:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f43a:	79fb      	ldrb	r3, [r7, #7]
 800f43c:	2b03      	cmp	r3, #3
 800f43e:	d817      	bhi.n	800f470 <USBD_Get_USB_Status+0x44>
 800f440:	a201      	add	r2, pc, #4	@ (adr r2, 800f448 <USBD_Get_USB_Status+0x1c>)
 800f442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f446:	bf00      	nop
 800f448:	0800f459 	.word	0x0800f459
 800f44c:	0800f45f 	.word	0x0800f45f
 800f450:	0800f465 	.word	0x0800f465
 800f454:	0800f46b 	.word	0x0800f46b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f458:	2300      	movs	r3, #0
 800f45a:	73fb      	strb	r3, [r7, #15]
    break;
 800f45c:	e00b      	b.n	800f476 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f45e:	2303      	movs	r3, #3
 800f460:	73fb      	strb	r3, [r7, #15]
    break;
 800f462:	e008      	b.n	800f476 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f464:	2301      	movs	r3, #1
 800f466:	73fb      	strb	r3, [r7, #15]
    break;
 800f468:	e005      	b.n	800f476 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f46a:	2303      	movs	r3, #3
 800f46c:	73fb      	strb	r3, [r7, #15]
    break;
 800f46e:	e002      	b.n	800f476 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f470:	2303      	movs	r3, #3
 800f472:	73fb      	strb	r3, [r7, #15]
    break;
 800f474:	bf00      	nop
  }
  return usb_status;
 800f476:	7bfb      	ldrb	r3, [r7, #15]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3714      	adds	r7, #20
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <__cvt>:
 800f484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f486:	ed2d 8b02 	vpush	{d8}
 800f48a:	eeb0 8b40 	vmov.f64	d8, d0
 800f48e:	b085      	sub	sp, #20
 800f490:	4617      	mov	r7, r2
 800f492:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f494:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f496:	ee18 2a90 	vmov	r2, s17
 800f49a:	f025 0520 	bic.w	r5, r5, #32
 800f49e:	2a00      	cmp	r2, #0
 800f4a0:	bfb6      	itet	lt
 800f4a2:	222d      	movlt	r2, #45	@ 0x2d
 800f4a4:	2200      	movge	r2, #0
 800f4a6:	eeb1 8b40 	vneglt.f64	d8, d0
 800f4aa:	2d46      	cmp	r5, #70	@ 0x46
 800f4ac:	460c      	mov	r4, r1
 800f4ae:	701a      	strb	r2, [r3, #0]
 800f4b0:	d004      	beq.n	800f4bc <__cvt+0x38>
 800f4b2:	2d45      	cmp	r5, #69	@ 0x45
 800f4b4:	d100      	bne.n	800f4b8 <__cvt+0x34>
 800f4b6:	3401      	adds	r4, #1
 800f4b8:	2102      	movs	r1, #2
 800f4ba:	e000      	b.n	800f4be <__cvt+0x3a>
 800f4bc:	2103      	movs	r1, #3
 800f4be:	ab03      	add	r3, sp, #12
 800f4c0:	9301      	str	r3, [sp, #4]
 800f4c2:	ab02      	add	r3, sp, #8
 800f4c4:	9300      	str	r3, [sp, #0]
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	4633      	mov	r3, r6
 800f4ca:	eeb0 0b48 	vmov.f64	d0, d8
 800f4ce:	f000 fe2f 	bl	8010130 <_dtoa_r>
 800f4d2:	2d47      	cmp	r5, #71	@ 0x47
 800f4d4:	d114      	bne.n	800f500 <__cvt+0x7c>
 800f4d6:	07fb      	lsls	r3, r7, #31
 800f4d8:	d50a      	bpl.n	800f4f0 <__cvt+0x6c>
 800f4da:	1902      	adds	r2, r0, r4
 800f4dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e4:	bf08      	it	eq
 800f4e6:	9203      	streq	r2, [sp, #12]
 800f4e8:	2130      	movs	r1, #48	@ 0x30
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d319      	bcc.n	800f524 <__cvt+0xa0>
 800f4f0:	9b03      	ldr	r3, [sp, #12]
 800f4f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4f4:	1a1b      	subs	r3, r3, r0
 800f4f6:	6013      	str	r3, [r2, #0]
 800f4f8:	b005      	add	sp, #20
 800f4fa:	ecbd 8b02 	vpop	{d8}
 800f4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f500:	2d46      	cmp	r5, #70	@ 0x46
 800f502:	eb00 0204 	add.w	r2, r0, r4
 800f506:	d1e9      	bne.n	800f4dc <__cvt+0x58>
 800f508:	7803      	ldrb	r3, [r0, #0]
 800f50a:	2b30      	cmp	r3, #48	@ 0x30
 800f50c:	d107      	bne.n	800f51e <__cvt+0x9a>
 800f50e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f516:	bf1c      	itt	ne
 800f518:	f1c4 0401 	rsbne	r4, r4, #1
 800f51c:	6034      	strne	r4, [r6, #0]
 800f51e:	6833      	ldr	r3, [r6, #0]
 800f520:	441a      	add	r2, r3
 800f522:	e7db      	b.n	800f4dc <__cvt+0x58>
 800f524:	1c5c      	adds	r4, r3, #1
 800f526:	9403      	str	r4, [sp, #12]
 800f528:	7019      	strb	r1, [r3, #0]
 800f52a:	e7de      	b.n	800f4ea <__cvt+0x66>

0800f52c <__exponent>:
 800f52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f52e:	2900      	cmp	r1, #0
 800f530:	bfba      	itte	lt
 800f532:	4249      	neglt	r1, r1
 800f534:	232d      	movlt	r3, #45	@ 0x2d
 800f536:	232b      	movge	r3, #43	@ 0x2b
 800f538:	2909      	cmp	r1, #9
 800f53a:	7002      	strb	r2, [r0, #0]
 800f53c:	7043      	strb	r3, [r0, #1]
 800f53e:	dd29      	ble.n	800f594 <__exponent+0x68>
 800f540:	f10d 0307 	add.w	r3, sp, #7
 800f544:	461d      	mov	r5, r3
 800f546:	270a      	movs	r7, #10
 800f548:	461a      	mov	r2, r3
 800f54a:	fbb1 f6f7 	udiv	r6, r1, r7
 800f54e:	fb07 1416 	mls	r4, r7, r6, r1
 800f552:	3430      	adds	r4, #48	@ 0x30
 800f554:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f558:	460c      	mov	r4, r1
 800f55a:	2c63      	cmp	r4, #99	@ 0x63
 800f55c:	f103 33ff 	add.w	r3, r3, #4294967295
 800f560:	4631      	mov	r1, r6
 800f562:	dcf1      	bgt.n	800f548 <__exponent+0x1c>
 800f564:	3130      	adds	r1, #48	@ 0x30
 800f566:	1e94      	subs	r4, r2, #2
 800f568:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f56c:	1c41      	adds	r1, r0, #1
 800f56e:	4623      	mov	r3, r4
 800f570:	42ab      	cmp	r3, r5
 800f572:	d30a      	bcc.n	800f58a <__exponent+0x5e>
 800f574:	f10d 0309 	add.w	r3, sp, #9
 800f578:	1a9b      	subs	r3, r3, r2
 800f57a:	42ac      	cmp	r4, r5
 800f57c:	bf88      	it	hi
 800f57e:	2300      	movhi	r3, #0
 800f580:	3302      	adds	r3, #2
 800f582:	4403      	add	r3, r0
 800f584:	1a18      	subs	r0, r3, r0
 800f586:	b003      	add	sp, #12
 800f588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f58a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f58e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f592:	e7ed      	b.n	800f570 <__exponent+0x44>
 800f594:	2330      	movs	r3, #48	@ 0x30
 800f596:	3130      	adds	r1, #48	@ 0x30
 800f598:	7083      	strb	r3, [r0, #2]
 800f59a:	70c1      	strb	r1, [r0, #3]
 800f59c:	1d03      	adds	r3, r0, #4
 800f59e:	e7f1      	b.n	800f584 <__exponent+0x58>

0800f5a0 <_printf_float>:
 800f5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a4:	b08d      	sub	sp, #52	@ 0x34
 800f5a6:	460c      	mov	r4, r1
 800f5a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f5ac:	4616      	mov	r6, r2
 800f5ae:	461f      	mov	r7, r3
 800f5b0:	4605      	mov	r5, r0
 800f5b2:	f000 fcbb 	bl	800ff2c <_localeconv_r>
 800f5b6:	f8d0 b000 	ldr.w	fp, [r0]
 800f5ba:	4658      	mov	r0, fp
 800f5bc:	f7f0 fee0 	bl	8000380 <strlen>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5c4:	f8d8 3000 	ldr.w	r3, [r8]
 800f5c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f5cc:	6822      	ldr	r2, [r4, #0]
 800f5ce:	9005      	str	r0, [sp, #20]
 800f5d0:	3307      	adds	r3, #7
 800f5d2:	f023 0307 	bic.w	r3, r3, #7
 800f5d6:	f103 0108 	add.w	r1, r3, #8
 800f5da:	f8c8 1000 	str.w	r1, [r8]
 800f5de:	ed93 0b00 	vldr	d0, [r3]
 800f5e2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f840 <_printf_float+0x2a0>
 800f5e6:	eeb0 7bc0 	vabs.f64	d7, d0
 800f5ea:	eeb4 7b46 	vcmp.f64	d7, d6
 800f5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f5f6:	dd24      	ble.n	800f642 <_printf_float+0xa2>
 800f5f8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f600:	d502      	bpl.n	800f608 <_printf_float+0x68>
 800f602:	232d      	movs	r3, #45	@ 0x2d
 800f604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f608:	498f      	ldr	r1, [pc, #572]	@ (800f848 <_printf_float+0x2a8>)
 800f60a:	4b90      	ldr	r3, [pc, #576]	@ (800f84c <_printf_float+0x2ac>)
 800f60c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f610:	bf8c      	ite	hi
 800f612:	4688      	movhi	r8, r1
 800f614:	4698      	movls	r8, r3
 800f616:	f022 0204 	bic.w	r2, r2, #4
 800f61a:	2303      	movs	r3, #3
 800f61c:	6123      	str	r3, [r4, #16]
 800f61e:	6022      	str	r2, [r4, #0]
 800f620:	f04f 0a00 	mov.w	sl, #0
 800f624:	9700      	str	r7, [sp, #0]
 800f626:	4633      	mov	r3, r6
 800f628:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f62a:	4621      	mov	r1, r4
 800f62c:	4628      	mov	r0, r5
 800f62e:	f000 f9d1 	bl	800f9d4 <_printf_common>
 800f632:	3001      	adds	r0, #1
 800f634:	f040 8089 	bne.w	800f74a <_printf_float+0x1aa>
 800f638:	f04f 30ff 	mov.w	r0, #4294967295
 800f63c:	b00d      	add	sp, #52	@ 0x34
 800f63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f642:	eeb4 0b40 	vcmp.f64	d0, d0
 800f646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f64a:	d709      	bvc.n	800f660 <_printf_float+0xc0>
 800f64c:	ee10 3a90 	vmov	r3, s1
 800f650:	2b00      	cmp	r3, #0
 800f652:	bfbc      	itt	lt
 800f654:	232d      	movlt	r3, #45	@ 0x2d
 800f656:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f65a:	497d      	ldr	r1, [pc, #500]	@ (800f850 <_printf_float+0x2b0>)
 800f65c:	4b7d      	ldr	r3, [pc, #500]	@ (800f854 <_printf_float+0x2b4>)
 800f65e:	e7d5      	b.n	800f60c <_printf_float+0x6c>
 800f660:	6863      	ldr	r3, [r4, #4]
 800f662:	1c59      	adds	r1, r3, #1
 800f664:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f668:	d139      	bne.n	800f6de <_printf_float+0x13e>
 800f66a:	2306      	movs	r3, #6
 800f66c:	6063      	str	r3, [r4, #4]
 800f66e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f672:	2300      	movs	r3, #0
 800f674:	6022      	str	r2, [r4, #0]
 800f676:	9303      	str	r3, [sp, #12]
 800f678:	ab0a      	add	r3, sp, #40	@ 0x28
 800f67a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f67e:	ab09      	add	r3, sp, #36	@ 0x24
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	6861      	ldr	r1, [r4, #4]
 800f684:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f688:	4628      	mov	r0, r5
 800f68a:	f7ff fefb 	bl	800f484 <__cvt>
 800f68e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f692:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f694:	4680      	mov	r8, r0
 800f696:	d129      	bne.n	800f6ec <_printf_float+0x14c>
 800f698:	1cc8      	adds	r0, r1, #3
 800f69a:	db02      	blt.n	800f6a2 <_printf_float+0x102>
 800f69c:	6863      	ldr	r3, [r4, #4]
 800f69e:	4299      	cmp	r1, r3
 800f6a0:	dd41      	ble.n	800f726 <_printf_float+0x186>
 800f6a2:	f1a9 0902 	sub.w	r9, r9, #2
 800f6a6:	fa5f f989 	uxtb.w	r9, r9
 800f6aa:	3901      	subs	r1, #1
 800f6ac:	464a      	mov	r2, r9
 800f6ae:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f6b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f6b4:	f7ff ff3a 	bl	800f52c <__exponent>
 800f6b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f6ba:	1813      	adds	r3, r2, r0
 800f6bc:	2a01      	cmp	r2, #1
 800f6be:	4682      	mov	sl, r0
 800f6c0:	6123      	str	r3, [r4, #16]
 800f6c2:	dc02      	bgt.n	800f6ca <_printf_float+0x12a>
 800f6c4:	6822      	ldr	r2, [r4, #0]
 800f6c6:	07d2      	lsls	r2, r2, #31
 800f6c8:	d501      	bpl.n	800f6ce <_printf_float+0x12e>
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	6123      	str	r3, [r4, #16]
 800f6ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d0a6      	beq.n	800f624 <_printf_float+0x84>
 800f6d6:	232d      	movs	r3, #45	@ 0x2d
 800f6d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f6dc:	e7a2      	b.n	800f624 <_printf_float+0x84>
 800f6de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f6e2:	d1c4      	bne.n	800f66e <_printf_float+0xce>
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d1c2      	bne.n	800f66e <_printf_float+0xce>
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	e7bf      	b.n	800f66c <_printf_float+0xcc>
 800f6ec:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f6f0:	d9db      	bls.n	800f6aa <_printf_float+0x10a>
 800f6f2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f6f6:	d118      	bne.n	800f72a <_printf_float+0x18a>
 800f6f8:	2900      	cmp	r1, #0
 800f6fa:	6863      	ldr	r3, [r4, #4]
 800f6fc:	dd0b      	ble.n	800f716 <_printf_float+0x176>
 800f6fe:	6121      	str	r1, [r4, #16]
 800f700:	b913      	cbnz	r3, 800f708 <_printf_float+0x168>
 800f702:	6822      	ldr	r2, [r4, #0]
 800f704:	07d0      	lsls	r0, r2, #31
 800f706:	d502      	bpl.n	800f70e <_printf_float+0x16e>
 800f708:	3301      	adds	r3, #1
 800f70a:	440b      	add	r3, r1
 800f70c:	6123      	str	r3, [r4, #16]
 800f70e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f710:	f04f 0a00 	mov.w	sl, #0
 800f714:	e7db      	b.n	800f6ce <_printf_float+0x12e>
 800f716:	b913      	cbnz	r3, 800f71e <_printf_float+0x17e>
 800f718:	6822      	ldr	r2, [r4, #0]
 800f71a:	07d2      	lsls	r2, r2, #31
 800f71c:	d501      	bpl.n	800f722 <_printf_float+0x182>
 800f71e:	3302      	adds	r3, #2
 800f720:	e7f4      	b.n	800f70c <_printf_float+0x16c>
 800f722:	2301      	movs	r3, #1
 800f724:	e7f2      	b.n	800f70c <_printf_float+0x16c>
 800f726:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f72a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f72c:	4299      	cmp	r1, r3
 800f72e:	db05      	blt.n	800f73c <_printf_float+0x19c>
 800f730:	6823      	ldr	r3, [r4, #0]
 800f732:	6121      	str	r1, [r4, #16]
 800f734:	07d8      	lsls	r0, r3, #31
 800f736:	d5ea      	bpl.n	800f70e <_printf_float+0x16e>
 800f738:	1c4b      	adds	r3, r1, #1
 800f73a:	e7e7      	b.n	800f70c <_printf_float+0x16c>
 800f73c:	2900      	cmp	r1, #0
 800f73e:	bfd4      	ite	le
 800f740:	f1c1 0202 	rsble	r2, r1, #2
 800f744:	2201      	movgt	r2, #1
 800f746:	4413      	add	r3, r2
 800f748:	e7e0      	b.n	800f70c <_printf_float+0x16c>
 800f74a:	6823      	ldr	r3, [r4, #0]
 800f74c:	055a      	lsls	r2, r3, #21
 800f74e:	d407      	bmi.n	800f760 <_printf_float+0x1c0>
 800f750:	6923      	ldr	r3, [r4, #16]
 800f752:	4642      	mov	r2, r8
 800f754:	4631      	mov	r1, r6
 800f756:	4628      	mov	r0, r5
 800f758:	47b8      	blx	r7
 800f75a:	3001      	adds	r0, #1
 800f75c:	d12a      	bne.n	800f7b4 <_printf_float+0x214>
 800f75e:	e76b      	b.n	800f638 <_printf_float+0x98>
 800f760:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f764:	f240 80e0 	bls.w	800f928 <_printf_float+0x388>
 800f768:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f76c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f774:	d133      	bne.n	800f7de <_printf_float+0x23e>
 800f776:	4a38      	ldr	r2, [pc, #224]	@ (800f858 <_printf_float+0x2b8>)
 800f778:	2301      	movs	r3, #1
 800f77a:	4631      	mov	r1, r6
 800f77c:	4628      	mov	r0, r5
 800f77e:	47b8      	blx	r7
 800f780:	3001      	adds	r0, #1
 800f782:	f43f af59 	beq.w	800f638 <_printf_float+0x98>
 800f786:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f78a:	4543      	cmp	r3, r8
 800f78c:	db02      	blt.n	800f794 <_printf_float+0x1f4>
 800f78e:	6823      	ldr	r3, [r4, #0]
 800f790:	07d8      	lsls	r0, r3, #31
 800f792:	d50f      	bpl.n	800f7b4 <_printf_float+0x214>
 800f794:	9b05      	ldr	r3, [sp, #20]
 800f796:	465a      	mov	r2, fp
 800f798:	4631      	mov	r1, r6
 800f79a:	4628      	mov	r0, r5
 800f79c:	47b8      	blx	r7
 800f79e:	3001      	adds	r0, #1
 800f7a0:	f43f af4a 	beq.w	800f638 <_printf_float+0x98>
 800f7a4:	f04f 0900 	mov.w	r9, #0
 800f7a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800f7ac:	f104 0a1a 	add.w	sl, r4, #26
 800f7b0:	45c8      	cmp	r8, r9
 800f7b2:	dc09      	bgt.n	800f7c8 <_printf_float+0x228>
 800f7b4:	6823      	ldr	r3, [r4, #0]
 800f7b6:	079b      	lsls	r3, r3, #30
 800f7b8:	f100 8107 	bmi.w	800f9ca <_printf_float+0x42a>
 800f7bc:	68e0      	ldr	r0, [r4, #12]
 800f7be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7c0:	4298      	cmp	r0, r3
 800f7c2:	bfb8      	it	lt
 800f7c4:	4618      	movlt	r0, r3
 800f7c6:	e739      	b.n	800f63c <_printf_float+0x9c>
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	4652      	mov	r2, sl
 800f7cc:	4631      	mov	r1, r6
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	47b8      	blx	r7
 800f7d2:	3001      	adds	r0, #1
 800f7d4:	f43f af30 	beq.w	800f638 <_printf_float+0x98>
 800f7d8:	f109 0901 	add.w	r9, r9, #1
 800f7dc:	e7e8      	b.n	800f7b0 <_printf_float+0x210>
 800f7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	dc3b      	bgt.n	800f85c <_printf_float+0x2bc>
 800f7e4:	4a1c      	ldr	r2, [pc, #112]	@ (800f858 <_printf_float+0x2b8>)
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	47b8      	blx	r7
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	f43f af22 	beq.w	800f638 <_printf_float+0x98>
 800f7f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f7f8:	ea59 0303 	orrs.w	r3, r9, r3
 800f7fc:	d102      	bne.n	800f804 <_printf_float+0x264>
 800f7fe:	6823      	ldr	r3, [r4, #0]
 800f800:	07d9      	lsls	r1, r3, #31
 800f802:	d5d7      	bpl.n	800f7b4 <_printf_float+0x214>
 800f804:	9b05      	ldr	r3, [sp, #20]
 800f806:	465a      	mov	r2, fp
 800f808:	4631      	mov	r1, r6
 800f80a:	4628      	mov	r0, r5
 800f80c:	47b8      	blx	r7
 800f80e:	3001      	adds	r0, #1
 800f810:	f43f af12 	beq.w	800f638 <_printf_float+0x98>
 800f814:	f04f 0a00 	mov.w	sl, #0
 800f818:	f104 0b1a 	add.w	fp, r4, #26
 800f81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f81e:	425b      	negs	r3, r3
 800f820:	4553      	cmp	r3, sl
 800f822:	dc01      	bgt.n	800f828 <_printf_float+0x288>
 800f824:	464b      	mov	r3, r9
 800f826:	e794      	b.n	800f752 <_printf_float+0x1b2>
 800f828:	2301      	movs	r3, #1
 800f82a:	465a      	mov	r2, fp
 800f82c:	4631      	mov	r1, r6
 800f82e:	4628      	mov	r0, r5
 800f830:	47b8      	blx	r7
 800f832:	3001      	adds	r0, #1
 800f834:	f43f af00 	beq.w	800f638 <_printf_float+0x98>
 800f838:	f10a 0a01 	add.w	sl, sl, #1
 800f83c:	e7ee      	b.n	800f81c <_printf_float+0x27c>
 800f83e:	bf00      	nop
 800f840:	ffffffff 	.word	0xffffffff
 800f844:	7fefffff 	.word	0x7fefffff
 800f848:	08012e44 	.word	0x08012e44
 800f84c:	08012e40 	.word	0x08012e40
 800f850:	08012e4c 	.word	0x08012e4c
 800f854:	08012e48 	.word	0x08012e48
 800f858:	08012e50 	.word	0x08012e50
 800f85c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f85e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f862:	4553      	cmp	r3, sl
 800f864:	bfa8      	it	ge
 800f866:	4653      	movge	r3, sl
 800f868:	2b00      	cmp	r3, #0
 800f86a:	4699      	mov	r9, r3
 800f86c:	dc37      	bgt.n	800f8de <_printf_float+0x33e>
 800f86e:	2300      	movs	r3, #0
 800f870:	9307      	str	r3, [sp, #28]
 800f872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f876:	f104 021a 	add.w	r2, r4, #26
 800f87a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f87c:	9907      	ldr	r1, [sp, #28]
 800f87e:	9306      	str	r3, [sp, #24]
 800f880:	eba3 0309 	sub.w	r3, r3, r9
 800f884:	428b      	cmp	r3, r1
 800f886:	dc31      	bgt.n	800f8ec <_printf_float+0x34c>
 800f888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f88a:	459a      	cmp	sl, r3
 800f88c:	dc3b      	bgt.n	800f906 <_printf_float+0x366>
 800f88e:	6823      	ldr	r3, [r4, #0]
 800f890:	07da      	lsls	r2, r3, #31
 800f892:	d438      	bmi.n	800f906 <_printf_float+0x366>
 800f894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f896:	ebaa 0903 	sub.w	r9, sl, r3
 800f89a:	9b06      	ldr	r3, [sp, #24]
 800f89c:	ebaa 0303 	sub.w	r3, sl, r3
 800f8a0:	4599      	cmp	r9, r3
 800f8a2:	bfa8      	it	ge
 800f8a4:	4699      	movge	r9, r3
 800f8a6:	f1b9 0f00 	cmp.w	r9, #0
 800f8aa:	dc34      	bgt.n	800f916 <_printf_float+0x376>
 800f8ac:	f04f 0800 	mov.w	r8, #0
 800f8b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8b4:	f104 0b1a 	add.w	fp, r4, #26
 800f8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8ba:	ebaa 0303 	sub.w	r3, sl, r3
 800f8be:	eba3 0309 	sub.w	r3, r3, r9
 800f8c2:	4543      	cmp	r3, r8
 800f8c4:	f77f af76 	ble.w	800f7b4 <_printf_float+0x214>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	465a      	mov	r2, fp
 800f8cc:	4631      	mov	r1, r6
 800f8ce:	4628      	mov	r0, r5
 800f8d0:	47b8      	blx	r7
 800f8d2:	3001      	adds	r0, #1
 800f8d4:	f43f aeb0 	beq.w	800f638 <_printf_float+0x98>
 800f8d8:	f108 0801 	add.w	r8, r8, #1
 800f8dc:	e7ec      	b.n	800f8b8 <_printf_float+0x318>
 800f8de:	4642      	mov	r2, r8
 800f8e0:	4631      	mov	r1, r6
 800f8e2:	4628      	mov	r0, r5
 800f8e4:	47b8      	blx	r7
 800f8e6:	3001      	adds	r0, #1
 800f8e8:	d1c1      	bne.n	800f86e <_printf_float+0x2ce>
 800f8ea:	e6a5      	b.n	800f638 <_printf_float+0x98>
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	4631      	mov	r1, r6
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	9206      	str	r2, [sp, #24]
 800f8f4:	47b8      	blx	r7
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	f43f ae9e 	beq.w	800f638 <_printf_float+0x98>
 800f8fc:	9b07      	ldr	r3, [sp, #28]
 800f8fe:	9a06      	ldr	r2, [sp, #24]
 800f900:	3301      	adds	r3, #1
 800f902:	9307      	str	r3, [sp, #28]
 800f904:	e7b9      	b.n	800f87a <_printf_float+0x2da>
 800f906:	9b05      	ldr	r3, [sp, #20]
 800f908:	465a      	mov	r2, fp
 800f90a:	4631      	mov	r1, r6
 800f90c:	4628      	mov	r0, r5
 800f90e:	47b8      	blx	r7
 800f910:	3001      	adds	r0, #1
 800f912:	d1bf      	bne.n	800f894 <_printf_float+0x2f4>
 800f914:	e690      	b.n	800f638 <_printf_float+0x98>
 800f916:	9a06      	ldr	r2, [sp, #24]
 800f918:	464b      	mov	r3, r9
 800f91a:	4442      	add	r2, r8
 800f91c:	4631      	mov	r1, r6
 800f91e:	4628      	mov	r0, r5
 800f920:	47b8      	blx	r7
 800f922:	3001      	adds	r0, #1
 800f924:	d1c2      	bne.n	800f8ac <_printf_float+0x30c>
 800f926:	e687      	b.n	800f638 <_printf_float+0x98>
 800f928:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f92c:	f1b9 0f01 	cmp.w	r9, #1
 800f930:	dc01      	bgt.n	800f936 <_printf_float+0x396>
 800f932:	07db      	lsls	r3, r3, #31
 800f934:	d536      	bpl.n	800f9a4 <_printf_float+0x404>
 800f936:	2301      	movs	r3, #1
 800f938:	4642      	mov	r2, r8
 800f93a:	4631      	mov	r1, r6
 800f93c:	4628      	mov	r0, r5
 800f93e:	47b8      	blx	r7
 800f940:	3001      	adds	r0, #1
 800f942:	f43f ae79 	beq.w	800f638 <_printf_float+0x98>
 800f946:	9b05      	ldr	r3, [sp, #20]
 800f948:	465a      	mov	r2, fp
 800f94a:	4631      	mov	r1, r6
 800f94c:	4628      	mov	r0, r5
 800f94e:	47b8      	blx	r7
 800f950:	3001      	adds	r0, #1
 800f952:	f43f ae71 	beq.w	800f638 <_printf_float+0x98>
 800f956:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f95a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f962:	f109 39ff 	add.w	r9, r9, #4294967295
 800f966:	d018      	beq.n	800f99a <_printf_float+0x3fa>
 800f968:	464b      	mov	r3, r9
 800f96a:	f108 0201 	add.w	r2, r8, #1
 800f96e:	4631      	mov	r1, r6
 800f970:	4628      	mov	r0, r5
 800f972:	47b8      	blx	r7
 800f974:	3001      	adds	r0, #1
 800f976:	d10c      	bne.n	800f992 <_printf_float+0x3f2>
 800f978:	e65e      	b.n	800f638 <_printf_float+0x98>
 800f97a:	2301      	movs	r3, #1
 800f97c:	465a      	mov	r2, fp
 800f97e:	4631      	mov	r1, r6
 800f980:	4628      	mov	r0, r5
 800f982:	47b8      	blx	r7
 800f984:	3001      	adds	r0, #1
 800f986:	f43f ae57 	beq.w	800f638 <_printf_float+0x98>
 800f98a:	f108 0801 	add.w	r8, r8, #1
 800f98e:	45c8      	cmp	r8, r9
 800f990:	dbf3      	blt.n	800f97a <_printf_float+0x3da>
 800f992:	4653      	mov	r3, sl
 800f994:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f998:	e6dc      	b.n	800f754 <_printf_float+0x1b4>
 800f99a:	f04f 0800 	mov.w	r8, #0
 800f99e:	f104 0b1a 	add.w	fp, r4, #26
 800f9a2:	e7f4      	b.n	800f98e <_printf_float+0x3ee>
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	4642      	mov	r2, r8
 800f9a8:	e7e1      	b.n	800f96e <_printf_float+0x3ce>
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	464a      	mov	r2, r9
 800f9ae:	4631      	mov	r1, r6
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	47b8      	blx	r7
 800f9b4:	3001      	adds	r0, #1
 800f9b6:	f43f ae3f 	beq.w	800f638 <_printf_float+0x98>
 800f9ba:	f108 0801 	add.w	r8, r8, #1
 800f9be:	68e3      	ldr	r3, [r4, #12]
 800f9c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f9c2:	1a5b      	subs	r3, r3, r1
 800f9c4:	4543      	cmp	r3, r8
 800f9c6:	dcf0      	bgt.n	800f9aa <_printf_float+0x40a>
 800f9c8:	e6f8      	b.n	800f7bc <_printf_float+0x21c>
 800f9ca:	f04f 0800 	mov.w	r8, #0
 800f9ce:	f104 0919 	add.w	r9, r4, #25
 800f9d2:	e7f4      	b.n	800f9be <_printf_float+0x41e>

0800f9d4 <_printf_common>:
 800f9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d8:	4616      	mov	r6, r2
 800f9da:	4698      	mov	r8, r3
 800f9dc:	688a      	ldr	r2, [r1, #8]
 800f9de:	690b      	ldr	r3, [r1, #16]
 800f9e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	bfb8      	it	lt
 800f9e8:	4613      	movlt	r3, r2
 800f9ea:	6033      	str	r3, [r6, #0]
 800f9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f9f0:	4607      	mov	r7, r0
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	b10a      	cbz	r2, 800f9fa <_printf_common+0x26>
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	6033      	str	r3, [r6, #0]
 800f9fa:	6823      	ldr	r3, [r4, #0]
 800f9fc:	0699      	lsls	r1, r3, #26
 800f9fe:	bf42      	ittt	mi
 800fa00:	6833      	ldrmi	r3, [r6, #0]
 800fa02:	3302      	addmi	r3, #2
 800fa04:	6033      	strmi	r3, [r6, #0]
 800fa06:	6825      	ldr	r5, [r4, #0]
 800fa08:	f015 0506 	ands.w	r5, r5, #6
 800fa0c:	d106      	bne.n	800fa1c <_printf_common+0x48>
 800fa0e:	f104 0a19 	add.w	sl, r4, #25
 800fa12:	68e3      	ldr	r3, [r4, #12]
 800fa14:	6832      	ldr	r2, [r6, #0]
 800fa16:	1a9b      	subs	r3, r3, r2
 800fa18:	42ab      	cmp	r3, r5
 800fa1a:	dc26      	bgt.n	800fa6a <_printf_common+0x96>
 800fa1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fa20:	6822      	ldr	r2, [r4, #0]
 800fa22:	3b00      	subs	r3, #0
 800fa24:	bf18      	it	ne
 800fa26:	2301      	movne	r3, #1
 800fa28:	0692      	lsls	r2, r2, #26
 800fa2a:	d42b      	bmi.n	800fa84 <_printf_common+0xb0>
 800fa2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa30:	4641      	mov	r1, r8
 800fa32:	4638      	mov	r0, r7
 800fa34:	47c8      	blx	r9
 800fa36:	3001      	adds	r0, #1
 800fa38:	d01e      	beq.n	800fa78 <_printf_common+0xa4>
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	6922      	ldr	r2, [r4, #16]
 800fa3e:	f003 0306 	and.w	r3, r3, #6
 800fa42:	2b04      	cmp	r3, #4
 800fa44:	bf02      	ittt	eq
 800fa46:	68e5      	ldreq	r5, [r4, #12]
 800fa48:	6833      	ldreq	r3, [r6, #0]
 800fa4a:	1aed      	subeq	r5, r5, r3
 800fa4c:	68a3      	ldr	r3, [r4, #8]
 800fa4e:	bf0c      	ite	eq
 800fa50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa54:	2500      	movne	r5, #0
 800fa56:	4293      	cmp	r3, r2
 800fa58:	bfc4      	itt	gt
 800fa5a:	1a9b      	subgt	r3, r3, r2
 800fa5c:	18ed      	addgt	r5, r5, r3
 800fa5e:	2600      	movs	r6, #0
 800fa60:	341a      	adds	r4, #26
 800fa62:	42b5      	cmp	r5, r6
 800fa64:	d11a      	bne.n	800fa9c <_printf_common+0xc8>
 800fa66:	2000      	movs	r0, #0
 800fa68:	e008      	b.n	800fa7c <_printf_common+0xa8>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	4652      	mov	r2, sl
 800fa6e:	4641      	mov	r1, r8
 800fa70:	4638      	mov	r0, r7
 800fa72:	47c8      	blx	r9
 800fa74:	3001      	adds	r0, #1
 800fa76:	d103      	bne.n	800fa80 <_printf_common+0xac>
 800fa78:	f04f 30ff 	mov.w	r0, #4294967295
 800fa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa80:	3501      	adds	r5, #1
 800fa82:	e7c6      	b.n	800fa12 <_printf_common+0x3e>
 800fa84:	18e1      	adds	r1, r4, r3
 800fa86:	1c5a      	adds	r2, r3, #1
 800fa88:	2030      	movs	r0, #48	@ 0x30
 800fa8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa8e:	4422      	add	r2, r4
 800fa90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa98:	3302      	adds	r3, #2
 800fa9a:	e7c7      	b.n	800fa2c <_printf_common+0x58>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	4622      	mov	r2, r4
 800faa0:	4641      	mov	r1, r8
 800faa2:	4638      	mov	r0, r7
 800faa4:	47c8      	blx	r9
 800faa6:	3001      	adds	r0, #1
 800faa8:	d0e6      	beq.n	800fa78 <_printf_common+0xa4>
 800faaa:	3601      	adds	r6, #1
 800faac:	e7d9      	b.n	800fa62 <_printf_common+0x8e>
	...

0800fab0 <_printf_i>:
 800fab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fab4:	7e0f      	ldrb	r7, [r1, #24]
 800fab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fab8:	2f78      	cmp	r7, #120	@ 0x78
 800faba:	4691      	mov	r9, r2
 800fabc:	4680      	mov	r8, r0
 800fabe:	460c      	mov	r4, r1
 800fac0:	469a      	mov	sl, r3
 800fac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fac6:	d807      	bhi.n	800fad8 <_printf_i+0x28>
 800fac8:	2f62      	cmp	r7, #98	@ 0x62
 800faca:	d80a      	bhi.n	800fae2 <_printf_i+0x32>
 800facc:	2f00      	cmp	r7, #0
 800face:	f000 80d1 	beq.w	800fc74 <_printf_i+0x1c4>
 800fad2:	2f58      	cmp	r7, #88	@ 0x58
 800fad4:	f000 80b8 	beq.w	800fc48 <_printf_i+0x198>
 800fad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fadc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fae0:	e03a      	b.n	800fb58 <_printf_i+0xa8>
 800fae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fae6:	2b15      	cmp	r3, #21
 800fae8:	d8f6      	bhi.n	800fad8 <_printf_i+0x28>
 800faea:	a101      	add	r1, pc, #4	@ (adr r1, 800faf0 <_printf_i+0x40>)
 800faec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800faf0:	0800fb49 	.word	0x0800fb49
 800faf4:	0800fb5d 	.word	0x0800fb5d
 800faf8:	0800fad9 	.word	0x0800fad9
 800fafc:	0800fad9 	.word	0x0800fad9
 800fb00:	0800fad9 	.word	0x0800fad9
 800fb04:	0800fad9 	.word	0x0800fad9
 800fb08:	0800fb5d 	.word	0x0800fb5d
 800fb0c:	0800fad9 	.word	0x0800fad9
 800fb10:	0800fad9 	.word	0x0800fad9
 800fb14:	0800fad9 	.word	0x0800fad9
 800fb18:	0800fad9 	.word	0x0800fad9
 800fb1c:	0800fc5b 	.word	0x0800fc5b
 800fb20:	0800fb87 	.word	0x0800fb87
 800fb24:	0800fc15 	.word	0x0800fc15
 800fb28:	0800fad9 	.word	0x0800fad9
 800fb2c:	0800fad9 	.word	0x0800fad9
 800fb30:	0800fc7d 	.word	0x0800fc7d
 800fb34:	0800fad9 	.word	0x0800fad9
 800fb38:	0800fb87 	.word	0x0800fb87
 800fb3c:	0800fad9 	.word	0x0800fad9
 800fb40:	0800fad9 	.word	0x0800fad9
 800fb44:	0800fc1d 	.word	0x0800fc1d
 800fb48:	6833      	ldr	r3, [r6, #0]
 800fb4a:	1d1a      	adds	r2, r3, #4
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6032      	str	r2, [r6, #0]
 800fb50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e09c      	b.n	800fc96 <_printf_i+0x1e6>
 800fb5c:	6833      	ldr	r3, [r6, #0]
 800fb5e:	6820      	ldr	r0, [r4, #0]
 800fb60:	1d19      	adds	r1, r3, #4
 800fb62:	6031      	str	r1, [r6, #0]
 800fb64:	0606      	lsls	r6, r0, #24
 800fb66:	d501      	bpl.n	800fb6c <_printf_i+0xbc>
 800fb68:	681d      	ldr	r5, [r3, #0]
 800fb6a:	e003      	b.n	800fb74 <_printf_i+0xc4>
 800fb6c:	0645      	lsls	r5, r0, #25
 800fb6e:	d5fb      	bpl.n	800fb68 <_printf_i+0xb8>
 800fb70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb74:	2d00      	cmp	r5, #0
 800fb76:	da03      	bge.n	800fb80 <_printf_i+0xd0>
 800fb78:	232d      	movs	r3, #45	@ 0x2d
 800fb7a:	426d      	negs	r5, r5
 800fb7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb80:	4858      	ldr	r0, [pc, #352]	@ (800fce4 <_printf_i+0x234>)
 800fb82:	230a      	movs	r3, #10
 800fb84:	e011      	b.n	800fbaa <_printf_i+0xfa>
 800fb86:	6821      	ldr	r1, [r4, #0]
 800fb88:	6833      	ldr	r3, [r6, #0]
 800fb8a:	0608      	lsls	r0, r1, #24
 800fb8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb90:	d402      	bmi.n	800fb98 <_printf_i+0xe8>
 800fb92:	0649      	lsls	r1, r1, #25
 800fb94:	bf48      	it	mi
 800fb96:	b2ad      	uxthmi	r5, r5
 800fb98:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb9a:	4852      	ldr	r0, [pc, #328]	@ (800fce4 <_printf_i+0x234>)
 800fb9c:	6033      	str	r3, [r6, #0]
 800fb9e:	bf14      	ite	ne
 800fba0:	230a      	movne	r3, #10
 800fba2:	2308      	moveq	r3, #8
 800fba4:	2100      	movs	r1, #0
 800fba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fbaa:	6866      	ldr	r6, [r4, #4]
 800fbac:	60a6      	str	r6, [r4, #8]
 800fbae:	2e00      	cmp	r6, #0
 800fbb0:	db05      	blt.n	800fbbe <_printf_i+0x10e>
 800fbb2:	6821      	ldr	r1, [r4, #0]
 800fbb4:	432e      	orrs	r6, r5
 800fbb6:	f021 0104 	bic.w	r1, r1, #4
 800fbba:	6021      	str	r1, [r4, #0]
 800fbbc:	d04b      	beq.n	800fc56 <_printf_i+0x1a6>
 800fbbe:	4616      	mov	r6, r2
 800fbc0:	fbb5 f1f3 	udiv	r1, r5, r3
 800fbc4:	fb03 5711 	mls	r7, r3, r1, r5
 800fbc8:	5dc7      	ldrb	r7, [r0, r7]
 800fbca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fbce:	462f      	mov	r7, r5
 800fbd0:	42bb      	cmp	r3, r7
 800fbd2:	460d      	mov	r5, r1
 800fbd4:	d9f4      	bls.n	800fbc0 <_printf_i+0x110>
 800fbd6:	2b08      	cmp	r3, #8
 800fbd8:	d10b      	bne.n	800fbf2 <_printf_i+0x142>
 800fbda:	6823      	ldr	r3, [r4, #0]
 800fbdc:	07df      	lsls	r7, r3, #31
 800fbde:	d508      	bpl.n	800fbf2 <_printf_i+0x142>
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	6861      	ldr	r1, [r4, #4]
 800fbe4:	4299      	cmp	r1, r3
 800fbe6:	bfde      	ittt	le
 800fbe8:	2330      	movle	r3, #48	@ 0x30
 800fbea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fbee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fbf2:	1b92      	subs	r2, r2, r6
 800fbf4:	6122      	str	r2, [r4, #16]
 800fbf6:	f8cd a000 	str.w	sl, [sp]
 800fbfa:	464b      	mov	r3, r9
 800fbfc:	aa03      	add	r2, sp, #12
 800fbfe:	4621      	mov	r1, r4
 800fc00:	4640      	mov	r0, r8
 800fc02:	f7ff fee7 	bl	800f9d4 <_printf_common>
 800fc06:	3001      	adds	r0, #1
 800fc08:	d14a      	bne.n	800fca0 <_printf_i+0x1f0>
 800fc0a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc0e:	b004      	add	sp, #16
 800fc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc14:	6823      	ldr	r3, [r4, #0]
 800fc16:	f043 0320 	orr.w	r3, r3, #32
 800fc1a:	6023      	str	r3, [r4, #0]
 800fc1c:	4832      	ldr	r0, [pc, #200]	@ (800fce8 <_printf_i+0x238>)
 800fc1e:	2778      	movs	r7, #120	@ 0x78
 800fc20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	6831      	ldr	r1, [r6, #0]
 800fc28:	061f      	lsls	r7, r3, #24
 800fc2a:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc2e:	d402      	bmi.n	800fc36 <_printf_i+0x186>
 800fc30:	065f      	lsls	r7, r3, #25
 800fc32:	bf48      	it	mi
 800fc34:	b2ad      	uxthmi	r5, r5
 800fc36:	6031      	str	r1, [r6, #0]
 800fc38:	07d9      	lsls	r1, r3, #31
 800fc3a:	bf44      	itt	mi
 800fc3c:	f043 0320 	orrmi.w	r3, r3, #32
 800fc40:	6023      	strmi	r3, [r4, #0]
 800fc42:	b11d      	cbz	r5, 800fc4c <_printf_i+0x19c>
 800fc44:	2310      	movs	r3, #16
 800fc46:	e7ad      	b.n	800fba4 <_printf_i+0xf4>
 800fc48:	4826      	ldr	r0, [pc, #152]	@ (800fce4 <_printf_i+0x234>)
 800fc4a:	e7e9      	b.n	800fc20 <_printf_i+0x170>
 800fc4c:	6823      	ldr	r3, [r4, #0]
 800fc4e:	f023 0320 	bic.w	r3, r3, #32
 800fc52:	6023      	str	r3, [r4, #0]
 800fc54:	e7f6      	b.n	800fc44 <_printf_i+0x194>
 800fc56:	4616      	mov	r6, r2
 800fc58:	e7bd      	b.n	800fbd6 <_printf_i+0x126>
 800fc5a:	6833      	ldr	r3, [r6, #0]
 800fc5c:	6825      	ldr	r5, [r4, #0]
 800fc5e:	6961      	ldr	r1, [r4, #20]
 800fc60:	1d18      	adds	r0, r3, #4
 800fc62:	6030      	str	r0, [r6, #0]
 800fc64:	062e      	lsls	r6, r5, #24
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	d501      	bpl.n	800fc6e <_printf_i+0x1be>
 800fc6a:	6019      	str	r1, [r3, #0]
 800fc6c:	e002      	b.n	800fc74 <_printf_i+0x1c4>
 800fc6e:	0668      	lsls	r0, r5, #25
 800fc70:	d5fb      	bpl.n	800fc6a <_printf_i+0x1ba>
 800fc72:	8019      	strh	r1, [r3, #0]
 800fc74:	2300      	movs	r3, #0
 800fc76:	6123      	str	r3, [r4, #16]
 800fc78:	4616      	mov	r6, r2
 800fc7a:	e7bc      	b.n	800fbf6 <_printf_i+0x146>
 800fc7c:	6833      	ldr	r3, [r6, #0]
 800fc7e:	1d1a      	adds	r2, r3, #4
 800fc80:	6032      	str	r2, [r6, #0]
 800fc82:	681e      	ldr	r6, [r3, #0]
 800fc84:	6862      	ldr	r2, [r4, #4]
 800fc86:	2100      	movs	r1, #0
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f7f0 fb29 	bl	80002e0 <memchr>
 800fc8e:	b108      	cbz	r0, 800fc94 <_printf_i+0x1e4>
 800fc90:	1b80      	subs	r0, r0, r6
 800fc92:	6060      	str	r0, [r4, #4]
 800fc94:	6863      	ldr	r3, [r4, #4]
 800fc96:	6123      	str	r3, [r4, #16]
 800fc98:	2300      	movs	r3, #0
 800fc9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc9e:	e7aa      	b.n	800fbf6 <_printf_i+0x146>
 800fca0:	6923      	ldr	r3, [r4, #16]
 800fca2:	4632      	mov	r2, r6
 800fca4:	4649      	mov	r1, r9
 800fca6:	4640      	mov	r0, r8
 800fca8:	47d0      	blx	sl
 800fcaa:	3001      	adds	r0, #1
 800fcac:	d0ad      	beq.n	800fc0a <_printf_i+0x15a>
 800fcae:	6823      	ldr	r3, [r4, #0]
 800fcb0:	079b      	lsls	r3, r3, #30
 800fcb2:	d413      	bmi.n	800fcdc <_printf_i+0x22c>
 800fcb4:	68e0      	ldr	r0, [r4, #12]
 800fcb6:	9b03      	ldr	r3, [sp, #12]
 800fcb8:	4298      	cmp	r0, r3
 800fcba:	bfb8      	it	lt
 800fcbc:	4618      	movlt	r0, r3
 800fcbe:	e7a6      	b.n	800fc0e <_printf_i+0x15e>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	4632      	mov	r2, r6
 800fcc4:	4649      	mov	r1, r9
 800fcc6:	4640      	mov	r0, r8
 800fcc8:	47d0      	blx	sl
 800fcca:	3001      	adds	r0, #1
 800fccc:	d09d      	beq.n	800fc0a <_printf_i+0x15a>
 800fcce:	3501      	adds	r5, #1
 800fcd0:	68e3      	ldr	r3, [r4, #12]
 800fcd2:	9903      	ldr	r1, [sp, #12]
 800fcd4:	1a5b      	subs	r3, r3, r1
 800fcd6:	42ab      	cmp	r3, r5
 800fcd8:	dcf2      	bgt.n	800fcc0 <_printf_i+0x210>
 800fcda:	e7eb      	b.n	800fcb4 <_printf_i+0x204>
 800fcdc:	2500      	movs	r5, #0
 800fcde:	f104 0619 	add.w	r6, r4, #25
 800fce2:	e7f5      	b.n	800fcd0 <_printf_i+0x220>
 800fce4:	08012e52 	.word	0x08012e52
 800fce8:	08012e63 	.word	0x08012e63

0800fcec <std>:
 800fcec:	2300      	movs	r3, #0
 800fcee:	b510      	push	{r4, lr}
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	e9c0 3300 	strd	r3, r3, [r0]
 800fcf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcfa:	6083      	str	r3, [r0, #8]
 800fcfc:	8181      	strh	r1, [r0, #12]
 800fcfe:	6643      	str	r3, [r0, #100]	@ 0x64
 800fd00:	81c2      	strh	r2, [r0, #14]
 800fd02:	6183      	str	r3, [r0, #24]
 800fd04:	4619      	mov	r1, r3
 800fd06:	2208      	movs	r2, #8
 800fd08:	305c      	adds	r0, #92	@ 0x5c
 800fd0a:	f000 f906 	bl	800ff1a <memset>
 800fd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd44 <std+0x58>)
 800fd10:	6263      	str	r3, [r4, #36]	@ 0x24
 800fd12:	4b0d      	ldr	r3, [pc, #52]	@ (800fd48 <std+0x5c>)
 800fd14:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fd16:	4b0d      	ldr	r3, [pc, #52]	@ (800fd4c <std+0x60>)
 800fd18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fd1a:	4b0d      	ldr	r3, [pc, #52]	@ (800fd50 <std+0x64>)
 800fd1c:	6323      	str	r3, [r4, #48]	@ 0x30
 800fd1e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd54 <std+0x68>)
 800fd20:	6224      	str	r4, [r4, #32]
 800fd22:	429c      	cmp	r4, r3
 800fd24:	d006      	beq.n	800fd34 <std+0x48>
 800fd26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fd2a:	4294      	cmp	r4, r2
 800fd2c:	d002      	beq.n	800fd34 <std+0x48>
 800fd2e:	33d0      	adds	r3, #208	@ 0xd0
 800fd30:	429c      	cmp	r4, r3
 800fd32:	d105      	bne.n	800fd40 <std+0x54>
 800fd34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fd38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd3c:	f000 b96a 	b.w	8010014 <__retarget_lock_init_recursive>
 800fd40:	bd10      	pop	{r4, pc}
 800fd42:	bf00      	nop
 800fd44:	0800fe95 	.word	0x0800fe95
 800fd48:	0800feb7 	.word	0x0800feb7
 800fd4c:	0800feef 	.word	0x0800feef
 800fd50:	0800ff13 	.word	0x0800ff13
 800fd54:	2400240c 	.word	0x2400240c

0800fd58 <stdio_exit_handler>:
 800fd58:	4a02      	ldr	r2, [pc, #8]	@ (800fd64 <stdio_exit_handler+0xc>)
 800fd5a:	4903      	ldr	r1, [pc, #12]	@ (800fd68 <stdio_exit_handler+0x10>)
 800fd5c:	4803      	ldr	r0, [pc, #12]	@ (800fd6c <stdio_exit_handler+0x14>)
 800fd5e:	f000 b869 	b.w	800fe34 <_fwalk_sglue>
 800fd62:	bf00      	nop
 800fd64:	2400010c 	.word	0x2400010c
 800fd68:	0801186d 	.word	0x0801186d
 800fd6c:	2400011c 	.word	0x2400011c

0800fd70 <cleanup_stdio>:
 800fd70:	6841      	ldr	r1, [r0, #4]
 800fd72:	4b0c      	ldr	r3, [pc, #48]	@ (800fda4 <cleanup_stdio+0x34>)
 800fd74:	4299      	cmp	r1, r3
 800fd76:	b510      	push	{r4, lr}
 800fd78:	4604      	mov	r4, r0
 800fd7a:	d001      	beq.n	800fd80 <cleanup_stdio+0x10>
 800fd7c:	f001 fd76 	bl	801186c <_fflush_r>
 800fd80:	68a1      	ldr	r1, [r4, #8]
 800fd82:	4b09      	ldr	r3, [pc, #36]	@ (800fda8 <cleanup_stdio+0x38>)
 800fd84:	4299      	cmp	r1, r3
 800fd86:	d002      	beq.n	800fd8e <cleanup_stdio+0x1e>
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f001 fd6f 	bl	801186c <_fflush_r>
 800fd8e:	68e1      	ldr	r1, [r4, #12]
 800fd90:	4b06      	ldr	r3, [pc, #24]	@ (800fdac <cleanup_stdio+0x3c>)
 800fd92:	4299      	cmp	r1, r3
 800fd94:	d004      	beq.n	800fda0 <cleanup_stdio+0x30>
 800fd96:	4620      	mov	r0, r4
 800fd98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd9c:	f001 bd66 	b.w	801186c <_fflush_r>
 800fda0:	bd10      	pop	{r4, pc}
 800fda2:	bf00      	nop
 800fda4:	2400240c 	.word	0x2400240c
 800fda8:	24002474 	.word	0x24002474
 800fdac:	240024dc 	.word	0x240024dc

0800fdb0 <global_stdio_init.part.0>:
 800fdb0:	b510      	push	{r4, lr}
 800fdb2:	4b0b      	ldr	r3, [pc, #44]	@ (800fde0 <global_stdio_init.part.0+0x30>)
 800fdb4:	4c0b      	ldr	r4, [pc, #44]	@ (800fde4 <global_stdio_init.part.0+0x34>)
 800fdb6:	4a0c      	ldr	r2, [pc, #48]	@ (800fde8 <global_stdio_init.part.0+0x38>)
 800fdb8:	601a      	str	r2, [r3, #0]
 800fdba:	4620      	mov	r0, r4
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	2104      	movs	r1, #4
 800fdc0:	f7ff ff94 	bl	800fcec <std>
 800fdc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fdc8:	2201      	movs	r2, #1
 800fdca:	2109      	movs	r1, #9
 800fdcc:	f7ff ff8e 	bl	800fcec <std>
 800fdd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fdd4:	2202      	movs	r2, #2
 800fdd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdda:	2112      	movs	r1, #18
 800fddc:	f7ff bf86 	b.w	800fcec <std>
 800fde0:	24002544 	.word	0x24002544
 800fde4:	2400240c 	.word	0x2400240c
 800fde8:	0800fd59 	.word	0x0800fd59

0800fdec <__sfp_lock_acquire>:
 800fdec:	4801      	ldr	r0, [pc, #4]	@ (800fdf4 <__sfp_lock_acquire+0x8>)
 800fdee:	f000 b912 	b.w	8010016 <__retarget_lock_acquire_recursive>
 800fdf2:	bf00      	nop
 800fdf4:	2400254d 	.word	0x2400254d

0800fdf8 <__sfp_lock_release>:
 800fdf8:	4801      	ldr	r0, [pc, #4]	@ (800fe00 <__sfp_lock_release+0x8>)
 800fdfa:	f000 b90d 	b.w	8010018 <__retarget_lock_release_recursive>
 800fdfe:	bf00      	nop
 800fe00:	2400254d 	.word	0x2400254d

0800fe04 <__sinit>:
 800fe04:	b510      	push	{r4, lr}
 800fe06:	4604      	mov	r4, r0
 800fe08:	f7ff fff0 	bl	800fdec <__sfp_lock_acquire>
 800fe0c:	6a23      	ldr	r3, [r4, #32]
 800fe0e:	b11b      	cbz	r3, 800fe18 <__sinit+0x14>
 800fe10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe14:	f7ff bff0 	b.w	800fdf8 <__sfp_lock_release>
 800fe18:	4b04      	ldr	r3, [pc, #16]	@ (800fe2c <__sinit+0x28>)
 800fe1a:	6223      	str	r3, [r4, #32]
 800fe1c:	4b04      	ldr	r3, [pc, #16]	@ (800fe30 <__sinit+0x2c>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d1f5      	bne.n	800fe10 <__sinit+0xc>
 800fe24:	f7ff ffc4 	bl	800fdb0 <global_stdio_init.part.0>
 800fe28:	e7f2      	b.n	800fe10 <__sinit+0xc>
 800fe2a:	bf00      	nop
 800fe2c:	0800fd71 	.word	0x0800fd71
 800fe30:	24002544 	.word	0x24002544

0800fe34 <_fwalk_sglue>:
 800fe34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe38:	4607      	mov	r7, r0
 800fe3a:	4688      	mov	r8, r1
 800fe3c:	4614      	mov	r4, r2
 800fe3e:	2600      	movs	r6, #0
 800fe40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe44:	f1b9 0901 	subs.w	r9, r9, #1
 800fe48:	d505      	bpl.n	800fe56 <_fwalk_sglue+0x22>
 800fe4a:	6824      	ldr	r4, [r4, #0]
 800fe4c:	2c00      	cmp	r4, #0
 800fe4e:	d1f7      	bne.n	800fe40 <_fwalk_sglue+0xc>
 800fe50:	4630      	mov	r0, r6
 800fe52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe56:	89ab      	ldrh	r3, [r5, #12]
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d907      	bls.n	800fe6c <_fwalk_sglue+0x38>
 800fe5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe60:	3301      	adds	r3, #1
 800fe62:	d003      	beq.n	800fe6c <_fwalk_sglue+0x38>
 800fe64:	4629      	mov	r1, r5
 800fe66:	4638      	mov	r0, r7
 800fe68:	47c0      	blx	r8
 800fe6a:	4306      	orrs	r6, r0
 800fe6c:	3568      	adds	r5, #104	@ 0x68
 800fe6e:	e7e9      	b.n	800fe44 <_fwalk_sglue+0x10>

0800fe70 <iprintf>:
 800fe70:	b40f      	push	{r0, r1, r2, r3}
 800fe72:	b507      	push	{r0, r1, r2, lr}
 800fe74:	4906      	ldr	r1, [pc, #24]	@ (800fe90 <iprintf+0x20>)
 800fe76:	ab04      	add	r3, sp, #16
 800fe78:	6808      	ldr	r0, [r1, #0]
 800fe7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe7e:	6881      	ldr	r1, [r0, #8]
 800fe80:	9301      	str	r3, [sp, #4]
 800fe82:	f001 fb57 	bl	8011534 <_vfiprintf_r>
 800fe86:	b003      	add	sp, #12
 800fe88:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe8c:	b004      	add	sp, #16
 800fe8e:	4770      	bx	lr
 800fe90:	24000118 	.word	0x24000118

0800fe94 <__sread>:
 800fe94:	b510      	push	{r4, lr}
 800fe96:	460c      	mov	r4, r1
 800fe98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe9c:	f000 f86c 	bl	800ff78 <_read_r>
 800fea0:	2800      	cmp	r0, #0
 800fea2:	bfab      	itete	ge
 800fea4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fea6:	89a3      	ldrhlt	r3, [r4, #12]
 800fea8:	181b      	addge	r3, r3, r0
 800feaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800feae:	bfac      	ite	ge
 800feb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800feb2:	81a3      	strhlt	r3, [r4, #12]
 800feb4:	bd10      	pop	{r4, pc}

0800feb6 <__swrite>:
 800feb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feba:	461f      	mov	r7, r3
 800febc:	898b      	ldrh	r3, [r1, #12]
 800febe:	05db      	lsls	r3, r3, #23
 800fec0:	4605      	mov	r5, r0
 800fec2:	460c      	mov	r4, r1
 800fec4:	4616      	mov	r6, r2
 800fec6:	d505      	bpl.n	800fed4 <__swrite+0x1e>
 800fec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fecc:	2302      	movs	r3, #2
 800fece:	2200      	movs	r2, #0
 800fed0:	f000 f840 	bl	800ff54 <_lseek_r>
 800fed4:	89a3      	ldrh	r3, [r4, #12]
 800fed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fede:	81a3      	strh	r3, [r4, #12]
 800fee0:	4632      	mov	r2, r6
 800fee2:	463b      	mov	r3, r7
 800fee4:	4628      	mov	r0, r5
 800fee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feea:	f000 b857 	b.w	800ff9c <_write_r>

0800feee <__sseek>:
 800feee:	b510      	push	{r4, lr}
 800fef0:	460c      	mov	r4, r1
 800fef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef6:	f000 f82d 	bl	800ff54 <_lseek_r>
 800fefa:	1c43      	adds	r3, r0, #1
 800fefc:	89a3      	ldrh	r3, [r4, #12]
 800fefe:	bf15      	itete	ne
 800ff00:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ff02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ff06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ff0a:	81a3      	strheq	r3, [r4, #12]
 800ff0c:	bf18      	it	ne
 800ff0e:	81a3      	strhne	r3, [r4, #12]
 800ff10:	bd10      	pop	{r4, pc}

0800ff12 <__sclose>:
 800ff12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff16:	f000 b80d 	b.w	800ff34 <_close_r>

0800ff1a <memset>:
 800ff1a:	4402      	add	r2, r0
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	4293      	cmp	r3, r2
 800ff20:	d100      	bne.n	800ff24 <memset+0xa>
 800ff22:	4770      	bx	lr
 800ff24:	f803 1b01 	strb.w	r1, [r3], #1
 800ff28:	e7f9      	b.n	800ff1e <memset+0x4>
	...

0800ff2c <_localeconv_r>:
 800ff2c:	4800      	ldr	r0, [pc, #0]	@ (800ff30 <_localeconv_r+0x4>)
 800ff2e:	4770      	bx	lr
 800ff30:	24000258 	.word	0x24000258

0800ff34 <_close_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	4d06      	ldr	r5, [pc, #24]	@ (800ff50 <_close_r+0x1c>)
 800ff38:	2300      	movs	r3, #0
 800ff3a:	4604      	mov	r4, r0
 800ff3c:	4608      	mov	r0, r1
 800ff3e:	602b      	str	r3, [r5, #0]
 800ff40:	f7f1 fda0 	bl	8001a84 <_close>
 800ff44:	1c43      	adds	r3, r0, #1
 800ff46:	d102      	bne.n	800ff4e <_close_r+0x1a>
 800ff48:	682b      	ldr	r3, [r5, #0]
 800ff4a:	b103      	cbz	r3, 800ff4e <_close_r+0x1a>
 800ff4c:	6023      	str	r3, [r4, #0]
 800ff4e:	bd38      	pop	{r3, r4, r5, pc}
 800ff50:	24002548 	.word	0x24002548

0800ff54 <_lseek_r>:
 800ff54:	b538      	push	{r3, r4, r5, lr}
 800ff56:	4d07      	ldr	r5, [pc, #28]	@ (800ff74 <_lseek_r+0x20>)
 800ff58:	4604      	mov	r4, r0
 800ff5a:	4608      	mov	r0, r1
 800ff5c:	4611      	mov	r1, r2
 800ff5e:	2200      	movs	r2, #0
 800ff60:	602a      	str	r2, [r5, #0]
 800ff62:	461a      	mov	r2, r3
 800ff64:	f7f1 fdb5 	bl	8001ad2 <_lseek>
 800ff68:	1c43      	adds	r3, r0, #1
 800ff6a:	d102      	bne.n	800ff72 <_lseek_r+0x1e>
 800ff6c:	682b      	ldr	r3, [r5, #0]
 800ff6e:	b103      	cbz	r3, 800ff72 <_lseek_r+0x1e>
 800ff70:	6023      	str	r3, [r4, #0]
 800ff72:	bd38      	pop	{r3, r4, r5, pc}
 800ff74:	24002548 	.word	0x24002548

0800ff78 <_read_r>:
 800ff78:	b538      	push	{r3, r4, r5, lr}
 800ff7a:	4d07      	ldr	r5, [pc, #28]	@ (800ff98 <_read_r+0x20>)
 800ff7c:	4604      	mov	r4, r0
 800ff7e:	4608      	mov	r0, r1
 800ff80:	4611      	mov	r1, r2
 800ff82:	2200      	movs	r2, #0
 800ff84:	602a      	str	r2, [r5, #0]
 800ff86:	461a      	mov	r2, r3
 800ff88:	f7f1 fd43 	bl	8001a12 <_read>
 800ff8c:	1c43      	adds	r3, r0, #1
 800ff8e:	d102      	bne.n	800ff96 <_read_r+0x1e>
 800ff90:	682b      	ldr	r3, [r5, #0]
 800ff92:	b103      	cbz	r3, 800ff96 <_read_r+0x1e>
 800ff94:	6023      	str	r3, [r4, #0]
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	24002548 	.word	0x24002548

0800ff9c <_write_r>:
 800ff9c:	b538      	push	{r3, r4, r5, lr}
 800ff9e:	4d07      	ldr	r5, [pc, #28]	@ (800ffbc <_write_r+0x20>)
 800ffa0:	4604      	mov	r4, r0
 800ffa2:	4608      	mov	r0, r1
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	602a      	str	r2, [r5, #0]
 800ffaa:	461a      	mov	r2, r3
 800ffac:	f7f1 fd4e 	bl	8001a4c <_write>
 800ffb0:	1c43      	adds	r3, r0, #1
 800ffb2:	d102      	bne.n	800ffba <_write_r+0x1e>
 800ffb4:	682b      	ldr	r3, [r5, #0]
 800ffb6:	b103      	cbz	r3, 800ffba <_write_r+0x1e>
 800ffb8:	6023      	str	r3, [r4, #0]
 800ffba:	bd38      	pop	{r3, r4, r5, pc}
 800ffbc:	24002548 	.word	0x24002548

0800ffc0 <__errno>:
 800ffc0:	4b01      	ldr	r3, [pc, #4]	@ (800ffc8 <__errno+0x8>)
 800ffc2:	6818      	ldr	r0, [r3, #0]
 800ffc4:	4770      	bx	lr
 800ffc6:	bf00      	nop
 800ffc8:	24000118 	.word	0x24000118

0800ffcc <__libc_init_array>:
 800ffcc:	b570      	push	{r4, r5, r6, lr}
 800ffce:	4d0d      	ldr	r5, [pc, #52]	@ (8010004 <__libc_init_array+0x38>)
 800ffd0:	4c0d      	ldr	r4, [pc, #52]	@ (8010008 <__libc_init_array+0x3c>)
 800ffd2:	1b64      	subs	r4, r4, r5
 800ffd4:	10a4      	asrs	r4, r4, #2
 800ffd6:	2600      	movs	r6, #0
 800ffd8:	42a6      	cmp	r6, r4
 800ffda:	d109      	bne.n	800fff0 <__libc_init_array+0x24>
 800ffdc:	4d0b      	ldr	r5, [pc, #44]	@ (801000c <__libc_init_array+0x40>)
 800ffde:	4c0c      	ldr	r4, [pc, #48]	@ (8010010 <__libc_init_array+0x44>)
 800ffe0:	f002 fee8 	bl	8012db4 <_init>
 800ffe4:	1b64      	subs	r4, r4, r5
 800ffe6:	10a4      	asrs	r4, r4, #2
 800ffe8:	2600      	movs	r6, #0
 800ffea:	42a6      	cmp	r6, r4
 800ffec:	d105      	bne.n	800fffa <__libc_init_array+0x2e>
 800ffee:	bd70      	pop	{r4, r5, r6, pc}
 800fff0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fff4:	4798      	blx	r3
 800fff6:	3601      	adds	r6, #1
 800fff8:	e7ee      	b.n	800ffd8 <__libc_init_array+0xc>
 800fffa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fffe:	4798      	blx	r3
 8010000:	3601      	adds	r6, #1
 8010002:	e7f2      	b.n	800ffea <__libc_init_array+0x1e>
 8010004:	08013708 	.word	0x08013708
 8010008:	08013708 	.word	0x08013708
 801000c:	08013708 	.word	0x08013708
 8010010:	0801370c 	.word	0x0801370c

08010014 <__retarget_lock_init_recursive>:
 8010014:	4770      	bx	lr

08010016 <__retarget_lock_acquire_recursive>:
 8010016:	4770      	bx	lr

08010018 <__retarget_lock_release_recursive>:
 8010018:	4770      	bx	lr

0801001a <quorem>:
 801001a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801001e:	6903      	ldr	r3, [r0, #16]
 8010020:	690c      	ldr	r4, [r1, #16]
 8010022:	42a3      	cmp	r3, r4
 8010024:	4607      	mov	r7, r0
 8010026:	db7e      	blt.n	8010126 <quorem+0x10c>
 8010028:	3c01      	subs	r4, #1
 801002a:	f101 0814 	add.w	r8, r1, #20
 801002e:	00a3      	lsls	r3, r4, #2
 8010030:	f100 0514 	add.w	r5, r0, #20
 8010034:	9300      	str	r3, [sp, #0]
 8010036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801003a:	9301      	str	r3, [sp, #4]
 801003c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010044:	3301      	adds	r3, #1
 8010046:	429a      	cmp	r2, r3
 8010048:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801004c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010050:	d32e      	bcc.n	80100b0 <quorem+0x96>
 8010052:	f04f 0a00 	mov.w	sl, #0
 8010056:	46c4      	mov	ip, r8
 8010058:	46ae      	mov	lr, r5
 801005a:	46d3      	mov	fp, sl
 801005c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010060:	b298      	uxth	r0, r3
 8010062:	fb06 a000 	mla	r0, r6, r0, sl
 8010066:	0c02      	lsrs	r2, r0, #16
 8010068:	0c1b      	lsrs	r3, r3, #16
 801006a:	fb06 2303 	mla	r3, r6, r3, r2
 801006e:	f8de 2000 	ldr.w	r2, [lr]
 8010072:	b280      	uxth	r0, r0
 8010074:	b292      	uxth	r2, r2
 8010076:	1a12      	subs	r2, r2, r0
 8010078:	445a      	add	r2, fp
 801007a:	f8de 0000 	ldr.w	r0, [lr]
 801007e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010082:	b29b      	uxth	r3, r3
 8010084:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010088:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801008c:	b292      	uxth	r2, r2
 801008e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010092:	45e1      	cmp	r9, ip
 8010094:	f84e 2b04 	str.w	r2, [lr], #4
 8010098:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801009c:	d2de      	bcs.n	801005c <quorem+0x42>
 801009e:	9b00      	ldr	r3, [sp, #0]
 80100a0:	58eb      	ldr	r3, [r5, r3]
 80100a2:	b92b      	cbnz	r3, 80100b0 <quorem+0x96>
 80100a4:	9b01      	ldr	r3, [sp, #4]
 80100a6:	3b04      	subs	r3, #4
 80100a8:	429d      	cmp	r5, r3
 80100aa:	461a      	mov	r2, r3
 80100ac:	d32f      	bcc.n	801010e <quorem+0xf4>
 80100ae:	613c      	str	r4, [r7, #16]
 80100b0:	4638      	mov	r0, r7
 80100b2:	f001 f90d 	bl	80112d0 <__mcmp>
 80100b6:	2800      	cmp	r0, #0
 80100b8:	db25      	blt.n	8010106 <quorem+0xec>
 80100ba:	4629      	mov	r1, r5
 80100bc:	2000      	movs	r0, #0
 80100be:	f858 2b04 	ldr.w	r2, [r8], #4
 80100c2:	f8d1 c000 	ldr.w	ip, [r1]
 80100c6:	fa1f fe82 	uxth.w	lr, r2
 80100ca:	fa1f f38c 	uxth.w	r3, ip
 80100ce:	eba3 030e 	sub.w	r3, r3, lr
 80100d2:	4403      	add	r3, r0
 80100d4:	0c12      	lsrs	r2, r2, #16
 80100d6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80100da:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80100de:	b29b      	uxth	r3, r3
 80100e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100e4:	45c1      	cmp	r9, r8
 80100e6:	f841 3b04 	str.w	r3, [r1], #4
 80100ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80100ee:	d2e6      	bcs.n	80100be <quorem+0xa4>
 80100f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100f8:	b922      	cbnz	r2, 8010104 <quorem+0xea>
 80100fa:	3b04      	subs	r3, #4
 80100fc:	429d      	cmp	r5, r3
 80100fe:	461a      	mov	r2, r3
 8010100:	d30b      	bcc.n	801011a <quorem+0x100>
 8010102:	613c      	str	r4, [r7, #16]
 8010104:	3601      	adds	r6, #1
 8010106:	4630      	mov	r0, r6
 8010108:	b003      	add	sp, #12
 801010a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801010e:	6812      	ldr	r2, [r2, #0]
 8010110:	3b04      	subs	r3, #4
 8010112:	2a00      	cmp	r2, #0
 8010114:	d1cb      	bne.n	80100ae <quorem+0x94>
 8010116:	3c01      	subs	r4, #1
 8010118:	e7c6      	b.n	80100a8 <quorem+0x8e>
 801011a:	6812      	ldr	r2, [r2, #0]
 801011c:	3b04      	subs	r3, #4
 801011e:	2a00      	cmp	r2, #0
 8010120:	d1ef      	bne.n	8010102 <quorem+0xe8>
 8010122:	3c01      	subs	r4, #1
 8010124:	e7ea      	b.n	80100fc <quorem+0xe2>
 8010126:	2000      	movs	r0, #0
 8010128:	e7ee      	b.n	8010108 <quorem+0xee>
 801012a:	0000      	movs	r0, r0
 801012c:	0000      	movs	r0, r0
	...

08010130 <_dtoa_r>:
 8010130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010134:	ed2d 8b02 	vpush	{d8}
 8010138:	69c7      	ldr	r7, [r0, #28]
 801013a:	b091      	sub	sp, #68	@ 0x44
 801013c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010140:	ec55 4b10 	vmov	r4, r5, d0
 8010144:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010146:	9107      	str	r1, [sp, #28]
 8010148:	4681      	mov	r9, r0
 801014a:	9209      	str	r2, [sp, #36]	@ 0x24
 801014c:	930d      	str	r3, [sp, #52]	@ 0x34
 801014e:	b97f      	cbnz	r7, 8010170 <_dtoa_r+0x40>
 8010150:	2010      	movs	r0, #16
 8010152:	f000 fd95 	bl	8010c80 <malloc>
 8010156:	4602      	mov	r2, r0
 8010158:	f8c9 001c 	str.w	r0, [r9, #28]
 801015c:	b920      	cbnz	r0, 8010168 <_dtoa_r+0x38>
 801015e:	4ba0      	ldr	r3, [pc, #640]	@ (80103e0 <_dtoa_r+0x2b0>)
 8010160:	21ef      	movs	r1, #239	@ 0xef
 8010162:	48a0      	ldr	r0, [pc, #640]	@ (80103e4 <_dtoa_r+0x2b4>)
 8010164:	f001 fc5c 	bl	8011a20 <__assert_func>
 8010168:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801016c:	6007      	str	r7, [r0, #0]
 801016e:	60c7      	str	r7, [r0, #12]
 8010170:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010174:	6819      	ldr	r1, [r3, #0]
 8010176:	b159      	cbz	r1, 8010190 <_dtoa_r+0x60>
 8010178:	685a      	ldr	r2, [r3, #4]
 801017a:	604a      	str	r2, [r1, #4]
 801017c:	2301      	movs	r3, #1
 801017e:	4093      	lsls	r3, r2
 8010180:	608b      	str	r3, [r1, #8]
 8010182:	4648      	mov	r0, r9
 8010184:	f000 fe72 	bl	8010e6c <_Bfree>
 8010188:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801018c:	2200      	movs	r2, #0
 801018e:	601a      	str	r2, [r3, #0]
 8010190:	1e2b      	subs	r3, r5, #0
 8010192:	bfbb      	ittet	lt
 8010194:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010198:	9303      	strlt	r3, [sp, #12]
 801019a:	2300      	movge	r3, #0
 801019c:	2201      	movlt	r2, #1
 801019e:	bfac      	ite	ge
 80101a0:	6033      	strge	r3, [r6, #0]
 80101a2:	6032      	strlt	r2, [r6, #0]
 80101a4:	4b90      	ldr	r3, [pc, #576]	@ (80103e8 <_dtoa_r+0x2b8>)
 80101a6:	9e03      	ldr	r6, [sp, #12]
 80101a8:	43b3      	bics	r3, r6
 80101aa:	d110      	bne.n	80101ce <_dtoa_r+0x9e>
 80101ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80101ae:	f242 730f 	movw	r3, #9999	@ 0x270f
 80101b2:	6013      	str	r3, [r2, #0]
 80101b4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80101b8:	4323      	orrs	r3, r4
 80101ba:	f000 84e6 	beq.w	8010b8a <_dtoa_r+0xa5a>
 80101be:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80101c0:	4f8a      	ldr	r7, [pc, #552]	@ (80103ec <_dtoa_r+0x2bc>)
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f000 84e8 	beq.w	8010b98 <_dtoa_r+0xa68>
 80101c8:	1cfb      	adds	r3, r7, #3
 80101ca:	f000 bce3 	b.w	8010b94 <_dtoa_r+0xa64>
 80101ce:	ed9d 8b02 	vldr	d8, [sp, #8]
 80101d2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80101d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101da:	d10a      	bne.n	80101f2 <_dtoa_r+0xc2>
 80101dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80101de:	2301      	movs	r3, #1
 80101e0:	6013      	str	r3, [r2, #0]
 80101e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80101e4:	b113      	cbz	r3, 80101ec <_dtoa_r+0xbc>
 80101e6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80101e8:	4b81      	ldr	r3, [pc, #516]	@ (80103f0 <_dtoa_r+0x2c0>)
 80101ea:	6013      	str	r3, [r2, #0]
 80101ec:	4f81      	ldr	r7, [pc, #516]	@ (80103f4 <_dtoa_r+0x2c4>)
 80101ee:	f000 bcd3 	b.w	8010b98 <_dtoa_r+0xa68>
 80101f2:	aa0e      	add	r2, sp, #56	@ 0x38
 80101f4:	a90f      	add	r1, sp, #60	@ 0x3c
 80101f6:	4648      	mov	r0, r9
 80101f8:	eeb0 0b48 	vmov.f64	d0, d8
 80101fc:	f001 f918 	bl	8011430 <__d2b>
 8010200:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8010204:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010206:	9001      	str	r0, [sp, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d045      	beq.n	8010298 <_dtoa_r+0x168>
 801020c:	eeb0 7b48 	vmov.f64	d7, d8
 8010210:	ee18 1a90 	vmov	r1, s17
 8010214:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010218:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801021c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010220:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010224:	2500      	movs	r5, #0
 8010226:	ee07 1a90 	vmov	s15, r1
 801022a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801022e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80103c8 <_dtoa_r+0x298>
 8010232:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010236:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80103d0 <_dtoa_r+0x2a0>
 801023a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801023e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80103d8 <_dtoa_r+0x2a8>
 8010242:	ee07 3a90 	vmov	s15, r3
 8010246:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801024a:	eeb0 7b46 	vmov.f64	d7, d6
 801024e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010252:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010256:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025e:	ee16 8a90 	vmov	r8, s13
 8010262:	d508      	bpl.n	8010276 <_dtoa_r+0x146>
 8010264:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010268:	eeb4 6b47 	vcmp.f64	d6, d7
 801026c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010270:	bf18      	it	ne
 8010272:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010276:	f1b8 0f16 	cmp.w	r8, #22
 801027a:	d82b      	bhi.n	80102d4 <_dtoa_r+0x1a4>
 801027c:	495e      	ldr	r1, [pc, #376]	@ (80103f8 <_dtoa_r+0x2c8>)
 801027e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010282:	ed91 7b00 	vldr	d7, [r1]
 8010286:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801028a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801028e:	d501      	bpl.n	8010294 <_dtoa_r+0x164>
 8010290:	f108 38ff 	add.w	r8, r8, #4294967295
 8010294:	2100      	movs	r1, #0
 8010296:	e01e      	b.n	80102d6 <_dtoa_r+0x1a6>
 8010298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801029a:	4413      	add	r3, r2
 801029c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80102a0:	2920      	cmp	r1, #32
 80102a2:	bfc1      	itttt	gt
 80102a4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80102a8:	408e      	lslgt	r6, r1
 80102aa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80102ae:	fa24 f101 	lsrgt.w	r1, r4, r1
 80102b2:	bfd6      	itet	le
 80102b4:	f1c1 0120 	rsble	r1, r1, #32
 80102b8:	4331      	orrgt	r1, r6
 80102ba:	fa04 f101 	lslle.w	r1, r4, r1
 80102be:	ee07 1a90 	vmov	s15, r1
 80102c2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80102c6:	3b01      	subs	r3, #1
 80102c8:	ee17 1a90 	vmov	r1, s15
 80102cc:	2501      	movs	r5, #1
 80102ce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80102d2:	e7a8      	b.n	8010226 <_dtoa_r+0xf6>
 80102d4:	2101      	movs	r1, #1
 80102d6:	1ad2      	subs	r2, r2, r3
 80102d8:	1e53      	subs	r3, r2, #1
 80102da:	9306      	str	r3, [sp, #24]
 80102dc:	bf45      	ittet	mi
 80102de:	f1c2 0301 	rsbmi	r3, r2, #1
 80102e2:	9304      	strmi	r3, [sp, #16]
 80102e4:	2300      	movpl	r3, #0
 80102e6:	2300      	movmi	r3, #0
 80102e8:	bf4c      	ite	mi
 80102ea:	9306      	strmi	r3, [sp, #24]
 80102ec:	9304      	strpl	r3, [sp, #16]
 80102ee:	f1b8 0f00 	cmp.w	r8, #0
 80102f2:	910c      	str	r1, [sp, #48]	@ 0x30
 80102f4:	db18      	blt.n	8010328 <_dtoa_r+0x1f8>
 80102f6:	9b06      	ldr	r3, [sp, #24]
 80102f8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80102fc:	4443      	add	r3, r8
 80102fe:	9306      	str	r3, [sp, #24]
 8010300:	2300      	movs	r3, #0
 8010302:	9a07      	ldr	r2, [sp, #28]
 8010304:	2a09      	cmp	r2, #9
 8010306:	d845      	bhi.n	8010394 <_dtoa_r+0x264>
 8010308:	2a05      	cmp	r2, #5
 801030a:	bfc4      	itt	gt
 801030c:	3a04      	subgt	r2, #4
 801030e:	9207      	strgt	r2, [sp, #28]
 8010310:	9a07      	ldr	r2, [sp, #28]
 8010312:	f1a2 0202 	sub.w	r2, r2, #2
 8010316:	bfcc      	ite	gt
 8010318:	2400      	movgt	r4, #0
 801031a:	2401      	movle	r4, #1
 801031c:	2a03      	cmp	r2, #3
 801031e:	d844      	bhi.n	80103aa <_dtoa_r+0x27a>
 8010320:	e8df f002 	tbb	[pc, r2]
 8010324:	0b173634 	.word	0x0b173634
 8010328:	9b04      	ldr	r3, [sp, #16]
 801032a:	2200      	movs	r2, #0
 801032c:	eba3 0308 	sub.w	r3, r3, r8
 8010330:	9304      	str	r3, [sp, #16]
 8010332:	920a      	str	r2, [sp, #40]	@ 0x28
 8010334:	f1c8 0300 	rsb	r3, r8, #0
 8010338:	e7e3      	b.n	8010302 <_dtoa_r+0x1d2>
 801033a:	2201      	movs	r2, #1
 801033c:	9208      	str	r2, [sp, #32]
 801033e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010340:	eb08 0b02 	add.w	fp, r8, r2
 8010344:	f10b 0a01 	add.w	sl, fp, #1
 8010348:	4652      	mov	r2, sl
 801034a:	2a01      	cmp	r2, #1
 801034c:	bfb8      	it	lt
 801034e:	2201      	movlt	r2, #1
 8010350:	e006      	b.n	8010360 <_dtoa_r+0x230>
 8010352:	2201      	movs	r2, #1
 8010354:	9208      	str	r2, [sp, #32]
 8010356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010358:	2a00      	cmp	r2, #0
 801035a:	dd29      	ble.n	80103b0 <_dtoa_r+0x280>
 801035c:	4693      	mov	fp, r2
 801035e:	4692      	mov	sl, r2
 8010360:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010364:	2100      	movs	r1, #0
 8010366:	2004      	movs	r0, #4
 8010368:	f100 0614 	add.w	r6, r0, #20
 801036c:	4296      	cmp	r6, r2
 801036e:	d926      	bls.n	80103be <_dtoa_r+0x28e>
 8010370:	6079      	str	r1, [r7, #4]
 8010372:	4648      	mov	r0, r9
 8010374:	9305      	str	r3, [sp, #20]
 8010376:	f000 fd39 	bl	8010dec <_Balloc>
 801037a:	9b05      	ldr	r3, [sp, #20]
 801037c:	4607      	mov	r7, r0
 801037e:	2800      	cmp	r0, #0
 8010380:	d13e      	bne.n	8010400 <_dtoa_r+0x2d0>
 8010382:	4b1e      	ldr	r3, [pc, #120]	@ (80103fc <_dtoa_r+0x2cc>)
 8010384:	4602      	mov	r2, r0
 8010386:	f240 11af 	movw	r1, #431	@ 0x1af
 801038a:	e6ea      	b.n	8010162 <_dtoa_r+0x32>
 801038c:	2200      	movs	r2, #0
 801038e:	e7e1      	b.n	8010354 <_dtoa_r+0x224>
 8010390:	2200      	movs	r2, #0
 8010392:	e7d3      	b.n	801033c <_dtoa_r+0x20c>
 8010394:	2401      	movs	r4, #1
 8010396:	2200      	movs	r2, #0
 8010398:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801039c:	f04f 3bff 	mov.w	fp, #4294967295
 80103a0:	2100      	movs	r1, #0
 80103a2:	46da      	mov	sl, fp
 80103a4:	2212      	movs	r2, #18
 80103a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80103a8:	e7da      	b.n	8010360 <_dtoa_r+0x230>
 80103aa:	2201      	movs	r2, #1
 80103ac:	9208      	str	r2, [sp, #32]
 80103ae:	e7f5      	b.n	801039c <_dtoa_r+0x26c>
 80103b0:	f04f 0b01 	mov.w	fp, #1
 80103b4:	46da      	mov	sl, fp
 80103b6:	465a      	mov	r2, fp
 80103b8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80103bc:	e7d0      	b.n	8010360 <_dtoa_r+0x230>
 80103be:	3101      	adds	r1, #1
 80103c0:	0040      	lsls	r0, r0, #1
 80103c2:	e7d1      	b.n	8010368 <_dtoa_r+0x238>
 80103c4:	f3af 8000 	nop.w
 80103c8:	636f4361 	.word	0x636f4361
 80103cc:	3fd287a7 	.word	0x3fd287a7
 80103d0:	8b60c8b3 	.word	0x8b60c8b3
 80103d4:	3fc68a28 	.word	0x3fc68a28
 80103d8:	509f79fb 	.word	0x509f79fb
 80103dc:	3fd34413 	.word	0x3fd34413
 80103e0:	08012e81 	.word	0x08012e81
 80103e4:	08012e98 	.word	0x08012e98
 80103e8:	7ff00000 	.word	0x7ff00000
 80103ec:	08012e7d 	.word	0x08012e7d
 80103f0:	08012e51 	.word	0x08012e51
 80103f4:	08012e50 	.word	0x08012e50
 80103f8:	08012fe8 	.word	0x08012fe8
 80103fc:	08012ef0 	.word	0x08012ef0
 8010400:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8010404:	f1ba 0f0e 	cmp.w	sl, #14
 8010408:	6010      	str	r0, [r2, #0]
 801040a:	d86e      	bhi.n	80104ea <_dtoa_r+0x3ba>
 801040c:	2c00      	cmp	r4, #0
 801040e:	d06c      	beq.n	80104ea <_dtoa_r+0x3ba>
 8010410:	f1b8 0f00 	cmp.w	r8, #0
 8010414:	f340 80b4 	ble.w	8010580 <_dtoa_r+0x450>
 8010418:	4ac8      	ldr	r2, [pc, #800]	@ (801073c <_dtoa_r+0x60c>)
 801041a:	f008 010f 	and.w	r1, r8, #15
 801041e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010422:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010426:	ed92 7b00 	vldr	d7, [r2]
 801042a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801042e:	f000 809b 	beq.w	8010568 <_dtoa_r+0x438>
 8010432:	4ac3      	ldr	r2, [pc, #780]	@ (8010740 <_dtoa_r+0x610>)
 8010434:	ed92 6b08 	vldr	d6, [r2, #32]
 8010438:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801043c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010440:	f001 010f 	and.w	r1, r1, #15
 8010444:	2203      	movs	r2, #3
 8010446:	48be      	ldr	r0, [pc, #760]	@ (8010740 <_dtoa_r+0x610>)
 8010448:	2900      	cmp	r1, #0
 801044a:	f040 808f 	bne.w	801056c <_dtoa_r+0x43c>
 801044e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010452:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010456:	ed8d 7b02 	vstr	d7, [sp, #8]
 801045a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801045c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010460:	2900      	cmp	r1, #0
 8010462:	f000 80b3 	beq.w	80105cc <_dtoa_r+0x49c>
 8010466:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801046a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801046e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010472:	f140 80ab 	bpl.w	80105cc <_dtoa_r+0x49c>
 8010476:	f1ba 0f00 	cmp.w	sl, #0
 801047a:	f000 80a7 	beq.w	80105cc <_dtoa_r+0x49c>
 801047e:	f1bb 0f00 	cmp.w	fp, #0
 8010482:	dd30      	ble.n	80104e6 <_dtoa_r+0x3b6>
 8010484:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010488:	ee27 7b06 	vmul.f64	d7, d7, d6
 801048c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010490:	f108 31ff 	add.w	r1, r8, #4294967295
 8010494:	9105      	str	r1, [sp, #20]
 8010496:	3201      	adds	r2, #1
 8010498:	465c      	mov	r4, fp
 801049a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801049e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80104a2:	ee07 2a90 	vmov	s15, r2
 80104a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80104aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80104ae:	ee15 2a90 	vmov	r2, s11
 80104b2:	ec51 0b15 	vmov	r0, r1, d5
 80104b6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80104ba:	2c00      	cmp	r4, #0
 80104bc:	f040 808a 	bne.w	80105d4 <_dtoa_r+0x4a4>
 80104c0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80104c4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80104c8:	ec41 0b17 	vmov	d7, r0, r1
 80104cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d4:	f300 826a 	bgt.w	80109ac <_dtoa_r+0x87c>
 80104d8:	eeb1 7b47 	vneg.f64	d7, d7
 80104dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e4:	d423      	bmi.n	801052e <_dtoa_r+0x3fe>
 80104e6:	ed8d 8b02 	vstr	d8, [sp, #8]
 80104ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80104ec:	2a00      	cmp	r2, #0
 80104ee:	f2c0 8129 	blt.w	8010744 <_dtoa_r+0x614>
 80104f2:	f1b8 0f0e 	cmp.w	r8, #14
 80104f6:	f300 8125 	bgt.w	8010744 <_dtoa_r+0x614>
 80104fa:	4b90      	ldr	r3, [pc, #576]	@ (801073c <_dtoa_r+0x60c>)
 80104fc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010500:	ed93 6b00 	vldr	d6, [r3]
 8010504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010506:	2b00      	cmp	r3, #0
 8010508:	f280 80c8 	bge.w	801069c <_dtoa_r+0x56c>
 801050c:	f1ba 0f00 	cmp.w	sl, #0
 8010510:	f300 80c4 	bgt.w	801069c <_dtoa_r+0x56c>
 8010514:	d10b      	bne.n	801052e <_dtoa_r+0x3fe>
 8010516:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801051a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801051e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010522:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052a:	f2c0 823c 	blt.w	80109a6 <_dtoa_r+0x876>
 801052e:	2400      	movs	r4, #0
 8010530:	4625      	mov	r5, r4
 8010532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010534:	43db      	mvns	r3, r3
 8010536:	9305      	str	r3, [sp, #20]
 8010538:	463e      	mov	r6, r7
 801053a:	f04f 0800 	mov.w	r8, #0
 801053e:	4621      	mov	r1, r4
 8010540:	4648      	mov	r0, r9
 8010542:	f000 fc93 	bl	8010e6c <_Bfree>
 8010546:	2d00      	cmp	r5, #0
 8010548:	f000 80a2 	beq.w	8010690 <_dtoa_r+0x560>
 801054c:	f1b8 0f00 	cmp.w	r8, #0
 8010550:	d005      	beq.n	801055e <_dtoa_r+0x42e>
 8010552:	45a8      	cmp	r8, r5
 8010554:	d003      	beq.n	801055e <_dtoa_r+0x42e>
 8010556:	4641      	mov	r1, r8
 8010558:	4648      	mov	r0, r9
 801055a:	f000 fc87 	bl	8010e6c <_Bfree>
 801055e:	4629      	mov	r1, r5
 8010560:	4648      	mov	r0, r9
 8010562:	f000 fc83 	bl	8010e6c <_Bfree>
 8010566:	e093      	b.n	8010690 <_dtoa_r+0x560>
 8010568:	2202      	movs	r2, #2
 801056a:	e76c      	b.n	8010446 <_dtoa_r+0x316>
 801056c:	07cc      	lsls	r4, r1, #31
 801056e:	d504      	bpl.n	801057a <_dtoa_r+0x44a>
 8010570:	ed90 6b00 	vldr	d6, [r0]
 8010574:	3201      	adds	r2, #1
 8010576:	ee27 7b06 	vmul.f64	d7, d7, d6
 801057a:	1049      	asrs	r1, r1, #1
 801057c:	3008      	adds	r0, #8
 801057e:	e763      	b.n	8010448 <_dtoa_r+0x318>
 8010580:	d022      	beq.n	80105c8 <_dtoa_r+0x498>
 8010582:	f1c8 0100 	rsb	r1, r8, #0
 8010586:	4a6d      	ldr	r2, [pc, #436]	@ (801073c <_dtoa_r+0x60c>)
 8010588:	f001 000f 	and.w	r0, r1, #15
 801058c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010590:	ed92 7b00 	vldr	d7, [r2]
 8010594:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010598:	ed8d 7b02 	vstr	d7, [sp, #8]
 801059c:	4868      	ldr	r0, [pc, #416]	@ (8010740 <_dtoa_r+0x610>)
 801059e:	1109      	asrs	r1, r1, #4
 80105a0:	2400      	movs	r4, #0
 80105a2:	2202      	movs	r2, #2
 80105a4:	b929      	cbnz	r1, 80105b2 <_dtoa_r+0x482>
 80105a6:	2c00      	cmp	r4, #0
 80105a8:	f43f af57 	beq.w	801045a <_dtoa_r+0x32a>
 80105ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80105b0:	e753      	b.n	801045a <_dtoa_r+0x32a>
 80105b2:	07ce      	lsls	r6, r1, #31
 80105b4:	d505      	bpl.n	80105c2 <_dtoa_r+0x492>
 80105b6:	ed90 6b00 	vldr	d6, [r0]
 80105ba:	3201      	adds	r2, #1
 80105bc:	2401      	movs	r4, #1
 80105be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80105c2:	1049      	asrs	r1, r1, #1
 80105c4:	3008      	adds	r0, #8
 80105c6:	e7ed      	b.n	80105a4 <_dtoa_r+0x474>
 80105c8:	2202      	movs	r2, #2
 80105ca:	e746      	b.n	801045a <_dtoa_r+0x32a>
 80105cc:	f8cd 8014 	str.w	r8, [sp, #20]
 80105d0:	4654      	mov	r4, sl
 80105d2:	e762      	b.n	801049a <_dtoa_r+0x36a>
 80105d4:	4a59      	ldr	r2, [pc, #356]	@ (801073c <_dtoa_r+0x60c>)
 80105d6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80105da:	ed12 4b02 	vldr	d4, [r2, #-8]
 80105de:	9a08      	ldr	r2, [sp, #32]
 80105e0:	ec41 0b17 	vmov	d7, r0, r1
 80105e4:	443c      	add	r4, r7
 80105e6:	b34a      	cbz	r2, 801063c <_dtoa_r+0x50c>
 80105e8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80105ec:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80105f0:	463e      	mov	r6, r7
 80105f2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80105f6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80105fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80105fe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010602:	ee14 2a90 	vmov	r2, s9
 8010606:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801060a:	3230      	adds	r2, #48	@ 0x30
 801060c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010610:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010618:	f806 2b01 	strb.w	r2, [r6], #1
 801061c:	d438      	bmi.n	8010690 <_dtoa_r+0x560>
 801061e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010622:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801062a:	d46e      	bmi.n	801070a <_dtoa_r+0x5da>
 801062c:	42a6      	cmp	r6, r4
 801062e:	f43f af5a 	beq.w	80104e6 <_dtoa_r+0x3b6>
 8010632:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010636:	ee26 6b03 	vmul.f64	d6, d6, d3
 801063a:	e7e0      	b.n	80105fe <_dtoa_r+0x4ce>
 801063c:	4621      	mov	r1, r4
 801063e:	463e      	mov	r6, r7
 8010640:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010644:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010648:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801064c:	ee14 2a90 	vmov	r2, s9
 8010650:	3230      	adds	r2, #48	@ 0x30
 8010652:	f806 2b01 	strb.w	r2, [r6], #1
 8010656:	42a6      	cmp	r6, r4
 8010658:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801065c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010660:	d119      	bne.n	8010696 <_dtoa_r+0x566>
 8010662:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010666:	ee37 4b05 	vadd.f64	d4, d7, d5
 801066a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801066e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010672:	dc4a      	bgt.n	801070a <_dtoa_r+0x5da>
 8010674:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010678:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801067c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010680:	f57f af31 	bpl.w	80104e6 <_dtoa_r+0x3b6>
 8010684:	460e      	mov	r6, r1
 8010686:	3901      	subs	r1, #1
 8010688:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801068c:	2b30      	cmp	r3, #48	@ 0x30
 801068e:	d0f9      	beq.n	8010684 <_dtoa_r+0x554>
 8010690:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010694:	e027      	b.n	80106e6 <_dtoa_r+0x5b6>
 8010696:	ee26 6b03 	vmul.f64	d6, d6, d3
 801069a:	e7d5      	b.n	8010648 <_dtoa_r+0x518>
 801069c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106a0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80106a4:	463e      	mov	r6, r7
 80106a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80106aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80106ae:	ee15 3a10 	vmov	r3, s10
 80106b2:	3330      	adds	r3, #48	@ 0x30
 80106b4:	f806 3b01 	strb.w	r3, [r6], #1
 80106b8:	1bf3      	subs	r3, r6, r7
 80106ba:	459a      	cmp	sl, r3
 80106bc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80106c0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80106c4:	d132      	bne.n	801072c <_dtoa_r+0x5fc>
 80106c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80106ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80106ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d2:	dc18      	bgt.n	8010706 <_dtoa_r+0x5d6>
 80106d4:	eeb4 7b46 	vcmp.f64	d7, d6
 80106d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106dc:	d103      	bne.n	80106e6 <_dtoa_r+0x5b6>
 80106de:	ee15 3a10 	vmov	r3, s10
 80106e2:	07db      	lsls	r3, r3, #31
 80106e4:	d40f      	bmi.n	8010706 <_dtoa_r+0x5d6>
 80106e6:	9901      	ldr	r1, [sp, #4]
 80106e8:	4648      	mov	r0, r9
 80106ea:	f000 fbbf 	bl	8010e6c <_Bfree>
 80106ee:	2300      	movs	r3, #0
 80106f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80106f2:	7033      	strb	r3, [r6, #0]
 80106f4:	f108 0301 	add.w	r3, r8, #1
 80106f8:	6013      	str	r3, [r2, #0]
 80106fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f000 824b 	beq.w	8010b98 <_dtoa_r+0xa68>
 8010702:	601e      	str	r6, [r3, #0]
 8010704:	e248      	b.n	8010b98 <_dtoa_r+0xa68>
 8010706:	f8cd 8014 	str.w	r8, [sp, #20]
 801070a:	4633      	mov	r3, r6
 801070c:	461e      	mov	r6, r3
 801070e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010712:	2a39      	cmp	r2, #57	@ 0x39
 8010714:	d106      	bne.n	8010724 <_dtoa_r+0x5f4>
 8010716:	429f      	cmp	r7, r3
 8010718:	d1f8      	bne.n	801070c <_dtoa_r+0x5dc>
 801071a:	9a05      	ldr	r2, [sp, #20]
 801071c:	3201      	adds	r2, #1
 801071e:	9205      	str	r2, [sp, #20]
 8010720:	2230      	movs	r2, #48	@ 0x30
 8010722:	703a      	strb	r2, [r7, #0]
 8010724:	781a      	ldrb	r2, [r3, #0]
 8010726:	3201      	adds	r2, #1
 8010728:	701a      	strb	r2, [r3, #0]
 801072a:	e7b1      	b.n	8010690 <_dtoa_r+0x560>
 801072c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010730:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010738:	d1b5      	bne.n	80106a6 <_dtoa_r+0x576>
 801073a:	e7d4      	b.n	80106e6 <_dtoa_r+0x5b6>
 801073c:	08012fe8 	.word	0x08012fe8
 8010740:	08012fc0 	.word	0x08012fc0
 8010744:	9908      	ldr	r1, [sp, #32]
 8010746:	2900      	cmp	r1, #0
 8010748:	f000 80e9 	beq.w	801091e <_dtoa_r+0x7ee>
 801074c:	9907      	ldr	r1, [sp, #28]
 801074e:	2901      	cmp	r1, #1
 8010750:	f300 80cb 	bgt.w	80108ea <_dtoa_r+0x7ba>
 8010754:	2d00      	cmp	r5, #0
 8010756:	f000 80c4 	beq.w	80108e2 <_dtoa_r+0x7b2>
 801075a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801075e:	9e04      	ldr	r6, [sp, #16]
 8010760:	461c      	mov	r4, r3
 8010762:	9305      	str	r3, [sp, #20]
 8010764:	9b04      	ldr	r3, [sp, #16]
 8010766:	4413      	add	r3, r2
 8010768:	9304      	str	r3, [sp, #16]
 801076a:	9b06      	ldr	r3, [sp, #24]
 801076c:	2101      	movs	r1, #1
 801076e:	4413      	add	r3, r2
 8010770:	4648      	mov	r0, r9
 8010772:	9306      	str	r3, [sp, #24]
 8010774:	f000 fc2e 	bl	8010fd4 <__i2b>
 8010778:	9b05      	ldr	r3, [sp, #20]
 801077a:	4605      	mov	r5, r0
 801077c:	b166      	cbz	r6, 8010798 <_dtoa_r+0x668>
 801077e:	9a06      	ldr	r2, [sp, #24]
 8010780:	2a00      	cmp	r2, #0
 8010782:	dd09      	ble.n	8010798 <_dtoa_r+0x668>
 8010784:	42b2      	cmp	r2, r6
 8010786:	9904      	ldr	r1, [sp, #16]
 8010788:	bfa8      	it	ge
 801078a:	4632      	movge	r2, r6
 801078c:	1a89      	subs	r1, r1, r2
 801078e:	9104      	str	r1, [sp, #16]
 8010790:	9906      	ldr	r1, [sp, #24]
 8010792:	1ab6      	subs	r6, r6, r2
 8010794:	1a8a      	subs	r2, r1, r2
 8010796:	9206      	str	r2, [sp, #24]
 8010798:	b30b      	cbz	r3, 80107de <_dtoa_r+0x6ae>
 801079a:	9a08      	ldr	r2, [sp, #32]
 801079c:	2a00      	cmp	r2, #0
 801079e:	f000 80c5 	beq.w	801092c <_dtoa_r+0x7fc>
 80107a2:	2c00      	cmp	r4, #0
 80107a4:	f000 80bf 	beq.w	8010926 <_dtoa_r+0x7f6>
 80107a8:	4629      	mov	r1, r5
 80107aa:	4622      	mov	r2, r4
 80107ac:	4648      	mov	r0, r9
 80107ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107b0:	f000 fcc8 	bl	8011144 <__pow5mult>
 80107b4:	9a01      	ldr	r2, [sp, #4]
 80107b6:	4601      	mov	r1, r0
 80107b8:	4605      	mov	r5, r0
 80107ba:	4648      	mov	r0, r9
 80107bc:	f000 fc20 	bl	8011000 <__multiply>
 80107c0:	9901      	ldr	r1, [sp, #4]
 80107c2:	9005      	str	r0, [sp, #20]
 80107c4:	4648      	mov	r0, r9
 80107c6:	f000 fb51 	bl	8010e6c <_Bfree>
 80107ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107cc:	1b1b      	subs	r3, r3, r4
 80107ce:	f000 80b0 	beq.w	8010932 <_dtoa_r+0x802>
 80107d2:	9905      	ldr	r1, [sp, #20]
 80107d4:	461a      	mov	r2, r3
 80107d6:	4648      	mov	r0, r9
 80107d8:	f000 fcb4 	bl	8011144 <__pow5mult>
 80107dc:	9001      	str	r0, [sp, #4]
 80107de:	2101      	movs	r1, #1
 80107e0:	4648      	mov	r0, r9
 80107e2:	f000 fbf7 	bl	8010fd4 <__i2b>
 80107e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107e8:	4604      	mov	r4, r0
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f000 81da 	beq.w	8010ba4 <_dtoa_r+0xa74>
 80107f0:	461a      	mov	r2, r3
 80107f2:	4601      	mov	r1, r0
 80107f4:	4648      	mov	r0, r9
 80107f6:	f000 fca5 	bl	8011144 <__pow5mult>
 80107fa:	9b07      	ldr	r3, [sp, #28]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	4604      	mov	r4, r0
 8010800:	f300 80a0 	bgt.w	8010944 <_dtoa_r+0x814>
 8010804:	9b02      	ldr	r3, [sp, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	f040 8096 	bne.w	8010938 <_dtoa_r+0x808>
 801080c:	9b03      	ldr	r3, [sp, #12]
 801080e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010812:	2a00      	cmp	r2, #0
 8010814:	f040 8092 	bne.w	801093c <_dtoa_r+0x80c>
 8010818:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801081c:	0d12      	lsrs	r2, r2, #20
 801081e:	0512      	lsls	r2, r2, #20
 8010820:	2a00      	cmp	r2, #0
 8010822:	f000 808d 	beq.w	8010940 <_dtoa_r+0x810>
 8010826:	9b04      	ldr	r3, [sp, #16]
 8010828:	3301      	adds	r3, #1
 801082a:	9304      	str	r3, [sp, #16]
 801082c:	9b06      	ldr	r3, [sp, #24]
 801082e:	3301      	adds	r3, #1
 8010830:	9306      	str	r3, [sp, #24]
 8010832:	2301      	movs	r3, #1
 8010834:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010836:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010838:	2b00      	cmp	r3, #0
 801083a:	f000 81b9 	beq.w	8010bb0 <_dtoa_r+0xa80>
 801083e:	6922      	ldr	r2, [r4, #16]
 8010840:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010844:	6910      	ldr	r0, [r2, #16]
 8010846:	f000 fb79 	bl	8010f3c <__hi0bits>
 801084a:	f1c0 0020 	rsb	r0, r0, #32
 801084e:	9b06      	ldr	r3, [sp, #24]
 8010850:	4418      	add	r0, r3
 8010852:	f010 001f 	ands.w	r0, r0, #31
 8010856:	f000 8081 	beq.w	801095c <_dtoa_r+0x82c>
 801085a:	f1c0 0220 	rsb	r2, r0, #32
 801085e:	2a04      	cmp	r2, #4
 8010860:	dd73      	ble.n	801094a <_dtoa_r+0x81a>
 8010862:	9b04      	ldr	r3, [sp, #16]
 8010864:	f1c0 001c 	rsb	r0, r0, #28
 8010868:	4403      	add	r3, r0
 801086a:	9304      	str	r3, [sp, #16]
 801086c:	9b06      	ldr	r3, [sp, #24]
 801086e:	4406      	add	r6, r0
 8010870:	4403      	add	r3, r0
 8010872:	9306      	str	r3, [sp, #24]
 8010874:	9b04      	ldr	r3, [sp, #16]
 8010876:	2b00      	cmp	r3, #0
 8010878:	dd05      	ble.n	8010886 <_dtoa_r+0x756>
 801087a:	9901      	ldr	r1, [sp, #4]
 801087c:	461a      	mov	r2, r3
 801087e:	4648      	mov	r0, r9
 8010880:	f000 fcba 	bl	80111f8 <__lshift>
 8010884:	9001      	str	r0, [sp, #4]
 8010886:	9b06      	ldr	r3, [sp, #24]
 8010888:	2b00      	cmp	r3, #0
 801088a:	dd05      	ble.n	8010898 <_dtoa_r+0x768>
 801088c:	4621      	mov	r1, r4
 801088e:	461a      	mov	r2, r3
 8010890:	4648      	mov	r0, r9
 8010892:	f000 fcb1 	bl	80111f8 <__lshift>
 8010896:	4604      	mov	r4, r0
 8010898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801089a:	2b00      	cmp	r3, #0
 801089c:	d060      	beq.n	8010960 <_dtoa_r+0x830>
 801089e:	9801      	ldr	r0, [sp, #4]
 80108a0:	4621      	mov	r1, r4
 80108a2:	f000 fd15 	bl	80112d0 <__mcmp>
 80108a6:	2800      	cmp	r0, #0
 80108a8:	da5a      	bge.n	8010960 <_dtoa_r+0x830>
 80108aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80108ae:	9305      	str	r3, [sp, #20]
 80108b0:	9901      	ldr	r1, [sp, #4]
 80108b2:	2300      	movs	r3, #0
 80108b4:	220a      	movs	r2, #10
 80108b6:	4648      	mov	r0, r9
 80108b8:	f000 fafa 	bl	8010eb0 <__multadd>
 80108bc:	9b08      	ldr	r3, [sp, #32]
 80108be:	9001      	str	r0, [sp, #4]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	f000 8177 	beq.w	8010bb4 <_dtoa_r+0xa84>
 80108c6:	4629      	mov	r1, r5
 80108c8:	2300      	movs	r3, #0
 80108ca:	220a      	movs	r2, #10
 80108cc:	4648      	mov	r0, r9
 80108ce:	f000 faef 	bl	8010eb0 <__multadd>
 80108d2:	f1bb 0f00 	cmp.w	fp, #0
 80108d6:	4605      	mov	r5, r0
 80108d8:	dc6e      	bgt.n	80109b8 <_dtoa_r+0x888>
 80108da:	9b07      	ldr	r3, [sp, #28]
 80108dc:	2b02      	cmp	r3, #2
 80108de:	dc48      	bgt.n	8010972 <_dtoa_r+0x842>
 80108e0:	e06a      	b.n	80109b8 <_dtoa_r+0x888>
 80108e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80108e8:	e739      	b.n	801075e <_dtoa_r+0x62e>
 80108ea:	f10a 34ff 	add.w	r4, sl, #4294967295
 80108ee:	42a3      	cmp	r3, r4
 80108f0:	db07      	blt.n	8010902 <_dtoa_r+0x7d2>
 80108f2:	f1ba 0f00 	cmp.w	sl, #0
 80108f6:	eba3 0404 	sub.w	r4, r3, r4
 80108fa:	db0b      	blt.n	8010914 <_dtoa_r+0x7e4>
 80108fc:	9e04      	ldr	r6, [sp, #16]
 80108fe:	4652      	mov	r2, sl
 8010900:	e72f      	b.n	8010762 <_dtoa_r+0x632>
 8010902:	1ae2      	subs	r2, r4, r3
 8010904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010906:	9e04      	ldr	r6, [sp, #16]
 8010908:	4413      	add	r3, r2
 801090a:	930a      	str	r3, [sp, #40]	@ 0x28
 801090c:	4652      	mov	r2, sl
 801090e:	4623      	mov	r3, r4
 8010910:	2400      	movs	r4, #0
 8010912:	e726      	b.n	8010762 <_dtoa_r+0x632>
 8010914:	9a04      	ldr	r2, [sp, #16]
 8010916:	eba2 060a 	sub.w	r6, r2, sl
 801091a:	2200      	movs	r2, #0
 801091c:	e721      	b.n	8010762 <_dtoa_r+0x632>
 801091e:	9e04      	ldr	r6, [sp, #16]
 8010920:	9d08      	ldr	r5, [sp, #32]
 8010922:	461c      	mov	r4, r3
 8010924:	e72a      	b.n	801077c <_dtoa_r+0x64c>
 8010926:	9a01      	ldr	r2, [sp, #4]
 8010928:	9205      	str	r2, [sp, #20]
 801092a:	e752      	b.n	80107d2 <_dtoa_r+0x6a2>
 801092c:	9901      	ldr	r1, [sp, #4]
 801092e:	461a      	mov	r2, r3
 8010930:	e751      	b.n	80107d6 <_dtoa_r+0x6a6>
 8010932:	9b05      	ldr	r3, [sp, #20]
 8010934:	9301      	str	r3, [sp, #4]
 8010936:	e752      	b.n	80107de <_dtoa_r+0x6ae>
 8010938:	2300      	movs	r3, #0
 801093a:	e77b      	b.n	8010834 <_dtoa_r+0x704>
 801093c:	9b02      	ldr	r3, [sp, #8]
 801093e:	e779      	b.n	8010834 <_dtoa_r+0x704>
 8010940:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010942:	e778      	b.n	8010836 <_dtoa_r+0x706>
 8010944:	2300      	movs	r3, #0
 8010946:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010948:	e779      	b.n	801083e <_dtoa_r+0x70e>
 801094a:	d093      	beq.n	8010874 <_dtoa_r+0x744>
 801094c:	9b04      	ldr	r3, [sp, #16]
 801094e:	321c      	adds	r2, #28
 8010950:	4413      	add	r3, r2
 8010952:	9304      	str	r3, [sp, #16]
 8010954:	9b06      	ldr	r3, [sp, #24]
 8010956:	4416      	add	r6, r2
 8010958:	4413      	add	r3, r2
 801095a:	e78a      	b.n	8010872 <_dtoa_r+0x742>
 801095c:	4602      	mov	r2, r0
 801095e:	e7f5      	b.n	801094c <_dtoa_r+0x81c>
 8010960:	f1ba 0f00 	cmp.w	sl, #0
 8010964:	f8cd 8014 	str.w	r8, [sp, #20]
 8010968:	46d3      	mov	fp, sl
 801096a:	dc21      	bgt.n	80109b0 <_dtoa_r+0x880>
 801096c:	9b07      	ldr	r3, [sp, #28]
 801096e:	2b02      	cmp	r3, #2
 8010970:	dd1e      	ble.n	80109b0 <_dtoa_r+0x880>
 8010972:	f1bb 0f00 	cmp.w	fp, #0
 8010976:	f47f addc 	bne.w	8010532 <_dtoa_r+0x402>
 801097a:	4621      	mov	r1, r4
 801097c:	465b      	mov	r3, fp
 801097e:	2205      	movs	r2, #5
 8010980:	4648      	mov	r0, r9
 8010982:	f000 fa95 	bl	8010eb0 <__multadd>
 8010986:	4601      	mov	r1, r0
 8010988:	4604      	mov	r4, r0
 801098a:	9801      	ldr	r0, [sp, #4]
 801098c:	f000 fca0 	bl	80112d0 <__mcmp>
 8010990:	2800      	cmp	r0, #0
 8010992:	f77f adce 	ble.w	8010532 <_dtoa_r+0x402>
 8010996:	463e      	mov	r6, r7
 8010998:	2331      	movs	r3, #49	@ 0x31
 801099a:	f806 3b01 	strb.w	r3, [r6], #1
 801099e:	9b05      	ldr	r3, [sp, #20]
 80109a0:	3301      	adds	r3, #1
 80109a2:	9305      	str	r3, [sp, #20]
 80109a4:	e5c9      	b.n	801053a <_dtoa_r+0x40a>
 80109a6:	f8cd 8014 	str.w	r8, [sp, #20]
 80109aa:	4654      	mov	r4, sl
 80109ac:	4625      	mov	r5, r4
 80109ae:	e7f2      	b.n	8010996 <_dtoa_r+0x866>
 80109b0:	9b08      	ldr	r3, [sp, #32]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f000 8102 	beq.w	8010bbc <_dtoa_r+0xa8c>
 80109b8:	2e00      	cmp	r6, #0
 80109ba:	dd05      	ble.n	80109c8 <_dtoa_r+0x898>
 80109bc:	4629      	mov	r1, r5
 80109be:	4632      	mov	r2, r6
 80109c0:	4648      	mov	r0, r9
 80109c2:	f000 fc19 	bl	80111f8 <__lshift>
 80109c6:	4605      	mov	r5, r0
 80109c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d058      	beq.n	8010a80 <_dtoa_r+0x950>
 80109ce:	6869      	ldr	r1, [r5, #4]
 80109d0:	4648      	mov	r0, r9
 80109d2:	f000 fa0b 	bl	8010dec <_Balloc>
 80109d6:	4606      	mov	r6, r0
 80109d8:	b928      	cbnz	r0, 80109e6 <_dtoa_r+0x8b6>
 80109da:	4b82      	ldr	r3, [pc, #520]	@ (8010be4 <_dtoa_r+0xab4>)
 80109dc:	4602      	mov	r2, r0
 80109de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80109e2:	f7ff bbbe 	b.w	8010162 <_dtoa_r+0x32>
 80109e6:	692a      	ldr	r2, [r5, #16]
 80109e8:	3202      	adds	r2, #2
 80109ea:	0092      	lsls	r2, r2, #2
 80109ec:	f105 010c 	add.w	r1, r5, #12
 80109f0:	300c      	adds	r0, #12
 80109f2:	f001 f807 	bl	8011a04 <memcpy>
 80109f6:	2201      	movs	r2, #1
 80109f8:	4631      	mov	r1, r6
 80109fa:	4648      	mov	r0, r9
 80109fc:	f000 fbfc 	bl	80111f8 <__lshift>
 8010a00:	1c7b      	adds	r3, r7, #1
 8010a02:	9304      	str	r3, [sp, #16]
 8010a04:	eb07 030b 	add.w	r3, r7, fp
 8010a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8010a0a:	9b02      	ldr	r3, [sp, #8]
 8010a0c:	f003 0301 	and.w	r3, r3, #1
 8010a10:	46a8      	mov	r8, r5
 8010a12:	9308      	str	r3, [sp, #32]
 8010a14:	4605      	mov	r5, r0
 8010a16:	9b04      	ldr	r3, [sp, #16]
 8010a18:	9801      	ldr	r0, [sp, #4]
 8010a1a:	4621      	mov	r1, r4
 8010a1c:	f103 3bff 	add.w	fp, r3, #4294967295
 8010a20:	f7ff fafb 	bl	801001a <quorem>
 8010a24:	4641      	mov	r1, r8
 8010a26:	9002      	str	r0, [sp, #8]
 8010a28:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010a2c:	9801      	ldr	r0, [sp, #4]
 8010a2e:	f000 fc4f 	bl	80112d0 <__mcmp>
 8010a32:	462a      	mov	r2, r5
 8010a34:	9006      	str	r0, [sp, #24]
 8010a36:	4621      	mov	r1, r4
 8010a38:	4648      	mov	r0, r9
 8010a3a:	f000 fc65 	bl	8011308 <__mdiff>
 8010a3e:	68c2      	ldr	r2, [r0, #12]
 8010a40:	4606      	mov	r6, r0
 8010a42:	b9fa      	cbnz	r2, 8010a84 <_dtoa_r+0x954>
 8010a44:	4601      	mov	r1, r0
 8010a46:	9801      	ldr	r0, [sp, #4]
 8010a48:	f000 fc42 	bl	80112d0 <__mcmp>
 8010a4c:	4602      	mov	r2, r0
 8010a4e:	4631      	mov	r1, r6
 8010a50:	4648      	mov	r0, r9
 8010a52:	920a      	str	r2, [sp, #40]	@ 0x28
 8010a54:	f000 fa0a 	bl	8010e6c <_Bfree>
 8010a58:	9b07      	ldr	r3, [sp, #28]
 8010a5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a5c:	9e04      	ldr	r6, [sp, #16]
 8010a5e:	ea42 0103 	orr.w	r1, r2, r3
 8010a62:	9b08      	ldr	r3, [sp, #32]
 8010a64:	4319      	orrs	r1, r3
 8010a66:	d10f      	bne.n	8010a88 <_dtoa_r+0x958>
 8010a68:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010a6c:	d028      	beq.n	8010ac0 <_dtoa_r+0x990>
 8010a6e:	9b06      	ldr	r3, [sp, #24]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	dd02      	ble.n	8010a7a <_dtoa_r+0x94a>
 8010a74:	9b02      	ldr	r3, [sp, #8]
 8010a76:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010a7a:	f88b a000 	strb.w	sl, [fp]
 8010a7e:	e55e      	b.n	801053e <_dtoa_r+0x40e>
 8010a80:	4628      	mov	r0, r5
 8010a82:	e7bd      	b.n	8010a00 <_dtoa_r+0x8d0>
 8010a84:	2201      	movs	r2, #1
 8010a86:	e7e2      	b.n	8010a4e <_dtoa_r+0x91e>
 8010a88:	9b06      	ldr	r3, [sp, #24]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	db04      	blt.n	8010a98 <_dtoa_r+0x968>
 8010a8e:	9907      	ldr	r1, [sp, #28]
 8010a90:	430b      	orrs	r3, r1
 8010a92:	9908      	ldr	r1, [sp, #32]
 8010a94:	430b      	orrs	r3, r1
 8010a96:	d120      	bne.n	8010ada <_dtoa_r+0x9aa>
 8010a98:	2a00      	cmp	r2, #0
 8010a9a:	ddee      	ble.n	8010a7a <_dtoa_r+0x94a>
 8010a9c:	9901      	ldr	r1, [sp, #4]
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	4648      	mov	r0, r9
 8010aa2:	f000 fba9 	bl	80111f8 <__lshift>
 8010aa6:	4621      	mov	r1, r4
 8010aa8:	9001      	str	r0, [sp, #4]
 8010aaa:	f000 fc11 	bl	80112d0 <__mcmp>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	dc03      	bgt.n	8010aba <_dtoa_r+0x98a>
 8010ab2:	d1e2      	bne.n	8010a7a <_dtoa_r+0x94a>
 8010ab4:	f01a 0f01 	tst.w	sl, #1
 8010ab8:	d0df      	beq.n	8010a7a <_dtoa_r+0x94a>
 8010aba:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010abe:	d1d9      	bne.n	8010a74 <_dtoa_r+0x944>
 8010ac0:	2339      	movs	r3, #57	@ 0x39
 8010ac2:	f88b 3000 	strb.w	r3, [fp]
 8010ac6:	4633      	mov	r3, r6
 8010ac8:	461e      	mov	r6, r3
 8010aca:	3b01      	subs	r3, #1
 8010acc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010ad0:	2a39      	cmp	r2, #57	@ 0x39
 8010ad2:	d052      	beq.n	8010b7a <_dtoa_r+0xa4a>
 8010ad4:	3201      	adds	r2, #1
 8010ad6:	701a      	strb	r2, [r3, #0]
 8010ad8:	e531      	b.n	801053e <_dtoa_r+0x40e>
 8010ada:	2a00      	cmp	r2, #0
 8010adc:	dd07      	ble.n	8010aee <_dtoa_r+0x9be>
 8010ade:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010ae2:	d0ed      	beq.n	8010ac0 <_dtoa_r+0x990>
 8010ae4:	f10a 0301 	add.w	r3, sl, #1
 8010ae8:	f88b 3000 	strb.w	r3, [fp]
 8010aec:	e527      	b.n	801053e <_dtoa_r+0x40e>
 8010aee:	9b04      	ldr	r3, [sp, #16]
 8010af0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010af2:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d029      	beq.n	8010b4e <_dtoa_r+0xa1e>
 8010afa:	9901      	ldr	r1, [sp, #4]
 8010afc:	2300      	movs	r3, #0
 8010afe:	220a      	movs	r2, #10
 8010b00:	4648      	mov	r0, r9
 8010b02:	f000 f9d5 	bl	8010eb0 <__multadd>
 8010b06:	45a8      	cmp	r8, r5
 8010b08:	9001      	str	r0, [sp, #4]
 8010b0a:	f04f 0300 	mov.w	r3, #0
 8010b0e:	f04f 020a 	mov.w	r2, #10
 8010b12:	4641      	mov	r1, r8
 8010b14:	4648      	mov	r0, r9
 8010b16:	d107      	bne.n	8010b28 <_dtoa_r+0x9f8>
 8010b18:	f000 f9ca 	bl	8010eb0 <__multadd>
 8010b1c:	4680      	mov	r8, r0
 8010b1e:	4605      	mov	r5, r0
 8010b20:	9b04      	ldr	r3, [sp, #16]
 8010b22:	3301      	adds	r3, #1
 8010b24:	9304      	str	r3, [sp, #16]
 8010b26:	e776      	b.n	8010a16 <_dtoa_r+0x8e6>
 8010b28:	f000 f9c2 	bl	8010eb0 <__multadd>
 8010b2c:	4629      	mov	r1, r5
 8010b2e:	4680      	mov	r8, r0
 8010b30:	2300      	movs	r3, #0
 8010b32:	220a      	movs	r2, #10
 8010b34:	4648      	mov	r0, r9
 8010b36:	f000 f9bb 	bl	8010eb0 <__multadd>
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	e7f0      	b.n	8010b20 <_dtoa_r+0x9f0>
 8010b3e:	f1bb 0f00 	cmp.w	fp, #0
 8010b42:	bfcc      	ite	gt
 8010b44:	465e      	movgt	r6, fp
 8010b46:	2601      	movle	r6, #1
 8010b48:	443e      	add	r6, r7
 8010b4a:	f04f 0800 	mov.w	r8, #0
 8010b4e:	9901      	ldr	r1, [sp, #4]
 8010b50:	2201      	movs	r2, #1
 8010b52:	4648      	mov	r0, r9
 8010b54:	f000 fb50 	bl	80111f8 <__lshift>
 8010b58:	4621      	mov	r1, r4
 8010b5a:	9001      	str	r0, [sp, #4]
 8010b5c:	f000 fbb8 	bl	80112d0 <__mcmp>
 8010b60:	2800      	cmp	r0, #0
 8010b62:	dcb0      	bgt.n	8010ac6 <_dtoa_r+0x996>
 8010b64:	d102      	bne.n	8010b6c <_dtoa_r+0xa3c>
 8010b66:	f01a 0f01 	tst.w	sl, #1
 8010b6a:	d1ac      	bne.n	8010ac6 <_dtoa_r+0x996>
 8010b6c:	4633      	mov	r3, r6
 8010b6e:	461e      	mov	r6, r3
 8010b70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b74:	2a30      	cmp	r2, #48	@ 0x30
 8010b76:	d0fa      	beq.n	8010b6e <_dtoa_r+0xa3e>
 8010b78:	e4e1      	b.n	801053e <_dtoa_r+0x40e>
 8010b7a:	429f      	cmp	r7, r3
 8010b7c:	d1a4      	bne.n	8010ac8 <_dtoa_r+0x998>
 8010b7e:	9b05      	ldr	r3, [sp, #20]
 8010b80:	3301      	adds	r3, #1
 8010b82:	9305      	str	r3, [sp, #20]
 8010b84:	2331      	movs	r3, #49	@ 0x31
 8010b86:	703b      	strb	r3, [r7, #0]
 8010b88:	e4d9      	b.n	801053e <_dtoa_r+0x40e>
 8010b8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010b8c:	4f16      	ldr	r7, [pc, #88]	@ (8010be8 <_dtoa_r+0xab8>)
 8010b8e:	b11b      	cbz	r3, 8010b98 <_dtoa_r+0xa68>
 8010b90:	f107 0308 	add.w	r3, r7, #8
 8010b94:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010b96:	6013      	str	r3, [r2, #0]
 8010b98:	4638      	mov	r0, r7
 8010b9a:	b011      	add	sp, #68	@ 0x44
 8010b9c:	ecbd 8b02 	vpop	{d8}
 8010ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ba4:	9b07      	ldr	r3, [sp, #28]
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	f77f ae2c 	ble.w	8010804 <_dtoa_r+0x6d4>
 8010bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010bb0:	2001      	movs	r0, #1
 8010bb2:	e64c      	b.n	801084e <_dtoa_r+0x71e>
 8010bb4:	f1bb 0f00 	cmp.w	fp, #0
 8010bb8:	f77f aed8 	ble.w	801096c <_dtoa_r+0x83c>
 8010bbc:	463e      	mov	r6, r7
 8010bbe:	9801      	ldr	r0, [sp, #4]
 8010bc0:	4621      	mov	r1, r4
 8010bc2:	f7ff fa2a 	bl	801001a <quorem>
 8010bc6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010bca:	f806 ab01 	strb.w	sl, [r6], #1
 8010bce:	1bf2      	subs	r2, r6, r7
 8010bd0:	4593      	cmp	fp, r2
 8010bd2:	ddb4      	ble.n	8010b3e <_dtoa_r+0xa0e>
 8010bd4:	9901      	ldr	r1, [sp, #4]
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	220a      	movs	r2, #10
 8010bda:	4648      	mov	r0, r9
 8010bdc:	f000 f968 	bl	8010eb0 <__multadd>
 8010be0:	9001      	str	r0, [sp, #4]
 8010be2:	e7ec      	b.n	8010bbe <_dtoa_r+0xa8e>
 8010be4:	08012ef0 	.word	0x08012ef0
 8010be8:	08012e74 	.word	0x08012e74

08010bec <_free_r>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	4605      	mov	r5, r0
 8010bf0:	2900      	cmp	r1, #0
 8010bf2:	d041      	beq.n	8010c78 <_free_r+0x8c>
 8010bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bf8:	1f0c      	subs	r4, r1, #4
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	bfb8      	it	lt
 8010bfe:	18e4      	addlt	r4, r4, r3
 8010c00:	f000 f8e8 	bl	8010dd4 <__malloc_lock>
 8010c04:	4a1d      	ldr	r2, [pc, #116]	@ (8010c7c <_free_r+0x90>)
 8010c06:	6813      	ldr	r3, [r2, #0]
 8010c08:	b933      	cbnz	r3, 8010c18 <_free_r+0x2c>
 8010c0a:	6063      	str	r3, [r4, #4]
 8010c0c:	6014      	str	r4, [r2, #0]
 8010c0e:	4628      	mov	r0, r5
 8010c10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c14:	f000 b8e4 	b.w	8010de0 <__malloc_unlock>
 8010c18:	42a3      	cmp	r3, r4
 8010c1a:	d908      	bls.n	8010c2e <_free_r+0x42>
 8010c1c:	6820      	ldr	r0, [r4, #0]
 8010c1e:	1821      	adds	r1, r4, r0
 8010c20:	428b      	cmp	r3, r1
 8010c22:	bf01      	itttt	eq
 8010c24:	6819      	ldreq	r1, [r3, #0]
 8010c26:	685b      	ldreq	r3, [r3, #4]
 8010c28:	1809      	addeq	r1, r1, r0
 8010c2a:	6021      	streq	r1, [r4, #0]
 8010c2c:	e7ed      	b.n	8010c0a <_free_r+0x1e>
 8010c2e:	461a      	mov	r2, r3
 8010c30:	685b      	ldr	r3, [r3, #4]
 8010c32:	b10b      	cbz	r3, 8010c38 <_free_r+0x4c>
 8010c34:	42a3      	cmp	r3, r4
 8010c36:	d9fa      	bls.n	8010c2e <_free_r+0x42>
 8010c38:	6811      	ldr	r1, [r2, #0]
 8010c3a:	1850      	adds	r0, r2, r1
 8010c3c:	42a0      	cmp	r0, r4
 8010c3e:	d10b      	bne.n	8010c58 <_free_r+0x6c>
 8010c40:	6820      	ldr	r0, [r4, #0]
 8010c42:	4401      	add	r1, r0
 8010c44:	1850      	adds	r0, r2, r1
 8010c46:	4283      	cmp	r3, r0
 8010c48:	6011      	str	r1, [r2, #0]
 8010c4a:	d1e0      	bne.n	8010c0e <_free_r+0x22>
 8010c4c:	6818      	ldr	r0, [r3, #0]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	6053      	str	r3, [r2, #4]
 8010c52:	4408      	add	r0, r1
 8010c54:	6010      	str	r0, [r2, #0]
 8010c56:	e7da      	b.n	8010c0e <_free_r+0x22>
 8010c58:	d902      	bls.n	8010c60 <_free_r+0x74>
 8010c5a:	230c      	movs	r3, #12
 8010c5c:	602b      	str	r3, [r5, #0]
 8010c5e:	e7d6      	b.n	8010c0e <_free_r+0x22>
 8010c60:	6820      	ldr	r0, [r4, #0]
 8010c62:	1821      	adds	r1, r4, r0
 8010c64:	428b      	cmp	r3, r1
 8010c66:	bf04      	itt	eq
 8010c68:	6819      	ldreq	r1, [r3, #0]
 8010c6a:	685b      	ldreq	r3, [r3, #4]
 8010c6c:	6063      	str	r3, [r4, #4]
 8010c6e:	bf04      	itt	eq
 8010c70:	1809      	addeq	r1, r1, r0
 8010c72:	6021      	streq	r1, [r4, #0]
 8010c74:	6054      	str	r4, [r2, #4]
 8010c76:	e7ca      	b.n	8010c0e <_free_r+0x22>
 8010c78:	bd38      	pop	{r3, r4, r5, pc}
 8010c7a:	bf00      	nop
 8010c7c:	24002554 	.word	0x24002554

08010c80 <malloc>:
 8010c80:	4b02      	ldr	r3, [pc, #8]	@ (8010c8c <malloc+0xc>)
 8010c82:	4601      	mov	r1, r0
 8010c84:	6818      	ldr	r0, [r3, #0]
 8010c86:	f000 b825 	b.w	8010cd4 <_malloc_r>
 8010c8a:	bf00      	nop
 8010c8c:	24000118 	.word	0x24000118

08010c90 <sbrk_aligned>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	4e0f      	ldr	r6, [pc, #60]	@ (8010cd0 <sbrk_aligned+0x40>)
 8010c94:	460c      	mov	r4, r1
 8010c96:	6831      	ldr	r1, [r6, #0]
 8010c98:	4605      	mov	r5, r0
 8010c9a:	b911      	cbnz	r1, 8010ca2 <sbrk_aligned+0x12>
 8010c9c:	f000 fea2 	bl	80119e4 <_sbrk_r>
 8010ca0:	6030      	str	r0, [r6, #0]
 8010ca2:	4621      	mov	r1, r4
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	f000 fe9d 	bl	80119e4 <_sbrk_r>
 8010caa:	1c43      	adds	r3, r0, #1
 8010cac:	d103      	bne.n	8010cb6 <sbrk_aligned+0x26>
 8010cae:	f04f 34ff 	mov.w	r4, #4294967295
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	bd70      	pop	{r4, r5, r6, pc}
 8010cb6:	1cc4      	adds	r4, r0, #3
 8010cb8:	f024 0403 	bic.w	r4, r4, #3
 8010cbc:	42a0      	cmp	r0, r4
 8010cbe:	d0f8      	beq.n	8010cb2 <sbrk_aligned+0x22>
 8010cc0:	1a21      	subs	r1, r4, r0
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	f000 fe8e 	bl	80119e4 <_sbrk_r>
 8010cc8:	3001      	adds	r0, #1
 8010cca:	d1f2      	bne.n	8010cb2 <sbrk_aligned+0x22>
 8010ccc:	e7ef      	b.n	8010cae <sbrk_aligned+0x1e>
 8010cce:	bf00      	nop
 8010cd0:	24002550 	.word	0x24002550

08010cd4 <_malloc_r>:
 8010cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cd8:	1ccd      	adds	r5, r1, #3
 8010cda:	f025 0503 	bic.w	r5, r5, #3
 8010cde:	3508      	adds	r5, #8
 8010ce0:	2d0c      	cmp	r5, #12
 8010ce2:	bf38      	it	cc
 8010ce4:	250c      	movcc	r5, #12
 8010ce6:	2d00      	cmp	r5, #0
 8010ce8:	4606      	mov	r6, r0
 8010cea:	db01      	blt.n	8010cf0 <_malloc_r+0x1c>
 8010cec:	42a9      	cmp	r1, r5
 8010cee:	d904      	bls.n	8010cfa <_malloc_r+0x26>
 8010cf0:	230c      	movs	r3, #12
 8010cf2:	6033      	str	r3, [r6, #0]
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010dd0 <_malloc_r+0xfc>
 8010cfe:	f000 f869 	bl	8010dd4 <__malloc_lock>
 8010d02:	f8d8 3000 	ldr.w	r3, [r8]
 8010d06:	461c      	mov	r4, r3
 8010d08:	bb44      	cbnz	r4, 8010d5c <_malloc_r+0x88>
 8010d0a:	4629      	mov	r1, r5
 8010d0c:	4630      	mov	r0, r6
 8010d0e:	f7ff ffbf 	bl	8010c90 <sbrk_aligned>
 8010d12:	1c43      	adds	r3, r0, #1
 8010d14:	4604      	mov	r4, r0
 8010d16:	d158      	bne.n	8010dca <_malloc_r+0xf6>
 8010d18:	f8d8 4000 	ldr.w	r4, [r8]
 8010d1c:	4627      	mov	r7, r4
 8010d1e:	2f00      	cmp	r7, #0
 8010d20:	d143      	bne.n	8010daa <_malloc_r+0xd6>
 8010d22:	2c00      	cmp	r4, #0
 8010d24:	d04b      	beq.n	8010dbe <_malloc_r+0xea>
 8010d26:	6823      	ldr	r3, [r4, #0]
 8010d28:	4639      	mov	r1, r7
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	eb04 0903 	add.w	r9, r4, r3
 8010d30:	f000 fe58 	bl	80119e4 <_sbrk_r>
 8010d34:	4581      	cmp	r9, r0
 8010d36:	d142      	bne.n	8010dbe <_malloc_r+0xea>
 8010d38:	6821      	ldr	r1, [r4, #0]
 8010d3a:	1a6d      	subs	r5, r5, r1
 8010d3c:	4629      	mov	r1, r5
 8010d3e:	4630      	mov	r0, r6
 8010d40:	f7ff ffa6 	bl	8010c90 <sbrk_aligned>
 8010d44:	3001      	adds	r0, #1
 8010d46:	d03a      	beq.n	8010dbe <_malloc_r+0xea>
 8010d48:	6823      	ldr	r3, [r4, #0]
 8010d4a:	442b      	add	r3, r5
 8010d4c:	6023      	str	r3, [r4, #0]
 8010d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d52:	685a      	ldr	r2, [r3, #4]
 8010d54:	bb62      	cbnz	r2, 8010db0 <_malloc_r+0xdc>
 8010d56:	f8c8 7000 	str.w	r7, [r8]
 8010d5a:	e00f      	b.n	8010d7c <_malloc_r+0xa8>
 8010d5c:	6822      	ldr	r2, [r4, #0]
 8010d5e:	1b52      	subs	r2, r2, r5
 8010d60:	d420      	bmi.n	8010da4 <_malloc_r+0xd0>
 8010d62:	2a0b      	cmp	r2, #11
 8010d64:	d917      	bls.n	8010d96 <_malloc_r+0xc2>
 8010d66:	1961      	adds	r1, r4, r5
 8010d68:	42a3      	cmp	r3, r4
 8010d6a:	6025      	str	r5, [r4, #0]
 8010d6c:	bf18      	it	ne
 8010d6e:	6059      	strne	r1, [r3, #4]
 8010d70:	6863      	ldr	r3, [r4, #4]
 8010d72:	bf08      	it	eq
 8010d74:	f8c8 1000 	streq.w	r1, [r8]
 8010d78:	5162      	str	r2, [r4, r5]
 8010d7a:	604b      	str	r3, [r1, #4]
 8010d7c:	4630      	mov	r0, r6
 8010d7e:	f000 f82f 	bl	8010de0 <__malloc_unlock>
 8010d82:	f104 000b 	add.w	r0, r4, #11
 8010d86:	1d23      	adds	r3, r4, #4
 8010d88:	f020 0007 	bic.w	r0, r0, #7
 8010d8c:	1ac2      	subs	r2, r0, r3
 8010d8e:	bf1c      	itt	ne
 8010d90:	1a1b      	subne	r3, r3, r0
 8010d92:	50a3      	strne	r3, [r4, r2]
 8010d94:	e7af      	b.n	8010cf6 <_malloc_r+0x22>
 8010d96:	6862      	ldr	r2, [r4, #4]
 8010d98:	42a3      	cmp	r3, r4
 8010d9a:	bf0c      	ite	eq
 8010d9c:	f8c8 2000 	streq.w	r2, [r8]
 8010da0:	605a      	strne	r2, [r3, #4]
 8010da2:	e7eb      	b.n	8010d7c <_malloc_r+0xa8>
 8010da4:	4623      	mov	r3, r4
 8010da6:	6864      	ldr	r4, [r4, #4]
 8010da8:	e7ae      	b.n	8010d08 <_malloc_r+0x34>
 8010daa:	463c      	mov	r4, r7
 8010dac:	687f      	ldr	r7, [r7, #4]
 8010dae:	e7b6      	b.n	8010d1e <_malloc_r+0x4a>
 8010db0:	461a      	mov	r2, r3
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	42a3      	cmp	r3, r4
 8010db6:	d1fb      	bne.n	8010db0 <_malloc_r+0xdc>
 8010db8:	2300      	movs	r3, #0
 8010dba:	6053      	str	r3, [r2, #4]
 8010dbc:	e7de      	b.n	8010d7c <_malloc_r+0xa8>
 8010dbe:	230c      	movs	r3, #12
 8010dc0:	6033      	str	r3, [r6, #0]
 8010dc2:	4630      	mov	r0, r6
 8010dc4:	f000 f80c 	bl	8010de0 <__malloc_unlock>
 8010dc8:	e794      	b.n	8010cf4 <_malloc_r+0x20>
 8010dca:	6005      	str	r5, [r0, #0]
 8010dcc:	e7d6      	b.n	8010d7c <_malloc_r+0xa8>
 8010dce:	bf00      	nop
 8010dd0:	24002554 	.word	0x24002554

08010dd4 <__malloc_lock>:
 8010dd4:	4801      	ldr	r0, [pc, #4]	@ (8010ddc <__malloc_lock+0x8>)
 8010dd6:	f7ff b91e 	b.w	8010016 <__retarget_lock_acquire_recursive>
 8010dda:	bf00      	nop
 8010ddc:	2400254c 	.word	0x2400254c

08010de0 <__malloc_unlock>:
 8010de0:	4801      	ldr	r0, [pc, #4]	@ (8010de8 <__malloc_unlock+0x8>)
 8010de2:	f7ff b919 	b.w	8010018 <__retarget_lock_release_recursive>
 8010de6:	bf00      	nop
 8010de8:	2400254c 	.word	0x2400254c

08010dec <_Balloc>:
 8010dec:	b570      	push	{r4, r5, r6, lr}
 8010dee:	69c6      	ldr	r6, [r0, #28]
 8010df0:	4604      	mov	r4, r0
 8010df2:	460d      	mov	r5, r1
 8010df4:	b976      	cbnz	r6, 8010e14 <_Balloc+0x28>
 8010df6:	2010      	movs	r0, #16
 8010df8:	f7ff ff42 	bl	8010c80 <malloc>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	61e0      	str	r0, [r4, #28]
 8010e00:	b920      	cbnz	r0, 8010e0c <_Balloc+0x20>
 8010e02:	4b18      	ldr	r3, [pc, #96]	@ (8010e64 <_Balloc+0x78>)
 8010e04:	4818      	ldr	r0, [pc, #96]	@ (8010e68 <_Balloc+0x7c>)
 8010e06:	216b      	movs	r1, #107	@ 0x6b
 8010e08:	f000 fe0a 	bl	8011a20 <__assert_func>
 8010e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e10:	6006      	str	r6, [r0, #0]
 8010e12:	60c6      	str	r6, [r0, #12]
 8010e14:	69e6      	ldr	r6, [r4, #28]
 8010e16:	68f3      	ldr	r3, [r6, #12]
 8010e18:	b183      	cbz	r3, 8010e3c <_Balloc+0x50>
 8010e1a:	69e3      	ldr	r3, [r4, #28]
 8010e1c:	68db      	ldr	r3, [r3, #12]
 8010e1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010e22:	b9b8      	cbnz	r0, 8010e54 <_Balloc+0x68>
 8010e24:	2101      	movs	r1, #1
 8010e26:	fa01 f605 	lsl.w	r6, r1, r5
 8010e2a:	1d72      	adds	r2, r6, #5
 8010e2c:	0092      	lsls	r2, r2, #2
 8010e2e:	4620      	mov	r0, r4
 8010e30:	f000 fe14 	bl	8011a5c <_calloc_r>
 8010e34:	b160      	cbz	r0, 8010e50 <_Balloc+0x64>
 8010e36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e3a:	e00e      	b.n	8010e5a <_Balloc+0x6e>
 8010e3c:	2221      	movs	r2, #33	@ 0x21
 8010e3e:	2104      	movs	r1, #4
 8010e40:	4620      	mov	r0, r4
 8010e42:	f000 fe0b 	bl	8011a5c <_calloc_r>
 8010e46:	69e3      	ldr	r3, [r4, #28]
 8010e48:	60f0      	str	r0, [r6, #12]
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d1e4      	bne.n	8010e1a <_Balloc+0x2e>
 8010e50:	2000      	movs	r0, #0
 8010e52:	bd70      	pop	{r4, r5, r6, pc}
 8010e54:	6802      	ldr	r2, [r0, #0]
 8010e56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e60:	e7f7      	b.n	8010e52 <_Balloc+0x66>
 8010e62:	bf00      	nop
 8010e64:	08012e81 	.word	0x08012e81
 8010e68:	08012f01 	.word	0x08012f01

08010e6c <_Bfree>:
 8010e6c:	b570      	push	{r4, r5, r6, lr}
 8010e6e:	69c6      	ldr	r6, [r0, #28]
 8010e70:	4605      	mov	r5, r0
 8010e72:	460c      	mov	r4, r1
 8010e74:	b976      	cbnz	r6, 8010e94 <_Bfree+0x28>
 8010e76:	2010      	movs	r0, #16
 8010e78:	f7ff ff02 	bl	8010c80 <malloc>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	61e8      	str	r0, [r5, #28]
 8010e80:	b920      	cbnz	r0, 8010e8c <_Bfree+0x20>
 8010e82:	4b09      	ldr	r3, [pc, #36]	@ (8010ea8 <_Bfree+0x3c>)
 8010e84:	4809      	ldr	r0, [pc, #36]	@ (8010eac <_Bfree+0x40>)
 8010e86:	218f      	movs	r1, #143	@ 0x8f
 8010e88:	f000 fdca 	bl	8011a20 <__assert_func>
 8010e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e90:	6006      	str	r6, [r0, #0]
 8010e92:	60c6      	str	r6, [r0, #12]
 8010e94:	b13c      	cbz	r4, 8010ea6 <_Bfree+0x3a>
 8010e96:	69eb      	ldr	r3, [r5, #28]
 8010e98:	6862      	ldr	r2, [r4, #4]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ea0:	6021      	str	r1, [r4, #0]
 8010ea2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010ea6:	bd70      	pop	{r4, r5, r6, pc}
 8010ea8:	08012e81 	.word	0x08012e81
 8010eac:	08012f01 	.word	0x08012f01

08010eb0 <__multadd>:
 8010eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb4:	690d      	ldr	r5, [r1, #16]
 8010eb6:	4607      	mov	r7, r0
 8010eb8:	460c      	mov	r4, r1
 8010eba:	461e      	mov	r6, r3
 8010ebc:	f101 0c14 	add.w	ip, r1, #20
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	f8dc 3000 	ldr.w	r3, [ip]
 8010ec6:	b299      	uxth	r1, r3
 8010ec8:	fb02 6101 	mla	r1, r2, r1, r6
 8010ecc:	0c1e      	lsrs	r6, r3, #16
 8010ece:	0c0b      	lsrs	r3, r1, #16
 8010ed0:	fb02 3306 	mla	r3, r2, r6, r3
 8010ed4:	b289      	uxth	r1, r1
 8010ed6:	3001      	adds	r0, #1
 8010ed8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010edc:	4285      	cmp	r5, r0
 8010ede:	f84c 1b04 	str.w	r1, [ip], #4
 8010ee2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010ee6:	dcec      	bgt.n	8010ec2 <__multadd+0x12>
 8010ee8:	b30e      	cbz	r6, 8010f2e <__multadd+0x7e>
 8010eea:	68a3      	ldr	r3, [r4, #8]
 8010eec:	42ab      	cmp	r3, r5
 8010eee:	dc19      	bgt.n	8010f24 <__multadd+0x74>
 8010ef0:	6861      	ldr	r1, [r4, #4]
 8010ef2:	4638      	mov	r0, r7
 8010ef4:	3101      	adds	r1, #1
 8010ef6:	f7ff ff79 	bl	8010dec <_Balloc>
 8010efa:	4680      	mov	r8, r0
 8010efc:	b928      	cbnz	r0, 8010f0a <__multadd+0x5a>
 8010efe:	4602      	mov	r2, r0
 8010f00:	4b0c      	ldr	r3, [pc, #48]	@ (8010f34 <__multadd+0x84>)
 8010f02:	480d      	ldr	r0, [pc, #52]	@ (8010f38 <__multadd+0x88>)
 8010f04:	21ba      	movs	r1, #186	@ 0xba
 8010f06:	f000 fd8b 	bl	8011a20 <__assert_func>
 8010f0a:	6922      	ldr	r2, [r4, #16]
 8010f0c:	3202      	adds	r2, #2
 8010f0e:	f104 010c 	add.w	r1, r4, #12
 8010f12:	0092      	lsls	r2, r2, #2
 8010f14:	300c      	adds	r0, #12
 8010f16:	f000 fd75 	bl	8011a04 <memcpy>
 8010f1a:	4621      	mov	r1, r4
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	f7ff ffa5 	bl	8010e6c <_Bfree>
 8010f22:	4644      	mov	r4, r8
 8010f24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010f28:	3501      	adds	r5, #1
 8010f2a:	615e      	str	r6, [r3, #20]
 8010f2c:	6125      	str	r5, [r4, #16]
 8010f2e:	4620      	mov	r0, r4
 8010f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f34:	08012ef0 	.word	0x08012ef0
 8010f38:	08012f01 	.word	0x08012f01

08010f3c <__hi0bits>:
 8010f3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f40:	4603      	mov	r3, r0
 8010f42:	bf36      	itet	cc
 8010f44:	0403      	lslcc	r3, r0, #16
 8010f46:	2000      	movcs	r0, #0
 8010f48:	2010      	movcc	r0, #16
 8010f4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f4e:	bf3c      	itt	cc
 8010f50:	021b      	lslcc	r3, r3, #8
 8010f52:	3008      	addcc	r0, #8
 8010f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f58:	bf3c      	itt	cc
 8010f5a:	011b      	lslcc	r3, r3, #4
 8010f5c:	3004      	addcc	r0, #4
 8010f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f62:	bf3c      	itt	cc
 8010f64:	009b      	lslcc	r3, r3, #2
 8010f66:	3002      	addcc	r0, #2
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	db05      	blt.n	8010f78 <__hi0bits+0x3c>
 8010f6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f70:	f100 0001 	add.w	r0, r0, #1
 8010f74:	bf08      	it	eq
 8010f76:	2020      	moveq	r0, #32
 8010f78:	4770      	bx	lr

08010f7a <__lo0bits>:
 8010f7a:	6803      	ldr	r3, [r0, #0]
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	f013 0007 	ands.w	r0, r3, #7
 8010f82:	d00b      	beq.n	8010f9c <__lo0bits+0x22>
 8010f84:	07d9      	lsls	r1, r3, #31
 8010f86:	d421      	bmi.n	8010fcc <__lo0bits+0x52>
 8010f88:	0798      	lsls	r0, r3, #30
 8010f8a:	bf49      	itett	mi
 8010f8c:	085b      	lsrmi	r3, r3, #1
 8010f8e:	089b      	lsrpl	r3, r3, #2
 8010f90:	2001      	movmi	r0, #1
 8010f92:	6013      	strmi	r3, [r2, #0]
 8010f94:	bf5c      	itt	pl
 8010f96:	6013      	strpl	r3, [r2, #0]
 8010f98:	2002      	movpl	r0, #2
 8010f9a:	4770      	bx	lr
 8010f9c:	b299      	uxth	r1, r3
 8010f9e:	b909      	cbnz	r1, 8010fa4 <__lo0bits+0x2a>
 8010fa0:	0c1b      	lsrs	r3, r3, #16
 8010fa2:	2010      	movs	r0, #16
 8010fa4:	b2d9      	uxtb	r1, r3
 8010fa6:	b909      	cbnz	r1, 8010fac <__lo0bits+0x32>
 8010fa8:	3008      	adds	r0, #8
 8010faa:	0a1b      	lsrs	r3, r3, #8
 8010fac:	0719      	lsls	r1, r3, #28
 8010fae:	bf04      	itt	eq
 8010fb0:	091b      	lsreq	r3, r3, #4
 8010fb2:	3004      	addeq	r0, #4
 8010fb4:	0799      	lsls	r1, r3, #30
 8010fb6:	bf04      	itt	eq
 8010fb8:	089b      	lsreq	r3, r3, #2
 8010fba:	3002      	addeq	r0, #2
 8010fbc:	07d9      	lsls	r1, r3, #31
 8010fbe:	d403      	bmi.n	8010fc8 <__lo0bits+0x4e>
 8010fc0:	085b      	lsrs	r3, r3, #1
 8010fc2:	f100 0001 	add.w	r0, r0, #1
 8010fc6:	d003      	beq.n	8010fd0 <__lo0bits+0x56>
 8010fc8:	6013      	str	r3, [r2, #0]
 8010fca:	4770      	bx	lr
 8010fcc:	2000      	movs	r0, #0
 8010fce:	4770      	bx	lr
 8010fd0:	2020      	movs	r0, #32
 8010fd2:	4770      	bx	lr

08010fd4 <__i2b>:
 8010fd4:	b510      	push	{r4, lr}
 8010fd6:	460c      	mov	r4, r1
 8010fd8:	2101      	movs	r1, #1
 8010fda:	f7ff ff07 	bl	8010dec <_Balloc>
 8010fde:	4602      	mov	r2, r0
 8010fe0:	b928      	cbnz	r0, 8010fee <__i2b+0x1a>
 8010fe2:	4b05      	ldr	r3, [pc, #20]	@ (8010ff8 <__i2b+0x24>)
 8010fe4:	4805      	ldr	r0, [pc, #20]	@ (8010ffc <__i2b+0x28>)
 8010fe6:	f240 1145 	movw	r1, #325	@ 0x145
 8010fea:	f000 fd19 	bl	8011a20 <__assert_func>
 8010fee:	2301      	movs	r3, #1
 8010ff0:	6144      	str	r4, [r0, #20]
 8010ff2:	6103      	str	r3, [r0, #16]
 8010ff4:	bd10      	pop	{r4, pc}
 8010ff6:	bf00      	nop
 8010ff8:	08012ef0 	.word	0x08012ef0
 8010ffc:	08012f01 	.word	0x08012f01

08011000 <__multiply>:
 8011000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011004:	4617      	mov	r7, r2
 8011006:	690a      	ldr	r2, [r1, #16]
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	429a      	cmp	r2, r3
 801100c:	bfa8      	it	ge
 801100e:	463b      	movge	r3, r7
 8011010:	4689      	mov	r9, r1
 8011012:	bfa4      	itt	ge
 8011014:	460f      	movge	r7, r1
 8011016:	4699      	movge	r9, r3
 8011018:	693d      	ldr	r5, [r7, #16]
 801101a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	6879      	ldr	r1, [r7, #4]
 8011022:	eb05 060a 	add.w	r6, r5, sl
 8011026:	42b3      	cmp	r3, r6
 8011028:	b085      	sub	sp, #20
 801102a:	bfb8      	it	lt
 801102c:	3101      	addlt	r1, #1
 801102e:	f7ff fedd 	bl	8010dec <_Balloc>
 8011032:	b930      	cbnz	r0, 8011042 <__multiply+0x42>
 8011034:	4602      	mov	r2, r0
 8011036:	4b41      	ldr	r3, [pc, #260]	@ (801113c <__multiply+0x13c>)
 8011038:	4841      	ldr	r0, [pc, #260]	@ (8011140 <__multiply+0x140>)
 801103a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801103e:	f000 fcef 	bl	8011a20 <__assert_func>
 8011042:	f100 0414 	add.w	r4, r0, #20
 8011046:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801104a:	4623      	mov	r3, r4
 801104c:	2200      	movs	r2, #0
 801104e:	4573      	cmp	r3, lr
 8011050:	d320      	bcc.n	8011094 <__multiply+0x94>
 8011052:	f107 0814 	add.w	r8, r7, #20
 8011056:	f109 0114 	add.w	r1, r9, #20
 801105a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801105e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011062:	9302      	str	r3, [sp, #8]
 8011064:	1beb      	subs	r3, r5, r7
 8011066:	3b15      	subs	r3, #21
 8011068:	f023 0303 	bic.w	r3, r3, #3
 801106c:	3304      	adds	r3, #4
 801106e:	3715      	adds	r7, #21
 8011070:	42bd      	cmp	r5, r7
 8011072:	bf38      	it	cc
 8011074:	2304      	movcc	r3, #4
 8011076:	9301      	str	r3, [sp, #4]
 8011078:	9b02      	ldr	r3, [sp, #8]
 801107a:	9103      	str	r1, [sp, #12]
 801107c:	428b      	cmp	r3, r1
 801107e:	d80c      	bhi.n	801109a <__multiply+0x9a>
 8011080:	2e00      	cmp	r6, #0
 8011082:	dd03      	ble.n	801108c <__multiply+0x8c>
 8011084:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011088:	2b00      	cmp	r3, #0
 801108a:	d055      	beq.n	8011138 <__multiply+0x138>
 801108c:	6106      	str	r6, [r0, #16]
 801108e:	b005      	add	sp, #20
 8011090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011094:	f843 2b04 	str.w	r2, [r3], #4
 8011098:	e7d9      	b.n	801104e <__multiply+0x4e>
 801109a:	f8b1 a000 	ldrh.w	sl, [r1]
 801109e:	f1ba 0f00 	cmp.w	sl, #0
 80110a2:	d01f      	beq.n	80110e4 <__multiply+0xe4>
 80110a4:	46c4      	mov	ip, r8
 80110a6:	46a1      	mov	r9, r4
 80110a8:	2700      	movs	r7, #0
 80110aa:	f85c 2b04 	ldr.w	r2, [ip], #4
 80110ae:	f8d9 3000 	ldr.w	r3, [r9]
 80110b2:	fa1f fb82 	uxth.w	fp, r2
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80110bc:	443b      	add	r3, r7
 80110be:	f8d9 7000 	ldr.w	r7, [r9]
 80110c2:	0c12      	lsrs	r2, r2, #16
 80110c4:	0c3f      	lsrs	r7, r7, #16
 80110c6:	fb0a 7202 	mla	r2, sl, r2, r7
 80110ca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110d4:	4565      	cmp	r5, ip
 80110d6:	f849 3b04 	str.w	r3, [r9], #4
 80110da:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80110de:	d8e4      	bhi.n	80110aa <__multiply+0xaa>
 80110e0:	9b01      	ldr	r3, [sp, #4]
 80110e2:	50e7      	str	r7, [r4, r3]
 80110e4:	9b03      	ldr	r3, [sp, #12]
 80110e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80110ea:	3104      	adds	r1, #4
 80110ec:	f1b9 0f00 	cmp.w	r9, #0
 80110f0:	d020      	beq.n	8011134 <__multiply+0x134>
 80110f2:	6823      	ldr	r3, [r4, #0]
 80110f4:	4647      	mov	r7, r8
 80110f6:	46a4      	mov	ip, r4
 80110f8:	f04f 0a00 	mov.w	sl, #0
 80110fc:	f8b7 b000 	ldrh.w	fp, [r7]
 8011100:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011104:	fb09 220b 	mla	r2, r9, fp, r2
 8011108:	4452      	add	r2, sl
 801110a:	b29b      	uxth	r3, r3
 801110c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011110:	f84c 3b04 	str.w	r3, [ip], #4
 8011114:	f857 3b04 	ldr.w	r3, [r7], #4
 8011118:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801111c:	f8bc 3000 	ldrh.w	r3, [ip]
 8011120:	fb09 330a 	mla	r3, r9, sl, r3
 8011124:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011128:	42bd      	cmp	r5, r7
 801112a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801112e:	d8e5      	bhi.n	80110fc <__multiply+0xfc>
 8011130:	9a01      	ldr	r2, [sp, #4]
 8011132:	50a3      	str	r3, [r4, r2]
 8011134:	3404      	adds	r4, #4
 8011136:	e79f      	b.n	8011078 <__multiply+0x78>
 8011138:	3e01      	subs	r6, #1
 801113a:	e7a1      	b.n	8011080 <__multiply+0x80>
 801113c:	08012ef0 	.word	0x08012ef0
 8011140:	08012f01 	.word	0x08012f01

08011144 <__pow5mult>:
 8011144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011148:	4615      	mov	r5, r2
 801114a:	f012 0203 	ands.w	r2, r2, #3
 801114e:	4607      	mov	r7, r0
 8011150:	460e      	mov	r6, r1
 8011152:	d007      	beq.n	8011164 <__pow5mult+0x20>
 8011154:	4c25      	ldr	r4, [pc, #148]	@ (80111ec <__pow5mult+0xa8>)
 8011156:	3a01      	subs	r2, #1
 8011158:	2300      	movs	r3, #0
 801115a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801115e:	f7ff fea7 	bl	8010eb0 <__multadd>
 8011162:	4606      	mov	r6, r0
 8011164:	10ad      	asrs	r5, r5, #2
 8011166:	d03d      	beq.n	80111e4 <__pow5mult+0xa0>
 8011168:	69fc      	ldr	r4, [r7, #28]
 801116a:	b97c      	cbnz	r4, 801118c <__pow5mult+0x48>
 801116c:	2010      	movs	r0, #16
 801116e:	f7ff fd87 	bl	8010c80 <malloc>
 8011172:	4602      	mov	r2, r0
 8011174:	61f8      	str	r0, [r7, #28]
 8011176:	b928      	cbnz	r0, 8011184 <__pow5mult+0x40>
 8011178:	4b1d      	ldr	r3, [pc, #116]	@ (80111f0 <__pow5mult+0xac>)
 801117a:	481e      	ldr	r0, [pc, #120]	@ (80111f4 <__pow5mult+0xb0>)
 801117c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011180:	f000 fc4e 	bl	8011a20 <__assert_func>
 8011184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011188:	6004      	str	r4, [r0, #0]
 801118a:	60c4      	str	r4, [r0, #12]
 801118c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011194:	b94c      	cbnz	r4, 80111aa <__pow5mult+0x66>
 8011196:	f240 2171 	movw	r1, #625	@ 0x271
 801119a:	4638      	mov	r0, r7
 801119c:	f7ff ff1a 	bl	8010fd4 <__i2b>
 80111a0:	2300      	movs	r3, #0
 80111a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80111a6:	4604      	mov	r4, r0
 80111a8:	6003      	str	r3, [r0, #0]
 80111aa:	f04f 0900 	mov.w	r9, #0
 80111ae:	07eb      	lsls	r3, r5, #31
 80111b0:	d50a      	bpl.n	80111c8 <__pow5mult+0x84>
 80111b2:	4631      	mov	r1, r6
 80111b4:	4622      	mov	r2, r4
 80111b6:	4638      	mov	r0, r7
 80111b8:	f7ff ff22 	bl	8011000 <__multiply>
 80111bc:	4631      	mov	r1, r6
 80111be:	4680      	mov	r8, r0
 80111c0:	4638      	mov	r0, r7
 80111c2:	f7ff fe53 	bl	8010e6c <_Bfree>
 80111c6:	4646      	mov	r6, r8
 80111c8:	106d      	asrs	r5, r5, #1
 80111ca:	d00b      	beq.n	80111e4 <__pow5mult+0xa0>
 80111cc:	6820      	ldr	r0, [r4, #0]
 80111ce:	b938      	cbnz	r0, 80111e0 <__pow5mult+0x9c>
 80111d0:	4622      	mov	r2, r4
 80111d2:	4621      	mov	r1, r4
 80111d4:	4638      	mov	r0, r7
 80111d6:	f7ff ff13 	bl	8011000 <__multiply>
 80111da:	6020      	str	r0, [r4, #0]
 80111dc:	f8c0 9000 	str.w	r9, [r0]
 80111e0:	4604      	mov	r4, r0
 80111e2:	e7e4      	b.n	80111ae <__pow5mult+0x6a>
 80111e4:	4630      	mov	r0, r6
 80111e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ea:	bf00      	nop
 80111ec:	08012fb4 	.word	0x08012fb4
 80111f0:	08012e81 	.word	0x08012e81
 80111f4:	08012f01 	.word	0x08012f01

080111f8 <__lshift>:
 80111f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111fc:	460c      	mov	r4, r1
 80111fe:	6849      	ldr	r1, [r1, #4]
 8011200:	6923      	ldr	r3, [r4, #16]
 8011202:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011206:	68a3      	ldr	r3, [r4, #8]
 8011208:	4607      	mov	r7, r0
 801120a:	4691      	mov	r9, r2
 801120c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011210:	f108 0601 	add.w	r6, r8, #1
 8011214:	42b3      	cmp	r3, r6
 8011216:	db0b      	blt.n	8011230 <__lshift+0x38>
 8011218:	4638      	mov	r0, r7
 801121a:	f7ff fde7 	bl	8010dec <_Balloc>
 801121e:	4605      	mov	r5, r0
 8011220:	b948      	cbnz	r0, 8011236 <__lshift+0x3e>
 8011222:	4602      	mov	r2, r0
 8011224:	4b28      	ldr	r3, [pc, #160]	@ (80112c8 <__lshift+0xd0>)
 8011226:	4829      	ldr	r0, [pc, #164]	@ (80112cc <__lshift+0xd4>)
 8011228:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801122c:	f000 fbf8 	bl	8011a20 <__assert_func>
 8011230:	3101      	adds	r1, #1
 8011232:	005b      	lsls	r3, r3, #1
 8011234:	e7ee      	b.n	8011214 <__lshift+0x1c>
 8011236:	2300      	movs	r3, #0
 8011238:	f100 0114 	add.w	r1, r0, #20
 801123c:	f100 0210 	add.w	r2, r0, #16
 8011240:	4618      	mov	r0, r3
 8011242:	4553      	cmp	r3, sl
 8011244:	db33      	blt.n	80112ae <__lshift+0xb6>
 8011246:	6920      	ldr	r0, [r4, #16]
 8011248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801124c:	f104 0314 	add.w	r3, r4, #20
 8011250:	f019 091f 	ands.w	r9, r9, #31
 8011254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011258:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801125c:	d02b      	beq.n	80112b6 <__lshift+0xbe>
 801125e:	f1c9 0e20 	rsb	lr, r9, #32
 8011262:	468a      	mov	sl, r1
 8011264:	2200      	movs	r2, #0
 8011266:	6818      	ldr	r0, [r3, #0]
 8011268:	fa00 f009 	lsl.w	r0, r0, r9
 801126c:	4310      	orrs	r0, r2
 801126e:	f84a 0b04 	str.w	r0, [sl], #4
 8011272:	f853 2b04 	ldr.w	r2, [r3], #4
 8011276:	459c      	cmp	ip, r3
 8011278:	fa22 f20e 	lsr.w	r2, r2, lr
 801127c:	d8f3      	bhi.n	8011266 <__lshift+0x6e>
 801127e:	ebac 0304 	sub.w	r3, ip, r4
 8011282:	3b15      	subs	r3, #21
 8011284:	f023 0303 	bic.w	r3, r3, #3
 8011288:	3304      	adds	r3, #4
 801128a:	f104 0015 	add.w	r0, r4, #21
 801128e:	4560      	cmp	r0, ip
 8011290:	bf88      	it	hi
 8011292:	2304      	movhi	r3, #4
 8011294:	50ca      	str	r2, [r1, r3]
 8011296:	b10a      	cbz	r2, 801129c <__lshift+0xa4>
 8011298:	f108 0602 	add.w	r6, r8, #2
 801129c:	3e01      	subs	r6, #1
 801129e:	4638      	mov	r0, r7
 80112a0:	612e      	str	r6, [r5, #16]
 80112a2:	4621      	mov	r1, r4
 80112a4:	f7ff fde2 	bl	8010e6c <_Bfree>
 80112a8:	4628      	mov	r0, r5
 80112aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80112b2:	3301      	adds	r3, #1
 80112b4:	e7c5      	b.n	8011242 <__lshift+0x4a>
 80112b6:	3904      	subs	r1, #4
 80112b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80112bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80112c0:	459c      	cmp	ip, r3
 80112c2:	d8f9      	bhi.n	80112b8 <__lshift+0xc0>
 80112c4:	e7ea      	b.n	801129c <__lshift+0xa4>
 80112c6:	bf00      	nop
 80112c8:	08012ef0 	.word	0x08012ef0
 80112cc:	08012f01 	.word	0x08012f01

080112d0 <__mcmp>:
 80112d0:	690a      	ldr	r2, [r1, #16]
 80112d2:	4603      	mov	r3, r0
 80112d4:	6900      	ldr	r0, [r0, #16]
 80112d6:	1a80      	subs	r0, r0, r2
 80112d8:	b530      	push	{r4, r5, lr}
 80112da:	d10e      	bne.n	80112fa <__mcmp+0x2a>
 80112dc:	3314      	adds	r3, #20
 80112de:	3114      	adds	r1, #20
 80112e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80112e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80112e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80112ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80112f0:	4295      	cmp	r5, r2
 80112f2:	d003      	beq.n	80112fc <__mcmp+0x2c>
 80112f4:	d205      	bcs.n	8011302 <__mcmp+0x32>
 80112f6:	f04f 30ff 	mov.w	r0, #4294967295
 80112fa:	bd30      	pop	{r4, r5, pc}
 80112fc:	42a3      	cmp	r3, r4
 80112fe:	d3f3      	bcc.n	80112e8 <__mcmp+0x18>
 8011300:	e7fb      	b.n	80112fa <__mcmp+0x2a>
 8011302:	2001      	movs	r0, #1
 8011304:	e7f9      	b.n	80112fa <__mcmp+0x2a>
	...

08011308 <__mdiff>:
 8011308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801130c:	4689      	mov	r9, r1
 801130e:	4606      	mov	r6, r0
 8011310:	4611      	mov	r1, r2
 8011312:	4648      	mov	r0, r9
 8011314:	4614      	mov	r4, r2
 8011316:	f7ff ffdb 	bl	80112d0 <__mcmp>
 801131a:	1e05      	subs	r5, r0, #0
 801131c:	d112      	bne.n	8011344 <__mdiff+0x3c>
 801131e:	4629      	mov	r1, r5
 8011320:	4630      	mov	r0, r6
 8011322:	f7ff fd63 	bl	8010dec <_Balloc>
 8011326:	4602      	mov	r2, r0
 8011328:	b928      	cbnz	r0, 8011336 <__mdiff+0x2e>
 801132a:	4b3f      	ldr	r3, [pc, #252]	@ (8011428 <__mdiff+0x120>)
 801132c:	f240 2137 	movw	r1, #567	@ 0x237
 8011330:	483e      	ldr	r0, [pc, #248]	@ (801142c <__mdiff+0x124>)
 8011332:	f000 fb75 	bl	8011a20 <__assert_func>
 8011336:	2301      	movs	r3, #1
 8011338:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801133c:	4610      	mov	r0, r2
 801133e:	b003      	add	sp, #12
 8011340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011344:	bfbc      	itt	lt
 8011346:	464b      	movlt	r3, r9
 8011348:	46a1      	movlt	r9, r4
 801134a:	4630      	mov	r0, r6
 801134c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011350:	bfba      	itte	lt
 8011352:	461c      	movlt	r4, r3
 8011354:	2501      	movlt	r5, #1
 8011356:	2500      	movge	r5, #0
 8011358:	f7ff fd48 	bl	8010dec <_Balloc>
 801135c:	4602      	mov	r2, r0
 801135e:	b918      	cbnz	r0, 8011368 <__mdiff+0x60>
 8011360:	4b31      	ldr	r3, [pc, #196]	@ (8011428 <__mdiff+0x120>)
 8011362:	f240 2145 	movw	r1, #581	@ 0x245
 8011366:	e7e3      	b.n	8011330 <__mdiff+0x28>
 8011368:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801136c:	6926      	ldr	r6, [r4, #16]
 801136e:	60c5      	str	r5, [r0, #12]
 8011370:	f109 0310 	add.w	r3, r9, #16
 8011374:	f109 0514 	add.w	r5, r9, #20
 8011378:	f104 0e14 	add.w	lr, r4, #20
 801137c:	f100 0b14 	add.w	fp, r0, #20
 8011380:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011384:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011388:	9301      	str	r3, [sp, #4]
 801138a:	46d9      	mov	r9, fp
 801138c:	f04f 0c00 	mov.w	ip, #0
 8011390:	9b01      	ldr	r3, [sp, #4]
 8011392:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011396:	f853 af04 	ldr.w	sl, [r3, #4]!
 801139a:	9301      	str	r3, [sp, #4]
 801139c:	fa1f f38a 	uxth.w	r3, sl
 80113a0:	4619      	mov	r1, r3
 80113a2:	b283      	uxth	r3, r0
 80113a4:	1acb      	subs	r3, r1, r3
 80113a6:	0c00      	lsrs	r0, r0, #16
 80113a8:	4463      	add	r3, ip
 80113aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80113ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80113b8:	4576      	cmp	r6, lr
 80113ba:	f849 3b04 	str.w	r3, [r9], #4
 80113be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113c2:	d8e5      	bhi.n	8011390 <__mdiff+0x88>
 80113c4:	1b33      	subs	r3, r6, r4
 80113c6:	3b15      	subs	r3, #21
 80113c8:	f023 0303 	bic.w	r3, r3, #3
 80113cc:	3415      	adds	r4, #21
 80113ce:	3304      	adds	r3, #4
 80113d0:	42a6      	cmp	r6, r4
 80113d2:	bf38      	it	cc
 80113d4:	2304      	movcc	r3, #4
 80113d6:	441d      	add	r5, r3
 80113d8:	445b      	add	r3, fp
 80113da:	461e      	mov	r6, r3
 80113dc:	462c      	mov	r4, r5
 80113de:	4544      	cmp	r4, r8
 80113e0:	d30e      	bcc.n	8011400 <__mdiff+0xf8>
 80113e2:	f108 0103 	add.w	r1, r8, #3
 80113e6:	1b49      	subs	r1, r1, r5
 80113e8:	f021 0103 	bic.w	r1, r1, #3
 80113ec:	3d03      	subs	r5, #3
 80113ee:	45a8      	cmp	r8, r5
 80113f0:	bf38      	it	cc
 80113f2:	2100      	movcc	r1, #0
 80113f4:	440b      	add	r3, r1
 80113f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80113fa:	b191      	cbz	r1, 8011422 <__mdiff+0x11a>
 80113fc:	6117      	str	r7, [r2, #16]
 80113fe:	e79d      	b.n	801133c <__mdiff+0x34>
 8011400:	f854 1b04 	ldr.w	r1, [r4], #4
 8011404:	46e6      	mov	lr, ip
 8011406:	0c08      	lsrs	r0, r1, #16
 8011408:	fa1c fc81 	uxtah	ip, ip, r1
 801140c:	4471      	add	r1, lr
 801140e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011412:	b289      	uxth	r1, r1
 8011414:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011418:	f846 1b04 	str.w	r1, [r6], #4
 801141c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011420:	e7dd      	b.n	80113de <__mdiff+0xd6>
 8011422:	3f01      	subs	r7, #1
 8011424:	e7e7      	b.n	80113f6 <__mdiff+0xee>
 8011426:	bf00      	nop
 8011428:	08012ef0 	.word	0x08012ef0
 801142c:	08012f01 	.word	0x08012f01

08011430 <__d2b>:
 8011430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011434:	460f      	mov	r7, r1
 8011436:	2101      	movs	r1, #1
 8011438:	ec59 8b10 	vmov	r8, r9, d0
 801143c:	4616      	mov	r6, r2
 801143e:	f7ff fcd5 	bl	8010dec <_Balloc>
 8011442:	4604      	mov	r4, r0
 8011444:	b930      	cbnz	r0, 8011454 <__d2b+0x24>
 8011446:	4602      	mov	r2, r0
 8011448:	4b23      	ldr	r3, [pc, #140]	@ (80114d8 <__d2b+0xa8>)
 801144a:	4824      	ldr	r0, [pc, #144]	@ (80114dc <__d2b+0xac>)
 801144c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011450:	f000 fae6 	bl	8011a20 <__assert_func>
 8011454:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801145c:	b10d      	cbz	r5, 8011462 <__d2b+0x32>
 801145e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011462:	9301      	str	r3, [sp, #4]
 8011464:	f1b8 0300 	subs.w	r3, r8, #0
 8011468:	d023      	beq.n	80114b2 <__d2b+0x82>
 801146a:	4668      	mov	r0, sp
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	f7ff fd84 	bl	8010f7a <__lo0bits>
 8011472:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011476:	b1d0      	cbz	r0, 80114ae <__d2b+0x7e>
 8011478:	f1c0 0320 	rsb	r3, r0, #32
 801147c:	fa02 f303 	lsl.w	r3, r2, r3
 8011480:	430b      	orrs	r3, r1
 8011482:	40c2      	lsrs	r2, r0
 8011484:	6163      	str	r3, [r4, #20]
 8011486:	9201      	str	r2, [sp, #4]
 8011488:	9b01      	ldr	r3, [sp, #4]
 801148a:	61a3      	str	r3, [r4, #24]
 801148c:	2b00      	cmp	r3, #0
 801148e:	bf0c      	ite	eq
 8011490:	2201      	moveq	r2, #1
 8011492:	2202      	movne	r2, #2
 8011494:	6122      	str	r2, [r4, #16]
 8011496:	b1a5      	cbz	r5, 80114c2 <__d2b+0x92>
 8011498:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801149c:	4405      	add	r5, r0
 801149e:	603d      	str	r5, [r7, #0]
 80114a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80114a4:	6030      	str	r0, [r6, #0]
 80114a6:	4620      	mov	r0, r4
 80114a8:	b003      	add	sp, #12
 80114aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114ae:	6161      	str	r1, [r4, #20]
 80114b0:	e7ea      	b.n	8011488 <__d2b+0x58>
 80114b2:	a801      	add	r0, sp, #4
 80114b4:	f7ff fd61 	bl	8010f7a <__lo0bits>
 80114b8:	9b01      	ldr	r3, [sp, #4]
 80114ba:	6163      	str	r3, [r4, #20]
 80114bc:	3020      	adds	r0, #32
 80114be:	2201      	movs	r2, #1
 80114c0:	e7e8      	b.n	8011494 <__d2b+0x64>
 80114c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80114c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80114ca:	6038      	str	r0, [r7, #0]
 80114cc:	6918      	ldr	r0, [r3, #16]
 80114ce:	f7ff fd35 	bl	8010f3c <__hi0bits>
 80114d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80114d6:	e7e5      	b.n	80114a4 <__d2b+0x74>
 80114d8:	08012ef0 	.word	0x08012ef0
 80114dc:	08012f01 	.word	0x08012f01

080114e0 <__sfputc_r>:
 80114e0:	6893      	ldr	r3, [r2, #8]
 80114e2:	3b01      	subs	r3, #1
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	b410      	push	{r4}
 80114e8:	6093      	str	r3, [r2, #8]
 80114ea:	da08      	bge.n	80114fe <__sfputc_r+0x1e>
 80114ec:	6994      	ldr	r4, [r2, #24]
 80114ee:	42a3      	cmp	r3, r4
 80114f0:	db01      	blt.n	80114f6 <__sfputc_r+0x16>
 80114f2:	290a      	cmp	r1, #10
 80114f4:	d103      	bne.n	80114fe <__sfputc_r+0x1e>
 80114f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114fa:	f000 b9df 	b.w	80118bc <__swbuf_r>
 80114fe:	6813      	ldr	r3, [r2, #0]
 8011500:	1c58      	adds	r0, r3, #1
 8011502:	6010      	str	r0, [r2, #0]
 8011504:	7019      	strb	r1, [r3, #0]
 8011506:	4608      	mov	r0, r1
 8011508:	f85d 4b04 	ldr.w	r4, [sp], #4
 801150c:	4770      	bx	lr

0801150e <__sfputs_r>:
 801150e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011510:	4606      	mov	r6, r0
 8011512:	460f      	mov	r7, r1
 8011514:	4614      	mov	r4, r2
 8011516:	18d5      	adds	r5, r2, r3
 8011518:	42ac      	cmp	r4, r5
 801151a:	d101      	bne.n	8011520 <__sfputs_r+0x12>
 801151c:	2000      	movs	r0, #0
 801151e:	e007      	b.n	8011530 <__sfputs_r+0x22>
 8011520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011524:	463a      	mov	r2, r7
 8011526:	4630      	mov	r0, r6
 8011528:	f7ff ffda 	bl	80114e0 <__sfputc_r>
 801152c:	1c43      	adds	r3, r0, #1
 801152e:	d1f3      	bne.n	8011518 <__sfputs_r+0xa>
 8011530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011534 <_vfiprintf_r>:
 8011534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011538:	460d      	mov	r5, r1
 801153a:	b09d      	sub	sp, #116	@ 0x74
 801153c:	4614      	mov	r4, r2
 801153e:	4698      	mov	r8, r3
 8011540:	4606      	mov	r6, r0
 8011542:	b118      	cbz	r0, 801154c <_vfiprintf_r+0x18>
 8011544:	6a03      	ldr	r3, [r0, #32]
 8011546:	b90b      	cbnz	r3, 801154c <_vfiprintf_r+0x18>
 8011548:	f7fe fc5c 	bl	800fe04 <__sinit>
 801154c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801154e:	07d9      	lsls	r1, r3, #31
 8011550:	d405      	bmi.n	801155e <_vfiprintf_r+0x2a>
 8011552:	89ab      	ldrh	r3, [r5, #12]
 8011554:	059a      	lsls	r2, r3, #22
 8011556:	d402      	bmi.n	801155e <_vfiprintf_r+0x2a>
 8011558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801155a:	f7fe fd5c 	bl	8010016 <__retarget_lock_acquire_recursive>
 801155e:	89ab      	ldrh	r3, [r5, #12]
 8011560:	071b      	lsls	r3, r3, #28
 8011562:	d501      	bpl.n	8011568 <_vfiprintf_r+0x34>
 8011564:	692b      	ldr	r3, [r5, #16]
 8011566:	b99b      	cbnz	r3, 8011590 <_vfiprintf_r+0x5c>
 8011568:	4629      	mov	r1, r5
 801156a:	4630      	mov	r0, r6
 801156c:	f000 f9e4 	bl	8011938 <__swsetup_r>
 8011570:	b170      	cbz	r0, 8011590 <_vfiprintf_r+0x5c>
 8011572:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011574:	07dc      	lsls	r4, r3, #31
 8011576:	d504      	bpl.n	8011582 <_vfiprintf_r+0x4e>
 8011578:	f04f 30ff 	mov.w	r0, #4294967295
 801157c:	b01d      	add	sp, #116	@ 0x74
 801157e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011582:	89ab      	ldrh	r3, [r5, #12]
 8011584:	0598      	lsls	r0, r3, #22
 8011586:	d4f7      	bmi.n	8011578 <_vfiprintf_r+0x44>
 8011588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801158a:	f7fe fd45 	bl	8010018 <__retarget_lock_release_recursive>
 801158e:	e7f3      	b.n	8011578 <_vfiprintf_r+0x44>
 8011590:	2300      	movs	r3, #0
 8011592:	9309      	str	r3, [sp, #36]	@ 0x24
 8011594:	2320      	movs	r3, #32
 8011596:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801159a:	f8cd 800c 	str.w	r8, [sp, #12]
 801159e:	2330      	movs	r3, #48	@ 0x30
 80115a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011750 <_vfiprintf_r+0x21c>
 80115a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80115a8:	f04f 0901 	mov.w	r9, #1
 80115ac:	4623      	mov	r3, r4
 80115ae:	469a      	mov	sl, r3
 80115b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115b4:	b10a      	cbz	r2, 80115ba <_vfiprintf_r+0x86>
 80115b6:	2a25      	cmp	r2, #37	@ 0x25
 80115b8:	d1f9      	bne.n	80115ae <_vfiprintf_r+0x7a>
 80115ba:	ebba 0b04 	subs.w	fp, sl, r4
 80115be:	d00b      	beq.n	80115d8 <_vfiprintf_r+0xa4>
 80115c0:	465b      	mov	r3, fp
 80115c2:	4622      	mov	r2, r4
 80115c4:	4629      	mov	r1, r5
 80115c6:	4630      	mov	r0, r6
 80115c8:	f7ff ffa1 	bl	801150e <__sfputs_r>
 80115cc:	3001      	adds	r0, #1
 80115ce:	f000 80a7 	beq.w	8011720 <_vfiprintf_r+0x1ec>
 80115d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115d4:	445a      	add	r2, fp
 80115d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80115d8:	f89a 3000 	ldrb.w	r3, [sl]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	f000 809f 	beq.w	8011720 <_vfiprintf_r+0x1ec>
 80115e2:	2300      	movs	r3, #0
 80115e4:	f04f 32ff 	mov.w	r2, #4294967295
 80115e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115ec:	f10a 0a01 	add.w	sl, sl, #1
 80115f0:	9304      	str	r3, [sp, #16]
 80115f2:	9307      	str	r3, [sp, #28]
 80115f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80115f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80115fa:	4654      	mov	r4, sl
 80115fc:	2205      	movs	r2, #5
 80115fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011602:	4853      	ldr	r0, [pc, #332]	@ (8011750 <_vfiprintf_r+0x21c>)
 8011604:	f7ee fe6c 	bl	80002e0 <memchr>
 8011608:	9a04      	ldr	r2, [sp, #16]
 801160a:	b9d8      	cbnz	r0, 8011644 <_vfiprintf_r+0x110>
 801160c:	06d1      	lsls	r1, r2, #27
 801160e:	bf44      	itt	mi
 8011610:	2320      	movmi	r3, #32
 8011612:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011616:	0713      	lsls	r3, r2, #28
 8011618:	bf44      	itt	mi
 801161a:	232b      	movmi	r3, #43	@ 0x2b
 801161c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011620:	f89a 3000 	ldrb.w	r3, [sl]
 8011624:	2b2a      	cmp	r3, #42	@ 0x2a
 8011626:	d015      	beq.n	8011654 <_vfiprintf_r+0x120>
 8011628:	9a07      	ldr	r2, [sp, #28]
 801162a:	4654      	mov	r4, sl
 801162c:	2000      	movs	r0, #0
 801162e:	f04f 0c0a 	mov.w	ip, #10
 8011632:	4621      	mov	r1, r4
 8011634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011638:	3b30      	subs	r3, #48	@ 0x30
 801163a:	2b09      	cmp	r3, #9
 801163c:	d94b      	bls.n	80116d6 <_vfiprintf_r+0x1a2>
 801163e:	b1b0      	cbz	r0, 801166e <_vfiprintf_r+0x13a>
 8011640:	9207      	str	r2, [sp, #28]
 8011642:	e014      	b.n	801166e <_vfiprintf_r+0x13a>
 8011644:	eba0 0308 	sub.w	r3, r0, r8
 8011648:	fa09 f303 	lsl.w	r3, r9, r3
 801164c:	4313      	orrs	r3, r2
 801164e:	9304      	str	r3, [sp, #16]
 8011650:	46a2      	mov	sl, r4
 8011652:	e7d2      	b.n	80115fa <_vfiprintf_r+0xc6>
 8011654:	9b03      	ldr	r3, [sp, #12]
 8011656:	1d19      	adds	r1, r3, #4
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	9103      	str	r1, [sp, #12]
 801165c:	2b00      	cmp	r3, #0
 801165e:	bfbb      	ittet	lt
 8011660:	425b      	neglt	r3, r3
 8011662:	f042 0202 	orrlt.w	r2, r2, #2
 8011666:	9307      	strge	r3, [sp, #28]
 8011668:	9307      	strlt	r3, [sp, #28]
 801166a:	bfb8      	it	lt
 801166c:	9204      	strlt	r2, [sp, #16]
 801166e:	7823      	ldrb	r3, [r4, #0]
 8011670:	2b2e      	cmp	r3, #46	@ 0x2e
 8011672:	d10a      	bne.n	801168a <_vfiprintf_r+0x156>
 8011674:	7863      	ldrb	r3, [r4, #1]
 8011676:	2b2a      	cmp	r3, #42	@ 0x2a
 8011678:	d132      	bne.n	80116e0 <_vfiprintf_r+0x1ac>
 801167a:	9b03      	ldr	r3, [sp, #12]
 801167c:	1d1a      	adds	r2, r3, #4
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	9203      	str	r2, [sp, #12]
 8011682:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011686:	3402      	adds	r4, #2
 8011688:	9305      	str	r3, [sp, #20]
 801168a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011760 <_vfiprintf_r+0x22c>
 801168e:	7821      	ldrb	r1, [r4, #0]
 8011690:	2203      	movs	r2, #3
 8011692:	4650      	mov	r0, sl
 8011694:	f7ee fe24 	bl	80002e0 <memchr>
 8011698:	b138      	cbz	r0, 80116aa <_vfiprintf_r+0x176>
 801169a:	9b04      	ldr	r3, [sp, #16]
 801169c:	eba0 000a 	sub.w	r0, r0, sl
 80116a0:	2240      	movs	r2, #64	@ 0x40
 80116a2:	4082      	lsls	r2, r0
 80116a4:	4313      	orrs	r3, r2
 80116a6:	3401      	adds	r4, #1
 80116a8:	9304      	str	r3, [sp, #16]
 80116aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116ae:	4829      	ldr	r0, [pc, #164]	@ (8011754 <_vfiprintf_r+0x220>)
 80116b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80116b4:	2206      	movs	r2, #6
 80116b6:	f7ee fe13 	bl	80002e0 <memchr>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d03f      	beq.n	801173e <_vfiprintf_r+0x20a>
 80116be:	4b26      	ldr	r3, [pc, #152]	@ (8011758 <_vfiprintf_r+0x224>)
 80116c0:	bb1b      	cbnz	r3, 801170a <_vfiprintf_r+0x1d6>
 80116c2:	9b03      	ldr	r3, [sp, #12]
 80116c4:	3307      	adds	r3, #7
 80116c6:	f023 0307 	bic.w	r3, r3, #7
 80116ca:	3308      	adds	r3, #8
 80116cc:	9303      	str	r3, [sp, #12]
 80116ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116d0:	443b      	add	r3, r7
 80116d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80116d4:	e76a      	b.n	80115ac <_vfiprintf_r+0x78>
 80116d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80116da:	460c      	mov	r4, r1
 80116dc:	2001      	movs	r0, #1
 80116de:	e7a8      	b.n	8011632 <_vfiprintf_r+0xfe>
 80116e0:	2300      	movs	r3, #0
 80116e2:	3401      	adds	r4, #1
 80116e4:	9305      	str	r3, [sp, #20]
 80116e6:	4619      	mov	r1, r3
 80116e8:	f04f 0c0a 	mov.w	ip, #10
 80116ec:	4620      	mov	r0, r4
 80116ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116f2:	3a30      	subs	r2, #48	@ 0x30
 80116f4:	2a09      	cmp	r2, #9
 80116f6:	d903      	bls.n	8011700 <_vfiprintf_r+0x1cc>
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d0c6      	beq.n	801168a <_vfiprintf_r+0x156>
 80116fc:	9105      	str	r1, [sp, #20]
 80116fe:	e7c4      	b.n	801168a <_vfiprintf_r+0x156>
 8011700:	fb0c 2101 	mla	r1, ip, r1, r2
 8011704:	4604      	mov	r4, r0
 8011706:	2301      	movs	r3, #1
 8011708:	e7f0      	b.n	80116ec <_vfiprintf_r+0x1b8>
 801170a:	ab03      	add	r3, sp, #12
 801170c:	9300      	str	r3, [sp, #0]
 801170e:	462a      	mov	r2, r5
 8011710:	4b12      	ldr	r3, [pc, #72]	@ (801175c <_vfiprintf_r+0x228>)
 8011712:	a904      	add	r1, sp, #16
 8011714:	4630      	mov	r0, r6
 8011716:	f7fd ff43 	bl	800f5a0 <_printf_float>
 801171a:	4607      	mov	r7, r0
 801171c:	1c78      	adds	r0, r7, #1
 801171e:	d1d6      	bne.n	80116ce <_vfiprintf_r+0x19a>
 8011720:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011722:	07d9      	lsls	r1, r3, #31
 8011724:	d405      	bmi.n	8011732 <_vfiprintf_r+0x1fe>
 8011726:	89ab      	ldrh	r3, [r5, #12]
 8011728:	059a      	lsls	r2, r3, #22
 801172a:	d402      	bmi.n	8011732 <_vfiprintf_r+0x1fe>
 801172c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801172e:	f7fe fc73 	bl	8010018 <__retarget_lock_release_recursive>
 8011732:	89ab      	ldrh	r3, [r5, #12]
 8011734:	065b      	lsls	r3, r3, #25
 8011736:	f53f af1f 	bmi.w	8011578 <_vfiprintf_r+0x44>
 801173a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801173c:	e71e      	b.n	801157c <_vfiprintf_r+0x48>
 801173e:	ab03      	add	r3, sp, #12
 8011740:	9300      	str	r3, [sp, #0]
 8011742:	462a      	mov	r2, r5
 8011744:	4b05      	ldr	r3, [pc, #20]	@ (801175c <_vfiprintf_r+0x228>)
 8011746:	a904      	add	r1, sp, #16
 8011748:	4630      	mov	r0, r6
 801174a:	f7fe f9b1 	bl	800fab0 <_printf_i>
 801174e:	e7e4      	b.n	801171a <_vfiprintf_r+0x1e6>
 8011750:	08012f5a 	.word	0x08012f5a
 8011754:	08012f64 	.word	0x08012f64
 8011758:	0800f5a1 	.word	0x0800f5a1
 801175c:	0801150f 	.word	0x0801150f
 8011760:	08012f60 	.word	0x08012f60

08011764 <__sflush_r>:
 8011764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801176c:	0716      	lsls	r6, r2, #28
 801176e:	4605      	mov	r5, r0
 8011770:	460c      	mov	r4, r1
 8011772:	d454      	bmi.n	801181e <__sflush_r+0xba>
 8011774:	684b      	ldr	r3, [r1, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	dc02      	bgt.n	8011780 <__sflush_r+0x1c>
 801177a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801177c:	2b00      	cmp	r3, #0
 801177e:	dd48      	ble.n	8011812 <__sflush_r+0xae>
 8011780:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011782:	2e00      	cmp	r6, #0
 8011784:	d045      	beq.n	8011812 <__sflush_r+0xae>
 8011786:	2300      	movs	r3, #0
 8011788:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801178c:	682f      	ldr	r7, [r5, #0]
 801178e:	6a21      	ldr	r1, [r4, #32]
 8011790:	602b      	str	r3, [r5, #0]
 8011792:	d030      	beq.n	80117f6 <__sflush_r+0x92>
 8011794:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011796:	89a3      	ldrh	r3, [r4, #12]
 8011798:	0759      	lsls	r1, r3, #29
 801179a:	d505      	bpl.n	80117a8 <__sflush_r+0x44>
 801179c:	6863      	ldr	r3, [r4, #4]
 801179e:	1ad2      	subs	r2, r2, r3
 80117a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80117a2:	b10b      	cbz	r3, 80117a8 <__sflush_r+0x44>
 80117a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80117a6:	1ad2      	subs	r2, r2, r3
 80117a8:	2300      	movs	r3, #0
 80117aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117ac:	6a21      	ldr	r1, [r4, #32]
 80117ae:	4628      	mov	r0, r5
 80117b0:	47b0      	blx	r6
 80117b2:	1c43      	adds	r3, r0, #1
 80117b4:	89a3      	ldrh	r3, [r4, #12]
 80117b6:	d106      	bne.n	80117c6 <__sflush_r+0x62>
 80117b8:	6829      	ldr	r1, [r5, #0]
 80117ba:	291d      	cmp	r1, #29
 80117bc:	d82b      	bhi.n	8011816 <__sflush_r+0xb2>
 80117be:	4a2a      	ldr	r2, [pc, #168]	@ (8011868 <__sflush_r+0x104>)
 80117c0:	40ca      	lsrs	r2, r1
 80117c2:	07d6      	lsls	r6, r2, #31
 80117c4:	d527      	bpl.n	8011816 <__sflush_r+0xb2>
 80117c6:	2200      	movs	r2, #0
 80117c8:	6062      	str	r2, [r4, #4]
 80117ca:	04d9      	lsls	r1, r3, #19
 80117cc:	6922      	ldr	r2, [r4, #16]
 80117ce:	6022      	str	r2, [r4, #0]
 80117d0:	d504      	bpl.n	80117dc <__sflush_r+0x78>
 80117d2:	1c42      	adds	r2, r0, #1
 80117d4:	d101      	bne.n	80117da <__sflush_r+0x76>
 80117d6:	682b      	ldr	r3, [r5, #0]
 80117d8:	b903      	cbnz	r3, 80117dc <__sflush_r+0x78>
 80117da:	6560      	str	r0, [r4, #84]	@ 0x54
 80117dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117de:	602f      	str	r7, [r5, #0]
 80117e0:	b1b9      	cbz	r1, 8011812 <__sflush_r+0xae>
 80117e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117e6:	4299      	cmp	r1, r3
 80117e8:	d002      	beq.n	80117f0 <__sflush_r+0x8c>
 80117ea:	4628      	mov	r0, r5
 80117ec:	f7ff f9fe 	bl	8010bec <_free_r>
 80117f0:	2300      	movs	r3, #0
 80117f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80117f4:	e00d      	b.n	8011812 <__sflush_r+0xae>
 80117f6:	2301      	movs	r3, #1
 80117f8:	4628      	mov	r0, r5
 80117fa:	47b0      	blx	r6
 80117fc:	4602      	mov	r2, r0
 80117fe:	1c50      	adds	r0, r2, #1
 8011800:	d1c9      	bne.n	8011796 <__sflush_r+0x32>
 8011802:	682b      	ldr	r3, [r5, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d0c6      	beq.n	8011796 <__sflush_r+0x32>
 8011808:	2b1d      	cmp	r3, #29
 801180a:	d001      	beq.n	8011810 <__sflush_r+0xac>
 801180c:	2b16      	cmp	r3, #22
 801180e:	d11e      	bne.n	801184e <__sflush_r+0xea>
 8011810:	602f      	str	r7, [r5, #0]
 8011812:	2000      	movs	r0, #0
 8011814:	e022      	b.n	801185c <__sflush_r+0xf8>
 8011816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801181a:	b21b      	sxth	r3, r3
 801181c:	e01b      	b.n	8011856 <__sflush_r+0xf2>
 801181e:	690f      	ldr	r7, [r1, #16]
 8011820:	2f00      	cmp	r7, #0
 8011822:	d0f6      	beq.n	8011812 <__sflush_r+0xae>
 8011824:	0793      	lsls	r3, r2, #30
 8011826:	680e      	ldr	r6, [r1, #0]
 8011828:	bf08      	it	eq
 801182a:	694b      	ldreq	r3, [r1, #20]
 801182c:	600f      	str	r7, [r1, #0]
 801182e:	bf18      	it	ne
 8011830:	2300      	movne	r3, #0
 8011832:	eba6 0807 	sub.w	r8, r6, r7
 8011836:	608b      	str	r3, [r1, #8]
 8011838:	f1b8 0f00 	cmp.w	r8, #0
 801183c:	dde9      	ble.n	8011812 <__sflush_r+0xae>
 801183e:	6a21      	ldr	r1, [r4, #32]
 8011840:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011842:	4643      	mov	r3, r8
 8011844:	463a      	mov	r2, r7
 8011846:	4628      	mov	r0, r5
 8011848:	47b0      	blx	r6
 801184a:	2800      	cmp	r0, #0
 801184c:	dc08      	bgt.n	8011860 <__sflush_r+0xfc>
 801184e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011856:	81a3      	strh	r3, [r4, #12]
 8011858:	f04f 30ff 	mov.w	r0, #4294967295
 801185c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011860:	4407      	add	r7, r0
 8011862:	eba8 0800 	sub.w	r8, r8, r0
 8011866:	e7e7      	b.n	8011838 <__sflush_r+0xd4>
 8011868:	20400001 	.word	0x20400001

0801186c <_fflush_r>:
 801186c:	b538      	push	{r3, r4, r5, lr}
 801186e:	690b      	ldr	r3, [r1, #16]
 8011870:	4605      	mov	r5, r0
 8011872:	460c      	mov	r4, r1
 8011874:	b913      	cbnz	r3, 801187c <_fflush_r+0x10>
 8011876:	2500      	movs	r5, #0
 8011878:	4628      	mov	r0, r5
 801187a:	bd38      	pop	{r3, r4, r5, pc}
 801187c:	b118      	cbz	r0, 8011886 <_fflush_r+0x1a>
 801187e:	6a03      	ldr	r3, [r0, #32]
 8011880:	b90b      	cbnz	r3, 8011886 <_fflush_r+0x1a>
 8011882:	f7fe fabf 	bl	800fe04 <__sinit>
 8011886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d0f3      	beq.n	8011876 <_fflush_r+0xa>
 801188e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011890:	07d0      	lsls	r0, r2, #31
 8011892:	d404      	bmi.n	801189e <_fflush_r+0x32>
 8011894:	0599      	lsls	r1, r3, #22
 8011896:	d402      	bmi.n	801189e <_fflush_r+0x32>
 8011898:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801189a:	f7fe fbbc 	bl	8010016 <__retarget_lock_acquire_recursive>
 801189e:	4628      	mov	r0, r5
 80118a0:	4621      	mov	r1, r4
 80118a2:	f7ff ff5f 	bl	8011764 <__sflush_r>
 80118a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118a8:	07da      	lsls	r2, r3, #31
 80118aa:	4605      	mov	r5, r0
 80118ac:	d4e4      	bmi.n	8011878 <_fflush_r+0xc>
 80118ae:	89a3      	ldrh	r3, [r4, #12]
 80118b0:	059b      	lsls	r3, r3, #22
 80118b2:	d4e1      	bmi.n	8011878 <_fflush_r+0xc>
 80118b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118b6:	f7fe fbaf 	bl	8010018 <__retarget_lock_release_recursive>
 80118ba:	e7dd      	b.n	8011878 <_fflush_r+0xc>

080118bc <__swbuf_r>:
 80118bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118be:	460e      	mov	r6, r1
 80118c0:	4614      	mov	r4, r2
 80118c2:	4605      	mov	r5, r0
 80118c4:	b118      	cbz	r0, 80118ce <__swbuf_r+0x12>
 80118c6:	6a03      	ldr	r3, [r0, #32]
 80118c8:	b90b      	cbnz	r3, 80118ce <__swbuf_r+0x12>
 80118ca:	f7fe fa9b 	bl	800fe04 <__sinit>
 80118ce:	69a3      	ldr	r3, [r4, #24]
 80118d0:	60a3      	str	r3, [r4, #8]
 80118d2:	89a3      	ldrh	r3, [r4, #12]
 80118d4:	071a      	lsls	r2, r3, #28
 80118d6:	d501      	bpl.n	80118dc <__swbuf_r+0x20>
 80118d8:	6923      	ldr	r3, [r4, #16]
 80118da:	b943      	cbnz	r3, 80118ee <__swbuf_r+0x32>
 80118dc:	4621      	mov	r1, r4
 80118de:	4628      	mov	r0, r5
 80118e0:	f000 f82a 	bl	8011938 <__swsetup_r>
 80118e4:	b118      	cbz	r0, 80118ee <__swbuf_r+0x32>
 80118e6:	f04f 37ff 	mov.w	r7, #4294967295
 80118ea:	4638      	mov	r0, r7
 80118ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118ee:	6823      	ldr	r3, [r4, #0]
 80118f0:	6922      	ldr	r2, [r4, #16]
 80118f2:	1a98      	subs	r0, r3, r2
 80118f4:	6963      	ldr	r3, [r4, #20]
 80118f6:	b2f6      	uxtb	r6, r6
 80118f8:	4283      	cmp	r3, r0
 80118fa:	4637      	mov	r7, r6
 80118fc:	dc05      	bgt.n	801190a <__swbuf_r+0x4e>
 80118fe:	4621      	mov	r1, r4
 8011900:	4628      	mov	r0, r5
 8011902:	f7ff ffb3 	bl	801186c <_fflush_r>
 8011906:	2800      	cmp	r0, #0
 8011908:	d1ed      	bne.n	80118e6 <__swbuf_r+0x2a>
 801190a:	68a3      	ldr	r3, [r4, #8]
 801190c:	3b01      	subs	r3, #1
 801190e:	60a3      	str	r3, [r4, #8]
 8011910:	6823      	ldr	r3, [r4, #0]
 8011912:	1c5a      	adds	r2, r3, #1
 8011914:	6022      	str	r2, [r4, #0]
 8011916:	701e      	strb	r6, [r3, #0]
 8011918:	6962      	ldr	r2, [r4, #20]
 801191a:	1c43      	adds	r3, r0, #1
 801191c:	429a      	cmp	r2, r3
 801191e:	d004      	beq.n	801192a <__swbuf_r+0x6e>
 8011920:	89a3      	ldrh	r3, [r4, #12]
 8011922:	07db      	lsls	r3, r3, #31
 8011924:	d5e1      	bpl.n	80118ea <__swbuf_r+0x2e>
 8011926:	2e0a      	cmp	r6, #10
 8011928:	d1df      	bne.n	80118ea <__swbuf_r+0x2e>
 801192a:	4621      	mov	r1, r4
 801192c:	4628      	mov	r0, r5
 801192e:	f7ff ff9d 	bl	801186c <_fflush_r>
 8011932:	2800      	cmp	r0, #0
 8011934:	d0d9      	beq.n	80118ea <__swbuf_r+0x2e>
 8011936:	e7d6      	b.n	80118e6 <__swbuf_r+0x2a>

08011938 <__swsetup_r>:
 8011938:	b538      	push	{r3, r4, r5, lr}
 801193a:	4b29      	ldr	r3, [pc, #164]	@ (80119e0 <__swsetup_r+0xa8>)
 801193c:	4605      	mov	r5, r0
 801193e:	6818      	ldr	r0, [r3, #0]
 8011940:	460c      	mov	r4, r1
 8011942:	b118      	cbz	r0, 801194c <__swsetup_r+0x14>
 8011944:	6a03      	ldr	r3, [r0, #32]
 8011946:	b90b      	cbnz	r3, 801194c <__swsetup_r+0x14>
 8011948:	f7fe fa5c 	bl	800fe04 <__sinit>
 801194c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011950:	0719      	lsls	r1, r3, #28
 8011952:	d422      	bmi.n	801199a <__swsetup_r+0x62>
 8011954:	06da      	lsls	r2, r3, #27
 8011956:	d407      	bmi.n	8011968 <__swsetup_r+0x30>
 8011958:	2209      	movs	r2, #9
 801195a:	602a      	str	r2, [r5, #0]
 801195c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011960:	81a3      	strh	r3, [r4, #12]
 8011962:	f04f 30ff 	mov.w	r0, #4294967295
 8011966:	e033      	b.n	80119d0 <__swsetup_r+0x98>
 8011968:	0758      	lsls	r0, r3, #29
 801196a:	d512      	bpl.n	8011992 <__swsetup_r+0x5a>
 801196c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801196e:	b141      	cbz	r1, 8011982 <__swsetup_r+0x4a>
 8011970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011974:	4299      	cmp	r1, r3
 8011976:	d002      	beq.n	801197e <__swsetup_r+0x46>
 8011978:	4628      	mov	r0, r5
 801197a:	f7ff f937 	bl	8010bec <_free_r>
 801197e:	2300      	movs	r3, #0
 8011980:	6363      	str	r3, [r4, #52]	@ 0x34
 8011982:	89a3      	ldrh	r3, [r4, #12]
 8011984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011988:	81a3      	strh	r3, [r4, #12]
 801198a:	2300      	movs	r3, #0
 801198c:	6063      	str	r3, [r4, #4]
 801198e:	6923      	ldr	r3, [r4, #16]
 8011990:	6023      	str	r3, [r4, #0]
 8011992:	89a3      	ldrh	r3, [r4, #12]
 8011994:	f043 0308 	orr.w	r3, r3, #8
 8011998:	81a3      	strh	r3, [r4, #12]
 801199a:	6923      	ldr	r3, [r4, #16]
 801199c:	b94b      	cbnz	r3, 80119b2 <__swsetup_r+0x7a>
 801199e:	89a3      	ldrh	r3, [r4, #12]
 80119a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80119a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80119a8:	d003      	beq.n	80119b2 <__swsetup_r+0x7a>
 80119aa:	4621      	mov	r1, r4
 80119ac:	4628      	mov	r0, r5
 80119ae:	f000 f8c1 	bl	8011b34 <__smakebuf_r>
 80119b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119b6:	f013 0201 	ands.w	r2, r3, #1
 80119ba:	d00a      	beq.n	80119d2 <__swsetup_r+0x9a>
 80119bc:	2200      	movs	r2, #0
 80119be:	60a2      	str	r2, [r4, #8]
 80119c0:	6962      	ldr	r2, [r4, #20]
 80119c2:	4252      	negs	r2, r2
 80119c4:	61a2      	str	r2, [r4, #24]
 80119c6:	6922      	ldr	r2, [r4, #16]
 80119c8:	b942      	cbnz	r2, 80119dc <__swsetup_r+0xa4>
 80119ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80119ce:	d1c5      	bne.n	801195c <__swsetup_r+0x24>
 80119d0:	bd38      	pop	{r3, r4, r5, pc}
 80119d2:	0799      	lsls	r1, r3, #30
 80119d4:	bf58      	it	pl
 80119d6:	6962      	ldrpl	r2, [r4, #20]
 80119d8:	60a2      	str	r2, [r4, #8]
 80119da:	e7f4      	b.n	80119c6 <__swsetup_r+0x8e>
 80119dc:	2000      	movs	r0, #0
 80119de:	e7f7      	b.n	80119d0 <__swsetup_r+0x98>
 80119e0:	24000118 	.word	0x24000118

080119e4 <_sbrk_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	4d06      	ldr	r5, [pc, #24]	@ (8011a00 <_sbrk_r+0x1c>)
 80119e8:	2300      	movs	r3, #0
 80119ea:	4604      	mov	r4, r0
 80119ec:	4608      	mov	r0, r1
 80119ee:	602b      	str	r3, [r5, #0]
 80119f0:	f7f0 f87c 	bl	8001aec <_sbrk>
 80119f4:	1c43      	adds	r3, r0, #1
 80119f6:	d102      	bne.n	80119fe <_sbrk_r+0x1a>
 80119f8:	682b      	ldr	r3, [r5, #0]
 80119fa:	b103      	cbz	r3, 80119fe <_sbrk_r+0x1a>
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	bd38      	pop	{r3, r4, r5, pc}
 8011a00:	24002548 	.word	0x24002548

08011a04 <memcpy>:
 8011a04:	440a      	add	r2, r1
 8011a06:	4291      	cmp	r1, r2
 8011a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a0c:	d100      	bne.n	8011a10 <memcpy+0xc>
 8011a0e:	4770      	bx	lr
 8011a10:	b510      	push	{r4, lr}
 8011a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a1a:	4291      	cmp	r1, r2
 8011a1c:	d1f9      	bne.n	8011a12 <memcpy+0xe>
 8011a1e:	bd10      	pop	{r4, pc}

08011a20 <__assert_func>:
 8011a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a22:	4614      	mov	r4, r2
 8011a24:	461a      	mov	r2, r3
 8011a26:	4b09      	ldr	r3, [pc, #36]	@ (8011a4c <__assert_func+0x2c>)
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	4605      	mov	r5, r0
 8011a2c:	68d8      	ldr	r0, [r3, #12]
 8011a2e:	b14c      	cbz	r4, 8011a44 <__assert_func+0x24>
 8011a30:	4b07      	ldr	r3, [pc, #28]	@ (8011a50 <__assert_func+0x30>)
 8011a32:	9100      	str	r1, [sp, #0]
 8011a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a38:	4906      	ldr	r1, [pc, #24]	@ (8011a54 <__assert_func+0x34>)
 8011a3a:	462b      	mov	r3, r5
 8011a3c:	f000 f842 	bl	8011ac4 <fiprintf>
 8011a40:	f000 f8d6 	bl	8011bf0 <abort>
 8011a44:	4b04      	ldr	r3, [pc, #16]	@ (8011a58 <__assert_func+0x38>)
 8011a46:	461c      	mov	r4, r3
 8011a48:	e7f3      	b.n	8011a32 <__assert_func+0x12>
 8011a4a:	bf00      	nop
 8011a4c:	24000118 	.word	0x24000118
 8011a50:	08012f75 	.word	0x08012f75
 8011a54:	08012f82 	.word	0x08012f82
 8011a58:	08012fb0 	.word	0x08012fb0

08011a5c <_calloc_r>:
 8011a5c:	b570      	push	{r4, r5, r6, lr}
 8011a5e:	fba1 5402 	umull	r5, r4, r1, r2
 8011a62:	b934      	cbnz	r4, 8011a72 <_calloc_r+0x16>
 8011a64:	4629      	mov	r1, r5
 8011a66:	f7ff f935 	bl	8010cd4 <_malloc_r>
 8011a6a:	4606      	mov	r6, r0
 8011a6c:	b928      	cbnz	r0, 8011a7a <_calloc_r+0x1e>
 8011a6e:	4630      	mov	r0, r6
 8011a70:	bd70      	pop	{r4, r5, r6, pc}
 8011a72:	220c      	movs	r2, #12
 8011a74:	6002      	str	r2, [r0, #0]
 8011a76:	2600      	movs	r6, #0
 8011a78:	e7f9      	b.n	8011a6e <_calloc_r+0x12>
 8011a7a:	462a      	mov	r2, r5
 8011a7c:	4621      	mov	r1, r4
 8011a7e:	f7fe fa4c 	bl	800ff1a <memset>
 8011a82:	e7f4      	b.n	8011a6e <_calloc_r+0x12>

08011a84 <__ascii_mbtowc>:
 8011a84:	b082      	sub	sp, #8
 8011a86:	b901      	cbnz	r1, 8011a8a <__ascii_mbtowc+0x6>
 8011a88:	a901      	add	r1, sp, #4
 8011a8a:	b142      	cbz	r2, 8011a9e <__ascii_mbtowc+0x1a>
 8011a8c:	b14b      	cbz	r3, 8011aa2 <__ascii_mbtowc+0x1e>
 8011a8e:	7813      	ldrb	r3, [r2, #0]
 8011a90:	600b      	str	r3, [r1, #0]
 8011a92:	7812      	ldrb	r2, [r2, #0]
 8011a94:	1e10      	subs	r0, r2, #0
 8011a96:	bf18      	it	ne
 8011a98:	2001      	movne	r0, #1
 8011a9a:	b002      	add	sp, #8
 8011a9c:	4770      	bx	lr
 8011a9e:	4610      	mov	r0, r2
 8011aa0:	e7fb      	b.n	8011a9a <__ascii_mbtowc+0x16>
 8011aa2:	f06f 0001 	mvn.w	r0, #1
 8011aa6:	e7f8      	b.n	8011a9a <__ascii_mbtowc+0x16>

08011aa8 <__ascii_wctomb>:
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	4608      	mov	r0, r1
 8011aac:	b141      	cbz	r1, 8011ac0 <__ascii_wctomb+0x18>
 8011aae:	2aff      	cmp	r2, #255	@ 0xff
 8011ab0:	d904      	bls.n	8011abc <__ascii_wctomb+0x14>
 8011ab2:	228a      	movs	r2, #138	@ 0x8a
 8011ab4:	601a      	str	r2, [r3, #0]
 8011ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8011aba:	4770      	bx	lr
 8011abc:	700a      	strb	r2, [r1, #0]
 8011abe:	2001      	movs	r0, #1
 8011ac0:	4770      	bx	lr
	...

08011ac4 <fiprintf>:
 8011ac4:	b40e      	push	{r1, r2, r3}
 8011ac6:	b503      	push	{r0, r1, lr}
 8011ac8:	4601      	mov	r1, r0
 8011aca:	ab03      	add	r3, sp, #12
 8011acc:	4805      	ldr	r0, [pc, #20]	@ (8011ae4 <fiprintf+0x20>)
 8011ace:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ad2:	6800      	ldr	r0, [r0, #0]
 8011ad4:	9301      	str	r3, [sp, #4]
 8011ad6:	f7ff fd2d 	bl	8011534 <_vfiprintf_r>
 8011ada:	b002      	add	sp, #8
 8011adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ae0:	b003      	add	sp, #12
 8011ae2:	4770      	bx	lr
 8011ae4:	24000118 	.word	0x24000118

08011ae8 <__swhatbuf_r>:
 8011ae8:	b570      	push	{r4, r5, r6, lr}
 8011aea:	460c      	mov	r4, r1
 8011aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011af0:	2900      	cmp	r1, #0
 8011af2:	b096      	sub	sp, #88	@ 0x58
 8011af4:	4615      	mov	r5, r2
 8011af6:	461e      	mov	r6, r3
 8011af8:	da0d      	bge.n	8011b16 <__swhatbuf_r+0x2e>
 8011afa:	89a3      	ldrh	r3, [r4, #12]
 8011afc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b00:	f04f 0100 	mov.w	r1, #0
 8011b04:	bf14      	ite	ne
 8011b06:	2340      	movne	r3, #64	@ 0x40
 8011b08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b0c:	2000      	movs	r0, #0
 8011b0e:	6031      	str	r1, [r6, #0]
 8011b10:	602b      	str	r3, [r5, #0]
 8011b12:	b016      	add	sp, #88	@ 0x58
 8011b14:	bd70      	pop	{r4, r5, r6, pc}
 8011b16:	466a      	mov	r2, sp
 8011b18:	f000 f848 	bl	8011bac <_fstat_r>
 8011b1c:	2800      	cmp	r0, #0
 8011b1e:	dbec      	blt.n	8011afa <__swhatbuf_r+0x12>
 8011b20:	9901      	ldr	r1, [sp, #4]
 8011b22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b2a:	4259      	negs	r1, r3
 8011b2c:	4159      	adcs	r1, r3
 8011b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b32:	e7eb      	b.n	8011b0c <__swhatbuf_r+0x24>

08011b34 <__smakebuf_r>:
 8011b34:	898b      	ldrh	r3, [r1, #12]
 8011b36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b38:	079d      	lsls	r5, r3, #30
 8011b3a:	4606      	mov	r6, r0
 8011b3c:	460c      	mov	r4, r1
 8011b3e:	d507      	bpl.n	8011b50 <__smakebuf_r+0x1c>
 8011b40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011b44:	6023      	str	r3, [r4, #0]
 8011b46:	6123      	str	r3, [r4, #16]
 8011b48:	2301      	movs	r3, #1
 8011b4a:	6163      	str	r3, [r4, #20]
 8011b4c:	b003      	add	sp, #12
 8011b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b50:	ab01      	add	r3, sp, #4
 8011b52:	466a      	mov	r2, sp
 8011b54:	f7ff ffc8 	bl	8011ae8 <__swhatbuf_r>
 8011b58:	9f00      	ldr	r7, [sp, #0]
 8011b5a:	4605      	mov	r5, r0
 8011b5c:	4639      	mov	r1, r7
 8011b5e:	4630      	mov	r0, r6
 8011b60:	f7ff f8b8 	bl	8010cd4 <_malloc_r>
 8011b64:	b948      	cbnz	r0, 8011b7a <__smakebuf_r+0x46>
 8011b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b6a:	059a      	lsls	r2, r3, #22
 8011b6c:	d4ee      	bmi.n	8011b4c <__smakebuf_r+0x18>
 8011b6e:	f023 0303 	bic.w	r3, r3, #3
 8011b72:	f043 0302 	orr.w	r3, r3, #2
 8011b76:	81a3      	strh	r3, [r4, #12]
 8011b78:	e7e2      	b.n	8011b40 <__smakebuf_r+0xc>
 8011b7a:	89a3      	ldrh	r3, [r4, #12]
 8011b7c:	6020      	str	r0, [r4, #0]
 8011b7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b82:	81a3      	strh	r3, [r4, #12]
 8011b84:	9b01      	ldr	r3, [sp, #4]
 8011b86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011b8a:	b15b      	cbz	r3, 8011ba4 <__smakebuf_r+0x70>
 8011b8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b90:	4630      	mov	r0, r6
 8011b92:	f000 f81d 	bl	8011bd0 <_isatty_r>
 8011b96:	b128      	cbz	r0, 8011ba4 <__smakebuf_r+0x70>
 8011b98:	89a3      	ldrh	r3, [r4, #12]
 8011b9a:	f023 0303 	bic.w	r3, r3, #3
 8011b9e:	f043 0301 	orr.w	r3, r3, #1
 8011ba2:	81a3      	strh	r3, [r4, #12]
 8011ba4:	89a3      	ldrh	r3, [r4, #12]
 8011ba6:	431d      	orrs	r5, r3
 8011ba8:	81a5      	strh	r5, [r4, #12]
 8011baa:	e7cf      	b.n	8011b4c <__smakebuf_r+0x18>

08011bac <_fstat_r>:
 8011bac:	b538      	push	{r3, r4, r5, lr}
 8011bae:	4d07      	ldr	r5, [pc, #28]	@ (8011bcc <_fstat_r+0x20>)
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	4604      	mov	r4, r0
 8011bb4:	4608      	mov	r0, r1
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	602b      	str	r3, [r5, #0]
 8011bba:	f7ef ff6f 	bl	8001a9c <_fstat>
 8011bbe:	1c43      	adds	r3, r0, #1
 8011bc0:	d102      	bne.n	8011bc8 <_fstat_r+0x1c>
 8011bc2:	682b      	ldr	r3, [r5, #0]
 8011bc4:	b103      	cbz	r3, 8011bc8 <_fstat_r+0x1c>
 8011bc6:	6023      	str	r3, [r4, #0]
 8011bc8:	bd38      	pop	{r3, r4, r5, pc}
 8011bca:	bf00      	nop
 8011bcc:	24002548 	.word	0x24002548

08011bd0 <_isatty_r>:
 8011bd0:	b538      	push	{r3, r4, r5, lr}
 8011bd2:	4d06      	ldr	r5, [pc, #24]	@ (8011bec <_isatty_r+0x1c>)
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	4604      	mov	r4, r0
 8011bd8:	4608      	mov	r0, r1
 8011bda:	602b      	str	r3, [r5, #0]
 8011bdc:	f7ef ff6e 	bl	8001abc <_isatty>
 8011be0:	1c43      	adds	r3, r0, #1
 8011be2:	d102      	bne.n	8011bea <_isatty_r+0x1a>
 8011be4:	682b      	ldr	r3, [r5, #0]
 8011be6:	b103      	cbz	r3, 8011bea <_isatty_r+0x1a>
 8011be8:	6023      	str	r3, [r4, #0]
 8011bea:	bd38      	pop	{r3, r4, r5, pc}
 8011bec:	24002548 	.word	0x24002548

08011bf0 <abort>:
 8011bf0:	b508      	push	{r3, lr}
 8011bf2:	2006      	movs	r0, #6
 8011bf4:	f000 f82c 	bl	8011c50 <raise>
 8011bf8:	2001      	movs	r0, #1
 8011bfa:	f7ef feff 	bl	80019fc <_exit>

08011bfe <_raise_r>:
 8011bfe:	291f      	cmp	r1, #31
 8011c00:	b538      	push	{r3, r4, r5, lr}
 8011c02:	4605      	mov	r5, r0
 8011c04:	460c      	mov	r4, r1
 8011c06:	d904      	bls.n	8011c12 <_raise_r+0x14>
 8011c08:	2316      	movs	r3, #22
 8011c0a:	6003      	str	r3, [r0, #0]
 8011c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c10:	bd38      	pop	{r3, r4, r5, pc}
 8011c12:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011c14:	b112      	cbz	r2, 8011c1c <_raise_r+0x1e>
 8011c16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c1a:	b94b      	cbnz	r3, 8011c30 <_raise_r+0x32>
 8011c1c:	4628      	mov	r0, r5
 8011c1e:	f000 f831 	bl	8011c84 <_getpid_r>
 8011c22:	4622      	mov	r2, r4
 8011c24:	4601      	mov	r1, r0
 8011c26:	4628      	mov	r0, r5
 8011c28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c2c:	f000 b818 	b.w	8011c60 <_kill_r>
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d00a      	beq.n	8011c4a <_raise_r+0x4c>
 8011c34:	1c59      	adds	r1, r3, #1
 8011c36:	d103      	bne.n	8011c40 <_raise_r+0x42>
 8011c38:	2316      	movs	r3, #22
 8011c3a:	6003      	str	r3, [r0, #0]
 8011c3c:	2001      	movs	r0, #1
 8011c3e:	e7e7      	b.n	8011c10 <_raise_r+0x12>
 8011c40:	2100      	movs	r1, #0
 8011c42:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011c46:	4620      	mov	r0, r4
 8011c48:	4798      	blx	r3
 8011c4a:	2000      	movs	r0, #0
 8011c4c:	e7e0      	b.n	8011c10 <_raise_r+0x12>
	...

08011c50 <raise>:
 8011c50:	4b02      	ldr	r3, [pc, #8]	@ (8011c5c <raise+0xc>)
 8011c52:	4601      	mov	r1, r0
 8011c54:	6818      	ldr	r0, [r3, #0]
 8011c56:	f7ff bfd2 	b.w	8011bfe <_raise_r>
 8011c5a:	bf00      	nop
 8011c5c:	24000118 	.word	0x24000118

08011c60 <_kill_r>:
 8011c60:	b538      	push	{r3, r4, r5, lr}
 8011c62:	4d07      	ldr	r5, [pc, #28]	@ (8011c80 <_kill_r+0x20>)
 8011c64:	2300      	movs	r3, #0
 8011c66:	4604      	mov	r4, r0
 8011c68:	4608      	mov	r0, r1
 8011c6a:	4611      	mov	r1, r2
 8011c6c:	602b      	str	r3, [r5, #0]
 8011c6e:	f7ef feb5 	bl	80019dc <_kill>
 8011c72:	1c43      	adds	r3, r0, #1
 8011c74:	d102      	bne.n	8011c7c <_kill_r+0x1c>
 8011c76:	682b      	ldr	r3, [r5, #0]
 8011c78:	b103      	cbz	r3, 8011c7c <_kill_r+0x1c>
 8011c7a:	6023      	str	r3, [r4, #0]
 8011c7c:	bd38      	pop	{r3, r4, r5, pc}
 8011c7e:	bf00      	nop
 8011c80:	24002548 	.word	0x24002548

08011c84 <_getpid_r>:
 8011c84:	f7ef bea2 	b.w	80019cc <_getpid>

08011c88 <atan2f>:
 8011c88:	f000 bada 	b.w	8012240 <__ieee754_atan2f>

08011c8c <sqrtf>:
 8011c8c:	b508      	push	{r3, lr}
 8011c8e:	ed2d 8b02 	vpush	{d8}
 8011c92:	eeb0 8a40 	vmov.f32	s16, s0
 8011c96:	f000 f9f0 	bl	801207a <__ieee754_sqrtf>
 8011c9a:	eeb4 8a48 	vcmp.f32	s16, s16
 8011c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca2:	d60c      	bvs.n	8011cbe <sqrtf+0x32>
 8011ca4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011cc4 <sqrtf+0x38>
 8011ca8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb0:	d505      	bpl.n	8011cbe <sqrtf+0x32>
 8011cb2:	f7fe f985 	bl	800ffc0 <__errno>
 8011cb6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011cba:	2321      	movs	r3, #33	@ 0x21
 8011cbc:	6003      	str	r3, [r0, #0]
 8011cbe:	ecbd 8b02 	vpop	{d8}
 8011cc2:	bd08      	pop	{r3, pc}
 8011cc4:	00000000 	.word	0x00000000

08011cc8 <tanf>:
 8011cc8:	ee10 3a10 	vmov	r3, s0
 8011ccc:	b507      	push	{r0, r1, r2, lr}
 8011cce:	4a12      	ldr	r2, [pc, #72]	@ (8011d18 <tanf+0x50>)
 8011cd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011cd4:	4293      	cmp	r3, r2
 8011cd6:	d807      	bhi.n	8011ce8 <tanf+0x20>
 8011cd8:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8011d1c <tanf+0x54>
 8011cdc:	2001      	movs	r0, #1
 8011cde:	b003      	add	sp, #12
 8011ce0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ce4:	f000 b9cc 	b.w	8012080 <__kernel_tanf>
 8011ce8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011cec:	d304      	bcc.n	8011cf8 <tanf+0x30>
 8011cee:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011cf2:	b003      	add	sp, #12
 8011cf4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011cf8:	4668      	mov	r0, sp
 8011cfa:	f000 fb3f 	bl	801237c <__ieee754_rem_pio2f>
 8011cfe:	0040      	lsls	r0, r0, #1
 8011d00:	f000 0002 	and.w	r0, r0, #2
 8011d04:	eddd 0a01 	vldr	s1, [sp, #4]
 8011d08:	ed9d 0a00 	vldr	s0, [sp]
 8011d0c:	f1c0 0001 	rsb	r0, r0, #1
 8011d10:	f000 f9b6 	bl	8012080 <__kernel_tanf>
 8011d14:	e7ed      	b.n	8011cf2 <tanf+0x2a>
 8011d16:	bf00      	nop
 8011d18:	3f490fda 	.word	0x3f490fda
 8011d1c:	00000000 	.word	0x00000000

08011d20 <sinf_poly>:
 8011d20:	07cb      	lsls	r3, r1, #31
 8011d22:	d412      	bmi.n	8011d4a <sinf_poly+0x2a>
 8011d24:	ee21 5b00 	vmul.f64	d5, d1, d0
 8011d28:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8011d2c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8011d30:	eea6 7b01 	vfma.f64	d7, d6, d1
 8011d34:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8011d38:	ee21 1b05 	vmul.f64	d1, d1, d5
 8011d3c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8011d40:	eea7 0b01 	vfma.f64	d0, d7, d1
 8011d44:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011d48:	4770      	bx	lr
 8011d4a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8011d4e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8011d52:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8011d56:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8011d5a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8011d5e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8011d62:	eea1 0b06 	vfma.f64	d0, d1, d6
 8011d66:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8011d6a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8011d6e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8011d72:	e7e5      	b.n	8011d40 <sinf_poly+0x20>
 8011d74:	0000      	movs	r0, r0
	...

08011d78 <sinf>:
 8011d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d7a:	ee10 4a10 	vmov	r4, s0
 8011d7e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8011d82:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8011d86:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8011d8a:	eef0 7a40 	vmov.f32	s15, s0
 8011d8e:	d218      	bcs.n	8011dc2 <sinf+0x4a>
 8011d90:	ee26 1b06 	vmul.f64	d1, d6, d6
 8011d94:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8011d98:	d20a      	bcs.n	8011db0 <sinf+0x38>
 8011d9a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8011d9e:	d103      	bne.n	8011da8 <sinf+0x30>
 8011da0:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8011da4:	ed8d 1a01 	vstr	s2, [sp, #4]
 8011da8:	eeb0 0a67 	vmov.f32	s0, s15
 8011dac:	b003      	add	sp, #12
 8011dae:	bd30      	pop	{r4, r5, pc}
 8011db0:	483b      	ldr	r0, [pc, #236]	@ (8011ea0 <sinf+0x128>)
 8011db2:	eeb0 0b46 	vmov.f64	d0, d6
 8011db6:	2100      	movs	r1, #0
 8011db8:	b003      	add	sp, #12
 8011dba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011dbe:	f7ff bfaf 	b.w	8011d20 <sinf_poly>
 8011dc2:	f240 422e 	movw	r2, #1070	@ 0x42e
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d824      	bhi.n	8011e14 <sinf+0x9c>
 8011dca:	4b35      	ldr	r3, [pc, #212]	@ (8011ea0 <sinf+0x128>)
 8011dcc:	ed93 7b08 	vldr	d7, [r3, #32]
 8011dd0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8011dd4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011dd8:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8011ddc:	ee17 1a90 	vmov	r1, s15
 8011de0:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8011de4:	1609      	asrs	r1, r1, #24
 8011de6:	ee07 1a90 	vmov	s15, r1
 8011dea:	f001 0203 	and.w	r2, r1, #3
 8011dee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011df2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011df6:	ed92 0b00 	vldr	d0, [r2]
 8011dfa:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8011dfe:	f011 0f02 	tst.w	r1, #2
 8011e02:	eea5 6b47 	vfms.f64	d6, d5, d7
 8011e06:	bf08      	it	eq
 8011e08:	4618      	moveq	r0, r3
 8011e0a:	ee26 1b06 	vmul.f64	d1, d6, d6
 8011e0e:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011e12:	e7d1      	b.n	8011db8 <sinf+0x40>
 8011e14:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8011e18:	d237      	bcs.n	8011e8a <sinf+0x112>
 8011e1a:	4922      	ldr	r1, [pc, #136]	@ (8011ea4 <sinf+0x12c>)
 8011e1c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8011e20:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8011e24:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8011e28:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8011e2c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011e30:	6a10      	ldr	r0, [r2, #32]
 8011e32:	6912      	ldr	r2, [r2, #16]
 8011e34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011e38:	40ab      	lsls	r3, r5
 8011e3a:	fba0 5003 	umull	r5, r0, r0, r3
 8011e3e:	4359      	muls	r1, r3
 8011e40:	fbe3 0102 	umlal	r0, r1, r3, r2
 8011e44:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8011e48:	0f9d      	lsrs	r5, r3, #30
 8011e4a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011e4e:	1ac9      	subs	r1, r1, r3
 8011e50:	f7ee fc2c 	bl	80006ac <__aeabi_l2d>
 8011e54:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8011e58:	4b11      	ldr	r3, [pc, #68]	@ (8011ea0 <sinf+0x128>)
 8011e5a:	f004 0203 	and.w	r2, r4, #3
 8011e5e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011e62:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8011e98 <sinf+0x120>
 8011e66:	ed92 0b00 	vldr	d0, [r2]
 8011e6a:	ec41 0b17 	vmov	d7, r0, r1
 8011e6e:	f014 0f02 	tst.w	r4, #2
 8011e72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011e76:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8011e7a:	4629      	mov	r1, r5
 8011e7c:	bf08      	it	eq
 8011e7e:	4618      	moveq	r0, r3
 8011e80:	ee27 1b07 	vmul.f64	d1, d7, d7
 8011e84:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011e88:	e796      	b.n	8011db8 <sinf+0x40>
 8011e8a:	b003      	add	sp, #12
 8011e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e90:	f000 b8e4 	b.w	801205c <__math_invalidf>
 8011e94:	f3af 8000 	nop.w
 8011e98:	54442d18 	.word	0x54442d18
 8011e9c:	3c1921fb 	.word	0x3c1921fb
 8011ea0:	08013218 	.word	0x08013218
 8011ea4:	080131b4 	.word	0x080131b4

08011ea8 <sinf_poly>:
 8011ea8:	07cb      	lsls	r3, r1, #31
 8011eaa:	d412      	bmi.n	8011ed2 <sinf_poly+0x2a>
 8011eac:	ee21 5b00 	vmul.f64	d5, d1, d0
 8011eb0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8011eb4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8011eb8:	eea6 7b01 	vfma.f64	d7, d6, d1
 8011ebc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8011ec0:	ee21 1b05 	vmul.f64	d1, d1, d5
 8011ec4:	eea6 0b05 	vfma.f64	d0, d6, d5
 8011ec8:	eea7 0b01 	vfma.f64	d0, d7, d1
 8011ecc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011ed0:	4770      	bx	lr
 8011ed2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8011ed6:	ee21 5b01 	vmul.f64	d5, d1, d1
 8011eda:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8011ede:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8011ee2:	eea1 7b06 	vfma.f64	d7, d1, d6
 8011ee6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8011eea:	eea1 0b06 	vfma.f64	d0, d1, d6
 8011eee:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8011ef2:	ee21 1b05 	vmul.f64	d1, d1, d5
 8011ef6:	eea5 0b06 	vfma.f64	d0, d5, d6
 8011efa:	e7e5      	b.n	8011ec8 <sinf_poly+0x20>
 8011efc:	0000      	movs	r0, r0
	...

08011f00 <cosf>:
 8011f00:	b538      	push	{r3, r4, r5, lr}
 8011f02:	ee10 4a10 	vmov	r4, s0
 8011f06:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8011f0a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8011f0e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8011f12:	d21f      	bcs.n	8011f54 <cosf+0x54>
 8011f14:	ee27 7b07 	vmul.f64	d7, d7, d7
 8011f18:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8011f1c:	f0c0 8082 	bcc.w	8012024 <cosf+0x124>
 8011f20:	ee27 4b07 	vmul.f64	d4, d7, d7
 8011f24:	4b44      	ldr	r3, [pc, #272]	@ (8012038 <cosf+0x138>)
 8011f26:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8011f2a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8011f2e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8011f32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011f36:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8011f3a:	eea7 0b05 	vfma.f64	d0, d7, d5
 8011f3e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8011f42:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011f46:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011f4a:	eea6 0b07 	vfma.f64	d0, d6, d7
 8011f4e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011f52:	bd38      	pop	{r3, r4, r5, pc}
 8011f54:	f240 422e 	movw	r2, #1070	@ 0x42e
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	d829      	bhi.n	8011fb0 <cosf+0xb0>
 8011f5c:	4b36      	ldr	r3, [pc, #216]	@ (8012038 <cosf+0x138>)
 8011f5e:	ed93 6b08 	vldr	d6, [r3, #32]
 8011f62:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011f66:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8011f6a:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8011f6e:	ee16 1a90 	vmov	r1, s13
 8011f72:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8011f76:	1609      	asrs	r1, r1, #24
 8011f78:	ee06 1a90 	vmov	s13, r1
 8011f7c:	f001 0203 	and.w	r2, r1, #3
 8011f80:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8011f84:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8011f88:	ed92 0b00 	vldr	d0, [r2]
 8011f8c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8011f90:	f011 0f02 	tst.w	r1, #2
 8011f94:	f081 0101 	eor.w	r1, r1, #1
 8011f98:	eea5 7b46 	vfms.f64	d7, d5, d6
 8011f9c:	bf08      	it	eq
 8011f9e:	4618      	moveq	r0, r3
 8011fa0:	ee27 1b07 	vmul.f64	d1, d7, d7
 8011fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fa8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011fac:	f7ff bf7c 	b.w	8011ea8 <sinf_poly>
 8011fb0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8011fb4:	d232      	bcs.n	801201c <cosf+0x11c>
 8011fb6:	4921      	ldr	r1, [pc, #132]	@ (801203c <cosf+0x13c>)
 8011fb8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8011fbc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8011fc0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8011fc4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8011fc8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8011fcc:	6a10      	ldr	r0, [r2, #32]
 8011fce:	6912      	ldr	r2, [r2, #16]
 8011fd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011fd4:	40ab      	lsls	r3, r5
 8011fd6:	fba0 5003 	umull	r5, r0, r0, r3
 8011fda:	4359      	muls	r1, r3
 8011fdc:	fbe3 0102 	umlal	r0, r1, r3, r2
 8011fe0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8011fe4:	0f9d      	lsrs	r5, r3, #30
 8011fe6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8011fea:	1ac9      	subs	r1, r1, r3
 8011fec:	f7ee fb5e 	bl	80006ac <__aeabi_l2d>
 8011ff0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8011ff4:	4b10      	ldr	r3, [pc, #64]	@ (8012038 <cosf+0x138>)
 8011ff6:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8012030 <cosf+0x130>
 8011ffa:	ec41 0b17 	vmov	d7, r0, r1
 8011ffe:	f004 0203 	and.w	r2, r4, #3
 8012002:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012006:	ed92 0b00 	vldr	d0, [r2]
 801200a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801200e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8012012:	f014 0f02 	tst.w	r4, #2
 8012016:	f085 0101 	eor.w	r1, r5, #1
 801201a:	e7bf      	b.n	8011f9c <cosf+0x9c>
 801201c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012020:	f000 b81c 	b.w	801205c <__math_invalidf>
 8012024:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012028:	e793      	b.n	8011f52 <cosf+0x52>
 801202a:	bf00      	nop
 801202c:	f3af 8000 	nop.w
 8012030:	54442d18 	.word	0x54442d18
 8012034:	3c1921fb 	.word	0x3c1921fb
 8012038:	08013218 	.word	0x08013218
 801203c:	080131b4 	.word	0x080131b4

08012040 <with_errnof>:
 8012040:	b510      	push	{r4, lr}
 8012042:	ed2d 8b02 	vpush	{d8}
 8012046:	eeb0 8a40 	vmov.f32	s16, s0
 801204a:	4604      	mov	r4, r0
 801204c:	f7fd ffb8 	bl	800ffc0 <__errno>
 8012050:	eeb0 0a48 	vmov.f32	s0, s16
 8012054:	ecbd 8b02 	vpop	{d8}
 8012058:	6004      	str	r4, [r0, #0]
 801205a:	bd10      	pop	{r4, pc}

0801205c <__math_invalidf>:
 801205c:	eef0 7a40 	vmov.f32	s15, s0
 8012060:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012064:	eef4 7a67 	vcmp.f32	s15, s15
 8012068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8012070:	d602      	bvs.n	8012078 <__math_invalidf+0x1c>
 8012072:	2021      	movs	r0, #33	@ 0x21
 8012074:	f7ff bfe4 	b.w	8012040 <with_errnof>
 8012078:	4770      	bx	lr

0801207a <__ieee754_sqrtf>:
 801207a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801207e:	4770      	bx	lr

08012080 <__kernel_tanf>:
 8012080:	b508      	push	{r3, lr}
 8012082:	ee10 3a10 	vmov	r3, s0
 8012086:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801208a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 801208e:	eef0 7a40 	vmov.f32	s15, s0
 8012092:	d217      	bcs.n	80120c4 <__kernel_tanf+0x44>
 8012094:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8012098:	ee17 1a10 	vmov	r1, s14
 801209c:	bb41      	cbnz	r1, 80120f0 <__kernel_tanf+0x70>
 801209e:	1c43      	adds	r3, r0, #1
 80120a0:	4313      	orrs	r3, r2
 80120a2:	d108      	bne.n	80120b6 <__kernel_tanf+0x36>
 80120a4:	f000 fb6e 	bl	8012784 <fabsf>
 80120a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80120ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80120b0:	eeb0 0a67 	vmov.f32	s0, s15
 80120b4:	bd08      	pop	{r3, pc}
 80120b6:	2801      	cmp	r0, #1
 80120b8:	d0fa      	beq.n	80120b0 <__kernel_tanf+0x30>
 80120ba:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80120be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80120c2:	e7f5      	b.n	80120b0 <__kernel_tanf+0x30>
 80120c4:	494c      	ldr	r1, [pc, #304]	@ (80121f8 <__kernel_tanf+0x178>)
 80120c6:	428a      	cmp	r2, r1
 80120c8:	d312      	bcc.n	80120f0 <__kernel_tanf+0x70>
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80121fc <__kernel_tanf+0x17c>
 80120d0:	bfb8      	it	lt
 80120d2:	eef1 7a40 	vneglt.f32	s15, s0
 80120d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80120da:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8012200 <__kernel_tanf+0x180>
 80120de:	bfb8      	it	lt
 80120e0:	eef1 0a60 	vneglt.f32	s1, s1
 80120e4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80120e8:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8012204 <__kernel_tanf+0x184>
 80120ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80120f0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80120f4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8012208 <__kernel_tanf+0x188>
 80120f8:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801220c <__kernel_tanf+0x18c>
 80120fc:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8012210 <__kernel_tanf+0x190>
 8012100:	493d      	ldr	r1, [pc, #244]	@ (80121f8 <__kernel_tanf+0x178>)
 8012102:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8012106:	428a      	cmp	r2, r1
 8012108:	eea7 6a25 	vfma.f32	s12, s14, s11
 801210c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8012214 <__kernel_tanf+0x194>
 8012110:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012114:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8012218 <__kernel_tanf+0x198>
 8012118:	eea5 6a87 	vfma.f32	s12, s11, s14
 801211c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801221c <__kernel_tanf+0x19c>
 8012120:	eee6 5a07 	vfma.f32	s11, s12, s14
 8012124:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8012220 <__kernel_tanf+0x1a0>
 8012128:	eea5 6a87 	vfma.f32	s12, s11, s14
 801212c:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8012224 <__kernel_tanf+0x1a4>
 8012130:	eee7 5a05 	vfma.f32	s11, s14, s10
 8012134:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8012228 <__kernel_tanf+0x1a8>
 8012138:	eea5 5a87 	vfma.f32	s10, s11, s14
 801213c:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801222c <__kernel_tanf+0x1ac>
 8012140:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012144:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8012230 <__kernel_tanf+0x1b0>
 8012148:	eea5 5a87 	vfma.f32	s10, s11, s14
 801214c:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8012234 <__kernel_tanf+0x1b4>
 8012150:	eee5 5a07 	vfma.f32	s11, s10, s14
 8012154:	eeb0 7a46 	vmov.f32	s14, s12
 8012158:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801215c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8012160:	eeb0 6a60 	vmov.f32	s12, s1
 8012164:	eea7 6a05 	vfma.f32	s12, s14, s10
 8012168:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8012238 <__kernel_tanf+0x1b8>
 801216c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8012170:	eee5 0a07 	vfma.f32	s1, s10, s14
 8012174:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8012178:	d31d      	bcc.n	80121b6 <__kernel_tanf+0x136>
 801217a:	ee07 0a10 	vmov	s14, r0
 801217e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012182:	ee26 5a06 	vmul.f32	s10, s12, s12
 8012186:	ee36 6a07 	vadd.f32	s12, s12, s14
 801218a:	179b      	asrs	r3, r3, #30
 801218c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8012190:	f003 0302 	and.w	r3, r3, #2
 8012194:	f1c3 0301 	rsb	r3, r3, #1
 8012198:	ee06 3a90 	vmov	s13, r3
 801219c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80121a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80121a4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80121a8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80121ac:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80121b0:	ee66 7a87 	vmul.f32	s15, s13, s14
 80121b4:	e77c      	b.n	80120b0 <__kernel_tanf+0x30>
 80121b6:	2801      	cmp	r0, #1
 80121b8:	d01b      	beq.n	80121f2 <__kernel_tanf+0x172>
 80121ba:	4b20      	ldr	r3, [pc, #128]	@ (801223c <__kernel_tanf+0x1bc>)
 80121bc:	ee16 2a10 	vmov	r2, s12
 80121c0:	401a      	ands	r2, r3
 80121c2:	ee05 2a90 	vmov	s11, r2
 80121c6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80121ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80121ce:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80121d2:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80121d6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80121da:	ee16 2a90 	vmov	r2, s13
 80121de:	4013      	ands	r3, r2
 80121e0:	ee07 3a90 	vmov	s15, r3
 80121e4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80121e8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80121ec:	eee7 7a26 	vfma.f32	s15, s14, s13
 80121f0:	e75e      	b.n	80120b0 <__kernel_tanf+0x30>
 80121f2:	eef0 7a46 	vmov.f32	s15, s12
 80121f6:	e75b      	b.n	80120b0 <__kernel_tanf+0x30>
 80121f8:	3f2ca140 	.word	0x3f2ca140
 80121fc:	3f490fda 	.word	0x3f490fda
 8012200:	33222168 	.word	0x33222168
 8012204:	00000000 	.word	0x00000000
 8012208:	b79bae5f 	.word	0xb79bae5f
 801220c:	38a3f445 	.word	0x38a3f445
 8012210:	37d95384 	.word	0x37d95384
 8012214:	3a1a26c8 	.word	0x3a1a26c8
 8012218:	3b6b6916 	.word	0x3b6b6916
 801221c:	3cb327a4 	.word	0x3cb327a4
 8012220:	3e088889 	.word	0x3e088889
 8012224:	3895c07a 	.word	0x3895c07a
 8012228:	398137b9 	.word	0x398137b9
 801222c:	3abede48 	.word	0x3abede48
 8012230:	3c11371f 	.word	0x3c11371f
 8012234:	3d5d0dd1 	.word	0x3d5d0dd1
 8012238:	3eaaaaab 	.word	0x3eaaaaab
 801223c:	fffff000 	.word	0xfffff000

08012240 <__ieee754_atan2f>:
 8012240:	ee10 2a90 	vmov	r2, s1
 8012244:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8012248:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801224c:	b510      	push	{r4, lr}
 801224e:	eef0 7a40 	vmov.f32	s15, s0
 8012252:	d806      	bhi.n	8012262 <__ieee754_atan2f+0x22>
 8012254:	ee10 0a10 	vmov	r0, s0
 8012258:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801225c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012260:	d904      	bls.n	801226c <__ieee754_atan2f+0x2c>
 8012262:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012266:	eeb0 0a67 	vmov.f32	s0, s15
 801226a:	bd10      	pop	{r4, pc}
 801226c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8012270:	d103      	bne.n	801227a <__ieee754_atan2f+0x3a>
 8012272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012276:	f000 b9b1 	b.w	80125dc <atanf>
 801227a:	1794      	asrs	r4, r2, #30
 801227c:	f004 0402 	and.w	r4, r4, #2
 8012280:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012284:	b93b      	cbnz	r3, 8012296 <__ieee754_atan2f+0x56>
 8012286:	2c02      	cmp	r4, #2
 8012288:	d05c      	beq.n	8012344 <__ieee754_atan2f+0x104>
 801228a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8012358 <__ieee754_atan2f+0x118>
 801228e:	2c03      	cmp	r4, #3
 8012290:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8012294:	e7e7      	b.n	8012266 <__ieee754_atan2f+0x26>
 8012296:	b939      	cbnz	r1, 80122a8 <__ieee754_atan2f+0x68>
 8012298:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801235c <__ieee754_atan2f+0x11c>
 801229c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8012360 <__ieee754_atan2f+0x120>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	fe67 7a27 	vselge.f32	s15, s14, s15
 80122a6:	e7de      	b.n	8012266 <__ieee754_atan2f+0x26>
 80122a8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80122ac:	d110      	bne.n	80122d0 <__ieee754_atan2f+0x90>
 80122ae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80122b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80122b6:	d107      	bne.n	80122c8 <__ieee754_atan2f+0x88>
 80122b8:	2c02      	cmp	r4, #2
 80122ba:	d846      	bhi.n	801234a <__ieee754_atan2f+0x10a>
 80122bc:	4b29      	ldr	r3, [pc, #164]	@ (8012364 <__ieee754_atan2f+0x124>)
 80122be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80122c2:	edd3 7a00 	vldr	s15, [r3]
 80122c6:	e7ce      	b.n	8012266 <__ieee754_atan2f+0x26>
 80122c8:	2c02      	cmp	r4, #2
 80122ca:	d841      	bhi.n	8012350 <__ieee754_atan2f+0x110>
 80122cc:	4b26      	ldr	r3, [pc, #152]	@ (8012368 <__ieee754_atan2f+0x128>)
 80122ce:	e7f6      	b.n	80122be <__ieee754_atan2f+0x7e>
 80122d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80122d4:	d0e0      	beq.n	8012298 <__ieee754_atan2f+0x58>
 80122d6:	1a5b      	subs	r3, r3, r1
 80122d8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80122dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80122e0:	da1a      	bge.n	8012318 <__ieee754_atan2f+0xd8>
 80122e2:	2a00      	cmp	r2, #0
 80122e4:	da01      	bge.n	80122ea <__ieee754_atan2f+0xaa>
 80122e6:	313c      	adds	r1, #60	@ 0x3c
 80122e8:	db19      	blt.n	801231e <__ieee754_atan2f+0xde>
 80122ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80122ee:	f000 fa49 	bl	8012784 <fabsf>
 80122f2:	f000 f973 	bl	80125dc <atanf>
 80122f6:	eef0 7a40 	vmov.f32	s15, s0
 80122fa:	2c01      	cmp	r4, #1
 80122fc:	d012      	beq.n	8012324 <__ieee754_atan2f+0xe4>
 80122fe:	2c02      	cmp	r4, #2
 8012300:	d017      	beq.n	8012332 <__ieee754_atan2f+0xf2>
 8012302:	2c00      	cmp	r4, #0
 8012304:	d0af      	beq.n	8012266 <__ieee754_atan2f+0x26>
 8012306:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801236c <__ieee754_atan2f+0x12c>
 801230a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801230e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8012370 <__ieee754_atan2f+0x130>
 8012312:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012316:	e7a6      	b.n	8012266 <__ieee754_atan2f+0x26>
 8012318:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012360 <__ieee754_atan2f+0x120>
 801231c:	e7ed      	b.n	80122fa <__ieee754_atan2f+0xba>
 801231e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8012374 <__ieee754_atan2f+0x134>
 8012322:	e7ea      	b.n	80122fa <__ieee754_atan2f+0xba>
 8012324:	ee17 3a90 	vmov	r3, s15
 8012328:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801232c:	ee07 3a90 	vmov	s15, r3
 8012330:	e799      	b.n	8012266 <__ieee754_atan2f+0x26>
 8012332:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801236c <__ieee754_atan2f+0x12c>
 8012336:	ee77 7a87 	vadd.f32	s15, s15, s14
 801233a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8012370 <__ieee754_atan2f+0x130>
 801233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012342:	e790      	b.n	8012266 <__ieee754_atan2f+0x26>
 8012344:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8012370 <__ieee754_atan2f+0x130>
 8012348:	e78d      	b.n	8012266 <__ieee754_atan2f+0x26>
 801234a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8012378 <__ieee754_atan2f+0x138>
 801234e:	e78a      	b.n	8012266 <__ieee754_atan2f+0x26>
 8012350:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8012374 <__ieee754_atan2f+0x134>
 8012354:	e787      	b.n	8012266 <__ieee754_atan2f+0x26>
 8012356:	bf00      	nop
 8012358:	c0490fdb 	.word	0xc0490fdb
 801235c:	bfc90fdb 	.word	0xbfc90fdb
 8012360:	3fc90fdb 	.word	0x3fc90fdb
 8012364:	08013304 	.word	0x08013304
 8012368:	080132f8 	.word	0x080132f8
 801236c:	33bbbd2e 	.word	0x33bbbd2e
 8012370:	40490fdb 	.word	0x40490fdb
 8012374:	00000000 	.word	0x00000000
 8012378:	3f490fdb 	.word	0x3f490fdb

0801237c <__ieee754_rem_pio2f>:
 801237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801237e:	ee10 6a10 	vmov	r6, s0
 8012382:	4b88      	ldr	r3, [pc, #544]	@ (80125a4 <__ieee754_rem_pio2f+0x228>)
 8012384:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8012388:	429d      	cmp	r5, r3
 801238a:	b087      	sub	sp, #28
 801238c:	4604      	mov	r4, r0
 801238e:	d805      	bhi.n	801239c <__ieee754_rem_pio2f+0x20>
 8012390:	2300      	movs	r3, #0
 8012392:	ed80 0a00 	vstr	s0, [r0]
 8012396:	6043      	str	r3, [r0, #4]
 8012398:	2000      	movs	r0, #0
 801239a:	e022      	b.n	80123e2 <__ieee754_rem_pio2f+0x66>
 801239c:	4b82      	ldr	r3, [pc, #520]	@ (80125a8 <__ieee754_rem_pio2f+0x22c>)
 801239e:	429d      	cmp	r5, r3
 80123a0:	d83a      	bhi.n	8012418 <__ieee754_rem_pio2f+0x9c>
 80123a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80123a6:	2e00      	cmp	r6, #0
 80123a8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80125ac <__ieee754_rem_pio2f+0x230>
 80123ac:	4a80      	ldr	r2, [pc, #512]	@ (80125b0 <__ieee754_rem_pio2f+0x234>)
 80123ae:	f023 030f 	bic.w	r3, r3, #15
 80123b2:	dd18      	ble.n	80123e6 <__ieee754_rem_pio2f+0x6a>
 80123b4:	4293      	cmp	r3, r2
 80123b6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80123ba:	bf09      	itett	eq
 80123bc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80125b4 <__ieee754_rem_pio2f+0x238>
 80123c0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80125b8 <__ieee754_rem_pio2f+0x23c>
 80123c4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80125bc <__ieee754_rem_pio2f+0x240>
 80123c8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80123cc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80123d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80123d4:	ed80 7a00 	vstr	s14, [r0]
 80123d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80123dc:	edc0 7a01 	vstr	s15, [r0, #4]
 80123e0:	2001      	movs	r0, #1
 80123e2:	b007      	add	sp, #28
 80123e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123e6:	4293      	cmp	r3, r2
 80123e8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80123ec:	bf09      	itett	eq
 80123ee:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80125b4 <__ieee754_rem_pio2f+0x238>
 80123f2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80125b8 <__ieee754_rem_pio2f+0x23c>
 80123f6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80125bc <__ieee754_rem_pio2f+0x240>
 80123fa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80123fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012402:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012406:	ed80 7a00 	vstr	s14, [r0]
 801240a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801240e:	edc0 7a01 	vstr	s15, [r0, #4]
 8012412:	f04f 30ff 	mov.w	r0, #4294967295
 8012416:	e7e4      	b.n	80123e2 <__ieee754_rem_pio2f+0x66>
 8012418:	4b69      	ldr	r3, [pc, #420]	@ (80125c0 <__ieee754_rem_pio2f+0x244>)
 801241a:	429d      	cmp	r5, r3
 801241c:	d873      	bhi.n	8012506 <__ieee754_rem_pio2f+0x18a>
 801241e:	f000 f9b1 	bl	8012784 <fabsf>
 8012422:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80125c4 <__ieee754_rem_pio2f+0x248>
 8012426:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801242a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801242e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012436:	ee17 0a90 	vmov	r0, s15
 801243a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80125ac <__ieee754_rem_pio2f+0x230>
 801243e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012442:	281f      	cmp	r0, #31
 8012444:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80125b8 <__ieee754_rem_pio2f+0x23c>
 8012448:	ee67 7a27 	vmul.f32	s15, s14, s15
 801244c:	eeb1 6a47 	vneg.f32	s12, s14
 8012450:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012454:	ee16 1a90 	vmov	r1, s13
 8012458:	dc09      	bgt.n	801246e <__ieee754_rem_pio2f+0xf2>
 801245a:	4a5b      	ldr	r2, [pc, #364]	@ (80125c8 <__ieee754_rem_pio2f+0x24c>)
 801245c:	1e47      	subs	r7, r0, #1
 801245e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012462:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012466:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801246a:	4293      	cmp	r3, r2
 801246c:	d107      	bne.n	801247e <__ieee754_rem_pio2f+0x102>
 801246e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012472:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8012476:	2a08      	cmp	r2, #8
 8012478:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801247c:	dc14      	bgt.n	80124a8 <__ieee754_rem_pio2f+0x12c>
 801247e:	6021      	str	r1, [r4, #0]
 8012480:	ed94 7a00 	vldr	s14, [r4]
 8012484:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012488:	2e00      	cmp	r6, #0
 801248a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801248e:	ed84 0a01 	vstr	s0, [r4, #4]
 8012492:	daa6      	bge.n	80123e2 <__ieee754_rem_pio2f+0x66>
 8012494:	eeb1 7a47 	vneg.f32	s14, s14
 8012498:	eeb1 0a40 	vneg.f32	s0, s0
 801249c:	ed84 7a00 	vstr	s14, [r4]
 80124a0:	ed84 0a01 	vstr	s0, [r4, #4]
 80124a4:	4240      	negs	r0, r0
 80124a6:	e79c      	b.n	80123e2 <__ieee754_rem_pio2f+0x66>
 80124a8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80125b4 <__ieee754_rem_pio2f+0x238>
 80124ac:	eef0 6a40 	vmov.f32	s13, s0
 80124b0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80124b4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80124b8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80124bc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80125bc <__ieee754_rem_pio2f+0x240>
 80124c0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80124c4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80124c8:	ee15 2a90 	vmov	r2, s11
 80124cc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80124d0:	1a5b      	subs	r3, r3, r1
 80124d2:	2b19      	cmp	r3, #25
 80124d4:	dc04      	bgt.n	80124e0 <__ieee754_rem_pio2f+0x164>
 80124d6:	edc4 5a00 	vstr	s11, [r4]
 80124da:	eeb0 0a66 	vmov.f32	s0, s13
 80124de:	e7cf      	b.n	8012480 <__ieee754_rem_pio2f+0x104>
 80124e0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80125cc <__ieee754_rem_pio2f+0x250>
 80124e4:	eeb0 0a66 	vmov.f32	s0, s13
 80124e8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80124ec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80124f0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80125d0 <__ieee754_rem_pio2f+0x254>
 80124f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80124f8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80124fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012500:	ed84 7a00 	vstr	s14, [r4]
 8012504:	e7bc      	b.n	8012480 <__ieee754_rem_pio2f+0x104>
 8012506:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801250a:	d306      	bcc.n	801251a <__ieee754_rem_pio2f+0x19e>
 801250c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012510:	edc0 7a01 	vstr	s15, [r0, #4]
 8012514:	edc0 7a00 	vstr	s15, [r0]
 8012518:	e73e      	b.n	8012398 <__ieee754_rem_pio2f+0x1c>
 801251a:	15ea      	asrs	r2, r5, #23
 801251c:	3a86      	subs	r2, #134	@ 0x86
 801251e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012522:	ee07 3a90 	vmov	s15, r3
 8012526:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801252a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80125d4 <__ieee754_rem_pio2f+0x258>
 801252e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012532:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012536:	ed8d 7a03 	vstr	s14, [sp, #12]
 801253a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801253e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801254a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801254e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012552:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801255a:	edcd 7a05 	vstr	s15, [sp, #20]
 801255e:	d11e      	bne.n	801259e <__ieee754_rem_pio2f+0x222>
 8012560:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012568:	bf0c      	ite	eq
 801256a:	2301      	moveq	r3, #1
 801256c:	2302      	movne	r3, #2
 801256e:	491a      	ldr	r1, [pc, #104]	@ (80125d8 <__ieee754_rem_pio2f+0x25c>)
 8012570:	9101      	str	r1, [sp, #4]
 8012572:	2102      	movs	r1, #2
 8012574:	9100      	str	r1, [sp, #0]
 8012576:	a803      	add	r0, sp, #12
 8012578:	4621      	mov	r1, r4
 801257a:	f000 f90b 	bl	8012794 <__kernel_rem_pio2f>
 801257e:	2e00      	cmp	r6, #0
 8012580:	f6bf af2f 	bge.w	80123e2 <__ieee754_rem_pio2f+0x66>
 8012584:	edd4 7a00 	vldr	s15, [r4]
 8012588:	eef1 7a67 	vneg.f32	s15, s15
 801258c:	edc4 7a00 	vstr	s15, [r4]
 8012590:	edd4 7a01 	vldr	s15, [r4, #4]
 8012594:	eef1 7a67 	vneg.f32	s15, s15
 8012598:	edc4 7a01 	vstr	s15, [r4, #4]
 801259c:	e782      	b.n	80124a4 <__ieee754_rem_pio2f+0x128>
 801259e:	2303      	movs	r3, #3
 80125a0:	e7e5      	b.n	801256e <__ieee754_rem_pio2f+0x1f2>
 80125a2:	bf00      	nop
 80125a4:	3f490fd8 	.word	0x3f490fd8
 80125a8:	4016cbe3 	.word	0x4016cbe3
 80125ac:	3fc90f80 	.word	0x3fc90f80
 80125b0:	3fc90fd0 	.word	0x3fc90fd0
 80125b4:	37354400 	.word	0x37354400
 80125b8:	37354443 	.word	0x37354443
 80125bc:	2e85a308 	.word	0x2e85a308
 80125c0:	43490f80 	.word	0x43490f80
 80125c4:	3f22f984 	.word	0x3f22f984
 80125c8:	08013310 	.word	0x08013310
 80125cc:	2e85a300 	.word	0x2e85a300
 80125d0:	248d3132 	.word	0x248d3132
 80125d4:	43800000 	.word	0x43800000
 80125d8:	08013390 	.word	0x08013390

080125dc <atanf>:
 80125dc:	b538      	push	{r3, r4, r5, lr}
 80125de:	ee10 5a10 	vmov	r5, s0
 80125e2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80125e6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80125ea:	eef0 7a40 	vmov.f32	s15, s0
 80125ee:	d30f      	bcc.n	8012610 <atanf+0x34>
 80125f0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80125f4:	d904      	bls.n	8012600 <atanf+0x24>
 80125f6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80125fa:	eeb0 0a67 	vmov.f32	s0, s15
 80125fe:	bd38      	pop	{r3, r4, r5, pc}
 8012600:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8012738 <atanf+0x15c>
 8012604:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801273c <atanf+0x160>
 8012608:	2d00      	cmp	r5, #0
 801260a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 801260e:	e7f4      	b.n	80125fa <atanf+0x1e>
 8012610:	4b4b      	ldr	r3, [pc, #300]	@ (8012740 <atanf+0x164>)
 8012612:	429c      	cmp	r4, r3
 8012614:	d810      	bhi.n	8012638 <atanf+0x5c>
 8012616:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801261a:	d20a      	bcs.n	8012632 <atanf+0x56>
 801261c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8012744 <atanf+0x168>
 8012620:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012624:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012628:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012630:	dce3      	bgt.n	80125fa <atanf+0x1e>
 8012632:	f04f 33ff 	mov.w	r3, #4294967295
 8012636:	e013      	b.n	8012660 <atanf+0x84>
 8012638:	f000 f8a4 	bl	8012784 <fabsf>
 801263c:	4b42      	ldr	r3, [pc, #264]	@ (8012748 <atanf+0x16c>)
 801263e:	429c      	cmp	r4, r3
 8012640:	d84f      	bhi.n	80126e2 <atanf+0x106>
 8012642:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8012646:	429c      	cmp	r4, r3
 8012648:	d841      	bhi.n	80126ce <atanf+0xf2>
 801264a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801264e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012652:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012656:	2300      	movs	r3, #0
 8012658:	ee30 0a27 	vadd.f32	s0, s0, s15
 801265c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012660:	1c5a      	adds	r2, r3, #1
 8012662:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012666:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 801274c <atanf+0x170>
 801266a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8012750 <atanf+0x174>
 801266e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8012754 <atanf+0x178>
 8012672:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012676:	eee6 5a87 	vfma.f32	s11, s13, s14
 801267a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8012758 <atanf+0x17c>
 801267e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012682:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801275c <atanf+0x180>
 8012686:	eee7 5a26 	vfma.f32	s11, s14, s13
 801268a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8012760 <atanf+0x184>
 801268e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012692:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8012764 <atanf+0x188>
 8012696:	eee7 5a26 	vfma.f32	s11, s14, s13
 801269a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8012768 <atanf+0x18c>
 801269e:	eea6 5a87 	vfma.f32	s10, s13, s14
 80126a2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801276c <atanf+0x190>
 80126a6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80126aa:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8012770 <atanf+0x194>
 80126ae:	eea7 5a26 	vfma.f32	s10, s14, s13
 80126b2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8012774 <atanf+0x198>
 80126b6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80126ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 80126be:	eea5 7a86 	vfma.f32	s14, s11, s12
 80126c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80126c6:	d121      	bne.n	801270c <atanf+0x130>
 80126c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126cc:	e795      	b.n	80125fa <atanf+0x1e>
 80126ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80126d2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80126d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80126da:	2301      	movs	r3, #1
 80126dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80126e0:	e7be      	b.n	8012660 <atanf+0x84>
 80126e2:	4b25      	ldr	r3, [pc, #148]	@ (8012778 <atanf+0x19c>)
 80126e4:	429c      	cmp	r4, r3
 80126e6:	d80b      	bhi.n	8012700 <atanf+0x124>
 80126e8:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80126ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80126f0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80126f4:	2302      	movs	r3, #2
 80126f6:	ee70 6a67 	vsub.f32	s13, s0, s15
 80126fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80126fe:	e7af      	b.n	8012660 <atanf+0x84>
 8012700:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012704:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012708:	2303      	movs	r3, #3
 801270a:	e7a9      	b.n	8012660 <atanf+0x84>
 801270c:	4a1b      	ldr	r2, [pc, #108]	@ (801277c <atanf+0x1a0>)
 801270e:	491c      	ldr	r1, [pc, #112]	@ (8012780 <atanf+0x1a4>)
 8012710:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012714:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012718:	edd3 6a00 	vldr	s13, [r3]
 801271c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012720:	2d00      	cmp	r5, #0
 8012722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012726:	edd2 7a00 	vldr	s15, [r2]
 801272a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801272e:	bfb8      	it	lt
 8012730:	eef1 7a67 	vneglt.f32	s15, s15
 8012734:	e761      	b.n	80125fa <atanf+0x1e>
 8012736:	bf00      	nop
 8012738:	bfc90fdb 	.word	0xbfc90fdb
 801273c:	3fc90fdb 	.word	0x3fc90fdb
 8012740:	3edfffff 	.word	0x3edfffff
 8012744:	7149f2ca 	.word	0x7149f2ca
 8012748:	3f97ffff 	.word	0x3f97ffff
 801274c:	3c8569d7 	.word	0x3c8569d7
 8012750:	3d4bda59 	.word	0x3d4bda59
 8012754:	bd6ef16b 	.word	0xbd6ef16b
 8012758:	3d886b35 	.word	0x3d886b35
 801275c:	3dba2e6e 	.word	0x3dba2e6e
 8012760:	3e124925 	.word	0x3e124925
 8012764:	3eaaaaab 	.word	0x3eaaaaab
 8012768:	bd15a221 	.word	0xbd15a221
 801276c:	bd9d8795 	.word	0xbd9d8795
 8012770:	bde38e38 	.word	0xbde38e38
 8012774:	be4ccccd 	.word	0xbe4ccccd
 8012778:	401bffff 	.word	0x401bffff
 801277c:	080136b8 	.word	0x080136b8
 8012780:	080136a8 	.word	0x080136a8

08012784 <fabsf>:
 8012784:	ee10 3a10 	vmov	r3, s0
 8012788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801278c:	ee00 3a10 	vmov	s0, r3
 8012790:	4770      	bx	lr
	...

08012794 <__kernel_rem_pio2f>:
 8012794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012798:	ed2d 8b04 	vpush	{d8-d9}
 801279c:	b0d9      	sub	sp, #356	@ 0x164
 801279e:	4690      	mov	r8, r2
 80127a0:	9001      	str	r0, [sp, #4]
 80127a2:	4ab6      	ldr	r2, [pc, #728]	@ (8012a7c <__kernel_rem_pio2f+0x2e8>)
 80127a4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80127a6:	f118 0f04 	cmn.w	r8, #4
 80127aa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80127ae:	460f      	mov	r7, r1
 80127b0:	f103 3bff 	add.w	fp, r3, #4294967295
 80127b4:	db26      	blt.n	8012804 <__kernel_rem_pio2f+0x70>
 80127b6:	f1b8 0203 	subs.w	r2, r8, #3
 80127ba:	bf48      	it	mi
 80127bc:	f108 0204 	addmi.w	r2, r8, #4
 80127c0:	10d2      	asrs	r2, r2, #3
 80127c2:	1c55      	adds	r5, r2, #1
 80127c4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80127c6:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8012a8c <__kernel_rem_pio2f+0x2f8>
 80127ca:	00e8      	lsls	r0, r5, #3
 80127cc:	eba2 060b 	sub.w	r6, r2, fp
 80127d0:	9002      	str	r0, [sp, #8]
 80127d2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80127d6:	eb0a 0c0b 	add.w	ip, sl, fp
 80127da:	ac1c      	add	r4, sp, #112	@ 0x70
 80127dc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80127e0:	2000      	movs	r0, #0
 80127e2:	4560      	cmp	r0, ip
 80127e4:	dd10      	ble.n	8012808 <__kernel_rem_pio2f+0x74>
 80127e6:	a91c      	add	r1, sp, #112	@ 0x70
 80127e8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80127ec:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80127f0:	2600      	movs	r6, #0
 80127f2:	4556      	cmp	r6, sl
 80127f4:	dc24      	bgt.n	8012840 <__kernel_rem_pio2f+0xac>
 80127f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80127fa:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8012a8c <__kernel_rem_pio2f+0x2f8>
 80127fe:	4684      	mov	ip, r0
 8012800:	2400      	movs	r4, #0
 8012802:	e016      	b.n	8012832 <__kernel_rem_pio2f+0x9e>
 8012804:	2200      	movs	r2, #0
 8012806:	e7dc      	b.n	80127c2 <__kernel_rem_pio2f+0x2e>
 8012808:	42c6      	cmn	r6, r0
 801280a:	bf5d      	ittte	pl
 801280c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8012810:	ee07 1a90 	vmovpl	s15, r1
 8012814:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8012818:	eef0 7a47 	vmovmi.f32	s15, s14
 801281c:	ece4 7a01 	vstmia	r4!, {s15}
 8012820:	3001      	adds	r0, #1
 8012822:	e7de      	b.n	80127e2 <__kernel_rem_pio2f+0x4e>
 8012824:	ecfe 6a01 	vldmia	lr!, {s13}
 8012828:	ed3c 7a01 	vldmdb	ip!, {s14}
 801282c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012830:	3401      	adds	r4, #1
 8012832:	455c      	cmp	r4, fp
 8012834:	ddf6      	ble.n	8012824 <__kernel_rem_pio2f+0x90>
 8012836:	ece9 7a01 	vstmia	r9!, {s15}
 801283a:	3601      	adds	r6, #1
 801283c:	3004      	adds	r0, #4
 801283e:	e7d8      	b.n	80127f2 <__kernel_rem_pio2f+0x5e>
 8012840:	a908      	add	r1, sp, #32
 8012842:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012846:	9104      	str	r1, [sp, #16]
 8012848:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801284a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8012a88 <__kernel_rem_pio2f+0x2f4>
 801284e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8012a84 <__kernel_rem_pio2f+0x2f0>
 8012852:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012856:	9203      	str	r2, [sp, #12]
 8012858:	4654      	mov	r4, sl
 801285a:	00a2      	lsls	r2, r4, #2
 801285c:	9205      	str	r2, [sp, #20]
 801285e:	aa58      	add	r2, sp, #352	@ 0x160
 8012860:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8012864:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8012868:	a944      	add	r1, sp, #272	@ 0x110
 801286a:	aa08      	add	r2, sp, #32
 801286c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8012870:	4694      	mov	ip, r2
 8012872:	4626      	mov	r6, r4
 8012874:	2e00      	cmp	r6, #0
 8012876:	dc4c      	bgt.n	8012912 <__kernel_rem_pio2f+0x17e>
 8012878:	4628      	mov	r0, r5
 801287a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801287e:	f000 f9f1 	bl	8012c64 <scalbnf>
 8012882:	eeb0 8a40 	vmov.f32	s16, s0
 8012886:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801288a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801288e:	f000 fa4d 	bl	8012d2c <floorf>
 8012892:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8012896:	eea0 8a67 	vfms.f32	s16, s0, s15
 801289a:	2d00      	cmp	r5, #0
 801289c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128a0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80128a4:	ee17 9a90 	vmov	r9, s15
 80128a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128ac:	ee38 8a67 	vsub.f32	s16, s16, s15
 80128b0:	dd41      	ble.n	8012936 <__kernel_rem_pio2f+0x1a2>
 80128b2:	f104 3cff 	add.w	ip, r4, #4294967295
 80128b6:	a908      	add	r1, sp, #32
 80128b8:	f1c5 0e08 	rsb	lr, r5, #8
 80128bc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80128c0:	fa46 f00e 	asr.w	r0, r6, lr
 80128c4:	4481      	add	r9, r0
 80128c6:	fa00 f00e 	lsl.w	r0, r0, lr
 80128ca:	1a36      	subs	r6, r6, r0
 80128cc:	f1c5 0007 	rsb	r0, r5, #7
 80128d0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80128d4:	4106      	asrs	r6, r0
 80128d6:	2e00      	cmp	r6, #0
 80128d8:	dd3c      	ble.n	8012954 <__kernel_rem_pio2f+0x1c0>
 80128da:	f04f 0e00 	mov.w	lr, #0
 80128de:	f109 0901 	add.w	r9, r9, #1
 80128e2:	4670      	mov	r0, lr
 80128e4:	4574      	cmp	r4, lr
 80128e6:	dc68      	bgt.n	80129ba <__kernel_rem_pio2f+0x226>
 80128e8:	2d00      	cmp	r5, #0
 80128ea:	dd03      	ble.n	80128f4 <__kernel_rem_pio2f+0x160>
 80128ec:	2d01      	cmp	r5, #1
 80128ee:	d074      	beq.n	80129da <__kernel_rem_pio2f+0x246>
 80128f0:	2d02      	cmp	r5, #2
 80128f2:	d07d      	beq.n	80129f0 <__kernel_rem_pio2f+0x25c>
 80128f4:	2e02      	cmp	r6, #2
 80128f6:	d12d      	bne.n	8012954 <__kernel_rem_pio2f+0x1c0>
 80128f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80128fc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8012900:	b340      	cbz	r0, 8012954 <__kernel_rem_pio2f+0x1c0>
 8012902:	4628      	mov	r0, r5
 8012904:	9306      	str	r3, [sp, #24]
 8012906:	f000 f9ad 	bl	8012c64 <scalbnf>
 801290a:	9b06      	ldr	r3, [sp, #24]
 801290c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8012910:	e020      	b.n	8012954 <__kernel_rem_pio2f+0x1c0>
 8012912:	ee60 7a28 	vmul.f32	s15, s0, s17
 8012916:	3e01      	subs	r6, #1
 8012918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801291c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012920:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8012924:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012928:	ecac 0a01 	vstmia	ip!, {s0}
 801292c:	ed30 0a01 	vldmdb	r0!, {s0}
 8012930:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012934:	e79e      	b.n	8012874 <__kernel_rem_pio2f+0xe0>
 8012936:	d105      	bne.n	8012944 <__kernel_rem_pio2f+0x1b0>
 8012938:	1e60      	subs	r0, r4, #1
 801293a:	a908      	add	r1, sp, #32
 801293c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8012940:	11f6      	asrs	r6, r6, #7
 8012942:	e7c8      	b.n	80128d6 <__kernel_rem_pio2f+0x142>
 8012944:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012948:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012950:	da31      	bge.n	80129b6 <__kernel_rem_pio2f+0x222>
 8012952:	2600      	movs	r6, #0
 8012954:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295c:	f040 8098 	bne.w	8012a90 <__kernel_rem_pio2f+0x2fc>
 8012960:	1e60      	subs	r0, r4, #1
 8012962:	2200      	movs	r2, #0
 8012964:	4550      	cmp	r0, sl
 8012966:	da4b      	bge.n	8012a00 <__kernel_rem_pio2f+0x26c>
 8012968:	2a00      	cmp	r2, #0
 801296a:	d065      	beq.n	8012a38 <__kernel_rem_pio2f+0x2a4>
 801296c:	3c01      	subs	r4, #1
 801296e:	ab08      	add	r3, sp, #32
 8012970:	3d08      	subs	r5, #8
 8012972:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d0f8      	beq.n	801296c <__kernel_rem_pio2f+0x1d8>
 801297a:	4628      	mov	r0, r5
 801297c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012980:	f000 f970 	bl	8012c64 <scalbnf>
 8012984:	1c63      	adds	r3, r4, #1
 8012986:	aa44      	add	r2, sp, #272	@ 0x110
 8012988:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8012a88 <__kernel_rem_pio2f+0x2f4>
 801298c:	0099      	lsls	r1, r3, #2
 801298e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012992:	4623      	mov	r3, r4
 8012994:	2b00      	cmp	r3, #0
 8012996:	f280 80a9 	bge.w	8012aec <__kernel_rem_pio2f+0x358>
 801299a:	4623      	mov	r3, r4
 801299c:	2b00      	cmp	r3, #0
 801299e:	f2c0 80c7 	blt.w	8012b30 <__kernel_rem_pio2f+0x39c>
 80129a2:	aa44      	add	r2, sp, #272	@ 0x110
 80129a4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80129a8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8012a80 <__kernel_rem_pio2f+0x2ec>
 80129ac:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8012a8c <__kernel_rem_pio2f+0x2f8>
 80129b0:	2000      	movs	r0, #0
 80129b2:	1ae2      	subs	r2, r4, r3
 80129b4:	e0b1      	b.n	8012b1a <__kernel_rem_pio2f+0x386>
 80129b6:	2602      	movs	r6, #2
 80129b8:	e78f      	b.n	80128da <__kernel_rem_pio2f+0x146>
 80129ba:	f852 1b04 	ldr.w	r1, [r2], #4
 80129be:	b948      	cbnz	r0, 80129d4 <__kernel_rem_pio2f+0x240>
 80129c0:	b121      	cbz	r1, 80129cc <__kernel_rem_pio2f+0x238>
 80129c2:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80129c6:	f842 1c04 	str.w	r1, [r2, #-4]
 80129ca:	2101      	movs	r1, #1
 80129cc:	f10e 0e01 	add.w	lr, lr, #1
 80129d0:	4608      	mov	r0, r1
 80129d2:	e787      	b.n	80128e4 <__kernel_rem_pio2f+0x150>
 80129d4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80129d8:	e7f5      	b.n	80129c6 <__kernel_rem_pio2f+0x232>
 80129da:	f104 3cff 	add.w	ip, r4, #4294967295
 80129de:	aa08      	add	r2, sp, #32
 80129e0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80129e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80129e8:	a908      	add	r1, sp, #32
 80129ea:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80129ee:	e781      	b.n	80128f4 <__kernel_rem_pio2f+0x160>
 80129f0:	f104 3cff 	add.w	ip, r4, #4294967295
 80129f4:	aa08      	add	r2, sp, #32
 80129f6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80129fa:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80129fe:	e7f3      	b.n	80129e8 <__kernel_rem_pio2f+0x254>
 8012a00:	a908      	add	r1, sp, #32
 8012a02:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8012a06:	3801      	subs	r0, #1
 8012a08:	430a      	orrs	r2, r1
 8012a0a:	e7ab      	b.n	8012964 <__kernel_rem_pio2f+0x1d0>
 8012a0c:	3201      	adds	r2, #1
 8012a0e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8012a12:	2e00      	cmp	r6, #0
 8012a14:	d0fa      	beq.n	8012a0c <__kernel_rem_pio2f+0x278>
 8012a16:	9905      	ldr	r1, [sp, #20]
 8012a18:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8012a1c:	eb0d 0001 	add.w	r0, sp, r1
 8012a20:	18e6      	adds	r6, r4, r3
 8012a22:	a91c      	add	r1, sp, #112	@ 0x70
 8012a24:	f104 0c01 	add.w	ip, r4, #1
 8012a28:	384c      	subs	r0, #76	@ 0x4c
 8012a2a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8012a2e:	4422      	add	r2, r4
 8012a30:	4562      	cmp	r2, ip
 8012a32:	da04      	bge.n	8012a3e <__kernel_rem_pio2f+0x2aa>
 8012a34:	4614      	mov	r4, r2
 8012a36:	e710      	b.n	801285a <__kernel_rem_pio2f+0xc6>
 8012a38:	9804      	ldr	r0, [sp, #16]
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	e7e7      	b.n	8012a0e <__kernel_rem_pio2f+0x27a>
 8012a3e:	9903      	ldr	r1, [sp, #12]
 8012a40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8012a44:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8012a48:	9105      	str	r1, [sp, #20]
 8012a4a:	ee07 1a90 	vmov	s15, r1
 8012a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a52:	2400      	movs	r4, #0
 8012a54:	ece6 7a01 	vstmia	r6!, {s15}
 8012a58:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8012a8c <__kernel_rem_pio2f+0x2f8>
 8012a5c:	46b1      	mov	r9, r6
 8012a5e:	455c      	cmp	r4, fp
 8012a60:	dd04      	ble.n	8012a6c <__kernel_rem_pio2f+0x2d8>
 8012a62:	ece0 7a01 	vstmia	r0!, {s15}
 8012a66:	f10c 0c01 	add.w	ip, ip, #1
 8012a6a:	e7e1      	b.n	8012a30 <__kernel_rem_pio2f+0x29c>
 8012a6c:	ecfe 6a01 	vldmia	lr!, {s13}
 8012a70:	ed39 7a01 	vldmdb	r9!, {s14}
 8012a74:	3401      	adds	r4, #1
 8012a76:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012a7a:	e7f0      	b.n	8012a5e <__kernel_rem_pio2f+0x2ca>
 8012a7c:	080136f4 	.word	0x080136f4
 8012a80:	080136c8 	.word	0x080136c8
 8012a84:	43800000 	.word	0x43800000
 8012a88:	3b800000 	.word	0x3b800000
 8012a8c:	00000000 	.word	0x00000000
 8012a90:	9b02      	ldr	r3, [sp, #8]
 8012a92:	eeb0 0a48 	vmov.f32	s0, s16
 8012a96:	eba3 0008 	sub.w	r0, r3, r8
 8012a9a:	f000 f8e3 	bl	8012c64 <scalbnf>
 8012a9e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8012a84 <__kernel_rem_pio2f+0x2f0>
 8012aa2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8012aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aaa:	db19      	blt.n	8012ae0 <__kernel_rem_pio2f+0x34c>
 8012aac:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8012a88 <__kernel_rem_pio2f+0x2f4>
 8012ab0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012ab4:	aa08      	add	r2, sp, #32
 8012ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012aba:	3508      	adds	r5, #8
 8012abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ac0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8012ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ac8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012acc:	ee10 3a10 	vmov	r3, s0
 8012ad0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012ad4:	ee17 3a90 	vmov	r3, s15
 8012ad8:	3401      	adds	r4, #1
 8012ada:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8012ade:	e74c      	b.n	801297a <__kernel_rem_pio2f+0x1e6>
 8012ae0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012ae4:	aa08      	add	r2, sp, #32
 8012ae6:	ee10 3a10 	vmov	r3, s0
 8012aea:	e7f6      	b.n	8012ada <__kernel_rem_pio2f+0x346>
 8012aec:	a808      	add	r0, sp, #32
 8012aee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8012af2:	9001      	str	r0, [sp, #4]
 8012af4:	ee07 0a90 	vmov	s15, r0
 8012af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012afc:	3b01      	subs	r3, #1
 8012afe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012b02:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012b06:	ed62 7a01 	vstmdb	r2!, {s15}
 8012b0a:	e743      	b.n	8012994 <__kernel_rem_pio2f+0x200>
 8012b0c:	ecfc 6a01 	vldmia	ip!, {s13}
 8012b10:	ecb5 7a01 	vldmia	r5!, {s14}
 8012b14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8012b18:	3001      	adds	r0, #1
 8012b1a:	4550      	cmp	r0, sl
 8012b1c:	dc01      	bgt.n	8012b22 <__kernel_rem_pio2f+0x38e>
 8012b1e:	4290      	cmp	r0, r2
 8012b20:	ddf4      	ble.n	8012b0c <__kernel_rem_pio2f+0x378>
 8012b22:	a858      	add	r0, sp, #352	@ 0x160
 8012b24:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8012b28:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	e735      	b.n	801299c <__kernel_rem_pio2f+0x208>
 8012b30:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012b32:	2b02      	cmp	r3, #2
 8012b34:	dc09      	bgt.n	8012b4a <__kernel_rem_pio2f+0x3b6>
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	dc27      	bgt.n	8012b8a <__kernel_rem_pio2f+0x3f6>
 8012b3a:	d040      	beq.n	8012bbe <__kernel_rem_pio2f+0x42a>
 8012b3c:	f009 0007 	and.w	r0, r9, #7
 8012b40:	b059      	add	sp, #356	@ 0x164
 8012b42:	ecbd 8b04 	vpop	{d8-d9}
 8012b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b4a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8012b4c:	2b03      	cmp	r3, #3
 8012b4e:	d1f5      	bne.n	8012b3c <__kernel_rem_pio2f+0x3a8>
 8012b50:	aa30      	add	r2, sp, #192	@ 0xc0
 8012b52:	1f0b      	subs	r3, r1, #4
 8012b54:	4413      	add	r3, r2
 8012b56:	461a      	mov	r2, r3
 8012b58:	4620      	mov	r0, r4
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	dc50      	bgt.n	8012c00 <__kernel_rem_pio2f+0x46c>
 8012b5e:	4622      	mov	r2, r4
 8012b60:	2a01      	cmp	r2, #1
 8012b62:	dc5d      	bgt.n	8012c20 <__kernel_rem_pio2f+0x48c>
 8012b64:	ab30      	add	r3, sp, #192	@ 0xc0
 8012b66:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8012a8c <__kernel_rem_pio2f+0x2f8>
 8012b6a:	440b      	add	r3, r1
 8012b6c:	2c01      	cmp	r4, #1
 8012b6e:	dc67      	bgt.n	8012c40 <__kernel_rem_pio2f+0x4ac>
 8012b70:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012b74:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8012b78:	2e00      	cmp	r6, #0
 8012b7a:	d167      	bne.n	8012c4c <__kernel_rem_pio2f+0x4b8>
 8012b7c:	edc7 6a00 	vstr	s13, [r7]
 8012b80:	ed87 7a01 	vstr	s14, [r7, #4]
 8012b84:	edc7 7a02 	vstr	s15, [r7, #8]
 8012b88:	e7d8      	b.n	8012b3c <__kernel_rem_pio2f+0x3a8>
 8012b8a:	ab30      	add	r3, sp, #192	@ 0xc0
 8012b8c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8012a8c <__kernel_rem_pio2f+0x2f8>
 8012b90:	440b      	add	r3, r1
 8012b92:	4622      	mov	r2, r4
 8012b94:	2a00      	cmp	r2, #0
 8012b96:	da24      	bge.n	8012be2 <__kernel_rem_pio2f+0x44e>
 8012b98:	b34e      	cbz	r6, 8012bee <__kernel_rem_pio2f+0x45a>
 8012b9a:	eef1 7a47 	vneg.f32	s15, s14
 8012b9e:	edc7 7a00 	vstr	s15, [r7]
 8012ba2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8012ba6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012baa:	aa31      	add	r2, sp, #196	@ 0xc4
 8012bac:	2301      	movs	r3, #1
 8012bae:	429c      	cmp	r4, r3
 8012bb0:	da20      	bge.n	8012bf4 <__kernel_rem_pio2f+0x460>
 8012bb2:	b10e      	cbz	r6, 8012bb8 <__kernel_rem_pio2f+0x424>
 8012bb4:	eef1 7a67 	vneg.f32	s15, s15
 8012bb8:	edc7 7a01 	vstr	s15, [r7, #4]
 8012bbc:	e7be      	b.n	8012b3c <__kernel_rem_pio2f+0x3a8>
 8012bbe:	ab30      	add	r3, sp, #192	@ 0xc0
 8012bc0:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8012a8c <__kernel_rem_pio2f+0x2f8>
 8012bc4:	440b      	add	r3, r1
 8012bc6:	2c00      	cmp	r4, #0
 8012bc8:	da05      	bge.n	8012bd6 <__kernel_rem_pio2f+0x442>
 8012bca:	b10e      	cbz	r6, 8012bd0 <__kernel_rem_pio2f+0x43c>
 8012bcc:	eef1 7a67 	vneg.f32	s15, s15
 8012bd0:	edc7 7a00 	vstr	s15, [r7]
 8012bd4:	e7b2      	b.n	8012b3c <__kernel_rem_pio2f+0x3a8>
 8012bd6:	ed33 7a01 	vldmdb	r3!, {s14}
 8012bda:	3c01      	subs	r4, #1
 8012bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012be0:	e7f1      	b.n	8012bc6 <__kernel_rem_pio2f+0x432>
 8012be2:	ed73 7a01 	vldmdb	r3!, {s15}
 8012be6:	3a01      	subs	r2, #1
 8012be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bec:	e7d2      	b.n	8012b94 <__kernel_rem_pio2f+0x400>
 8012bee:	eef0 7a47 	vmov.f32	s15, s14
 8012bf2:	e7d4      	b.n	8012b9e <__kernel_rem_pio2f+0x40a>
 8012bf4:	ecb2 7a01 	vldmia	r2!, {s14}
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012bfe:	e7d6      	b.n	8012bae <__kernel_rem_pio2f+0x41a>
 8012c00:	ed72 7a01 	vldmdb	r2!, {s15}
 8012c04:	edd2 6a01 	vldr	s13, [r2, #4]
 8012c08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012c0c:	3801      	subs	r0, #1
 8012c0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c12:	ed82 7a00 	vstr	s14, [r2]
 8012c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c1a:	edc2 7a01 	vstr	s15, [r2, #4]
 8012c1e:	e79c      	b.n	8012b5a <__kernel_rem_pio2f+0x3c6>
 8012c20:	ed73 7a01 	vldmdb	r3!, {s15}
 8012c24:	edd3 6a01 	vldr	s13, [r3, #4]
 8012c28:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012c2c:	3a01      	subs	r2, #1
 8012c2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c32:	ed83 7a00 	vstr	s14, [r3]
 8012c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c3a:	edc3 7a01 	vstr	s15, [r3, #4]
 8012c3e:	e78f      	b.n	8012b60 <__kernel_rem_pio2f+0x3cc>
 8012c40:	ed33 7a01 	vldmdb	r3!, {s14}
 8012c44:	3c01      	subs	r4, #1
 8012c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012c4a:	e78f      	b.n	8012b6c <__kernel_rem_pio2f+0x3d8>
 8012c4c:	eef1 6a66 	vneg.f32	s13, s13
 8012c50:	eeb1 7a47 	vneg.f32	s14, s14
 8012c54:	edc7 6a00 	vstr	s13, [r7]
 8012c58:	ed87 7a01 	vstr	s14, [r7, #4]
 8012c5c:	eef1 7a67 	vneg.f32	s15, s15
 8012c60:	e790      	b.n	8012b84 <__kernel_rem_pio2f+0x3f0>
 8012c62:	bf00      	nop

08012c64 <scalbnf>:
 8012c64:	ee10 3a10 	vmov	r3, s0
 8012c68:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012c6c:	d02a      	beq.n	8012cc4 <scalbnf+0x60>
 8012c6e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012c72:	d302      	bcc.n	8012c7a <scalbnf+0x16>
 8012c74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c78:	4770      	bx	lr
 8012c7a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012c7e:	d122      	bne.n	8012cc6 <scalbnf+0x62>
 8012c80:	4b23      	ldr	r3, [pc, #140]	@ (8012d10 <scalbnf+0xac>)
 8012c82:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8012d14 <scalbnf+0xb0>
 8012c86:	4298      	cmp	r0, r3
 8012c88:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c8c:	db16      	blt.n	8012cbc <scalbnf+0x58>
 8012c8e:	ee10 3a10 	vmov	r3, s0
 8012c92:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012c96:	3a19      	subs	r2, #25
 8012c98:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012c9c:	4288      	cmp	r0, r1
 8012c9e:	dd14      	ble.n	8012cca <scalbnf+0x66>
 8012ca0:	eddf 7a1d 	vldr	s15, [pc, #116]	@ 8012d18 <scalbnf+0xb4>
 8012ca4:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8012d1c <scalbnf+0xb8>
 8012ca8:	ee10 3a10 	vmov	r3, s0
 8012cac:	eeb0 7a67 	vmov.f32	s14, s15
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8012cb6:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012cba:	4770      	bx	lr
 8012cbc:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8012d20 <scalbnf+0xbc>
 8012cc0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012cc4:	4770      	bx	lr
 8012cc6:	0dd2      	lsrs	r2, r2, #23
 8012cc8:	e7e6      	b.n	8012c98 <scalbnf+0x34>
 8012cca:	4410      	add	r0, r2
 8012ccc:	28fe      	cmp	r0, #254	@ 0xfe
 8012cce:	dce7      	bgt.n	8012ca0 <scalbnf+0x3c>
 8012cd0:	2800      	cmp	r0, #0
 8012cd2:	dd06      	ble.n	8012ce2 <scalbnf+0x7e>
 8012cd4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012cd8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012cdc:	ee00 3a10 	vmov	s0, r3
 8012ce0:	4770      	bx	lr
 8012ce2:	f110 0f16 	cmn.w	r0, #22
 8012ce6:	da09      	bge.n	8012cfc <scalbnf+0x98>
 8012ce8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8012d20 <scalbnf+0xbc>
 8012cec:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8012d24 <scalbnf+0xc0>
 8012cf0:	ee10 3a10 	vmov	r3, s0
 8012cf4:	eeb0 7a67 	vmov.f32	s14, s15
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	e7da      	b.n	8012cb2 <scalbnf+0x4e>
 8012cfc:	3019      	adds	r0, #25
 8012cfe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012d02:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012d06:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012d28 <scalbnf+0xc4>
 8012d0a:	ee07 3a90 	vmov	s15, r3
 8012d0e:	e7d7      	b.n	8012cc0 <scalbnf+0x5c>
 8012d10:	ffff3cb0 	.word	0xffff3cb0
 8012d14:	4c000000 	.word	0x4c000000
 8012d18:	7149f2ca 	.word	0x7149f2ca
 8012d1c:	f149f2ca 	.word	0xf149f2ca
 8012d20:	0da24260 	.word	0x0da24260
 8012d24:	8da24260 	.word	0x8da24260
 8012d28:	33000000 	.word	0x33000000

08012d2c <floorf>:
 8012d2c:	ee10 3a10 	vmov	r3, s0
 8012d30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012d34:	3a7f      	subs	r2, #127	@ 0x7f
 8012d36:	2a16      	cmp	r2, #22
 8012d38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012d3c:	dc2b      	bgt.n	8012d96 <floorf+0x6a>
 8012d3e:	2a00      	cmp	r2, #0
 8012d40:	da12      	bge.n	8012d68 <floorf+0x3c>
 8012d42:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012da8 <floorf+0x7c>
 8012d46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012d4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d52:	dd06      	ble.n	8012d62 <floorf+0x36>
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	da24      	bge.n	8012da2 <floorf+0x76>
 8012d58:	2900      	cmp	r1, #0
 8012d5a:	4b14      	ldr	r3, [pc, #80]	@ (8012dac <floorf+0x80>)
 8012d5c:	bf08      	it	eq
 8012d5e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8012d62:	ee00 3a10 	vmov	s0, r3
 8012d66:	4770      	bx	lr
 8012d68:	4911      	ldr	r1, [pc, #68]	@ (8012db0 <floorf+0x84>)
 8012d6a:	4111      	asrs	r1, r2
 8012d6c:	420b      	tst	r3, r1
 8012d6e:	d0fa      	beq.n	8012d66 <floorf+0x3a>
 8012d70:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8012da8 <floorf+0x7c>
 8012d74:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012d78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d80:	ddef      	ble.n	8012d62 <floorf+0x36>
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	bfbe      	ittt	lt
 8012d86:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8012d8a:	fa40 f202 	asrlt.w	r2, r0, r2
 8012d8e:	189b      	addlt	r3, r3, r2
 8012d90:	ea23 0301 	bic.w	r3, r3, r1
 8012d94:	e7e5      	b.n	8012d62 <floorf+0x36>
 8012d96:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012d9a:	d3e4      	bcc.n	8012d66 <floorf+0x3a>
 8012d9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012da0:	4770      	bx	lr
 8012da2:	2300      	movs	r3, #0
 8012da4:	e7dd      	b.n	8012d62 <floorf+0x36>
 8012da6:	bf00      	nop
 8012da8:	7149f2ca 	.word	0x7149f2ca
 8012dac:	bf800000 	.word	0xbf800000
 8012db0:	007fffff 	.word	0x007fffff

08012db4 <_init>:
 8012db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012db6:	bf00      	nop
 8012db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dba:	bc08      	pop	{r3}
 8012dbc:	469e      	mov	lr, r3
 8012dbe:	4770      	bx	lr

08012dc0 <_fini>:
 8012dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dc2:	bf00      	nop
 8012dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012dc6:	bc08      	pop	{r3}
 8012dc8:	469e      	mov	lr, r3
 8012dca:	4770      	bx	lr
